// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testGetRole = aws.iam.getRole({
 *     name: "my-role",
 * });
 * const testAwsAccount = new grafana.cloudprovider.AwsAccount("test", {
 *     stackId: test.then(test => test.id),
 *     roleArn: testGetRole.then(testGetRole => testGetRole.arn),
 *     regions: [
 *         "us-east-1",
 *         "us-east-2",
 *         "us-west-1",
 *     ],
 * });
 * const testAwsResourceMetadataScrapeJob = new grafana.cloudprovider.AwsResourceMetadataScrapeJob("test", {
 *     stackId: test.then(test => test.id),
 *     name: "my-aws-resource-metadata-scrape-job",
 *     awsAccountResourceId: testAwsAccount.resourceId,
 *     services: [{
 *         name: "AWS/EC2",
 *         scrapeIntervalSeconds: 300,
 *         resourceDiscoveryTagFilters: [{
 *             key: "k8s.io/cluster-autoscaler/enabled",
 *             value: "true",
 *         }],
 *     }],
 *     staticLabels: {
 *         label1: "value1",
 *         label2: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:cloudProvider/awsResourceMetadataScrapeJob:AwsResourceMetadataScrapeJob name "{{ stack_id }}:{{ name }}"
 * ```
 */
export class AwsResourceMetadataScrapeJob extends pulumi.CustomResource {
    /**
     * Get an existing AwsResourceMetadataScrapeJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsResourceMetadataScrapeJobState, opts?: pulumi.CustomResourceOptions): AwsResourceMetadataScrapeJob {
        return new AwsResourceMetadataScrapeJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:cloudProvider/awsResourceMetadataScrapeJob:AwsResourceMetadataScrapeJob';

    /**
     * Returns true if the given object is an instance of AwsResourceMetadataScrapeJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsResourceMetadataScrapeJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsResourceMetadataScrapeJob.__pulumiType;
    }

    /**
     * The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this Resource Metadata Scrape Job. This can be provided by the `resourceId` attribute of the `grafana.cloudProvider.AwsAccount` resource.
     */
    declare public readonly awsAccountResourceId: pulumi.Output<string>;
    /**
     * When the AWS Resource Metadata Scrape Job is disabled, this will show the reason that it is in that state.
     */
    declare public /*out*/ readonly disabledReason: pulumi.Output<string>;
    /**
     * Whether the AWS Resource Metadata Scrape Job is enabled or not. Defaults to `true`.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
     */
    declare public readonly regionsSubsetOverrides: pulumi.Output<string[]>;
    /**
     * One or more configuration blocks to configure AWS services for the Resource Metadata Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
     */
    declare public readonly services: pulumi.Output<outputs.cloudProvider.AwsResourceMetadataScrapeJobService[] | undefined>;
    declare public readonly stackId: pulumi.Output<string>;
    /**
     * A set of static labels to add to all metrics exported by this scrape job.
     */
    declare public readonly staticLabels: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a AwsResourceMetadataScrapeJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsResourceMetadataScrapeJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsResourceMetadataScrapeJobArgs | AwsResourceMetadataScrapeJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsResourceMetadataScrapeJobState | undefined;
            resourceInputs["awsAccountResourceId"] = state?.awsAccountResourceId;
            resourceInputs["disabledReason"] = state?.disabledReason;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["regionsSubsetOverrides"] = state?.regionsSubsetOverrides;
            resourceInputs["services"] = state?.services;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["staticLabels"] = state?.staticLabels;
        } else {
            const args = argsOrState as AwsResourceMetadataScrapeJobArgs | undefined;
            if (args?.awsAccountResourceId === undefined && !opts.urn) {
                throw new Error("Missing required property 'awsAccountResourceId'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["awsAccountResourceId"] = args?.awsAccountResourceId;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["regionsSubsetOverrides"] = args?.regionsSubsetOverrides;
            resourceInputs["services"] = args?.services;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["staticLabels"] = args?.staticLabels;
            resourceInputs["disabledReason"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsResourceMetadataScrapeJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsResourceMetadataScrapeJob resources.
 */
export interface AwsResourceMetadataScrapeJobState {
    /**
     * The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this Resource Metadata Scrape Job. This can be provided by the `resourceId` attribute of the `grafana.cloudProvider.AwsAccount` resource.
     */
    awsAccountResourceId?: pulumi.Input<string>;
    /**
     * When the AWS Resource Metadata Scrape Job is disabled, this will show the reason that it is in that state.
     */
    disabledReason?: pulumi.Input<string>;
    /**
     * Whether the AWS Resource Metadata Scrape Job is enabled or not. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
     */
    regionsSubsetOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more configuration blocks to configure AWS services for the Resource Metadata Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
     */
    services?: pulumi.Input<pulumi.Input<inputs.cloudProvider.AwsResourceMetadataScrapeJobService>[]>;
    stackId?: pulumi.Input<string>;
    /**
     * A set of static labels to add to all metrics exported by this scrape job.
     */
    staticLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a AwsResourceMetadataScrapeJob resource.
 */
export interface AwsResourceMetadataScrapeJobArgs {
    /**
     * The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this Resource Metadata Scrape Job. This can be provided by the `resourceId` attribute of the `grafana.cloudProvider.AwsAccount` resource.
     */
    awsAccountResourceId: pulumi.Input<string>;
    /**
     * Whether the AWS Resource Metadata Scrape Job is enabled or not. Defaults to `true`.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
     */
    regionsSubsetOverrides?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * One or more configuration blocks to configure AWS services for the Resource Metadata Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
     */
    services?: pulumi.Input<pulumi.Input<inputs.cloudProvider.AwsResourceMetadataScrapeJobService>[]>;
    stackId: pulumi.Input<string>;
    /**
     * A set of static labels to add to all metrics exported by this scrape job.
     */
    staticLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
