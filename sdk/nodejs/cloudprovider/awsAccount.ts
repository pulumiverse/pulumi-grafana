// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testGetRole = aws.iam.getRole({
 *     name: "my-role",
 * });
 * const testAwsAccount = new grafana.cloudprovider.AwsAccount("test", {
 *     stackId: test.then(test => test.id),
 *     roleArn: testGetRole.then(testGetRole => testGetRole.arn),
 *     regions: [
 *         "us-east-1",
 *         "us-east-2",
 *         "us-west-1",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:cloudProvider/awsAccount:AwsAccount name "{{ stack_id }}:{{ resource_id }}"
 * ```
 */
export class AwsAccount extends pulumi.CustomResource {
    /**
     * Get an existing AwsAccount resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AwsAccountState, opts?: pulumi.CustomResourceOptions): AwsAccount {
        return new AwsAccount(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:cloudProvider/awsAccount:AwsAccount';

    /**
     * Returns true if the given object is an instance of AwsAccount.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AwsAccount {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AwsAccount.__pulumiType;
    }

    /**
     * An optional human-readable name for this AWS Account resource.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * A set of regions that this AWS Account resource applies to.
     */
    declare public readonly regions: pulumi.Output<string[]>;
    /**
     * The ID given by the Grafana Cloud Provider API to this AWS Account resource.
     */
    declare public /*out*/ readonly resourceId: pulumi.Output<string>;
    /**
     * An IAM Role ARN string to represent with this AWS Account resource.
     */
    declare public readonly roleArn: pulumi.Output<string>;
    declare public readonly stackId: pulumi.Output<string>;

    /**
     * Create a AwsAccount resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AwsAccountArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AwsAccountArgs | AwsAccountState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AwsAccountState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["regions"] = state?.regions;
            resourceInputs["resourceId"] = state?.resourceId;
            resourceInputs["roleArn"] = state?.roleArn;
            resourceInputs["stackId"] = state?.stackId;
        } else {
            const args = argsOrState as AwsAccountArgs | undefined;
            if (args?.regions === undefined && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if (args?.roleArn === undefined && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["regions"] = args?.regions;
            resourceInputs["roleArn"] = args?.roleArn;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["resourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AwsAccount.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AwsAccount resources.
 */
export interface AwsAccountState {
    /**
     * An optional human-readable name for this AWS Account resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of regions that this AWS Account resource applies to.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID given by the Grafana Cloud Provider API to this AWS Account resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * An IAM Role ARN string to represent with this AWS Account resource.
     */
    roleArn?: pulumi.Input<string>;
    stackId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AwsAccount resource.
 */
export interface AwsAccountArgs {
    /**
     * An optional human-readable name for this AWS Account resource.
     */
    name?: pulumi.Input<string>;
    /**
     * A set of regions that this AWS Account resource applies to.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An IAM Role ARN string to represent with this AWS Account resource.
     */
    roleArn: pulumi.Input<string>;
    stackId: pulumi.Input<string>;
}
