// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testGetAwsCloudwatchScrapeJobs = test.then(test => grafana.cloudProvider.getAwsCloudwatchScrapeJobs({
 *     stackId: test.id,
 * }));
 * ```
 */
export function getAwsCloudwatchScrapeJobs(args: GetAwsCloudwatchScrapeJobsArgs, opts?: pulumi.InvokeOptions): Promise<GetAwsCloudwatchScrapeJobsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:cloudProvider/getAwsCloudwatchScrapeJobs:getAwsCloudwatchScrapeJobs", {
        "scrapeJobs": args.scrapeJobs,
        "stackId": args.stackId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAwsCloudwatchScrapeJobs.
 */
export interface GetAwsCloudwatchScrapeJobsArgs {
    /**
     * A list of AWS CloudWatch Scrape Job objects associated with the given StackID.
     */
    scrapeJobs?: inputs.cloudProvider.GetAwsCloudwatchScrapeJobsScrapeJob[];
    stackId: string;
}

/**
 * A collection of values returned by getAwsCloudwatchScrapeJobs.
 */
export interface GetAwsCloudwatchScrapeJobsResult {
    readonly id: string;
    /**
     * A list of AWS CloudWatch Scrape Job objects associated with the given StackID.
     */
    readonly scrapeJobs?: outputs.cloudProvider.GetAwsCloudwatchScrapeJobsScrapeJob[];
    readonly stackId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testGetAwsCloudwatchScrapeJobs = test.then(test => grafana.cloudProvider.getAwsCloudwatchScrapeJobs({
 *     stackId: test.id,
 * }));
 * ```
 */
export function getAwsCloudwatchScrapeJobsOutput(args: GetAwsCloudwatchScrapeJobsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAwsCloudwatchScrapeJobsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("grafana:cloudProvider/getAwsCloudwatchScrapeJobs:getAwsCloudwatchScrapeJobs", {
        "scrapeJobs": args.scrapeJobs,
        "stackId": args.stackId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAwsCloudwatchScrapeJobs.
 */
export interface GetAwsCloudwatchScrapeJobsOutputArgs {
    /**
     * A list of AWS CloudWatch Scrape Job objects associated with the given StackID.
     */
    scrapeJobs?: pulumi.Input<pulumi.Input<inputs.cloudProvider.GetAwsCloudwatchScrapeJobsScrapeJobArgs>[]>;
    stackId: pulumi.Input<string>;
}
