// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AnnotationArgs, AnnotationState } from "./annotation";
export type Annotation = import("./annotation").Annotation;
export const Annotation: typeof import("./annotation").Annotation = null as any;
utilities.lazyLoad(exports, ["Annotation"], () => require("./annotation"));

export { CloudAccessPolicyArgs, CloudAccessPolicyState } from "./cloudAccessPolicy";
export type CloudAccessPolicy = import("./cloudAccessPolicy").CloudAccessPolicy;
export const CloudAccessPolicy: typeof import("./cloudAccessPolicy").CloudAccessPolicy = null as any;
utilities.lazyLoad(exports, ["CloudAccessPolicy"], () => require("./cloudAccessPolicy"));

export { CloudAccessPolicyTokenArgs, CloudAccessPolicyTokenState } from "./cloudAccessPolicyToken";
export type CloudAccessPolicyToken = import("./cloudAccessPolicyToken").CloudAccessPolicyToken;
export const CloudAccessPolicyToken: typeof import("./cloudAccessPolicyToken").CloudAccessPolicyToken = null as any;
utilities.lazyLoad(exports, ["CloudAccessPolicyToken"], () => require("./cloudAccessPolicyToken"));

export { CloudOrgMemberArgs, CloudOrgMemberState } from "./cloudOrgMember";
export type CloudOrgMember = import("./cloudOrgMember").CloudOrgMember;
export const CloudOrgMember: typeof import("./cloudOrgMember").CloudOrgMember = null as any;
utilities.lazyLoad(exports, ["CloudOrgMember"], () => require("./cloudOrgMember"));

export { CloudPluginInstallationArgs, CloudPluginInstallationState } from "./cloudPluginInstallation";
export type CloudPluginInstallation = import("./cloudPluginInstallation").CloudPluginInstallation;
export const CloudPluginInstallation: typeof import("./cloudPluginInstallation").CloudPluginInstallation = null as any;
utilities.lazyLoad(exports, ["CloudPluginInstallation"], () => require("./cloudPluginInstallation"));

export { CloudStackArgs, CloudStackState } from "./cloudStack";
export type CloudStack = import("./cloudStack").CloudStack;
export const CloudStack: typeof import("./cloudStack").CloudStack = null as any;
utilities.lazyLoad(exports, ["CloudStack"], () => require("./cloudStack"));

export { CloudStackServiceAccountArgs, CloudStackServiceAccountState } from "./cloudStackServiceAccount";
export type CloudStackServiceAccount = import("./cloudStackServiceAccount").CloudStackServiceAccount;
export const CloudStackServiceAccount: typeof import("./cloudStackServiceAccount").CloudStackServiceAccount = null as any;
utilities.lazyLoad(exports, ["CloudStackServiceAccount"], () => require("./cloudStackServiceAccount"));

export { CloudStackServiceAccountTokenArgs, CloudStackServiceAccountTokenState } from "./cloudStackServiceAccountToken";
export type CloudStackServiceAccountToken = import("./cloudStackServiceAccountToken").CloudStackServiceAccountToken;
export const CloudStackServiceAccountToken: typeof import("./cloudStackServiceAccountToken").CloudStackServiceAccountToken = null as any;
utilities.lazyLoad(exports, ["CloudStackServiceAccountToken"], () => require("./cloudStackServiceAccountToken"));

export { ContactPointArgs, ContactPointState } from "./contactPoint";
export type ContactPoint = import("./contactPoint").ContactPoint;
export const ContactPoint: typeof import("./contactPoint").ContactPoint = null as any;
utilities.lazyLoad(exports, ["ContactPoint"], () => require("./contactPoint"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardPermissionArgs, DashboardPermissionState } from "./dashboardPermission";
export type DashboardPermission = import("./dashboardPermission").DashboardPermission;
export const DashboardPermission: typeof import("./dashboardPermission").DashboardPermission = null as any;
utilities.lazyLoad(exports, ["DashboardPermission"], () => require("./dashboardPermission"));

export { DashboardPermissionItemArgs, DashboardPermissionItemState } from "./dashboardPermissionItem";
export type DashboardPermissionItem = import("./dashboardPermissionItem").DashboardPermissionItem;
export const DashboardPermissionItem: typeof import("./dashboardPermissionItem").DashboardPermissionItem = null as any;
utilities.lazyLoad(exports, ["DashboardPermissionItem"], () => require("./dashboardPermissionItem"));

export { DashboardPublicArgs, DashboardPublicState } from "./dashboardPublic";
export type DashboardPublic = import("./dashboardPublic").DashboardPublic;
export const DashboardPublic: typeof import("./dashboardPublic").DashboardPublic = null as any;
utilities.lazyLoad(exports, ["DashboardPublic"], () => require("./dashboardPublic"));

export { DataSourceArgs, DataSourceState } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { DataSourceConfigArgs, DataSourceConfigState } from "./dataSourceConfig";
export type DataSourceConfig = import("./dataSourceConfig").DataSourceConfig;
export const DataSourceConfig: typeof import("./dataSourceConfig").DataSourceConfig = null as any;
utilities.lazyLoad(exports, ["DataSourceConfig"], () => require("./dataSourceConfig"));

export { DataSourcePermissionArgs, DataSourcePermissionState } from "./dataSourcePermission";
export type DataSourcePermission = import("./dataSourcePermission").DataSourcePermission;
export const DataSourcePermission: typeof import("./dataSourcePermission").DataSourcePermission = null as any;
utilities.lazyLoad(exports, ["DataSourcePermission"], () => require("./dataSourcePermission"));

export { DataSourcePermissionItemArgs, DataSourcePermissionItemState } from "./dataSourcePermissionItem";
export type DataSourcePermissionItem = import("./dataSourcePermissionItem").DataSourcePermissionItem;
export const DataSourcePermissionItem: typeof import("./dataSourcePermissionItem").DataSourcePermissionItem = null as any;
utilities.lazyLoad(exports, ["DataSourcePermissionItem"], () => require("./dataSourcePermissionItem"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { FolderPermissionArgs, FolderPermissionState } from "./folderPermission";
export type FolderPermission = import("./folderPermission").FolderPermission;
export const FolderPermission: typeof import("./folderPermission").FolderPermission = null as any;
utilities.lazyLoad(exports, ["FolderPermission"], () => require("./folderPermission"));

export { FolderPermissionItemArgs, FolderPermissionItemState } from "./folderPermissionItem";
export type FolderPermissionItem = import("./folderPermissionItem").FolderPermissionItem;
export const FolderPermissionItem: typeof import("./folderPermissionItem").FolderPermissionItem = null as any;
utilities.lazyLoad(exports, ["FolderPermissionItem"], () => require("./folderPermissionItem"));

export { GetCloudIpsResult } from "./getCloudIps";
export const getCloudIps: typeof import("./getCloudIps").getCloudIps = null as any;
export const getCloudIpsOutput: typeof import("./getCloudIps").getCloudIpsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudIps","getCloudIpsOutput"], () => require("./getCloudIps"));

export { GetCloudOrganizationArgs, GetCloudOrganizationResult, GetCloudOrganizationOutputArgs } from "./getCloudOrganization";
export const getCloudOrganization: typeof import("./getCloudOrganization").getCloudOrganization = null as any;
export const getCloudOrganizationOutput: typeof import("./getCloudOrganization").getCloudOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getCloudOrganization","getCloudOrganizationOutput"], () => require("./getCloudOrganization"));

export { GetCloudStackArgs, GetCloudStackResult, GetCloudStackOutputArgs } from "./getCloudStack";
export const getCloudStack: typeof import("./getCloudStack").getCloudStack = null as any;
export const getCloudStackOutput: typeof import("./getCloudStack").getCloudStackOutput = null as any;
utilities.lazyLoad(exports, ["getCloudStack","getCloudStackOutput"], () => require("./getCloudStack"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetDashboardsArgs, GetDashboardsResult, GetDashboardsOutputArgs } from "./getDashboards";
export const getDashboards: typeof import("./getDashboards").getDashboards = null as any;
export const getDashboardsOutput: typeof import("./getDashboards").getDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getDashboards","getDashboardsOutput"], () => require("./getDashboards"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetFoldersArgs, GetFoldersResult, GetFoldersOutputArgs } from "./getFolders";
export const getFolders: typeof import("./getFolders").getFolders = null as any;
export const getFoldersOutput: typeof import("./getFolders").getFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getFolders","getFoldersOutput"], () => require("./getFolders"));

export { GetLibraryPanelArgs, GetLibraryPanelResult, GetLibraryPanelOutputArgs } from "./getLibraryPanel";
export const getLibraryPanel: typeof import("./getLibraryPanel").getLibraryPanel = null as any;
export const getLibraryPanelOutput: typeof import("./getLibraryPanel").getLibraryPanelOutput = null as any;
utilities.lazyLoad(exports, ["getLibraryPanel","getLibraryPanelOutput"], () => require("./getLibraryPanel"));

export { GetOnCallSlackChannelArgs, GetOnCallSlackChannelResult, GetOnCallSlackChannelOutputArgs } from "./getOnCallSlackChannel";
export const getOnCallSlackChannel: typeof import("./getOnCallSlackChannel").getOnCallSlackChannel = null as any;
export const getOnCallSlackChannelOutput: typeof import("./getOnCallSlackChannel").getOnCallSlackChannelOutput = null as any;
utilities.lazyLoad(exports, ["getOnCallSlackChannel","getOnCallSlackChannelOutput"], () => require("./getOnCallSlackChannel"));

export { GetOncallEscalationChainArgs, GetOncallEscalationChainResult, GetOncallEscalationChainOutputArgs } from "./getOncallEscalationChain";
export const getOncallEscalationChain: typeof import("./getOncallEscalationChain").getOncallEscalationChain = null as any;
export const getOncallEscalationChainOutput: typeof import("./getOncallEscalationChain").getOncallEscalationChainOutput = null as any;
utilities.lazyLoad(exports, ["getOncallEscalationChain","getOncallEscalationChainOutput"], () => require("./getOncallEscalationChain"));

export { GetOncallIntegrationArgs, GetOncallIntegrationResult, GetOncallIntegrationOutputArgs } from "./getOncallIntegration";
export const getOncallIntegration: typeof import("./getOncallIntegration").getOncallIntegration = null as any;
export const getOncallIntegrationOutput: typeof import("./getOncallIntegration").getOncallIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getOncallIntegration","getOncallIntegrationOutput"], () => require("./getOncallIntegration"));

export { GetOncallOutgoingWebhookArgs, GetOncallOutgoingWebhookResult, GetOncallOutgoingWebhookOutputArgs } from "./getOncallOutgoingWebhook";
export const getOncallOutgoingWebhook: typeof import("./getOncallOutgoingWebhook").getOncallOutgoingWebhook = null as any;
export const getOncallOutgoingWebhookOutput: typeof import("./getOncallOutgoingWebhook").getOncallOutgoingWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getOncallOutgoingWebhook","getOncallOutgoingWebhookOutput"], () => require("./getOncallOutgoingWebhook"));

export { GetOncallScheduleArgs, GetOncallScheduleResult, GetOncallScheduleOutputArgs } from "./getOncallSchedule";
export const getOncallSchedule: typeof import("./getOncallSchedule").getOncallSchedule = null as any;
export const getOncallScheduleOutput: typeof import("./getOncallSchedule").getOncallScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getOncallSchedule","getOncallScheduleOutput"], () => require("./getOncallSchedule"));

export { GetOncallTeamArgs, GetOncallTeamResult, GetOncallTeamOutputArgs } from "./getOncallTeam";
export const getOncallTeam: typeof import("./getOncallTeam").getOncallTeam = null as any;
export const getOncallTeamOutput: typeof import("./getOncallTeam").getOncallTeamOutput = null as any;
utilities.lazyLoad(exports, ["getOncallTeam","getOncallTeamOutput"], () => require("./getOncallTeam"));

export { GetOncallUserArgs, GetOncallUserResult, GetOncallUserOutputArgs } from "./getOncallUser";
export const getOncallUser: typeof import("./getOncallUser").getOncallUser = null as any;
export const getOncallUserOutput: typeof import("./getOncallUser").getOncallUserOutput = null as any;
utilities.lazyLoad(exports, ["getOncallUser","getOncallUserOutput"], () => require("./getOncallUser"));

export { GetOncallUserGroupArgs, GetOncallUserGroupResult, GetOncallUserGroupOutputArgs } from "./getOncallUserGroup";
export const getOncallUserGroup: typeof import("./getOncallUserGroup").getOncallUserGroup = null as any;
export const getOncallUserGroupOutput: typeof import("./getOncallUserGroup").getOncallUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getOncallUserGroup","getOncallUserGroupOutput"], () => require("./getOncallUserGroup"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationPreferencesArgs, GetOrganizationPreferencesResult, GetOrganizationPreferencesOutputArgs } from "./getOrganizationPreferences";
export const getOrganizationPreferences: typeof import("./getOrganizationPreferences").getOrganizationPreferences = null as any;
export const getOrganizationPreferencesOutput: typeof import("./getOrganizationPreferences").getOrganizationPreferencesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPreferences","getOrganizationPreferencesOutput"], () => require("./getOrganizationPreferences"));

export { GetRoleArgs, GetRoleResult, GetRoleOutputArgs } from "./getRole";
export const getRole: typeof import("./getRole").getRole = null as any;
export const getRoleOutput: typeof import("./getRole").getRoleOutput = null as any;
utilities.lazyLoad(exports, ["getRole","getRoleOutput"], () => require("./getRole"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetSlosResult } from "./getSlos";
export const getSlos: typeof import("./getSlos").getSlos = null as any;
export const getSlosOutput: typeof import("./getSlos").getSlosOutput = null as any;
utilities.lazyLoad(exports, ["getSlos","getSlosOutput"], () => require("./getSlos"));

export { GetSyntheticMonitoringProbeArgs, GetSyntheticMonitoringProbeResult, GetSyntheticMonitoringProbeOutputArgs } from "./getSyntheticMonitoringProbe";
export const getSyntheticMonitoringProbe: typeof import("./getSyntheticMonitoringProbe").getSyntheticMonitoringProbe = null as any;
export const getSyntheticMonitoringProbeOutput: typeof import("./getSyntheticMonitoringProbe").getSyntheticMonitoringProbeOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticMonitoringProbe","getSyntheticMonitoringProbeOutput"], () => require("./getSyntheticMonitoringProbe"));

export { GetSyntheticMonitoringProbesArgs, GetSyntheticMonitoringProbesResult, GetSyntheticMonitoringProbesOutputArgs } from "./getSyntheticMonitoringProbes";
export const getSyntheticMonitoringProbes: typeof import("./getSyntheticMonitoringProbes").getSyntheticMonitoringProbes = null as any;
export const getSyntheticMonitoringProbesOutput: typeof import("./getSyntheticMonitoringProbes").getSyntheticMonitoringProbesOutput = null as any;
utilities.lazyLoad(exports, ["getSyntheticMonitoringProbes","getSyntheticMonitoringProbesOutput"], () => require("./getSyntheticMonitoringProbes"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { LibraryPanelArgs, LibraryPanelState } from "./libraryPanel";
export type LibraryPanel = import("./libraryPanel").LibraryPanel;
export const LibraryPanel: typeof import("./libraryPanel").LibraryPanel = null as any;
utilities.lazyLoad(exports, ["LibraryPanel"], () => require("./libraryPanel"));

export { MachineLearningHolidayArgs, MachineLearningHolidayState } from "./machineLearningHoliday";
export type MachineLearningHoliday = import("./machineLearningHoliday").MachineLearningHoliday;
export const MachineLearningHoliday: typeof import("./machineLearningHoliday").MachineLearningHoliday = null as any;
utilities.lazyLoad(exports, ["MachineLearningHoliday"], () => require("./machineLearningHoliday"));

export { MachineLearningJobArgs, MachineLearningJobState } from "./machineLearningJob";
export type MachineLearningJob = import("./machineLearningJob").MachineLearningJob;
export const MachineLearningJob: typeof import("./machineLearningJob").MachineLearningJob = null as any;
utilities.lazyLoad(exports, ["MachineLearningJob"], () => require("./machineLearningJob"));

export { MachineLearningOutlierDetectorArgs, MachineLearningOutlierDetectorState } from "./machineLearningOutlierDetector";
export type MachineLearningOutlierDetector = import("./machineLearningOutlierDetector").MachineLearningOutlierDetector;
export const MachineLearningOutlierDetector: typeof import("./machineLearningOutlierDetector").MachineLearningOutlierDetector = null as any;
utilities.lazyLoad(exports, ["MachineLearningOutlierDetector"], () => require("./machineLearningOutlierDetector"));

export { MessageTemplateArgs, MessageTemplateState } from "./messageTemplate";
export type MessageTemplate = import("./messageTemplate").MessageTemplate;
export const MessageTemplate: typeof import("./messageTemplate").MessageTemplate = null as any;
utilities.lazyLoad(exports, ["MessageTemplate"], () => require("./messageTemplate"));

export { MuteTimingArgs, MuteTimingState } from "./muteTiming";
export type MuteTiming = import("./muteTiming").MuteTiming;
export const MuteTiming: typeof import("./muteTiming").MuteTiming = null as any;
utilities.lazyLoad(exports, ["MuteTiming"], () => require("./muteTiming"));

export { NotificationPolicyArgs, NotificationPolicyState } from "./notificationPolicy";
export type NotificationPolicy = import("./notificationPolicy").NotificationPolicy;
export const NotificationPolicy: typeof import("./notificationPolicy").NotificationPolicy = null as any;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));

export { OncallEscalationArgs, OncallEscalationState } from "./oncallEscalation";
export type OncallEscalation = import("./oncallEscalation").OncallEscalation;
export const OncallEscalation: typeof import("./oncallEscalation").OncallEscalation = null as any;
utilities.lazyLoad(exports, ["OncallEscalation"], () => require("./oncallEscalation"));

export { OncallEscalationChainArgs, OncallEscalationChainState } from "./oncallEscalationChain";
export type OncallEscalationChain = import("./oncallEscalationChain").OncallEscalationChain;
export const OncallEscalationChain: typeof import("./oncallEscalationChain").OncallEscalationChain = null as any;
utilities.lazyLoad(exports, ["OncallEscalationChain"], () => require("./oncallEscalationChain"));

export { OncallIntegrationArgs, OncallIntegrationState } from "./oncallIntegration";
export type OncallIntegration = import("./oncallIntegration").OncallIntegration;
export const OncallIntegration: typeof import("./oncallIntegration").OncallIntegration = null as any;
utilities.lazyLoad(exports, ["OncallIntegration"], () => require("./oncallIntegration"));

export { OncallOnCallShiftArgs, OncallOnCallShiftState } from "./oncallOnCallShift";
export type OncallOnCallShift = import("./oncallOnCallShift").OncallOnCallShift;
export const OncallOnCallShift: typeof import("./oncallOnCallShift").OncallOnCallShift = null as any;
utilities.lazyLoad(exports, ["OncallOnCallShift"], () => require("./oncallOnCallShift"));

export { OncallOutgoingWebhookArgs, OncallOutgoingWebhookState } from "./oncallOutgoingWebhook";
export type OncallOutgoingWebhook = import("./oncallOutgoingWebhook").OncallOutgoingWebhook;
export const OncallOutgoingWebhook: typeof import("./oncallOutgoingWebhook").OncallOutgoingWebhook = null as any;
utilities.lazyLoad(exports, ["OncallOutgoingWebhook"], () => require("./oncallOutgoingWebhook"));

export { OncallRouteArgs, OncallRouteState } from "./oncallRoute";
export type OncallRoute = import("./oncallRoute").OncallRoute;
export const OncallRoute: typeof import("./oncallRoute").OncallRoute = null as any;
utilities.lazyLoad(exports, ["OncallRoute"], () => require("./oncallRoute"));

export { OncallScheduleArgs, OncallScheduleState } from "./oncallSchedule";
export type OncallSchedule = import("./oncallSchedule").OncallSchedule;
export const OncallSchedule: typeof import("./oncallSchedule").OncallSchedule = null as any;
utilities.lazyLoad(exports, ["OncallSchedule"], () => require("./oncallSchedule"));

export { OncallUserNotificationRuleArgs, OncallUserNotificationRuleState } from "./oncallUserNotificationRule";
export type OncallUserNotificationRule = import("./oncallUserNotificationRule").OncallUserNotificationRule;
export const OncallUserNotificationRule: typeof import("./oncallUserNotificationRule").OncallUserNotificationRule = null as any;
utilities.lazyLoad(exports, ["OncallUserNotificationRule"], () => require("./oncallUserNotificationRule"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationPreferencesArgs, OrganizationPreferencesState } from "./organizationPreferences";
export type OrganizationPreferences = import("./organizationPreferences").OrganizationPreferences;
export const OrganizationPreferences: typeof import("./organizationPreferences").OrganizationPreferences = null as any;
utilities.lazyLoad(exports, ["OrganizationPreferences"], () => require("./organizationPreferences"));

export { PlaylistArgs, PlaylistState } from "./playlist";
export type Playlist = import("./playlist").Playlist;
export const Playlist: typeof import("./playlist").Playlist = null as any;
utilities.lazyLoad(exports, ["Playlist"], () => require("./playlist"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReportArgs, ReportState } from "./report";
export type Report = import("./report").Report;
export const Report: typeof import("./report").Report = null as any;
utilities.lazyLoad(exports, ["Report"], () => require("./report"));

export { RoleArgs, RoleState } from "./role";
export type Role = import("./role").Role;
export const Role: typeof import("./role").Role = null as any;
utilities.lazyLoad(exports, ["Role"], () => require("./role"));

export { RoleAssignmentArgs, RoleAssignmentState } from "./roleAssignment";
export type RoleAssignment = import("./roleAssignment").RoleAssignment;
export const RoleAssignment: typeof import("./roleAssignment").RoleAssignment = null as any;
utilities.lazyLoad(exports, ["RoleAssignment"], () => require("./roleAssignment"));

export { RoleAssignmentItemArgs, RoleAssignmentItemState } from "./roleAssignmentItem";
export type RoleAssignmentItem = import("./roleAssignmentItem").RoleAssignmentItem;
export const RoleAssignmentItem: typeof import("./roleAssignmentItem").RoleAssignmentItem = null as any;
utilities.lazyLoad(exports, ["RoleAssignmentItem"], () => require("./roleAssignmentItem"));

export { RuleGroupArgs, RuleGroupState } from "./ruleGroup";
export type RuleGroup = import("./ruleGroup").RuleGroup;
export const RuleGroup: typeof import("./ruleGroup").RuleGroup = null as any;
utilities.lazyLoad(exports, ["RuleGroup"], () => require("./ruleGroup"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountPermissionArgs, ServiceAccountPermissionState } from "./serviceAccountPermission";
export type ServiceAccountPermission = import("./serviceAccountPermission").ServiceAccountPermission;
export const ServiceAccountPermission: typeof import("./serviceAccountPermission").ServiceAccountPermission = null as any;
utilities.lazyLoad(exports, ["ServiceAccountPermission"], () => require("./serviceAccountPermission"));

export { ServiceAccountPermissionItemArgs, ServiceAccountPermissionItemState } from "./serviceAccountPermissionItem";
export type ServiceAccountPermissionItem = import("./serviceAccountPermissionItem").ServiceAccountPermissionItem;
export const ServiceAccountPermissionItem: typeof import("./serviceAccountPermissionItem").ServiceAccountPermissionItem = null as any;
utilities.lazyLoad(exports, ["ServiceAccountPermissionItem"], () => require("./serviceAccountPermissionItem"));

export { ServiceAccountTokenArgs, ServiceAccountTokenState } from "./serviceAccountToken";
export type ServiceAccountToken = import("./serviceAccountToken").ServiceAccountToken;
export const ServiceAccountToken: typeof import("./serviceAccountToken").ServiceAccountToken = null as any;
utilities.lazyLoad(exports, ["ServiceAccountToken"], () => require("./serviceAccountToken"));

export { SLOArgs, SLOState } from "./slo";
export type SLO = import("./slo").SLO;
export const SLO: typeof import("./slo").SLO = null as any;
utilities.lazyLoad(exports, ["SLO"], () => require("./slo"));

export { SsoSettingsArgs, SsoSettingsState } from "./ssoSettings";
export type SsoSettings = import("./ssoSettings").SsoSettings;
export const SsoSettings: typeof import("./ssoSettings").SsoSettings = null as any;
utilities.lazyLoad(exports, ["SsoSettings"], () => require("./ssoSettings"));

export { SyntheticMonitoringCheckArgs, SyntheticMonitoringCheckState } from "./syntheticMonitoringCheck";
export type SyntheticMonitoringCheck = import("./syntheticMonitoringCheck").SyntheticMonitoringCheck;
export const SyntheticMonitoringCheck: typeof import("./syntheticMonitoringCheck").SyntheticMonitoringCheck = null as any;
utilities.lazyLoad(exports, ["SyntheticMonitoringCheck"], () => require("./syntheticMonitoringCheck"));

export { SyntheticMonitoringInstallationArgs, SyntheticMonitoringInstallationState } from "./syntheticMonitoringInstallation";
export type SyntheticMonitoringInstallation = import("./syntheticMonitoringInstallation").SyntheticMonitoringInstallation;
export const SyntheticMonitoringInstallation: typeof import("./syntheticMonitoringInstallation").SyntheticMonitoringInstallation = null as any;
utilities.lazyLoad(exports, ["SyntheticMonitoringInstallation"], () => require("./syntheticMonitoringInstallation"));

export { SyntheticMonitoringProbeArgs, SyntheticMonitoringProbeState } from "./syntheticMonitoringProbe";
export type SyntheticMonitoringProbe = import("./syntheticMonitoringProbe").SyntheticMonitoringProbe;
export const SyntheticMonitoringProbe: typeof import("./syntheticMonitoringProbe").SyntheticMonitoringProbe = null as any;
utilities.lazyLoad(exports, ["SyntheticMonitoringProbe"], () => require("./syntheticMonitoringProbe"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamExternalGroupArgs, TeamExternalGroupState } from "./teamExternalGroup";
export type TeamExternalGroup = import("./teamExternalGroup").TeamExternalGroup;
export const TeamExternalGroup: typeof import("./teamExternalGroup").TeamExternalGroup = null as any;
utilities.lazyLoad(exports, ["TeamExternalGroup"], () => require("./teamExternalGroup"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


// Export sub-modules:
import * as alerting from "./alerting";
import * as cloud from "./cloud";
import * as config from "./config";
import * as enterprise from "./enterprise";
import * as machinelearning from "./machinelearning";
import * as oncall from "./oncall";
import * as oss from "./oss";
import * as slo from "./slo";
import * as syntheticmonitoring from "./syntheticmonitoring";
import * as types from "./types";

export {
    alerting,
    cloud,
    config,
    enterprise,
    machinelearning,
    oncall,
    oss,
    slo,
    syntheticmonitoring,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:index/annotation:Annotation":
                return new Annotation(name, <any>undefined, { urn })
            case "grafana:index/cloudAccessPolicy:CloudAccessPolicy":
                return new CloudAccessPolicy(name, <any>undefined, { urn })
            case "grafana:index/cloudAccessPolicyToken:CloudAccessPolicyToken":
                return new CloudAccessPolicyToken(name, <any>undefined, { urn })
            case "grafana:index/cloudOrgMember:CloudOrgMember":
                return new CloudOrgMember(name, <any>undefined, { urn })
            case "grafana:index/cloudPluginInstallation:CloudPluginInstallation":
                return new CloudPluginInstallation(name, <any>undefined, { urn })
            case "grafana:index/cloudStack:CloudStack":
                return new CloudStack(name, <any>undefined, { urn })
            case "grafana:index/cloudStackServiceAccount:CloudStackServiceAccount":
                return new CloudStackServiceAccount(name, <any>undefined, { urn })
            case "grafana:index/cloudStackServiceAccountToken:CloudStackServiceAccountToken":
                return new CloudStackServiceAccountToken(name, <any>undefined, { urn })
            case "grafana:index/contactPoint:ContactPoint":
                return new ContactPoint(name, <any>undefined, { urn })
            case "grafana:index/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "grafana:index/dashboardPermission:DashboardPermission":
                return new DashboardPermission(name, <any>undefined, { urn })
            case "grafana:index/dashboardPermissionItem:DashboardPermissionItem":
                return new DashboardPermissionItem(name, <any>undefined, { urn })
            case "grafana:index/dashboardPublic:DashboardPublic":
                return new DashboardPublic(name, <any>undefined, { urn })
            case "grafana:index/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "grafana:index/dataSourceConfig:DataSourceConfig":
                return new DataSourceConfig(name, <any>undefined, { urn })
            case "grafana:index/dataSourcePermission:DataSourcePermission":
                return new DataSourcePermission(name, <any>undefined, { urn })
            case "grafana:index/dataSourcePermissionItem:DataSourcePermissionItem":
                return new DataSourcePermissionItem(name, <any>undefined, { urn })
            case "grafana:index/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "grafana:index/folderPermission:FolderPermission":
                return new FolderPermission(name, <any>undefined, { urn })
            case "grafana:index/folderPermissionItem:FolderPermissionItem":
                return new FolderPermissionItem(name, <any>undefined, { urn })
            case "grafana:index/libraryPanel:LibraryPanel":
                return new LibraryPanel(name, <any>undefined, { urn })
            case "grafana:index/machineLearningHoliday:MachineLearningHoliday":
                return new MachineLearningHoliday(name, <any>undefined, { urn })
            case "grafana:index/machineLearningJob:MachineLearningJob":
                return new MachineLearningJob(name, <any>undefined, { urn })
            case "grafana:index/machineLearningOutlierDetector:MachineLearningOutlierDetector":
                return new MachineLearningOutlierDetector(name, <any>undefined, { urn })
            case "grafana:index/messageTemplate:MessageTemplate":
                return new MessageTemplate(name, <any>undefined, { urn })
            case "grafana:index/muteTiming:MuteTiming":
                return new MuteTiming(name, <any>undefined, { urn })
            case "grafana:index/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "grafana:index/oncallEscalation:OncallEscalation":
                return new OncallEscalation(name, <any>undefined, { urn })
            case "grafana:index/oncallEscalationChain:OncallEscalationChain":
                return new OncallEscalationChain(name, <any>undefined, { urn })
            case "grafana:index/oncallIntegration:OncallIntegration":
                return new OncallIntegration(name, <any>undefined, { urn })
            case "grafana:index/oncallOnCallShift:OncallOnCallShift":
                return new OncallOnCallShift(name, <any>undefined, { urn })
            case "grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook":
                return new OncallOutgoingWebhook(name, <any>undefined, { urn })
            case "grafana:index/oncallRoute:OncallRoute":
                return new OncallRoute(name, <any>undefined, { urn })
            case "grafana:index/oncallSchedule:OncallSchedule":
                return new OncallSchedule(name, <any>undefined, { urn })
            case "grafana:index/oncallUserNotificationRule:OncallUserNotificationRule":
                return new OncallUserNotificationRule(name, <any>undefined, { urn })
            case "grafana:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "grafana:index/organizationPreferences:OrganizationPreferences":
                return new OrganizationPreferences(name, <any>undefined, { urn })
            case "grafana:index/playlist:Playlist":
                return new Playlist(name, <any>undefined, { urn })
            case "grafana:index/report:Report":
                return new Report(name, <any>undefined, { urn })
            case "grafana:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "grafana:index/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "grafana:index/roleAssignmentItem:RoleAssignmentItem":
                return new RoleAssignmentItem(name, <any>undefined, { urn })
            case "grafana:index/ruleGroup:RuleGroup":
                return new RuleGroup(name, <any>undefined, { urn })
            case "grafana:index/sLO:SLO":
                return new SLO(name, <any>undefined, { urn })
            case "grafana:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "grafana:index/serviceAccountPermission:ServiceAccountPermission":
                return new ServiceAccountPermission(name, <any>undefined, { urn })
            case "grafana:index/serviceAccountPermissionItem:ServiceAccountPermissionItem":
                return new ServiceAccountPermissionItem(name, <any>undefined, { urn })
            case "grafana:index/serviceAccountToken:ServiceAccountToken":
                return new ServiceAccountToken(name, <any>undefined, { urn })
            case "grafana:index/ssoSettings:SsoSettings":
                return new SsoSettings(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck":
                return new SyntheticMonitoringCheck(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation":
                return new SyntheticMonitoringInstallation(name, <any>undefined, { urn })
            case "grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe":
                return new SyntheticMonitoringProbe(name, <any>undefined, { urn })
            case "grafana:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "grafana:index/teamExternalGroup:TeamExternalGroup":
                return new TeamExternalGroup(name, <any>undefined, { urn })
            case "grafana:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "index/annotation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudAccessPolicy", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudAccessPolicyToken", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudOrgMember", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudPluginInstallation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudStack", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudStackServiceAccount", _module)
pulumi.runtime.registerResourceModule("grafana", "index/cloudStackServiceAccountToken", _module)
pulumi.runtime.registerResourceModule("grafana", "index/contactPoint", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboard", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboardPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboardPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dashboardPublic", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSource", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSourceConfig", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSourcePermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/dataSourcePermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folder", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folderPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/folderPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "index/libraryPanel", _module)
pulumi.runtime.registerResourceModule("grafana", "index/machineLearningHoliday", _module)
pulumi.runtime.registerResourceModule("grafana", "index/machineLearningJob", _module)
pulumi.runtime.registerResourceModule("grafana", "index/machineLearningOutlierDetector", _module)
pulumi.runtime.registerResourceModule("grafana", "index/messageTemplate", _module)
pulumi.runtime.registerResourceModule("grafana", "index/muteTiming", _module)
pulumi.runtime.registerResourceModule("grafana", "index/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallEscalation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallEscalationChain", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallIntegration", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallOnCallShift", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallOutgoingWebhook", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallRoute", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallSchedule", _module)
pulumi.runtime.registerResourceModule("grafana", "index/oncallUserNotificationRule", _module)
pulumi.runtime.registerResourceModule("grafana", "index/organization", _module)
pulumi.runtime.registerResourceModule("grafana", "index/organizationPreferences", _module)
pulumi.runtime.registerResourceModule("grafana", "index/playlist", _module)
pulumi.runtime.registerResourceModule("grafana", "index/report", _module)
pulumi.runtime.registerResourceModule("grafana", "index/role", _module)
pulumi.runtime.registerResourceModule("grafana", "index/roleAssignment", _module)
pulumi.runtime.registerResourceModule("grafana", "index/roleAssignmentItem", _module)
pulumi.runtime.registerResourceModule("grafana", "index/ruleGroup", _module)
pulumi.runtime.registerResourceModule("grafana", "index/sLO", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccountPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccountPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "index/serviceAccountToken", _module)
pulumi.runtime.registerResourceModule("grafana", "index/ssoSettings", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringCheck", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringInstallation", _module)
pulumi.runtime.registerResourceModule("grafana", "index/syntheticMonitoringProbe", _module)
pulumi.runtime.registerResourceModule("grafana", "index/team", _module)
pulumi.runtime.registerResourceModule("grafana", "index/teamExternalGroup", _module)
pulumi.runtime.registerResourceModule("grafana", "index/user", _module)
pulumi.runtime.registerResourcePackage("grafana", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:grafana") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
