// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { CheckArgs, CheckState } from "./check";
export type Check = import("./check").Check;
export const Check: typeof import("./check").Check = null as any;
utilities.lazyLoad(exports, ["Check"], () => require("./check"));

export { GetProbeArgs, GetProbeResult, GetProbeOutputArgs } from "./getProbe";
export const getProbe: typeof import("./getProbe").getProbe = null as any;
export const getProbeOutput: typeof import("./getProbe").getProbeOutput = null as any;
utilities.lazyLoad(exports, ["getProbe","getProbeOutput"], () => require("./getProbe"));

export { GetProbesArgs, GetProbesResult, GetProbesOutputArgs } from "./getProbes";
export const getProbes: typeof import("./getProbes").getProbes = null as any;
export const getProbesOutput: typeof import("./getProbes").getProbesOutput = null as any;
utilities.lazyLoad(exports, ["getProbes","getProbesOutput"], () => require("./getProbes"));

export { InstallationArgs, InstallationState } from "./installation";
export type Installation = import("./installation").Installation;
export const Installation: typeof import("./installation").Installation = null as any;
utilities.lazyLoad(exports, ["Installation"], () => require("./installation"));

export { ProbeArgs, ProbeState } from "./probe";
export type Probe = import("./probe").Probe;
export const Probe: typeof import("./probe").Probe = null as any;
utilities.lazyLoad(exports, ["Probe"], () => require("./probe"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:syntheticMonitoring/check:Check":
                return new Check(name, <any>undefined, { urn })
            case "grafana:syntheticMonitoring/installation:Installation":
                return new Installation(name, <any>undefined, { urn })
            case "grafana:syntheticMonitoring/probe:Probe":
                return new Probe(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "syntheticMonitoring/check", _module)
pulumi.runtime.registerResourceModule("grafana", "syntheticMonitoring/installation", _module)
pulumi.runtime.registerResourceModule("grafana", "syntheticMonitoring/probe", _module)
