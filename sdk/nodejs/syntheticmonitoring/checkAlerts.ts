// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages alerts for a check in Grafana Synthetic Monitoring.
 *
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/configure-alerts/configure-per-check-alerts/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const main = new grafana.syntheticmonitoring.Check("main", {
 *     job: "Check Alert Test",
 *     target: "https://grafana.com",
 *     enabled: true,
 *     probes: [1],
 *     labels: {},
 *     settings: {
 *         http: {
 *             ipVersion: "V4",
 *             method: "GET",
 *         },
 *     },
 * });
 * const mainCheckAlerts = new grafana.syntheticmonitoring.CheckAlerts("main", {
 *     checkId: main.id,
 *     alerts: [
 *         {
 *             name: "ProbeFailedExecutionsTooHigh",
 *             threshold: 1,
 *             period: "15m",
 *         },
 *         {
 *             name: "TLSTargetCertificateCloseToExpiring",
 *             threshold: 14,
 *             period: "",
 *         },
 *         {
 *             name: "HTTPRequestDurationTooHighAvg",
 *             threshold: 5000,
 *             period: "10m",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:syntheticMonitoring/checkAlerts:CheckAlerts name "{{ check_id }}"
 * ```
 */
export class CheckAlerts extends pulumi.CustomResource {
    /**
     * Get an existing CheckAlerts resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CheckAlertsState, opts?: pulumi.CustomResourceOptions): CheckAlerts {
        return new CheckAlerts(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:syntheticMonitoring/checkAlerts:CheckAlerts';

    /**
     * Returns true if the given object is an instance of CheckAlerts.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CheckAlerts {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CheckAlerts.__pulumiType;
    }

    /**
     * List of alerts for the check.
     */
    declare public readonly alerts: pulumi.Output<outputs.syntheticMonitoring.CheckAlertsAlert[]>;
    /**
     * The ID of the check to manage alerts for.
     */
    declare public readonly checkId: pulumi.Output<number>;

    /**
     * Create a CheckAlerts resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CheckAlertsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CheckAlertsArgs | CheckAlertsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CheckAlertsState | undefined;
            resourceInputs["alerts"] = state?.alerts;
            resourceInputs["checkId"] = state?.checkId;
        } else {
            const args = argsOrState as CheckAlertsArgs | undefined;
            if (args?.alerts === undefined && !opts.urn) {
                throw new Error("Missing required property 'alerts'");
            }
            if (args?.checkId === undefined && !opts.urn) {
                throw new Error("Missing required property 'checkId'");
            }
            resourceInputs["alerts"] = args?.alerts;
            resourceInputs["checkId"] = args?.checkId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CheckAlerts.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CheckAlerts resources.
 */
export interface CheckAlertsState {
    /**
     * List of alerts for the check.
     */
    alerts?: pulumi.Input<pulumi.Input<inputs.syntheticMonitoring.CheckAlertsAlert>[]>;
    /**
     * The ID of the check to manage alerts for.
     */
    checkId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a CheckAlerts resource.
 */
export interface CheckAlertsArgs {
    /**
     * List of alerts for the check.
     */
    alerts: pulumi.Input<pulumi.Input<inputs.syntheticMonitoring.CheckAlertsAlert>[]>;
    /**
     * The ID of the check to manage alerts for.
     */
    checkId: pulumi.Input<number>;
}
