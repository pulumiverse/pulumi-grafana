// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

declare var exports: any;
const __config = new pulumi.Config("grafana");

/**
 * API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via
 * the `GRAFANA_AUTH` environment variable.
 */
export declare const auth: string | undefined;
Object.defineProperty(exports, "auth", {
    get() {
        return __config.get("auth") ?? utilities.getEnv("GRAFANA_AUTH");
    },
    enumerable: true,
});

/**
 * Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively
 * be set via the `GRAFANA_CA_CERT` environment variable.
 */
export declare const caCert: string | undefined;
Object.defineProperty(exports, "caCert", {
    get() {
        return __config.get("caCert") ?? utilities.getEnv("GRAFANA_CA_CERT");
    },
    enumerable: true,
});

/**
 * Access Policy Token for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_ACCESS_POLICY_TOKEN` environment
 * variable.
 */
export declare const cloudAccessPolicyToken: string | undefined;
Object.defineProperty(exports, "cloudAccessPolicyToken", {
    get() {
        return __config.get("cloudAccessPolicyToken") ?? utilities.getEnv("GRAFANA_CLOUD_ACCESS_POLICY_TOKEN");
    },
    enumerable: true,
});

/**
 * Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.
 */
export declare const cloudApiUrl: string | undefined;
Object.defineProperty(exports, "cloudApiUrl", {
    get() {
        return __config.get("cloudApiUrl") ?? utilities.getEnv("GRAFANA_CLOUD_API_URL");
    },
    enumerable: true,
});

/**
 * A Grafana Cloud Provider access token. May alternatively be set via the `GRAFANA_CLOUD_PROVIDER_ACCESS_TOKEN`
 * environment variable.
 */
export declare const cloudProviderAccessToken: string | undefined;
Object.defineProperty(exports, "cloudProviderAccessToken", {
    get() {
        return __config.get("cloudProviderAccessToken");
    },
    enumerable: true,
});

/**
 * A Grafana Cloud Provider backend address. May alternatively be set via the `GRAFANA_CLOUD_PROVIDER_URL` environment
 * variable.
 */
export declare const cloudProviderUrl: string | undefined;
Object.defineProperty(exports, "cloudProviderUrl", {
    get() {
        return __config.get("cloudProviderUrl");
    },
    enumerable: true,
});

/**
 * A Grafana Connections API access token. May alternatively be set via the `GRAFANA_CONNECTIONS_API_ACCESS_TOKEN`
 * environment variable.
 */
export declare const connectionsApiAccessToken: string | undefined;
Object.defineProperty(exports, "connectionsApiAccessToken", {
    get() {
        return __config.get("connectionsApiAccessToken");
    },
    enumerable: true,
});

/**
 * A Grafana Connections API address. May alternatively be set via the `GRAFANA_CONNECTIONS_API_URL` environment variable.
 */
export declare const connectionsApiUrl: string | undefined;
Object.defineProperty(exports, "connectionsApiUrl", {
    get() {
        return __config.get("connectionsApiUrl");
    },
    enumerable: true,
});

/**
 * Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.
 */
export declare const insecureSkipVerify: boolean | undefined;
Object.defineProperty(exports, "insecureSkipVerify", {
    get() {
        return __config.getObject<boolean>("insecureSkipVerify") ?? utilities.getEnvBoolean("GRAFANA_INSECURE_SKIP_VERIFY");
    },
    enumerable: true,
});

/**
 * A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.
 */
export declare const oncallAccessToken: string | undefined;
Object.defineProperty(exports, "oncallAccessToken", {
    get() {
        return __config.get("oncallAccessToken") ?? utilities.getEnv("GRAFANA_ONCALL_ACCESS_TOKEN");
    },
    enumerable: true,
});

/**
 * An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.
 */
export declare const oncallUrl: string | undefined;
Object.defineProperty(exports, "oncallUrl", {
    get() {
        return __config.get("oncallUrl") ?? utilities.getEnv("GRAFANA_ONCALL_URL");
    },
    enumerable: true,
});

/**
 * The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the
 * `GRAFANA_RETRIES` environment variable.
 */
export declare const retries: number | undefined;
Object.defineProperty(exports, "retries", {
    get() {
        return __config.getObject<number>("retries") ?? utilities.getEnvNumber("GRAFANA_RETRIES");
    },
    enumerable: true,
});

/**
 * The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429
 * and 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.
 */
export declare const retryStatusCodes: string[] | undefined;
Object.defineProperty(exports, "retryStatusCodes", {
    get() {
        return __config.getObject<string[]>("retryStatusCodes");
    },
    enumerable: true,
});

/**
 * The amount of time in seconds to wait between retries for Grafana API and Grafana Cloud API calls. May alternatively be
 * set via the `GRAFANA_RETRY_WAIT` environment variable.
 */
export declare const retryWait: number | undefined;
Object.defineProperty(exports, "retryWait", {
    get() {
        return __config.getObject<number>("retryWait") ?? utilities.getEnvNumber("GRAFANA_RETRY_WAIT");
    },
    enumerable: true,
});

/**
 * A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.
 */
export declare const smAccessToken: string | undefined;
Object.defineProperty(exports, "smAccessToken", {
    get() {
        return __config.get("smAccessToken") ?? utilities.getEnv("GRAFANA_SM_ACCESS_TOKEN");
    },
    enumerable: true,
});

export declare const smUrl: string | undefined;
Object.defineProperty(exports, "smUrl", {
    get() {
        return __config.get("smUrl") ?? utilities.getEnv("GRAFANA_SM_URL");
    },
    enumerable: true,
});

/**
 * Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.
 */
export declare const storeDashboardSha256: boolean | undefined;
Object.defineProperty(exports, "storeDashboardSha256", {
    get() {
        return __config.getObject<boolean>("storeDashboardSha256") ?? utilities.getEnvBoolean("GRAFANA_STORE_DASHBOARD_SHA256");
    },
    enumerable: true,
});

/**
 * Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be
 * set via the `GRAFANA_TLS_CERT` environment variable.
 */
export declare const tlsCert: string | undefined;
Object.defineProperty(exports, "tlsCert", {
    get() {
        return __config.get("tlsCert") ?? utilities.getEnv("GRAFANA_TLS_CERT");
    },
    enumerable: true,
});

/**
 * Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via
 * the `GRAFANA_TLS_KEY` environment variable.
 */
export declare const tlsKey: string | undefined;
Object.defineProperty(exports, "tlsKey", {
    get() {
        return __config.get("tlsKey") ?? utilities.getEnv("GRAFANA_TLS_KEY");
    },
    enumerable: true,
});

/**
 * The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.
 */
export declare const url: string | undefined;
Object.defineProperty(exports, "url", {
    get() {
        return __config.get("url") ?? utilities.getEnv("GRAFANA_URL");
    },
    enumerable: true,
});

