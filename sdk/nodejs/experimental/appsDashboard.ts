// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Grafana dashboards via the new Grafana App Platform API. This resource is currently **EXPERIMENTAL** and may be subject to change. It requires a development build of Grafana with specific feature flags enabled.
 */
export class AppsDashboard extends pulumi.CustomResource {
    /**
     * Get an existing AppsDashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AppsDashboardState, opts?: pulumi.CustomResourceOptions): AppsDashboard {
        return new AppsDashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:experimental/appsDashboard:AppsDashboard';

    /**
     * Returns true if the given object is an instance of AppsDashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AppsDashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AppsDashboard.__pulumiType;
    }

    /**
     * The metadata of the resource.
     */
    public readonly metadata!: pulumi.Output<outputs.experimental.AppsDashboardMetadata | undefined>;
    /**
     * Options for applying the resource.
     */
    public readonly options!: pulumi.Output<outputs.experimental.AppsDashboardOptions | undefined>;
    /**
     * The spec of the resource.
     */
    public readonly spec!: pulumi.Output<outputs.experimental.AppsDashboardSpec | undefined>;

    /**
     * Create a AppsDashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AppsDashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AppsDashboardArgs | AppsDashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AppsDashboardState | undefined;
            resourceInputs["metadata"] = state ? state.metadata : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["spec"] = state ? state.spec : undefined;
        } else {
            const args = argsOrState as AppsDashboardArgs | undefined;
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AppsDashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AppsDashboard resources.
 */
export interface AppsDashboardState {
    /**
     * The metadata of the resource.
     */
    metadata?: pulumi.Input<inputs.experimental.AppsDashboardMetadata>;
    /**
     * Options for applying the resource.
     */
    options?: pulumi.Input<inputs.experimental.AppsDashboardOptions>;
    /**
     * The spec of the resource.
     */
    spec?: pulumi.Input<inputs.experimental.AppsDashboardSpec>;
}

/**
 * The set of arguments for constructing a AppsDashboard resource.
 */
export interface AppsDashboardArgs {
    /**
     * The metadata of the resource.
     */
    metadata?: pulumi.Input<inputs.experimental.AppsDashboardMetadata>;
    /**
     * Options for applying the resource.
     */
    options?: pulumi.Input<inputs.experimental.AppsDashboardOptions>;
    /**
     * The spec of the resource.
     */
    spec?: pulumi.Input<inputs.experimental.AppsDashboardSpec>;
}
