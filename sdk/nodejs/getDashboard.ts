// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getDashboard(args?: GetDashboardArgs, opts?: pulumi.InvokeOptions): Promise<GetDashboardResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:index/getDashboard:getDashboard", {
        "dashboardId": args.dashboardId,
        "orgId": args.orgId,
        "uid": args.uid,
    }, opts);
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardArgs {
    dashboardId?: number;
    orgId?: string;
    uid?: string;
}

/**
 * A collection of values returned by getDashboard.
 */
export interface GetDashboardResult {
    readonly configJson: string;
    readonly dashboardId?: number;
    /**
     * @deprecated Use `folderUid` instead
     */
    readonly folder: number;
    readonly folderUid: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly isStarred: boolean;
    readonly orgId?: string;
    readonly slug: string;
    readonly title: string;
    readonly uid?: string;
    readonly url: string;
    readonly version: number;
}
export function getDashboardOutput(args?: GetDashboardOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetDashboardResult> {
    return pulumi.output(args).apply((a: any) => getDashboard(a, opts))
}

/**
 * A collection of arguments for invoking getDashboard.
 */
export interface GetDashboardOutputArgs {
    dashboardId?: pulumi.Input<number>;
    orgId?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}
