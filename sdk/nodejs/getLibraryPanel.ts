// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export function getLibraryPanel(args?: GetLibraryPanelArgs, opts?: pulumi.InvokeOptions): Promise<GetLibraryPanelResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:index/getLibraryPanel:getLibraryPanel", {
        "name": args.name,
        "orgId": args.orgId,
        "uid": args.uid,
    }, opts);
}

/**
 * A collection of arguments for invoking getLibraryPanel.
 */
export interface GetLibraryPanelArgs {
    name?: string;
    orgId?: string;
    uid?: string;
}

/**
 * A collection of values returned by getLibraryPanel.
 */
export interface GetLibraryPanelResult {
    readonly created: string;
    readonly dashboardIds: number[];
    readonly description: string;
    /**
     * @deprecated Use `folderUid` instead
     */
    readonly folderId: string;
    readonly folderName: string;
    readonly folderUid: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly modelJson: string;
    readonly name?: string;
    readonly orgId?: string;
    readonly panelId: number;
    readonly type: string;
    readonly uid?: string;
    readonly updated: string;
    readonly version: number;
}
export function getLibraryPanelOutput(args?: GetLibraryPanelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLibraryPanelResult> {
    return pulumi.output(args).apply((a: any) => getLibraryPanel(a, opts))
}

/**
 * A collection of arguments for invoking getLibraryPanel.
 */
export interface GetLibraryPanelOutputArgs {
    name?: pulumi.Input<string>;
    orgId?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
}
