// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrieves all k6 projects with the given name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const project = new grafana.k6.Project("project", {name: "Terraform Test Project"});
 * const project2 = new grafana.k6.Project("project_2", {name: "Terraform Test Project"});
 * const fromName = grafana.k6.getProjects({
 *     name: "Terraform Test Project",
 * });
 * ```
 */
export function getProjects(args?: GetProjectsArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:k6/getProjects:getProjects", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjects.
 */
export interface GetProjectsArgs {
    /**
     * Human-friendly identifier of the project.
     */
    name?: string;
}

/**
 * A collection of values returned by getProjects.
 */
export interface GetProjectsResult {
    /**
     * Human-friendly identifier of the project. This is set to the same as name.
     */
    readonly id: string;
    /**
     * Human-friendly identifier of the project.
     */
    readonly name?: string;
    readonly projects: outputs.k6.GetProjectsProject[];
}
/**
 * Retrieves all k6 projects with the given name.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const project = new grafana.k6.Project("project", {name: "Terraform Test Project"});
 * const project2 = new grafana.k6.Project("project_2", {name: "Terraform Test Project"});
 * const fromName = grafana.k6.getProjects({
 *     name: "Terraform Test Project",
 * });
 * ```
 */
export function getProjectsOutput(args?: GetProjectsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectsResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("grafana:k6/getProjects:getProjects", {
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getProjects.
 */
export interface GetProjectsOutputArgs {
    /**
     * Human-friendly identifier of the project.
     */
    name?: pulumi.Input<string>;
}
