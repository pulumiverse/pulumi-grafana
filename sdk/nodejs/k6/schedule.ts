// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages a k6 schedule for automated test execution.
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:k6/schedule:Schedule name "{{ load_test_id }}"
 * ```
 */
export class Schedule extends pulumi.CustomResource {
    /**
     * Get an existing Schedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleState, opts?: pulumi.CustomResourceOptions): Schedule {
        return new Schedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:k6/schedule:Schedule';

    /**
     * Returns true if the given object is an instance of Schedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schedule.__pulumiType;
    }

    /**
     * The email of the user who created the schedule.
     */
    declare public /*out*/ readonly createdBy: pulumi.Output<string>;
    /**
     * The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    declare public readonly cron: pulumi.Output<outputs.k6.ScheduleCron | undefined>;
    /**
     * Whether the schedule is deactivated.
     */
    declare public /*out*/ readonly deactivated: pulumi.Output<boolean>;
    /**
     * The identifier of the load test to schedule.
     */
    declare public readonly loadTestId: pulumi.Output<string>;
    /**
     * The next scheduled execution time.
     */
    declare public /*out*/ readonly nextRun: pulumi.Output<string>;
    /**
     * The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    declare public readonly recurrenceRule: pulumi.Output<outputs.k6.ScheduleRecurrenceRule | undefined>;
    /**
     * The start time for the schedule (RFC3339 format).
     */
    declare public readonly starts: pulumi.Output<string>;

    /**
     * Create a Schedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleArgs | ScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleState | undefined;
            resourceInputs["createdBy"] = state?.createdBy;
            resourceInputs["cron"] = state?.cron;
            resourceInputs["deactivated"] = state?.deactivated;
            resourceInputs["loadTestId"] = state?.loadTestId;
            resourceInputs["nextRun"] = state?.nextRun;
            resourceInputs["recurrenceRule"] = state?.recurrenceRule;
            resourceInputs["starts"] = state?.starts;
        } else {
            const args = argsOrState as ScheduleArgs | undefined;
            if (args?.loadTestId === undefined && !opts.urn) {
                throw new Error("Missing required property 'loadTestId'");
            }
            if (args?.starts === undefined && !opts.urn) {
                throw new Error("Missing required property 'starts'");
            }
            resourceInputs["cron"] = args?.cron;
            resourceInputs["loadTestId"] = args?.loadTestId;
            resourceInputs["recurrenceRule"] = args?.recurrenceRule;
            resourceInputs["starts"] = args?.starts;
            resourceInputs["createdBy"] = undefined /*out*/;
            resourceInputs["deactivated"] = undefined /*out*/;
            resourceInputs["nextRun"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schedule resources.
 */
export interface ScheduleState {
    /**
     * The email of the user who created the schedule.
     */
    createdBy?: pulumi.Input<string>;
    /**
     * The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    cron?: pulumi.Input<inputs.k6.ScheduleCron>;
    /**
     * Whether the schedule is deactivated.
     */
    deactivated?: pulumi.Input<boolean>;
    /**
     * The identifier of the load test to schedule.
     */
    loadTestId?: pulumi.Input<string>;
    /**
     * The next scheduled execution time.
     */
    nextRun?: pulumi.Input<string>;
    /**
     * The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    recurrenceRule?: pulumi.Input<inputs.k6.ScheduleRecurrenceRule>;
    /**
     * The start time for the schedule (RFC3339 format).
     */
    starts?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schedule resource.
 */
export interface ScheduleArgs {
    /**
     * The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    cron?: pulumi.Input<inputs.k6.ScheduleCron>;
    /**
     * The identifier of the load test to schedule.
     */
    loadTestId: pulumi.Input<string>;
    /**
     * The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrenceRule` and `cron` can be set.
     */
    recurrenceRule?: pulumi.Input<inputs.k6.ScheduleRecurrenceRule>;
    /**
     * The start time for the schedule (RFC3339 format).
     */
    starts: pulumi.Input<string>;
}
