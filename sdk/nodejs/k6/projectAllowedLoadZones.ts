// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages allowed private load zones for a k6 project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const testProjectAllowedLoadZones = new grafana.k6.Project("test_project_allowed_load_zones", {name: "Terraform Project Test Allowed Load Zones"});
 * const testAllowedZones = new grafana.k6.ProjectAllowedLoadZones("test_allowed_zones", {
 *     projectId: testProjectAllowedLoadZones.id,
 *     allowedLoadZones: [
 *         "my-load-zone-1",
 *         "other-load-zone",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:k6/projectAllowedLoadZones:ProjectAllowedLoadZones name "{{ project_id }}"
 * ```
 */
export class ProjectAllowedLoadZones extends pulumi.CustomResource {
    /**
     * Get an existing ProjectAllowedLoadZones resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectAllowedLoadZonesState, opts?: pulumi.CustomResourceOptions): ProjectAllowedLoadZones {
        return new ProjectAllowedLoadZones(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:k6/projectAllowedLoadZones:ProjectAllowedLoadZones';

    /**
     * Returns true if the given object is an instance of ProjectAllowedLoadZones.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectAllowedLoadZones {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectAllowedLoadZones.__pulumiType;
    }

    /**
     * List of allowed private k6 load zone IDs for this project.
     */
    declare public readonly allowedLoadZones: pulumi.Output<string[]>;
    /**
     * The identifier of the project to manage private allowed load zones for.
     */
    declare public readonly projectId: pulumi.Output<string>;

    /**
     * Create a ProjectAllowedLoadZones resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectAllowedLoadZonesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectAllowedLoadZonesArgs | ProjectAllowedLoadZonesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectAllowedLoadZonesState | undefined;
            resourceInputs["allowedLoadZones"] = state?.allowedLoadZones;
            resourceInputs["projectId"] = state?.projectId;
        } else {
            const args = argsOrState as ProjectAllowedLoadZonesArgs | undefined;
            if (args?.allowedLoadZones === undefined && !opts.urn) {
                throw new Error("Missing required property 'allowedLoadZones'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["allowedLoadZones"] = args?.allowedLoadZones;
            resourceInputs["projectId"] = args?.projectId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectAllowedLoadZones.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectAllowedLoadZones resources.
 */
export interface ProjectAllowedLoadZonesState {
    /**
     * List of allowed private k6 load zone IDs for this project.
     */
    allowedLoadZones?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The identifier of the project to manage private allowed load zones for.
     */
    projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectAllowedLoadZones resource.
 */
export interface ProjectAllowedLoadZonesArgs {
    /**
     * List of allowed private k6 load zone IDs for this project.
     */
    allowedLoadZones: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The identifier of the project to manage private allowed load zones for.
     */
    projectId: pulumi.Input<string>;
}
