// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Retrieves a k6 project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.k6.Project("test", {name: "Terraform Test Project"});
 * const fromId = test.id.apply(id => grafana.k6.getProjectOutput({
 *     id: id,
 * }));
 * ```
 */
export function getProject(args: GetProjectArgs, opts?: pulumi.InvokeOptions): Promise<GetProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:k6/getProject:getProject", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectArgs {
    /**
     * Numeric identifier of the project.
     */
    id: number;
}

/**
 * A collection of values returned by getProject.
 */
export interface GetProjectResult {
    /**
     * The date when the project was created.
     */
    readonly created: string;
    /**
     * The Grafana folder uid.
     */
    readonly grafanaFolderUid: string;
    /**
     * Numeric identifier of the project.
     */
    readonly id: number;
    /**
     * Whether this project is the default for running tests when no explicit project identifier is provided.
     */
    readonly isDefault: boolean;
    /**
     * Human-friendly identifier of the project.
     */
    readonly name: string;
    /**
     * The date when the project was last updated.
     */
    readonly updated: string;
}
/**
 * Retrieves a k6 project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.k6.Project("test", {name: "Terraform Test Project"});
 * const fromId = test.id.apply(id => grafana.k6.getProjectOutput({
 *     id: id,
 * }));
 * ```
 */
export function getProjectOutput(args: GetProjectOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetProjectResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("grafana:k6/getProject:getProject", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getProject.
 */
export interface GetProjectOutputArgs {
    /**
     * Numeric identifier of the project.
     */
    id: pulumi.Input<number>;
}
