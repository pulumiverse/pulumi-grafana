// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Retrieves a k6 schedule.
 */
export function getSchedule(args: GetScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetScheduleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:k6/getSchedule:getSchedule", {
        "loadTestId": args.loadTestId,
        "recurrenceRule": args.recurrenceRule,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchedule.
 */
export interface GetScheduleArgs {
    /**
     * The identifier of the load test to retrieve the schedule for.
     */
    loadTestId: string;
    /**
     * The schedule recurrence settings. If null, the test will run only once on the starts date.
     */
    recurrenceRule?: inputs.k6.GetScheduleRecurrenceRule;
}

/**
 * A collection of values returned by getSchedule.
 */
export interface GetScheduleResult {
    /**
     * The email of the user who created the schedule.
     */
    readonly createdBy: string;
    /**
     * Whether the schedule is deactivated.
     */
    readonly deactivated: boolean;
    /**
     * Numeric identifier of the schedule.
     */
    readonly id: string;
    /**
     * The identifier of the load test to retrieve the schedule for.
     */
    readonly loadTestId: string;
    /**
     * The next scheduled execution time.
     */
    readonly nextRun: string;
    /**
     * The schedule recurrence settings. If null, the test will run only once on the starts date.
     */
    readonly recurrenceRule?: outputs.k6.GetScheduleRecurrenceRule;
    /**
     * The start time for the schedule (RFC3339 format).
     */
    readonly starts: string;
}
/**
 * Retrieves a k6 schedule.
 */
export function getScheduleOutput(args: GetScheduleOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetScheduleResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("grafana:k6/getSchedule:getSchedule", {
        "loadTestId": args.loadTestId,
        "recurrenceRule": args.recurrenceRule,
    }, opts);
}

/**
 * A collection of arguments for invoking getSchedule.
 */
export interface GetScheduleOutputArgs {
    /**
     * The identifier of the load test to retrieve the schedule for.
     */
    loadTestId: pulumi.Input<string>;
    /**
     * The schedule recurrence settings. If null, the test will run only once on the starts date.
     */
    recurrenceRule?: pulumi.Input<inputs.k6.GetScheduleRecurrenceRuleArgs>;
}
