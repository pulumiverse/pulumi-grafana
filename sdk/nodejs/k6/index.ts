// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetLoadTestArgs, GetLoadTestResult, GetLoadTestOutputArgs } from "./getLoadTest";
export const getLoadTest: typeof import("./getLoadTest").getLoadTest = null as any;
export const getLoadTestOutput: typeof import("./getLoadTest").getLoadTestOutput = null as any;
utilities.lazyLoad(exports, ["getLoadTest","getLoadTestOutput"], () => require("./getLoadTest"));

export { GetLoadTestsArgs, GetLoadTestsResult, GetLoadTestsOutputArgs } from "./getLoadTests";
export const getLoadTests: typeof import("./getLoadTests").getLoadTests = null as any;
export const getLoadTestsOutput: typeof import("./getLoadTests").getLoadTestsOutput = null as any;
utilities.lazyLoad(exports, ["getLoadTests","getLoadTestsOutput"], () => require("./getLoadTests"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectAllowedLoadZonesArgs, GetProjectAllowedLoadZonesResult, GetProjectAllowedLoadZonesOutputArgs } from "./getProjectAllowedLoadZones";
export const getProjectAllowedLoadZones: typeof import("./getProjectAllowedLoadZones").getProjectAllowedLoadZones = null as any;
export const getProjectAllowedLoadZonesOutput: typeof import("./getProjectAllowedLoadZones").getProjectAllowedLoadZonesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectAllowedLoadZones","getProjectAllowedLoadZonesOutput"], () => require("./getProjectAllowedLoadZones"));

export { GetProjectLimitsArgs, GetProjectLimitsResult, GetProjectLimitsOutputArgs } from "./getProjectLimits";
export const getProjectLimits: typeof import("./getProjectLimits").getProjectLimits = null as any;
export const getProjectLimitsOutput: typeof import("./getProjectLimits").getProjectLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getProjectLimits","getProjectLimitsOutput"], () => require("./getProjectLimits"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { InstallationArgs, InstallationState } from "./installation";
export type Installation = import("./installation").Installation;
export const Installation: typeof import("./installation").Installation = null as any;
utilities.lazyLoad(exports, ["Installation"], () => require("./installation"));

export { LoadTestArgs, LoadTestState } from "./loadTest";
export type LoadTest = import("./loadTest").LoadTest;
export const LoadTest: typeof import("./loadTest").LoadTest = null as any;
utilities.lazyLoad(exports, ["LoadTest"], () => require("./loadTest"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectAllowedLoadZonesArgs, ProjectAllowedLoadZonesState } from "./projectAllowedLoadZones";
export type ProjectAllowedLoadZones = import("./projectAllowedLoadZones").ProjectAllowedLoadZones;
export const ProjectAllowedLoadZones: typeof import("./projectAllowedLoadZones").ProjectAllowedLoadZones = null as any;
utilities.lazyLoad(exports, ["ProjectAllowedLoadZones"], () => require("./projectAllowedLoadZones"));

export { ProjectLimitsArgs, ProjectLimitsState } from "./projectLimits";
export type ProjectLimits = import("./projectLimits").ProjectLimits;
export const ProjectLimits: typeof import("./projectLimits").ProjectLimits = null as any;
utilities.lazyLoad(exports, ["ProjectLimits"], () => require("./projectLimits"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:k6/installation:Installation":
                return new Installation(name, <any>undefined, { urn })
            case "grafana:k6/loadTest:LoadTest":
                return new LoadTest(name, <any>undefined, { urn })
            case "grafana:k6/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "grafana:k6/projectAllowedLoadZones:ProjectAllowedLoadZones":
                return new ProjectAllowedLoadZones(name, <any>undefined, { urn })
            case "grafana:k6/projectLimits:ProjectLimits":
                return new ProjectLimits(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "k6/installation", _module)
pulumi.runtime.registerResourceModule("grafana", "k6/loadTest", _module)
pulumi.runtime.registerResourceModule("grafana", "k6/project", _module)
pulumi.runtime.registerResourceModule("grafana", "k6/projectAllowedLoadZones", _module)
pulumi.runtime.registerResourceModule("grafana", "k6/projectLimits", _module)
