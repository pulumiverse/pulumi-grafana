// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class CloudOrgMember extends pulumi.CustomResource {
    /**
     * Get an existing CloudOrgMember resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudOrgMemberState, opts?: pulumi.CustomResourceOptions): CloudOrgMember {
        return new CloudOrgMember(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/cloudOrgMember:CloudOrgMember';

    /**
     * Returns true if the given object is an instance of CloudOrgMember.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudOrgMember {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudOrgMember.__pulumiType;
    }

    /**
     * The slug or ID of the organization.
     */
    public readonly org!: pulumi.Output<string>;
    /**
     * Whether the user should receive billing emails.
     */
    public readonly receiveBillingEmails!: pulumi.Output<boolean>;
    /**
     * The role to assign to the user in the organization.
     */
    public readonly role!: pulumi.Output<string>;
    /**
     * Username or ID of the user to add to the org's members.
     */
    public readonly user!: pulumi.Output<string>;

    /**
     * Create a CloudOrgMember resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudOrgMemberArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudOrgMemberArgs | CloudOrgMemberState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudOrgMemberState | undefined;
            resourceInputs["org"] = state ? state.org : undefined;
            resourceInputs["receiveBillingEmails"] = state ? state.receiveBillingEmails : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
            resourceInputs["user"] = state ? state.user : undefined;
        } else {
            const args = argsOrState as CloudOrgMemberArgs | undefined;
            if ((!args || args.org === undefined) && !opts.urn) {
                throw new Error("Missing required property 'org'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            resourceInputs["org"] = args ? args.org : undefined;
            resourceInputs["receiveBillingEmails"] = args ? args.receiveBillingEmails : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
            resourceInputs["user"] = args ? args.user : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudOrgMember.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudOrgMember resources.
 */
export interface CloudOrgMemberState {
    /**
     * The slug or ID of the organization.
     */
    org?: pulumi.Input<string>;
    /**
     * Whether the user should receive billing emails.
     */
    receiveBillingEmails?: pulumi.Input<boolean>;
    /**
     * The role to assign to the user in the organization.
     */
    role?: pulumi.Input<string>;
    /**
     * Username or ID of the user to add to the org's members.
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudOrgMember resource.
 */
export interface CloudOrgMemberArgs {
    /**
     * The slug or ID of the organization.
     */
    org: pulumi.Input<string>;
    /**
     * Whether the user should receive billing emails.
     */
    receiveBillingEmails?: pulumi.Input<boolean>;
    /**
     * The role to assign to the user in the organization.
     */
    role: pulumi.Input<string>;
    /**
     * Username or ID of the user to add to the org's members.
     */
    user: pulumi.Input<string>;
}
