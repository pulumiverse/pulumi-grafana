// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Resource manages Grafana SLOs.
 *
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/)
 * * [API documentation](https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/api/)
 * * [Additional Information On Alerting Rule Annotations and Labels](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/#templating/)
 *
 * ## Example Usage
 *
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.slo.SLO("test", {
 *     name: "Terraform Testing",
 *     description: "Terraform Description",
 *     queries: [{
 *         freeform: {
 *             query: "sum(rate(apiserver_request_total{code!=\"500\"}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))",
 *         },
 *         type: "freeform",
 *     }],
 *     objectives: [{
 *         value: 0.995,
 *         window: "30d",
 *     }],
 *     destinationDatasource: {
 *         uid: "grafanacloud-prom",
 *     },
 *     labels: [{
 *         key: "slo",
 *         value: "terraform",
 *     }],
 *     alertings: [{
 *         fastburns: [{
 *             annotations: [
 *                 {
 *                     key: "name",
 *                     value: "SLO Burn Rate Very High",
 *                 },
 *                 {
 *                     key: "description",
 *                     value: "Error budget is burning too fast",
 *                 },
 *             ],
 *         }],
 *         slowburns: [{
 *             annotations: [
 *                 {
 *                     key: "name",
 *                     value: "SLO Burn Rate High",
 *                 },
 *                 {
 *                     key: "description",
 *                     value: "Error budget is burning too fast",
 *                 },
 *             ],
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Advanced
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.slo.SLO("test", {
 *     name: "Complex Resource - Terraform Ratio Query Example",
 *     description: "Complex Resource - Terraform Ratio Query Description",
 *     queries: [{
 *         ratio: {
 *             successMetric: "kubelet_http_requests_total{status!~\"5..\"}",
 *             totalMetric: "kubelet_http_requests_total",
 *             groupByLabels: [
 *                 "job",
 *                 "instance",
 *             ],
 *         },
 *         type: "ratio",
 *     }],
 *     objectives: [{
 *         value: 0.995,
 *         window: "30d",
 *     }],
 *     destinationDatasource: {
 *         uid: "grafanacloud-prom",
 *     },
 *     labels: [{
 *         key: "slo",
 *         value: "terraform",
 *     }],
 *     alertings: [{
 *         fastburns: [{
 *             annotations: [
 *                 {
 *                     key: "name",
 *                     value: "SLO Burn Rate Very High",
 *                 },
 *                 {
 *                     key: "description",
 *                     value: "Error budget is burning too fast",
 *                 },
 *             ],
 *             labels: [{
 *                 key: "type",
 *                 value: "slo",
 *             }],
 *         }],
 *         slowburns: [{
 *             annotations: [
 *                 {
 *                     key: "name",
 *                     value: "SLO Burn Rate High",
 *                 },
 *                 {
 *                     key: "description",
 *                     value: "Error budget is burning too fast",
 *                 },
 *             ],
 *             labels: [{
 *                 key: "type",
 *                 value: "slo",
 *             }],
 *         }],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:index/sLO:SLO name "{{ uuid }}"
 * ```
 *
 * @deprecated grafana.index/slo.SLO has been deprecated in favor of grafana.slo/slo.SLO
 */
export class SLO extends pulumi.CustomResource {
    /**
     * Get an existing SLO resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SLOState, opts?: pulumi.CustomResourceOptions): SLO {
        pulumi.log.warn("SLO is deprecated: grafana.index/slo.SLO has been deprecated in favor of grafana.slo/slo.SLO")
        return new SLO(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/sLO:SLO';

    /**
     * Returns true if the given object is an instance of SLO.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SLO {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SLO.__pulumiType;
    }

    /**
     * Configures the alerting rules that will be generated for each
     * 			time window associated with the SLO. Grafana SLOs can generate
     * 			alerts when the short-term error budget burn is very high, the
     * 			long-term error budget burn rate is high, or when the remaining
     * 			error budget is below a certain threshold. Annotations and Labels support templating.
     */
    public readonly alertings!: pulumi.Output<outputs.SLOAlerting[] | undefined>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    public readonly destinationDatasource!: pulumi.Output<outputs.SLODestinationDatasource>;
    /**
     * UID for the SLO folder
     */
    public readonly folderUid!: pulumi.Output<string | undefined>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
     */
    public readonly labels!: pulumi.Output<outputs.SLOLabel[] | undefined>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
     */
    public readonly objectives!: pulumi.Output<outputs.SLOObjective[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    public readonly queries!: pulumi.Output<outputs.SLOQuery[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in alerts to link to the RCA workbench.
     */
    public readonly searchExpression!: pulumi.Output<string | undefined>;

    /**
     * Create a SLO resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated grafana.index/slo.SLO has been deprecated in favor of grafana.slo/slo.SLO */
    constructor(name: string, args: SLOArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated grafana.index/slo.SLO has been deprecated in favor of grafana.slo/slo.SLO */
    constructor(name: string, argsOrState?: SLOArgs | SLOState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("SLO is deprecated: grafana.index/slo.SLO has been deprecated in favor of grafana.slo/slo.SLO")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SLOState | undefined;
            resourceInputs["alertings"] = state ? state.alertings : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationDatasource"] = state ? state.destinationDatasource : undefined;
            resourceInputs["folderUid"] = state ? state.folderUid : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["objectives"] = state ? state.objectives : undefined;
            resourceInputs["queries"] = state ? state.queries : undefined;
            resourceInputs["searchExpression"] = state ? state.searchExpression : undefined;
        } else {
            const args = argsOrState as SLOArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.destinationDatasource === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationDatasource'");
            }
            if ((!args || args.objectives === undefined) && !opts.urn) {
                throw new Error("Missing required property 'objectives'");
            }
            if ((!args || args.queries === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queries'");
            }
            resourceInputs["alertings"] = args ? args.alertings : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationDatasource"] = args ? args.destinationDatasource : undefined;
            resourceInputs["folderUid"] = args ? args.folderUid : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["objectives"] = args ? args.objectives : undefined;
            resourceInputs["queries"] = args ? args.queries : undefined;
            resourceInputs["searchExpression"] = args ? args.searchExpression : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/sLO:SLO" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(SLO.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SLO resources.
 */
export interface SLOState {
    /**
     * Configures the alerting rules that will be generated for each
     * 			time window associated with the SLO. Grafana SLOs can generate
     * 			alerts when the short-term error budget burn is very high, the
     * 			long-term error budget burn rate is high, or when the remaining
     * 			error budget is below a certain threshold. Annotations and Labels support templating.
     */
    alertings?: pulumi.Input<pulumi.Input<inputs.SLOAlerting>[]>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    description?: pulumi.Input<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    destinationDatasource?: pulumi.Input<inputs.SLODestinationDatasource>;
    /**
     * UID for the SLO folder
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SLOLabel>[]>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    name?: pulumi.Input<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
     */
    objectives?: pulumi.Input<pulumi.Input<inputs.SLOObjective>[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    queries?: pulumi.Input<pulumi.Input<inputs.SLOQuery>[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in alerts to link to the RCA workbench.
     */
    searchExpression?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SLO resource.
 */
export interface SLOArgs {
    /**
     * Configures the alerting rules that will be generated for each
     * 			time window associated with the SLO. Grafana SLOs can generate
     * 			alerts when the short-term error budget burn is very high, the
     * 			long-term error budget burn rate is high, or when the remaining
     * 			error budget is below a certain threshold. Annotations and Labels support templating.
     */
    alertings?: pulumi.Input<pulumi.Input<inputs.SLOAlerting>[]>;
    /**
     * Description is a free-text field that can provide more context to an SLO.
     */
    description: pulumi.Input<string>;
    /**
     * Destination Datasource sets the datasource defined for an SLO
     */
    destinationDatasource: pulumi.Input<inputs.SLODestinationDatasource>;
    /**
     * UID for the SLO folder
     */
    folderUid?: pulumi.Input<string>;
    /**
     * Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
     */
    labels?: pulumi.Input<pulumi.Input<inputs.SLOLabel>[]>;
    /**
     * Name should be a short description of your indicator. Consider names like "API Availability"
     */
    name?: pulumi.Input<string>;
    /**
     * Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
     */
    objectives: pulumi.Input<pulumi.Input<inputs.SLOObjective>[]>;
    /**
     * Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
     */
    queries: pulumi.Input<pulumi.Input<inputs.SLOQuery>[]>;
    /**
     * The name of a search expression in Grafana Asserts. This is used in the SLO UI to open the Asserts RCA workbench and in alerts to link to the RCA workbench.
     */
    searchExpression?: pulumi.Input<string>;
}
