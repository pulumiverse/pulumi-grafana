// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.connections.MetricsEndpointScrapeJob("test", {
 *     stackId: "1",
 *     name: "my-scrape-job",
 *     enabled: true,
 *     authenticationMethod: "basic",
 *     authenticationBasicUsername: "my-username",
 *     authenticationBasicPassword: "my-password",
 *     url: "https://grafana.com/metrics",
 *     scrapeIntervalSeconds: 120,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob name "{{ stack_id }}:{{ name }}"
 * ```
 */
export class MetricsEndpointScrapeJob extends pulumi.CustomResource {
    /**
     * Get an existing MetricsEndpointScrapeJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetricsEndpointScrapeJobState, opts?: pulumi.CustomResourceOptions): MetricsEndpointScrapeJob {
        return new MetricsEndpointScrapeJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob';

    /**
     * Returns true if the given object is an instance of MetricsEndpointScrapeJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricsEndpointScrapeJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricsEndpointScrapeJob.__pulumiType;
    }

    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    declare public readonly authenticationBasicPassword: pulumi.Output<string | undefined>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    declare public readonly authenticationBasicUsername: pulumi.Output<string | undefined>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    declare public readonly authenticationBearerToken: pulumi.Output<string | undefined>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    declare public readonly authenticationMethod: pulumi.Output<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly name: pulumi.Output<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    declare public readonly scrapeIntervalSeconds: pulumi.Output<number>;
    declare public readonly stackId: pulumi.Output<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    declare public readonly url: pulumi.Output<string>;

    /**
     * Create a MetricsEndpointScrapeJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricsEndpointScrapeJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricsEndpointScrapeJobArgs | MetricsEndpointScrapeJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetricsEndpointScrapeJobState | undefined;
            resourceInputs["authenticationBasicPassword"] = state?.authenticationBasicPassword;
            resourceInputs["authenticationBasicUsername"] = state?.authenticationBasicUsername;
            resourceInputs["authenticationBearerToken"] = state?.authenticationBearerToken;
            resourceInputs["authenticationMethod"] = state?.authenticationMethod;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["name"] = state?.name;
            resourceInputs["scrapeIntervalSeconds"] = state?.scrapeIntervalSeconds;
            resourceInputs["stackId"] = state?.stackId;
            resourceInputs["url"] = state?.url;
        } else {
            const args = argsOrState as MetricsEndpointScrapeJobArgs | undefined;
            if (args?.authenticationMethod === undefined && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if (args?.stackId === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            if (args?.url === undefined && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["authenticationBasicPassword"] = args?.authenticationBasicPassword ? pulumi.secret(args.authenticationBasicPassword) : undefined;
            resourceInputs["authenticationBasicUsername"] = args?.authenticationBasicUsername;
            resourceInputs["authenticationBearerToken"] = args?.authenticationBearerToken ? pulumi.secret(args.authenticationBearerToken) : undefined;
            resourceInputs["authenticationMethod"] = args?.authenticationMethod;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["name"] = args?.name;
            resourceInputs["scrapeIntervalSeconds"] = args?.scrapeIntervalSeconds;
            resourceInputs["stackId"] = args?.stackId;
            resourceInputs["url"] = args?.url;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authenticationBasicPassword", "authenticationBearerToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MetricsEndpointScrapeJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetricsEndpointScrapeJob resources.
 */
export interface MetricsEndpointScrapeJobState {
    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicPassword?: pulumi.Input<string>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicUsername?: pulumi.Input<string>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    authenticationBearerToken?: pulumi.Input<string>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    scrapeIntervalSeconds?: pulumi.Input<number>;
    stackId?: pulumi.Input<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetricsEndpointScrapeJob resource.
 */
export interface MetricsEndpointScrapeJobArgs {
    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicPassword?: pulumi.Input<string>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicUsername?: pulumi.Input<string>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    authenticationBearerToken?: pulumi.Input<string>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    scrapeIntervalSeconds?: pulumi.Input<number>;
    stackId: pulumi.Input<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    url: pulumi.Input<string>;
}
