// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages LBAC rules for a data source.
 *
 * !> Warning: The resource is experimental and will be subject to change. This resource manages the entire LBAC rules tree, and will overwrite any existing rules.
 *
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/data-source-management/teamlbac/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/datasource_lbac_rules/)
 *
 * This resource requires Grafana >=11.5.0.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const team = new grafana.oss.Team("team", {name: "Team Name"});
 * const test = new grafana.oss.DataSource("test", {
 *     type: "loki",
 *     name: "loki-from-terraform",
 *     url: "https://mylokiurl.net",
 *     basicAuthEnabled: true,
 *     basicAuthUsername: "username",
 *     jsonDataEncoded: JSON.stringify({
 *         authType: "default",
 *         basicAuthPassword: "password",
 *     }),
 * });
 * const testRule = new grafana.enterprise.DataSourceConfigLbacRules("test_rule", {
 *     datasourceUid: test.uid,
 *     rules: pulumi.jsonStringify(team.teamUid.apply(teamUid => {
 *         [teamUid]: [
 *             "{ cluster = \"dev-us-central-0\", namespace = \"hosted-grafana\" }",
 *             "{ foo = \"qux\" }",
 *         ],
 *     })),
 * }, {
 *     dependsOn: [
 *         team,
 *         test,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:enterprise/dataSourceConfigLbacRules:DataSourceConfigLbacRules name "{{ datasource_uid }}"
 * ```
 */
export class DataSourceConfigLbacRules extends pulumi.CustomResource {
    /**
     * Get an existing DataSourceConfigLbacRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSourceConfigLbacRulesState, opts?: pulumi.CustomResourceOptions): DataSourceConfigLbacRules {
        return new DataSourceConfigLbacRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:enterprise/dataSourceConfigLbacRules:DataSourceConfigLbacRules';

    /**
     * Returns true if the given object is an instance of DataSourceConfigLbacRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSourceConfigLbacRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSourceConfigLbacRules.__pulumiType;
    }

    /**
     * The UID of the datasource.
     */
    public readonly datasourceUid!: pulumi.Output<string>;
    /**
     * JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
     */
    public readonly rules!: pulumi.Output<string>;

    /**
     * Create a DataSourceConfigLbacRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSourceConfigLbacRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSourceConfigLbacRulesArgs | DataSourceConfigLbacRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataSourceConfigLbacRulesState | undefined;
            resourceInputs["datasourceUid"] = state ? state.datasourceUid : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
        } else {
            const args = argsOrState as DataSourceConfigLbacRulesArgs | undefined;
            if ((!args || args.datasourceUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'datasourceUid'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["datasourceUid"] = args ? args.datasourceUid : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataSourceConfigLbacRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataSourceConfigLbacRules resources.
 */
export interface DataSourceConfigLbacRulesState {
    /**
     * The UID of the datasource.
     */
    datasourceUid?: pulumi.Input<string>;
    /**
     * JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
     */
    rules?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataSourceConfigLbacRules resource.
 */
export interface DataSourceConfigLbacRulesArgs {
    /**
     * The UID of the datasource.
     */
    datasourceUid: pulumi.Input<string>;
    /**
     * JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
     */
    rules: pulumi.Input<string>;
}
