// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * **Note:** This resource is available only with Grafana Enterprise.
 *
 * * [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-scim-provisioning/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const _default = new grafana.enterprise.ScimConfig("default", {
 *     enableUserSync: true,
 *     enableGroupSync: false,
 *     allowNonProvisionedUsers: false,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:enterprise/scimConfig:ScimConfig name ""
 * ```
 *
 * ```sh
 * $ pulumi import grafana:enterprise/scimConfig:ScimConfig name "{{ orgID }}"
 * ```
 */
export class ScimConfig extends pulumi.CustomResource {
    /**
     * Get an existing ScimConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScimConfigState, opts?: pulumi.CustomResourceOptions): ScimConfig {
        return new ScimConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:enterprise/scimConfig:ScimConfig';

    /**
     * Returns true if the given object is an instance of ScimConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScimConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScimConfig.__pulumiType;
    }

    /**
     * Whether to allow non-provisioned users to access Grafana.
     */
    public readonly allowNonProvisionedUsers!: pulumi.Output<boolean>;
    /**
     * Whether group synchronization is enabled.
     */
    public readonly enableGroupSync!: pulumi.Output<boolean>;
    /**
     * Whether user synchronization is enabled.
     */
    public readonly enableUserSync!: pulumi.Output<boolean>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;

    /**
     * Create a ScimConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScimConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScimConfigArgs | ScimConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScimConfigState | undefined;
            resourceInputs["allowNonProvisionedUsers"] = state ? state.allowNonProvisionedUsers : undefined;
            resourceInputs["enableGroupSync"] = state ? state.enableGroupSync : undefined;
            resourceInputs["enableUserSync"] = state ? state.enableUserSync : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
        } else {
            const args = argsOrState as ScimConfigArgs | undefined;
            if ((!args || args.allowNonProvisionedUsers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowNonProvisionedUsers'");
            }
            if ((!args || args.enableGroupSync === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableGroupSync'");
            }
            if ((!args || args.enableUserSync === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableUserSync'");
            }
            resourceInputs["allowNonProvisionedUsers"] = args ? args.allowNonProvisionedUsers : undefined;
            resourceInputs["enableGroupSync"] = args ? args.enableGroupSync : undefined;
            resourceInputs["enableUserSync"] = args ? args.enableUserSync : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScimConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScimConfig resources.
 */
export interface ScimConfigState {
    /**
     * Whether to allow non-provisioned users to access Grafana.
     */
    allowNonProvisionedUsers?: pulumi.Input<boolean>;
    /**
     * Whether group synchronization is enabled.
     */
    enableGroupSync?: pulumi.Input<boolean>;
    /**
     * Whether user synchronization is enabled.
     */
    enableUserSync?: pulumi.Input<boolean>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScimConfig resource.
 */
export interface ScimConfigArgs {
    /**
     * Whether to allow non-provisioned users to access Grafana.
     */
    allowNonProvisionedUsers: pulumi.Input<boolean>;
    /**
     * Whether group synchronization is enabled.
     */
    enableGroupSync: pulumi.Input<boolean>;
    /**
     * Whether user synchronization is enabled.
     */
    enableUserSync: pulumi.Input<boolean>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
}
