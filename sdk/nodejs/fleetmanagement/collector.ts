// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Grafana Fleet Management collectors.
 *
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
 * * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/collector-api/)
 *
 * Required access policy scopes:
 *
 * * fleet-management:read
 * * fleet-management:write
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:fleetManagement/collector:Collector name "{{ id }}"
 * ```
 */
export class Collector extends pulumi.CustomResource {
    /**
     * Get an existing Collector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CollectorState, opts?: pulumi.CustomResourceOptions): Collector {
        return new Collector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:fleetManagement/collector:Collector';

    /**
     * Returns true if the given object is an instance of Collector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Collector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Collector.__pulumiType;
    }

    /**
     * Whether remote configuration for the collector is enabled or not. If the collector is disabled, it will receive empty configurations from the Fleet Management service
     */
    declare public readonly enabled: pulumi.Output<boolean>;
    /**
     * Remote attributes for the collector
     */
    declare public readonly remoteAttributes: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Collector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CollectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CollectorArgs | CollectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CollectorState | undefined;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["remoteAttributes"] = state?.remoteAttributes;
        } else {
            const args = argsOrState as CollectorArgs | undefined;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["remoteAttributes"] = args?.remoteAttributes;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Collector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Collector resources.
 */
export interface CollectorState {
    /**
     * Whether remote configuration for the collector is enabled or not. If the collector is disabled, it will receive empty configurations from the Fleet Management service
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Remote attributes for the collector
     */
    remoteAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Collector resource.
 */
export interface CollectorArgs {
    /**
     * Whether remote configuration for the collector is enabled or not. If the collector is disabled, it will receive empty configurations from the Fleet Management service
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Remote attributes for the collector
     */
    remoteAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
