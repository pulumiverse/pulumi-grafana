// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#stacks/)
 *
 * Required access policy scopes:
 *
 * * stacks:read
 * * stacks:write
 * * stacks:delete
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.cloud.Stack("test", {
 *     name: "gcloudstacktest",
 *     slug: "gcloudstacktest",
 *     regionSlug: "eu",
 *     description: "Test Grafana Cloud Stack",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:index/cloudStack:CloudStack name "{{ stackSlugOrID }}"
 * ```
 *
 * @deprecated grafana.index/cloudstack.CloudStack has been deprecated in favor of grafana.cloud/stack.Stack
 */
export class CloudStack extends pulumi.CustomResource {
    /**
     * Get an existing CloudStack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudStackState, opts?: pulumi.CustomResourceOptions): CloudStack {
        pulumi.log.warn("CloudStack is deprecated: grafana.index/cloudstack.CloudStack has been deprecated in favor of grafana.cloud/stack.Stack")
        return new CloudStack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/cloudStack:CloudStack';

    /**
     * Returns true if the given object is an instance of CloudStack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudStack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudStack.__pulumiType;
    }

    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Alertmanager instances (Optional)
     */
    public /*out*/ readonly alertmanagerIpAllowListCname!: pulumi.Output<string>;
    /**
     * Name of the Alertmanager instance configured for this stack.
     */
    public /*out*/ readonly alertmanagerName!: pulumi.Output<string>;
    /**
     * Status of the Alertmanager instance configured for this stack.
     */
    public /*out*/ readonly alertmanagerStatus!: pulumi.Output<string>;
    /**
     * Base URL of the Alertmanager instance configured for this stack.
     */
    public /*out*/ readonly alertmanagerUrl!: pulumi.Output<string>;
    /**
     * User ID of the Alertmanager instance configured for this stack.
     */
    public /*out*/ readonly alertmanagerUserId!: pulumi.Output<number>;
    /**
     * Slug of the cluster where this stack resides.
     */
    public /*out*/ readonly clusterSlug!: pulumi.Output<string>;
    /**
     * Description of stack.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the Fleet Management instance configured for this stack.
     */
    public /*out*/ readonly fleetManagementName!: pulumi.Output<string>;
    /**
     * Status of the Fleet Management instance configured for this stack.
     */
    public /*out*/ readonly fleetManagementStatus!: pulumi.Output<string>;
    /**
     * Base URL of the Fleet Management instance configured for this stack.
     */
    public /*out*/ readonly fleetManagementUrl!: pulumi.Output<string>;
    /**
     * User ID of the Fleet Management instance configured for this stack.
     */
    public /*out*/ readonly fleetManagementUserId!: pulumi.Output<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the grafana instance (Optional)
     */
    public /*out*/ readonly grafanasIpAllowListCname!: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Graphite instance (Optional)
     */
    public /*out*/ readonly graphiteIpAllowListCname!: pulumi.Output<string>;
    public /*out*/ readonly graphiteName!: pulumi.Output<string>;
    /**
     * Private DNS for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly graphitePrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly graphitePrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    public /*out*/ readonly graphiteStatus!: pulumi.Output<string>;
    public /*out*/ readonly graphiteUrl!: pulumi.Output<string>;
    public /*out*/ readonly graphiteUserId!: pulumi.Output<number>;
    /**
     * Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheusUserId` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
     */
    public /*out*/ readonly influxUrl!: pulumi.Output<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Logs instance (Optional)
     */
    public /*out*/ readonly logsIpAllowListCname!: pulumi.Output<string>;
    public /*out*/ readonly logsName!: pulumi.Output<string>;
    /**
     * Private DNS for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly logsPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly logsPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    public /*out*/ readonly logsStatus!: pulumi.Output<string>;
    public /*out*/ readonly logsUrl!: pulumi.Output<string>;
    public /*out*/ readonly logsUserId!: pulumi.Output<number>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Base URL of the OnCall API instance configured for this stack.
     */
    public /*out*/ readonly oncallApiUrl!: pulumi.Output<string>;
    /**
     * Organization id to assign to this stack.
     */
    public /*out*/ readonly orgId!: pulumi.Output<number>;
    /**
     * Organization name to assign to this stack.
     */
    public /*out*/ readonly orgName!: pulumi.Output<string>;
    /**
     * Organization slug to assign to this stack.
     */
    public /*out*/ readonly orgSlug!: pulumi.Output<string>;
    /**
     * Private DNS for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly otlpPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly otlpPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    /**
     * Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
     */
    public /*out*/ readonly otlpUrl!: pulumi.Output<string>;
    /**
     * Private DNS for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly pdcApiPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly pdcApiPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    /**
     * Private DNS for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly pdcGatewayPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly pdcGatewayPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Profiles instance (Optional)
     */
    public /*out*/ readonly profilesIpAllowListCname!: pulumi.Output<string>;
    public /*out*/ readonly profilesName!: pulumi.Output<string>;
    /**
     * Private DNS for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly profilesPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly profilesPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    public /*out*/ readonly profilesStatus!: pulumi.Output<string>;
    public /*out*/ readonly profilesUrl!: pulumi.Output<string>;
    public /*out*/ readonly profilesUserId!: pulumi.Output<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Prometheus instance (Optional)
     */
    public /*out*/ readonly prometheusIpAllowListCname!: pulumi.Output<string>;
    /**
     * Prometheus name for this instance.
     */
    public /*out*/ readonly prometheusName!: pulumi.Output<string>;
    /**
     * Private DNS for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly prometheusPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly prometheusPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    /**
     * Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     */
    public /*out*/ readonly prometheusRemoteEndpoint!: pulumi.Output<string>;
    /**
     * Use this URL to send prometheus metrics to Grafana cloud
     */
    public /*out*/ readonly prometheusRemoteWriteEndpoint!: pulumi.Output<string>;
    /**
     * Prometheus status for this instance.
     */
    public /*out*/ readonly prometheusStatus!: pulumi.Output<string>;
    /**
     * Prometheus url for this instance.
     */
    public /*out*/ readonly prometheusUrl!: pulumi.Output<string>;
    /**
     * Prometheus user ID. Used for e.g. remote_write.
     */
    public /*out*/ readonly prometheusUserId!: pulumi.Output<number>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    public readonly regionSlug!: pulumi.Output<string | undefined>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    public readonly slug!: pulumi.Output<string>;
    /**
     * Status of the stack.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Traces instance (Optional)
     */
    public /*out*/ readonly tracesIpAllowListCname!: pulumi.Output<string>;
    public /*out*/ readonly tracesName!: pulumi.Output<string>;
    /**
     * Private DNS for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly tracesPrivateConnectivityInfoPrivateDns!: pulumi.Output<string>;
    /**
     * Service Name for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    public /*out*/ readonly tracesPrivateConnectivityInfoServiceName!: pulumi.Output<string>;
    public /*out*/ readonly tracesStatus!: pulumi.Output<string>;
    /**
     * Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
     */
    public /*out*/ readonly tracesUrl!: pulumi.Output<string>;
    public /*out*/ readonly tracesUserId!: pulumi.Output<number>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    public readonly waitForReadiness!: pulumi.Output<boolean | undefined>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    public readonly waitForReadinessTimeout!: pulumi.Output<string | undefined>;

    /**
     * Create a CloudStack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated grafana.index/cloudstack.CloudStack has been deprecated in favor of grafana.cloud/stack.Stack */
    constructor(name: string, args: CloudStackArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated grafana.index/cloudstack.CloudStack has been deprecated in favor of grafana.cloud/stack.Stack */
    constructor(name: string, argsOrState?: CloudStackArgs | CloudStackState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("CloudStack is deprecated: grafana.index/cloudstack.CloudStack has been deprecated in favor of grafana.cloud/stack.Stack")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudStackState | undefined;
            resourceInputs["alertmanagerIpAllowListCname"] = state ? state.alertmanagerIpAllowListCname : undefined;
            resourceInputs["alertmanagerName"] = state ? state.alertmanagerName : undefined;
            resourceInputs["alertmanagerStatus"] = state ? state.alertmanagerStatus : undefined;
            resourceInputs["alertmanagerUrl"] = state ? state.alertmanagerUrl : undefined;
            resourceInputs["alertmanagerUserId"] = state ? state.alertmanagerUserId : undefined;
            resourceInputs["clusterSlug"] = state ? state.clusterSlug : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fleetManagementName"] = state ? state.fleetManagementName : undefined;
            resourceInputs["fleetManagementStatus"] = state ? state.fleetManagementStatus : undefined;
            resourceInputs["fleetManagementUrl"] = state ? state.fleetManagementUrl : undefined;
            resourceInputs["fleetManagementUserId"] = state ? state.fleetManagementUserId : undefined;
            resourceInputs["grafanasIpAllowListCname"] = state ? state.grafanasIpAllowListCname : undefined;
            resourceInputs["graphiteIpAllowListCname"] = state ? state.graphiteIpAllowListCname : undefined;
            resourceInputs["graphiteName"] = state ? state.graphiteName : undefined;
            resourceInputs["graphitePrivateConnectivityInfoPrivateDns"] = state ? state.graphitePrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["graphitePrivateConnectivityInfoServiceName"] = state ? state.graphitePrivateConnectivityInfoServiceName : undefined;
            resourceInputs["graphiteStatus"] = state ? state.graphiteStatus : undefined;
            resourceInputs["graphiteUrl"] = state ? state.graphiteUrl : undefined;
            resourceInputs["graphiteUserId"] = state ? state.graphiteUserId : undefined;
            resourceInputs["influxUrl"] = state ? state.influxUrl : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["logsIpAllowListCname"] = state ? state.logsIpAllowListCname : undefined;
            resourceInputs["logsName"] = state ? state.logsName : undefined;
            resourceInputs["logsPrivateConnectivityInfoPrivateDns"] = state ? state.logsPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["logsPrivateConnectivityInfoServiceName"] = state ? state.logsPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["logsStatus"] = state ? state.logsStatus : undefined;
            resourceInputs["logsUrl"] = state ? state.logsUrl : undefined;
            resourceInputs["logsUserId"] = state ? state.logsUserId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oncallApiUrl"] = state ? state.oncallApiUrl : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["orgName"] = state ? state.orgName : undefined;
            resourceInputs["orgSlug"] = state ? state.orgSlug : undefined;
            resourceInputs["otlpPrivateConnectivityInfoPrivateDns"] = state ? state.otlpPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["otlpPrivateConnectivityInfoServiceName"] = state ? state.otlpPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["otlpUrl"] = state ? state.otlpUrl : undefined;
            resourceInputs["pdcApiPrivateConnectivityInfoPrivateDns"] = state ? state.pdcApiPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["pdcApiPrivateConnectivityInfoServiceName"] = state ? state.pdcApiPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["pdcGatewayPrivateConnectivityInfoPrivateDns"] = state ? state.pdcGatewayPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["pdcGatewayPrivateConnectivityInfoServiceName"] = state ? state.pdcGatewayPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["profilesIpAllowListCname"] = state ? state.profilesIpAllowListCname : undefined;
            resourceInputs["profilesName"] = state ? state.profilesName : undefined;
            resourceInputs["profilesPrivateConnectivityInfoPrivateDns"] = state ? state.profilesPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["profilesPrivateConnectivityInfoServiceName"] = state ? state.profilesPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["profilesStatus"] = state ? state.profilesStatus : undefined;
            resourceInputs["profilesUrl"] = state ? state.profilesUrl : undefined;
            resourceInputs["profilesUserId"] = state ? state.profilesUserId : undefined;
            resourceInputs["prometheusIpAllowListCname"] = state ? state.prometheusIpAllowListCname : undefined;
            resourceInputs["prometheusName"] = state ? state.prometheusName : undefined;
            resourceInputs["prometheusPrivateConnectivityInfoPrivateDns"] = state ? state.prometheusPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["prometheusPrivateConnectivityInfoServiceName"] = state ? state.prometheusPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["prometheusRemoteEndpoint"] = state ? state.prometheusRemoteEndpoint : undefined;
            resourceInputs["prometheusRemoteWriteEndpoint"] = state ? state.prometheusRemoteWriteEndpoint : undefined;
            resourceInputs["prometheusStatus"] = state ? state.prometheusStatus : undefined;
            resourceInputs["prometheusUrl"] = state ? state.prometheusUrl : undefined;
            resourceInputs["prometheusUserId"] = state ? state.prometheusUserId : undefined;
            resourceInputs["regionSlug"] = state ? state.regionSlug : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tracesIpAllowListCname"] = state ? state.tracesIpAllowListCname : undefined;
            resourceInputs["tracesName"] = state ? state.tracesName : undefined;
            resourceInputs["tracesPrivateConnectivityInfoPrivateDns"] = state ? state.tracesPrivateConnectivityInfoPrivateDns : undefined;
            resourceInputs["tracesPrivateConnectivityInfoServiceName"] = state ? state.tracesPrivateConnectivityInfoServiceName : undefined;
            resourceInputs["tracesStatus"] = state ? state.tracesStatus : undefined;
            resourceInputs["tracesUrl"] = state ? state.tracesUrl : undefined;
            resourceInputs["tracesUserId"] = state ? state.tracesUserId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["waitForReadiness"] = state ? state.waitForReadiness : undefined;
            resourceInputs["waitForReadinessTimeout"] = state ? state.waitForReadinessTimeout : undefined;
        } else {
            const args = argsOrState as CloudStackArgs | undefined;
            if ((!args || args.slug === undefined) && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["regionSlug"] = args ? args.regionSlug : undefined;
            resourceInputs["slug"] = args ? args.slug : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["waitForReadiness"] = args ? args.waitForReadiness : undefined;
            resourceInputs["waitForReadinessTimeout"] = args ? args.waitForReadinessTimeout : undefined;
            resourceInputs["alertmanagerIpAllowListCname"] = undefined /*out*/;
            resourceInputs["alertmanagerName"] = undefined /*out*/;
            resourceInputs["alertmanagerStatus"] = undefined /*out*/;
            resourceInputs["alertmanagerUrl"] = undefined /*out*/;
            resourceInputs["alertmanagerUserId"] = undefined /*out*/;
            resourceInputs["clusterSlug"] = undefined /*out*/;
            resourceInputs["fleetManagementName"] = undefined /*out*/;
            resourceInputs["fleetManagementStatus"] = undefined /*out*/;
            resourceInputs["fleetManagementUrl"] = undefined /*out*/;
            resourceInputs["fleetManagementUserId"] = undefined /*out*/;
            resourceInputs["grafanasIpAllowListCname"] = undefined /*out*/;
            resourceInputs["graphiteIpAllowListCname"] = undefined /*out*/;
            resourceInputs["graphiteName"] = undefined /*out*/;
            resourceInputs["graphitePrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["graphitePrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["graphiteStatus"] = undefined /*out*/;
            resourceInputs["graphiteUrl"] = undefined /*out*/;
            resourceInputs["graphiteUserId"] = undefined /*out*/;
            resourceInputs["influxUrl"] = undefined /*out*/;
            resourceInputs["logsIpAllowListCname"] = undefined /*out*/;
            resourceInputs["logsName"] = undefined /*out*/;
            resourceInputs["logsPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["logsPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["logsStatus"] = undefined /*out*/;
            resourceInputs["logsUrl"] = undefined /*out*/;
            resourceInputs["logsUserId"] = undefined /*out*/;
            resourceInputs["oncallApiUrl"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["orgName"] = undefined /*out*/;
            resourceInputs["orgSlug"] = undefined /*out*/;
            resourceInputs["otlpPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["otlpPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["otlpUrl"] = undefined /*out*/;
            resourceInputs["pdcApiPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["pdcApiPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["pdcGatewayPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["pdcGatewayPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["profilesIpAllowListCname"] = undefined /*out*/;
            resourceInputs["profilesName"] = undefined /*out*/;
            resourceInputs["profilesPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["profilesPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["profilesStatus"] = undefined /*out*/;
            resourceInputs["profilesUrl"] = undefined /*out*/;
            resourceInputs["profilesUserId"] = undefined /*out*/;
            resourceInputs["prometheusIpAllowListCname"] = undefined /*out*/;
            resourceInputs["prometheusName"] = undefined /*out*/;
            resourceInputs["prometheusPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["prometheusPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["prometheusRemoteEndpoint"] = undefined /*out*/;
            resourceInputs["prometheusRemoteWriteEndpoint"] = undefined /*out*/;
            resourceInputs["prometheusStatus"] = undefined /*out*/;
            resourceInputs["prometheusUrl"] = undefined /*out*/;
            resourceInputs["prometheusUserId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tracesIpAllowListCname"] = undefined /*out*/;
            resourceInputs["tracesName"] = undefined /*out*/;
            resourceInputs["tracesPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["tracesPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["tracesStatus"] = undefined /*out*/;
            resourceInputs["tracesUrl"] = undefined /*out*/;
            resourceInputs["tracesUserId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudStack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudStack resources.
 */
export interface CloudStackState {
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Alertmanager instances (Optional)
     */
    alertmanagerIpAllowListCname?: pulumi.Input<string>;
    /**
     * Name of the Alertmanager instance configured for this stack.
     */
    alertmanagerName?: pulumi.Input<string>;
    /**
     * Status of the Alertmanager instance configured for this stack.
     */
    alertmanagerStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Alertmanager instance configured for this stack.
     */
    alertmanagerUrl?: pulumi.Input<string>;
    /**
     * User ID of the Alertmanager instance configured for this stack.
     */
    alertmanagerUserId?: pulumi.Input<number>;
    /**
     * Slug of the cluster where this stack resides.
     */
    clusterSlug?: pulumi.Input<string>;
    /**
     * Description of stack.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Fleet Management instance configured for this stack.
     */
    fleetManagementName?: pulumi.Input<string>;
    /**
     * Status of the Fleet Management instance configured for this stack.
     */
    fleetManagementStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Fleet Management instance configured for this stack.
     */
    fleetManagementUrl?: pulumi.Input<string>;
    /**
     * User ID of the Fleet Management instance configured for this stack.
     */
    fleetManagementUserId?: pulumi.Input<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the grafana instance (Optional)
     */
    grafanasIpAllowListCname?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Graphite instance (Optional)
     */
    graphiteIpAllowListCname?: pulumi.Input<string>;
    graphiteName?: pulumi.Input<string>;
    /**
     * Private DNS for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    graphitePrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    graphitePrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    graphiteStatus?: pulumi.Input<string>;
    graphiteUrl?: pulumi.Input<string>;
    graphiteUserId?: pulumi.Input<number>;
    /**
     * Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheusUserId` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
     */
    influxUrl?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Logs instance (Optional)
     */
    logsIpAllowListCname?: pulumi.Input<string>;
    logsName?: pulumi.Input<string>;
    /**
     * Private DNS for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    logsPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    logsPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    logsStatus?: pulumi.Input<string>;
    logsUrl?: pulumi.Input<string>;
    logsUserId?: pulumi.Input<number>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    name?: pulumi.Input<string>;
    /**
     * Base URL of the OnCall API instance configured for this stack.
     */
    oncallApiUrl?: pulumi.Input<string>;
    /**
     * Organization id to assign to this stack.
     */
    orgId?: pulumi.Input<number>;
    /**
     * Organization name to assign to this stack.
     */
    orgName?: pulumi.Input<string>;
    /**
     * Organization slug to assign to this stack.
     */
    orgSlug?: pulumi.Input<string>;
    /**
     * Private DNS for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    otlpPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    otlpPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
     */
    otlpUrl?: pulumi.Input<string>;
    /**
     * Private DNS for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    pdcApiPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    pdcApiPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Private DNS for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    pdcGatewayPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    pdcGatewayPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Profiles instance (Optional)
     */
    profilesIpAllowListCname?: pulumi.Input<string>;
    profilesName?: pulumi.Input<string>;
    /**
     * Private DNS for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    profilesPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    profilesPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    profilesStatus?: pulumi.Input<string>;
    profilesUrl?: pulumi.Input<string>;
    profilesUserId?: pulumi.Input<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Prometheus instance (Optional)
     */
    prometheusIpAllowListCname?: pulumi.Input<string>;
    /**
     * Prometheus name for this instance.
     */
    prometheusName?: pulumi.Input<string>;
    /**
     * Private DNS for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    prometheusPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    prometheusPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     */
    prometheusRemoteEndpoint?: pulumi.Input<string>;
    /**
     * Use this URL to send prometheus metrics to Grafana cloud
     */
    prometheusRemoteWriteEndpoint?: pulumi.Input<string>;
    /**
     * Prometheus status for this instance.
     */
    prometheusStatus?: pulumi.Input<string>;
    /**
     * Prometheus url for this instance.
     */
    prometheusUrl?: pulumi.Input<string>;
    /**
     * Prometheus user ID. Used for e.g. remote_write.
     */
    prometheusUserId?: pulumi.Input<number>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    regionSlug?: pulumi.Input<string>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    slug?: pulumi.Input<string>;
    /**
     * Status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Traces instance (Optional)
     */
    tracesIpAllowListCname?: pulumi.Input<string>;
    tracesName?: pulumi.Input<string>;
    /**
     * Private DNS for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    tracesPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    tracesPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    tracesStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
     */
    tracesUrl?: pulumi.Input<string>;
    tracesUserId?: pulumi.Input<number>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    url?: pulumi.Input<string>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    waitForReadiness?: pulumi.Input<boolean>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    waitForReadinessTimeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudStack resource.
 */
export interface CloudStackArgs {
    /**
     * Description of stack.
     */
    description?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    name?: pulumi.Input<string>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    regionSlug?: pulumi.Input<string>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    slug: pulumi.Input<string>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    url?: pulumi.Input<string>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    waitForReadiness?: pulumi.Input<boolean>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    waitForReadinessTimeout?: pulumi.Input<string>;
}
