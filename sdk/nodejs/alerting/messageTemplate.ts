// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Grafana Alerting notification template groups, including notification templates.
 *
 * * Official documentation
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#notification-template-groups)
 *
 * This resource requires Grafana 9.1.0 or later.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const myTemplate = new grafana.alerting.MessageTemplate("my_template", {
 *     name: "My Notification Template Group",
 *     template: `{{define "custom.message" }}
 *  template content
 * {{ end }}`,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:alerting/messageTemplate:MessageTemplate name "{{ name }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:alerting/messageTemplate:MessageTemplate name "{{ orgID }}:{{ name }}"
 * ```
 */
export class MessageTemplate extends pulumi.CustomResource {
    /**
     * Get an existing MessageTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MessageTemplateState, opts?: pulumi.CustomResourceOptions): MessageTemplate {
        return new MessageTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:alerting/messageTemplate:MessageTemplate';

    /**
     * Returns true if the given object is an instance of MessageTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MessageTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MessageTemplate.__pulumiType;
    }

    public readonly disableProvenance!: pulumi.Output<boolean | undefined>;
    /**
     * The name of the notification template group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * The content of the notification template group.
     */
    public readonly template!: pulumi.Output<string>;

    /**
     * Create a MessageTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MessageTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MessageTemplateArgs | MessageTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MessageTemplateState | undefined;
            resourceInputs["disableProvenance"] = state ? state.disableProvenance : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["template"] = state ? state.template : undefined;
        } else {
            const args = argsOrState as MessageTemplateArgs | undefined;
            if ((!args || args.template === undefined) && !opts.urn) {
                throw new Error("Missing required property 'template'");
            }
            resourceInputs["disableProvenance"] = args ? args.disableProvenance : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["template"] = args ? args.template : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/messageTemplate:MessageTemplate" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MessageTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MessageTemplate resources.
 */
export interface MessageTemplateState {
    disableProvenance?: pulumi.Input<boolean>;
    /**
     * The name of the notification template group.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The content of the notification template group.
     */
    template?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MessageTemplate resource.
 */
export interface MessageTemplateArgs {
    disableProvenance?: pulumi.Input<boolean>;
    /**
     * The name of the notification template group.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The content of the notification template group.
     */
    template: pulumi.Input<string>;
}
