// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertEnrichmentArgs, AlertEnrichmentState } from "./alertEnrichment";
export type AlertEnrichment = import("./alertEnrichment").AlertEnrichment;
export const AlertEnrichment: typeof import("./alertEnrichment").AlertEnrichment = null as any;
utilities.lazyLoad(exports, ["AlertEnrichment"], () => require("./alertEnrichment"));

export { ContactPointArgs, ContactPointState } from "./contactPoint";
export type ContactPoint = import("./contactPoint").ContactPoint;
export const ContactPoint: typeof import("./contactPoint").ContactPoint = null as any;
utilities.lazyLoad(exports, ["ContactPoint"], () => require("./contactPoint"));

export { MessageTemplateArgs, MessageTemplateState } from "./messageTemplate";
export type MessageTemplate = import("./messageTemplate").MessageTemplate;
export const MessageTemplate: typeof import("./messageTemplate").MessageTemplate = null as any;
utilities.lazyLoad(exports, ["MessageTemplate"], () => require("./messageTemplate"));

export { MuteTimingArgs, MuteTimingState } from "./muteTiming";
export type MuteTiming = import("./muteTiming").MuteTiming;
export const MuteTiming: typeof import("./muteTiming").MuteTiming = null as any;
utilities.lazyLoad(exports, ["MuteTiming"], () => require("./muteTiming"));

export { NotificationPolicyArgs, NotificationPolicyState } from "./notificationPolicy";
export type NotificationPolicy = import("./notificationPolicy").NotificationPolicy;
export const NotificationPolicy: typeof import("./notificationPolicy").NotificationPolicy = null as any;
utilities.lazyLoad(exports, ["NotificationPolicy"], () => require("./notificationPolicy"));

export { RuleGroupArgs, RuleGroupState } from "./ruleGroup";
export type RuleGroup = import("./ruleGroup").RuleGroup;
export const RuleGroup: typeof import("./ruleGroup").RuleGroup = null as any;
utilities.lazyLoad(exports, ["RuleGroup"], () => require("./ruleGroup"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:alerting/alertEnrichment:AlertEnrichment":
                return new AlertEnrichment(name, <any>undefined, { urn })
            case "grafana:alerting/contactPoint:ContactPoint":
                return new ContactPoint(name, <any>undefined, { urn })
            case "grafana:alerting/messageTemplate:MessageTemplate":
                return new MessageTemplate(name, <any>undefined, { urn })
            case "grafana:alerting/muteTiming:MuteTiming":
                return new MuteTiming(name, <any>undefined, { urn })
            case "grafana:alerting/notificationPolicy:NotificationPolicy":
                return new NotificationPolicy(name, <any>undefined, { urn })
            case "grafana:alerting/ruleGroup:RuleGroup":
                return new RuleGroup(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "alerting/alertEnrichment", _module)
pulumi.runtime.registerResourceModule("grafana", "alerting/contactPoint", _module)
pulumi.runtime.registerResourceModule("grafana", "alerting/messageTemplate", _module)
pulumi.runtime.registerResourceModule("grafana", "alerting/muteTiming", _module)
pulumi.runtime.registerResourceModule("grafana", "alerting/notificationPolicy", _module)
pulumi.runtime.registerResourceModule("grafana", "alerting/ruleGroup", _module)
