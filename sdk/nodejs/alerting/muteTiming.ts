// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Grafana Alerting mute timings.
 *
 * * Official documentation
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#mute-timings)
 *
 * This resource requires Grafana 9.1.0 or later.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const myMuteTiming = new grafana.alerting.MuteTiming("my_mute_timing", {
 *     name: "My Mute Timing",
 *     intervals: [{
 *         times: [{
 *             start: "04:56",
 *             end: "14:17",
 *         }],
 *         weekdays: [
 *             "monday",
 *             "tuesday:thursday",
 *         ],
 *         daysOfMonths: [
 *             "1:7",
 *             "-1",
 *         ],
 *         months: [
 *             "1:3",
 *             "december",
 *         ],
 *         years: [
 *             "2030",
 *             "2025:2026",
 *         ],
 *         location: "America/New_York",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:alerting/muteTiming:MuteTiming name "{{ name }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:alerting/muteTiming:MuteTiming name "{{ orgID }}:{{ name }}"
 * ```
 */
export class MuteTiming extends pulumi.CustomResource {
    /**
     * Get an existing MuteTiming resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MuteTimingState, opts?: pulumi.CustomResourceOptions): MuteTiming {
        return new MuteTiming(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:alerting/muteTiming:MuteTiming';

    /**
     * Returns true if the given object is an instance of MuteTiming.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MuteTiming {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MuteTiming.__pulumiType;
    }

    declare public readonly disableProvenance: pulumi.Output<boolean | undefined>;
    /**
     * The time intervals at which to mute notifications. Use an empty block to mute all the time.
     */
    declare public readonly intervals: pulumi.Output<outputs.alerting.MuteTimingInterval[] | undefined>;
    /**
     * The name of the mute timing.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;

    /**
     * Create a MuteTiming resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MuteTimingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MuteTimingArgs | MuteTimingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MuteTimingState | undefined;
            resourceInputs["disableProvenance"] = state?.disableProvenance;
            resourceInputs["intervals"] = state?.intervals;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
        } else {
            const args = argsOrState as MuteTimingArgs | undefined;
            resourceInputs["disableProvenance"] = args?.disableProvenance;
            resourceInputs["intervals"] = args?.intervals;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/muteTiming:MuteTiming" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(MuteTiming.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MuteTiming resources.
 */
export interface MuteTimingState {
    disableProvenance?: pulumi.Input<boolean>;
    /**
     * The time intervals at which to mute notifications. Use an empty block to mute all the time.
     */
    intervals?: pulumi.Input<pulumi.Input<inputs.alerting.MuteTimingInterval>[]>;
    /**
     * The name of the mute timing.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MuteTiming resource.
 */
export interface MuteTimingArgs {
    disableProvenance?: pulumi.Input<boolean>;
    /**
     * The time intervals at which to mute notifications. Use an empty block to mute all the time.
     */
    intervals?: pulumi.Input<pulumi.Input<inputs.alerting.MuteTimingInterval>[]>;
    /**
     * The name of the mute timing.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
}
