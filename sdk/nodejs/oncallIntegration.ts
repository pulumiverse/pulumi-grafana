// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * * [Official documentation](https://grafana.com/docs/oncall/latest/integrations/)
 * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test_acc_integration = new grafana.oncall.Integration("test-acc-integration", {
 *     name: "my integration",
 *     type: "grafana",
 *     defaultRoute: {},
 * });
 * // Also it's possible to manage integration templates.
 * // Check docs to see all available templates.
 * const integrationWithTemplates = new grafana.oncall.Integration("integration_with_templates", {
 *     name: "integration_with_templates",
 *     type: "webhook",
 *     defaultRoute: {},
 *     templates: {
 *         groupingKey: "{{ payload.group_id }}",
 *         slack: {
 *             title: "Slack title",
 *             message: `This is example of multiline template
 * {{ payload.message }}
 * `,
 *             imageUrl: "{{ payload.image_url }}",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:index/oncallIntegration:OncallIntegration name "{{ id }}"
 * ```
 *
 * @deprecated grafana.index/oncallintegration.OncallIntegration has been deprecated in favor of grafana.oncall/integration.Integration
 */
export class OncallIntegration extends pulumi.CustomResource {
    /**
     * Get an existing OncallIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OncallIntegrationState, opts?: pulumi.CustomResourceOptions): OncallIntegration {
        pulumi.log.warn("OncallIntegration is deprecated: grafana.index/oncallintegration.OncallIntegration has been deprecated in favor of grafana.oncall/integration.Integration")
        return new OncallIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/oncallIntegration:OncallIntegration';

    /**
     * Returns true if the given object is an instance of OncallIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OncallIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OncallIntegration.__pulumiType;
    }

    /**
     * The Default route for all alerts from the given integration
     */
    public readonly defaultRoute!: pulumi.Output<outputs.OncallIntegrationDefaultRoute>;
    /**
     * The link for using in an integrated tool.
     */
    public /*out*/ readonly link!: pulumi.Output<string>;
    /**
     * The name of the service integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.onCall.getTeam` datasource.
     */
    public readonly teamId!: pulumi.Output<string | undefined>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    public readonly templates!: pulumi.Output<outputs.OncallIntegrationTemplates | undefined>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a OncallIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    /** @deprecated grafana.index/oncallintegration.OncallIntegration has been deprecated in favor of grafana.oncall/integration.Integration */
    constructor(name: string, args: OncallIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    /** @deprecated grafana.index/oncallintegration.OncallIntegration has been deprecated in favor of grafana.oncall/integration.Integration */
    constructor(name: string, argsOrState?: OncallIntegrationArgs | OncallIntegrationState, opts?: pulumi.CustomResourceOptions) {
        pulumi.log.warn("OncallIntegration is deprecated: grafana.index/oncallintegration.OncallIntegration has been deprecated in favor of grafana.oncall/integration.Integration")
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OncallIntegrationState | undefined;
            resourceInputs["defaultRoute"] = state ? state.defaultRoute : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as OncallIntegrationArgs | undefined;
            if ((!args || args.defaultRoute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultRoute'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["defaultRoute"] = args ? args.defaultRoute : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["link"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OncallIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OncallIntegration resources.
 */
export interface OncallIntegrationState {
    /**
     * The Default route for all alerts from the given integration
     */
    defaultRoute?: pulumi.Input<inputs.OncallIntegrationDefaultRoute>;
    /**
     * The link for using in an integrated tool.
     */
    link?: pulumi.Input<string>;
    /**
     * The name of the service integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.onCall.getTeam` datasource.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    templates?: pulumi.Input<inputs.OncallIntegrationTemplates>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OncallIntegration resource.
 */
export interface OncallIntegrationArgs {
    /**
     * The Default route for all alerts from the given integration
     */
    defaultRoute: pulumi.Input<inputs.OncallIntegrationDefaultRoute>;
    /**
     * The name of the service integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `grafana.onCall.getTeam` datasource.
     */
    teamId?: pulumi.Input<string>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    templates?: pulumi.Input<inputs.OncallIntegrationTemplates>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira.
     */
    type: pulumi.Input<string>;
}
