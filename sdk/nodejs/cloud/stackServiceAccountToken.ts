// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages service account tokens of a Grafana Cloud stack using the Cloud API
 * This can be used to bootstrap a management service account token for a new stack
 *
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/service-accounts/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/serviceaccount/#service-account-api)
 *
 * Required access policy scopes:
 *
 * * stack-service-accounts:write
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const cloudSa = new grafana.cloud.StackServiceAccount("cloud_sa", {
 *     stackSlug: "<your stack slug>",
 *     name: "cloud service account",
 *     role: "Admin",
 *     isDisabled: false,
 * });
 * const foo = new grafana.cloud.StackServiceAccountToken("foo", {
 *     name: "key_foo",
 *     serviceAccountId: cloudSa.id,
 * });
 * export const serviceAccountTokenFooKey = foo.key;
 * ```
 */
export class StackServiceAccountToken extends pulumi.CustomResource {
    /**
     * Get an existing StackServiceAccountToken resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackServiceAccountTokenState, opts?: pulumi.CustomResourceOptions): StackServiceAccountToken {
        return new StackServiceAccountToken(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:cloud/stackServiceAccountToken:StackServiceAccountToken';

    /**
     * Returns true if the given object is an instance of StackServiceAccountToken.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StackServiceAccountToken {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StackServiceAccountToken.__pulumiType;
    }

    declare public /*out*/ readonly expiration: pulumi.Output<string>;
    declare public /*out*/ readonly hasExpired: pulumi.Output<boolean>;
    declare public /*out*/ readonly key: pulumi.Output<string>;
    declare public readonly name: pulumi.Output<string>;
    declare public readonly secondsToLive: pulumi.Output<number | undefined>;
    declare public readonly serviceAccountId: pulumi.Output<string>;
    declare public readonly stackSlug: pulumi.Output<string>;

    /**
     * Create a StackServiceAccountToken resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackServiceAccountTokenArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackServiceAccountTokenArgs | StackServiceAccountTokenState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackServiceAccountTokenState | undefined;
            resourceInputs["expiration"] = state?.expiration;
            resourceInputs["hasExpired"] = state?.hasExpired;
            resourceInputs["key"] = state?.key;
            resourceInputs["name"] = state?.name;
            resourceInputs["secondsToLive"] = state?.secondsToLive;
            resourceInputs["serviceAccountId"] = state?.serviceAccountId;
            resourceInputs["stackSlug"] = state?.stackSlug;
        } else {
            const args = argsOrState as StackServiceAccountTokenArgs | undefined;
            if (args?.serviceAccountId === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            if (args?.stackSlug === undefined && !opts.urn) {
                throw new Error("Missing required property 'stackSlug'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["secondsToLive"] = args?.secondsToLive;
            resourceInputs["serviceAccountId"] = args?.serviceAccountId;
            resourceInputs["stackSlug"] = args?.stackSlug;
            resourceInputs["expiration"] = undefined /*out*/;
            resourceInputs["hasExpired"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(StackServiceAccountToken.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StackServiceAccountToken resources.
 */
export interface StackServiceAccountTokenState {
    expiration?: pulumi.Input<string>;
    hasExpired?: pulumi.Input<boolean>;
    key?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    secondsToLive?: pulumi.Input<number>;
    serviceAccountId?: pulumi.Input<string>;
    stackSlug?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StackServiceAccountToken resource.
 */
export interface StackServiceAccountTokenArgs {
    name?: pulumi.Input<string>;
    secondsToLive?: pulumi.Input<number>;
    serviceAccountId: pulumi.Input<string>;
    stackSlug: pulumi.Input<string>;
}
