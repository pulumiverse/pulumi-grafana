// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * * [Official documentation](https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#stacks/)
 *
 * Required access policy scopes:
 *
 * * stacks:read
 * * stacks:write
 * * stacks:delete
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.cloud.Stack("test", {
 *     name: "gcloudstacktest",
 *     slug: "gcloudstacktest",
 *     regionSlug: "eu",
 *     description: "Test Grafana Cloud Stack",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:cloud/stack:Stack name "{{ stackSlugOrID }}"
 * ```
 */
export class Stack extends pulumi.CustomResource {
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StackState, opts?: pulumi.CustomResourceOptions): Stack {
        return new Stack(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:cloud/stack:Stack';

    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Stack {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }

    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Alertmanager instances (Optional)
     */
    declare public /*out*/ readonly alertmanagerIpAllowListCname: pulumi.Output<string>;
    /**
     * Name of the Alertmanager instance configured for this stack.
     */
    declare public /*out*/ readonly alertmanagerName: pulumi.Output<string>;
    /**
     * Status of the Alertmanager instance configured for this stack.
     */
    declare public /*out*/ readonly alertmanagerStatus: pulumi.Output<string>;
    /**
     * Base URL of the Alertmanager instance configured for this stack.
     */
    declare public /*out*/ readonly alertmanagerUrl: pulumi.Output<string>;
    /**
     * User ID of the Alertmanager instance configured for this stack.
     */
    declare public /*out*/ readonly alertmanagerUserId: pulumi.Output<number>;
    /**
     * Slug of the cluster where this stack resides.
     */
    declare public /*out*/ readonly clusterSlug: pulumi.Output<string>;
    /**
     * Whether to enable delete protection for the stack, preventing accidental deletion. Defaults to `true`.
     */
    declare public readonly deleteProtection: pulumi.Output<boolean | undefined>;
    /**
     * Description of stack.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Name of the Fleet Management instance configured for this stack.
     */
    declare public /*out*/ readonly fleetManagementName: pulumi.Output<string>;
    /**
     * Private DNS for Fleet Management when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly fleetManagementPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Fleet Management when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly fleetManagementPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    /**
     * Status of the Fleet Management instance configured for this stack.
     */
    declare public /*out*/ readonly fleetManagementStatus: pulumi.Output<string>;
    /**
     * Base URL of the Fleet Management instance configured for this stack.
     */
    declare public /*out*/ readonly fleetManagementUrl: pulumi.Output<string>;
    /**
     * User ID of the Fleet Management instance configured for this stack.
     */
    declare public /*out*/ readonly fleetManagementUserId: pulumi.Output<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the grafana instance (Optional)
     */
    declare public /*out*/ readonly grafanasIpAllowListCname: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Graphite instance (Optional)
     */
    declare public /*out*/ readonly graphiteIpAllowListCname: pulumi.Output<string>;
    declare public /*out*/ readonly graphiteName: pulumi.Output<string>;
    /**
     * Private DNS for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly graphitePrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly graphitePrivateConnectivityInfoServiceName: pulumi.Output<string>;
    declare public /*out*/ readonly graphiteStatus: pulumi.Output<string>;
    declare public /*out*/ readonly graphiteUrl: pulumi.Output<string>;
    declare public /*out*/ readonly graphiteUserId: pulumi.Output<number>;
    /**
     * Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheusUserId` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
     */
    declare public /*out*/ readonly influxUrl: pulumi.Output<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    declare public readonly labels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Logs instance (Optional)
     */
    declare public /*out*/ readonly logsIpAllowListCname: pulumi.Output<string>;
    declare public /*out*/ readonly logsName: pulumi.Output<string>;
    /**
     * Private DNS for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly logsPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly logsPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    declare public /*out*/ readonly logsStatus: pulumi.Output<string>;
    declare public /*out*/ readonly logsUrl: pulumi.Output<string>;
    declare public /*out*/ readonly logsUserId: pulumi.Output<number>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Base URL of the OnCall API instance configured for this stack.
     */
    declare public /*out*/ readonly oncallApiUrl: pulumi.Output<string>;
    /**
     * Organization id to assign to this stack.
     */
    declare public /*out*/ readonly orgId: pulumi.Output<number>;
    /**
     * Organization name to assign to this stack.
     */
    declare public /*out*/ readonly orgName: pulumi.Output<string>;
    /**
     * Organization slug to assign to this stack.
     */
    declare public /*out*/ readonly orgSlug: pulumi.Output<string>;
    /**
     * Private DNS for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly otlpPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly otlpPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    /**
     * Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
     */
    declare public /*out*/ readonly otlpUrl: pulumi.Output<string>;
    /**
     * Private DNS for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly pdcApiPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly pdcApiPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    /**
     * Private DNS for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly pdcGatewayPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly pdcGatewayPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Profiles instance (Optional)
     */
    declare public /*out*/ readonly profilesIpAllowListCname: pulumi.Output<string>;
    declare public /*out*/ readonly profilesName: pulumi.Output<string>;
    /**
     * Private DNS for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly profilesPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly profilesPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    declare public /*out*/ readonly profilesStatus: pulumi.Output<string>;
    declare public /*out*/ readonly profilesUrl: pulumi.Output<string>;
    declare public /*out*/ readonly profilesUserId: pulumi.Output<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Prometheus instance (Optional)
     */
    declare public /*out*/ readonly prometheusIpAllowListCname: pulumi.Output<string>;
    /**
     * Prometheus name for this instance.
     */
    declare public /*out*/ readonly prometheusName: pulumi.Output<string>;
    /**
     * Private DNS for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly prometheusPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly prometheusPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    /**
     * Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     */
    declare public /*out*/ readonly prometheusRemoteEndpoint: pulumi.Output<string>;
    /**
     * Use this URL to send prometheus metrics to Grafana cloud
     */
    declare public /*out*/ readonly prometheusRemoteWriteEndpoint: pulumi.Output<string>;
    /**
     * Prometheus status for this instance.
     */
    declare public /*out*/ readonly prometheusStatus: pulumi.Output<string>;
    /**
     * Prometheus url for this instance.
     */
    declare public /*out*/ readonly prometheusUrl: pulumi.Output<string>;
    /**
     * Prometheus user ID. Used for e.g. remote_write.
     */
    declare public /*out*/ readonly prometheusUserId: pulumi.Output<number>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    declare public readonly regionSlug: pulumi.Output<string | undefined>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    declare public readonly slug: pulumi.Output<string>;
    /**
     * Status of the stack.
     */
    declare public /*out*/ readonly status: pulumi.Output<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Traces instance (Optional)
     */
    declare public /*out*/ readonly tracesIpAllowListCname: pulumi.Output<string>;
    declare public /*out*/ readonly tracesName: pulumi.Output<string>;
    /**
     * Private DNS for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly tracesPrivateConnectivityInfoPrivateDns: pulumi.Output<string>;
    /**
     * Service Name for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    declare public /*out*/ readonly tracesPrivateConnectivityInfoServiceName: pulumi.Output<string>;
    declare public /*out*/ readonly tracesStatus: pulumi.Output<string>;
    /**
     * Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
     */
    declare public /*out*/ readonly tracesUrl: pulumi.Output<string>;
    declare public /*out*/ readonly tracesUserId: pulumi.Output<number>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    declare public readonly url: pulumi.Output<string>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    declare public readonly waitForReadiness: pulumi.Output<boolean | undefined>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    declare public readonly waitForReadinessTimeout: pulumi.Output<string | undefined>;

    /**
     * Create a Stack resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StackArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StackArgs | StackState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StackState | undefined;
            resourceInputs["alertmanagerIpAllowListCname"] = state?.alertmanagerIpAllowListCname;
            resourceInputs["alertmanagerName"] = state?.alertmanagerName;
            resourceInputs["alertmanagerStatus"] = state?.alertmanagerStatus;
            resourceInputs["alertmanagerUrl"] = state?.alertmanagerUrl;
            resourceInputs["alertmanagerUserId"] = state?.alertmanagerUserId;
            resourceInputs["clusterSlug"] = state?.clusterSlug;
            resourceInputs["deleteProtection"] = state?.deleteProtection;
            resourceInputs["description"] = state?.description;
            resourceInputs["fleetManagementName"] = state?.fleetManagementName;
            resourceInputs["fleetManagementPrivateConnectivityInfoPrivateDns"] = state?.fleetManagementPrivateConnectivityInfoPrivateDns;
            resourceInputs["fleetManagementPrivateConnectivityInfoServiceName"] = state?.fleetManagementPrivateConnectivityInfoServiceName;
            resourceInputs["fleetManagementStatus"] = state?.fleetManagementStatus;
            resourceInputs["fleetManagementUrl"] = state?.fleetManagementUrl;
            resourceInputs["fleetManagementUserId"] = state?.fleetManagementUserId;
            resourceInputs["grafanasIpAllowListCname"] = state?.grafanasIpAllowListCname;
            resourceInputs["graphiteIpAllowListCname"] = state?.graphiteIpAllowListCname;
            resourceInputs["graphiteName"] = state?.graphiteName;
            resourceInputs["graphitePrivateConnectivityInfoPrivateDns"] = state?.graphitePrivateConnectivityInfoPrivateDns;
            resourceInputs["graphitePrivateConnectivityInfoServiceName"] = state?.graphitePrivateConnectivityInfoServiceName;
            resourceInputs["graphiteStatus"] = state?.graphiteStatus;
            resourceInputs["graphiteUrl"] = state?.graphiteUrl;
            resourceInputs["graphiteUserId"] = state?.graphiteUserId;
            resourceInputs["influxUrl"] = state?.influxUrl;
            resourceInputs["labels"] = state?.labels;
            resourceInputs["logsIpAllowListCname"] = state?.logsIpAllowListCname;
            resourceInputs["logsName"] = state?.logsName;
            resourceInputs["logsPrivateConnectivityInfoPrivateDns"] = state?.logsPrivateConnectivityInfoPrivateDns;
            resourceInputs["logsPrivateConnectivityInfoServiceName"] = state?.logsPrivateConnectivityInfoServiceName;
            resourceInputs["logsStatus"] = state?.logsStatus;
            resourceInputs["logsUrl"] = state?.logsUrl;
            resourceInputs["logsUserId"] = state?.logsUserId;
            resourceInputs["name"] = state?.name;
            resourceInputs["oncallApiUrl"] = state?.oncallApiUrl;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["orgName"] = state?.orgName;
            resourceInputs["orgSlug"] = state?.orgSlug;
            resourceInputs["otlpPrivateConnectivityInfoPrivateDns"] = state?.otlpPrivateConnectivityInfoPrivateDns;
            resourceInputs["otlpPrivateConnectivityInfoServiceName"] = state?.otlpPrivateConnectivityInfoServiceName;
            resourceInputs["otlpUrl"] = state?.otlpUrl;
            resourceInputs["pdcApiPrivateConnectivityInfoPrivateDns"] = state?.pdcApiPrivateConnectivityInfoPrivateDns;
            resourceInputs["pdcApiPrivateConnectivityInfoServiceName"] = state?.pdcApiPrivateConnectivityInfoServiceName;
            resourceInputs["pdcGatewayPrivateConnectivityInfoPrivateDns"] = state?.pdcGatewayPrivateConnectivityInfoPrivateDns;
            resourceInputs["pdcGatewayPrivateConnectivityInfoServiceName"] = state?.pdcGatewayPrivateConnectivityInfoServiceName;
            resourceInputs["profilesIpAllowListCname"] = state?.profilesIpAllowListCname;
            resourceInputs["profilesName"] = state?.profilesName;
            resourceInputs["profilesPrivateConnectivityInfoPrivateDns"] = state?.profilesPrivateConnectivityInfoPrivateDns;
            resourceInputs["profilesPrivateConnectivityInfoServiceName"] = state?.profilesPrivateConnectivityInfoServiceName;
            resourceInputs["profilesStatus"] = state?.profilesStatus;
            resourceInputs["profilesUrl"] = state?.profilesUrl;
            resourceInputs["profilesUserId"] = state?.profilesUserId;
            resourceInputs["prometheusIpAllowListCname"] = state?.prometheusIpAllowListCname;
            resourceInputs["prometheusName"] = state?.prometheusName;
            resourceInputs["prometheusPrivateConnectivityInfoPrivateDns"] = state?.prometheusPrivateConnectivityInfoPrivateDns;
            resourceInputs["prometheusPrivateConnectivityInfoServiceName"] = state?.prometheusPrivateConnectivityInfoServiceName;
            resourceInputs["prometheusRemoteEndpoint"] = state?.prometheusRemoteEndpoint;
            resourceInputs["prometheusRemoteWriteEndpoint"] = state?.prometheusRemoteWriteEndpoint;
            resourceInputs["prometheusStatus"] = state?.prometheusStatus;
            resourceInputs["prometheusUrl"] = state?.prometheusUrl;
            resourceInputs["prometheusUserId"] = state?.prometheusUserId;
            resourceInputs["regionSlug"] = state?.regionSlug;
            resourceInputs["slug"] = state?.slug;
            resourceInputs["status"] = state?.status;
            resourceInputs["tracesIpAllowListCname"] = state?.tracesIpAllowListCname;
            resourceInputs["tracesName"] = state?.tracesName;
            resourceInputs["tracesPrivateConnectivityInfoPrivateDns"] = state?.tracesPrivateConnectivityInfoPrivateDns;
            resourceInputs["tracesPrivateConnectivityInfoServiceName"] = state?.tracesPrivateConnectivityInfoServiceName;
            resourceInputs["tracesStatus"] = state?.tracesStatus;
            resourceInputs["tracesUrl"] = state?.tracesUrl;
            resourceInputs["tracesUserId"] = state?.tracesUserId;
            resourceInputs["url"] = state?.url;
            resourceInputs["waitForReadiness"] = state?.waitForReadiness;
            resourceInputs["waitForReadinessTimeout"] = state?.waitForReadinessTimeout;
        } else {
            const args = argsOrState as StackArgs | undefined;
            if (args?.slug === undefined && !opts.urn) {
                throw new Error("Missing required property 'slug'");
            }
            resourceInputs["deleteProtection"] = args?.deleteProtection;
            resourceInputs["description"] = args?.description;
            resourceInputs["labels"] = args?.labels;
            resourceInputs["name"] = args?.name;
            resourceInputs["regionSlug"] = args?.regionSlug;
            resourceInputs["slug"] = args?.slug;
            resourceInputs["url"] = args?.url;
            resourceInputs["waitForReadiness"] = args?.waitForReadiness;
            resourceInputs["waitForReadinessTimeout"] = args?.waitForReadinessTimeout;
            resourceInputs["alertmanagerIpAllowListCname"] = undefined /*out*/;
            resourceInputs["alertmanagerName"] = undefined /*out*/;
            resourceInputs["alertmanagerStatus"] = undefined /*out*/;
            resourceInputs["alertmanagerUrl"] = undefined /*out*/;
            resourceInputs["alertmanagerUserId"] = undefined /*out*/;
            resourceInputs["clusterSlug"] = undefined /*out*/;
            resourceInputs["fleetManagementName"] = undefined /*out*/;
            resourceInputs["fleetManagementPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["fleetManagementPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["fleetManagementStatus"] = undefined /*out*/;
            resourceInputs["fleetManagementUrl"] = undefined /*out*/;
            resourceInputs["fleetManagementUserId"] = undefined /*out*/;
            resourceInputs["grafanasIpAllowListCname"] = undefined /*out*/;
            resourceInputs["graphiteIpAllowListCname"] = undefined /*out*/;
            resourceInputs["graphiteName"] = undefined /*out*/;
            resourceInputs["graphitePrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["graphitePrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["graphiteStatus"] = undefined /*out*/;
            resourceInputs["graphiteUrl"] = undefined /*out*/;
            resourceInputs["graphiteUserId"] = undefined /*out*/;
            resourceInputs["influxUrl"] = undefined /*out*/;
            resourceInputs["logsIpAllowListCname"] = undefined /*out*/;
            resourceInputs["logsName"] = undefined /*out*/;
            resourceInputs["logsPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["logsPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["logsStatus"] = undefined /*out*/;
            resourceInputs["logsUrl"] = undefined /*out*/;
            resourceInputs["logsUserId"] = undefined /*out*/;
            resourceInputs["oncallApiUrl"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["orgName"] = undefined /*out*/;
            resourceInputs["orgSlug"] = undefined /*out*/;
            resourceInputs["otlpPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["otlpPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["otlpUrl"] = undefined /*out*/;
            resourceInputs["pdcApiPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["pdcApiPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["pdcGatewayPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["pdcGatewayPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["profilesIpAllowListCname"] = undefined /*out*/;
            resourceInputs["profilesName"] = undefined /*out*/;
            resourceInputs["profilesPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["profilesPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["profilesStatus"] = undefined /*out*/;
            resourceInputs["profilesUrl"] = undefined /*out*/;
            resourceInputs["profilesUserId"] = undefined /*out*/;
            resourceInputs["prometheusIpAllowListCname"] = undefined /*out*/;
            resourceInputs["prometheusName"] = undefined /*out*/;
            resourceInputs["prometheusPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["prometheusPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["prometheusRemoteEndpoint"] = undefined /*out*/;
            resourceInputs["prometheusRemoteWriteEndpoint"] = undefined /*out*/;
            resourceInputs["prometheusStatus"] = undefined /*out*/;
            resourceInputs["prometheusUrl"] = undefined /*out*/;
            resourceInputs["prometheusUserId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["tracesIpAllowListCname"] = undefined /*out*/;
            resourceInputs["tracesName"] = undefined /*out*/;
            resourceInputs["tracesPrivateConnectivityInfoPrivateDns"] = undefined /*out*/;
            resourceInputs["tracesPrivateConnectivityInfoServiceName"] = undefined /*out*/;
            resourceInputs["tracesStatus"] = undefined /*out*/;
            resourceInputs["tracesUrl"] = undefined /*out*/;
            resourceInputs["tracesUserId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Stack.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Stack resources.
 */
export interface StackState {
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Alertmanager instances (Optional)
     */
    alertmanagerIpAllowListCname?: pulumi.Input<string>;
    /**
     * Name of the Alertmanager instance configured for this stack.
     */
    alertmanagerName?: pulumi.Input<string>;
    /**
     * Status of the Alertmanager instance configured for this stack.
     */
    alertmanagerStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Alertmanager instance configured for this stack.
     */
    alertmanagerUrl?: pulumi.Input<string>;
    /**
     * User ID of the Alertmanager instance configured for this stack.
     */
    alertmanagerUserId?: pulumi.Input<number>;
    /**
     * Slug of the cluster where this stack resides.
     */
    clusterSlug?: pulumi.Input<string>;
    /**
     * Whether to enable delete protection for the stack, preventing accidental deletion. Defaults to `true`.
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Description of stack.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the Fleet Management instance configured for this stack.
     */
    fleetManagementName?: pulumi.Input<string>;
    /**
     * Private DNS for Fleet Management when using AWS PrivateLink (only for AWS stacks)
     */
    fleetManagementPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Fleet Management when using AWS PrivateLink (only for AWS stacks)
     */
    fleetManagementPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Status of the Fleet Management instance configured for this stack.
     */
    fleetManagementStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Fleet Management instance configured for this stack.
     */
    fleetManagementUrl?: pulumi.Input<string>;
    /**
     * User ID of the Fleet Management instance configured for this stack.
     */
    fleetManagementUserId?: pulumi.Input<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the grafana instance (Optional)
     */
    grafanasIpAllowListCname?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Graphite instance (Optional)
     */
    graphiteIpAllowListCname?: pulumi.Input<string>;
    graphiteName?: pulumi.Input<string>;
    /**
     * Private DNS for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    graphitePrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Graphite when using AWS PrivateLink (only for AWS stacks)
     */
    graphitePrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    graphiteStatus?: pulumi.Input<string>;
    graphiteUrl?: pulumi.Input<string>;
    graphiteUserId?: pulumi.Input<number>;
    /**
     * Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheusUserId` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
     */
    influxUrl?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Logs instance (Optional)
     */
    logsIpAllowListCname?: pulumi.Input<string>;
    logsName?: pulumi.Input<string>;
    /**
     * Private DNS for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    logsPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Logs when using AWS PrivateLink (only for AWS stacks)
     */
    logsPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    logsStatus?: pulumi.Input<string>;
    logsUrl?: pulumi.Input<string>;
    logsUserId?: pulumi.Input<number>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    name?: pulumi.Input<string>;
    /**
     * Base URL of the OnCall API instance configured for this stack.
     */
    oncallApiUrl?: pulumi.Input<string>;
    /**
     * Organization id to assign to this stack.
     */
    orgId?: pulumi.Input<number>;
    /**
     * Organization name to assign to this stack.
     */
    orgName?: pulumi.Input<string>;
    /**
     * Organization slug to assign to this stack.
     */
    orgSlug?: pulumi.Input<string>;
    /**
     * Private DNS for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    otlpPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for OTLP when using AWS PrivateLink (only for AWS stacks)
     */
    otlpPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
     */
    otlpUrl?: pulumi.Input<string>;
    /**
     * Private DNS for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    pdcApiPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for PDC's API when using AWS PrivateLink (only for AWS stacks)
     */
    pdcApiPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Private DNS for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    pdcGatewayPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
     */
    pdcGatewayPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Profiles instance (Optional)
     */
    profilesIpAllowListCname?: pulumi.Input<string>;
    profilesName?: pulumi.Input<string>;
    /**
     * Private DNS for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    profilesPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Profiles when using AWS PrivateLink (only for AWS stacks)
     */
    profilesPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    profilesStatus?: pulumi.Input<string>;
    profilesUrl?: pulumi.Input<string>;
    profilesUserId?: pulumi.Input<number>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Prometheus instance (Optional)
     */
    prometheusIpAllowListCname?: pulumi.Input<string>;
    /**
     * Prometheus name for this instance.
     */
    prometheusName?: pulumi.Input<string>;
    /**
     * Private DNS for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    prometheusPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Prometheus when using AWS PrivateLink (only for AWS stacks)
     */
    prometheusPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    /**
     * Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
     */
    prometheusRemoteEndpoint?: pulumi.Input<string>;
    /**
     * Use this URL to send prometheus metrics to Grafana cloud
     */
    prometheusRemoteWriteEndpoint?: pulumi.Input<string>;
    /**
     * Prometheus status for this instance.
     */
    prometheusStatus?: pulumi.Input<string>;
    /**
     * Prometheus url for this instance.
     */
    prometheusUrl?: pulumi.Input<string>;
    /**
     * Prometheus user ID. Used for e.g. remote_write.
     */
    prometheusUserId?: pulumi.Input<number>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    regionSlug?: pulumi.Input<string>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    slug?: pulumi.Input<string>;
    /**
     * Status of the stack.
     */
    status?: pulumi.Input<string>;
    /**
     * Comma-separated list of CNAMEs that can be whitelisted to access the Traces instance (Optional)
     */
    tracesIpAllowListCname?: pulumi.Input<string>;
    tracesName?: pulumi.Input<string>;
    /**
     * Private DNS for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    tracesPrivateConnectivityInfoPrivateDns?: pulumi.Input<string>;
    /**
     * Service Name for Traces when using AWS PrivateLink (only for AWS stacks)
     */
    tracesPrivateConnectivityInfoServiceName?: pulumi.Input<string>;
    tracesStatus?: pulumi.Input<string>;
    /**
     * Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
     */
    tracesUrl?: pulumi.Input<string>;
    tracesUserId?: pulumi.Input<number>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    url?: pulumi.Input<string>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    waitForReadiness?: pulumi.Input<boolean>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    waitForReadinessTimeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Stack resource.
 */
export interface StackArgs {
    /**
     * Whether to enable delete protection for the stack, preventing accidental deletion. Defaults to `true`.
     */
    deleteProtection?: pulumi.Input<boolean>;
    /**
     * Description of stack.
     */
    description?: pulumi.Input<string>;
    /**
     * A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of stack. Conventionally matches the url of the instance (e.g. `<stack_slug>.grafana.net`).
     */
    name?: pulumi.Input<string>;
    /**
     * Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired region. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
     */
    regionSlug?: pulumi.Input<string>;
    /**
     * Subdomain that the Grafana instance will be available at. Setting slug to `<stack_slug>` will make the instance available at `https://<stack_slug>.grafana.net`.
     */
    slug: pulumi.Input<string>;
    /**
     * Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
     */
    url?: pulumi.Input<string>;
    /**
     * Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana instance). Defaults to `true`.
     */
    waitForReadiness?: pulumi.Input<boolean>;
    /**
     * How long to wait for readiness (if enabled). Defaults to `5m0s`.
     */
    waitForReadinessTimeout?: pulumi.Input<string>;
}
