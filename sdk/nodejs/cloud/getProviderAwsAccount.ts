// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumi/grafana";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testProviderAwsAccount = new grafana.cloud.ProviderAwsAccount("test", {
 *     stackId: test.then(test => test.id),
 *     roleArn: testAwsIamRole.arn,
 *     regions: [
 *         "us-east-2",
 *         "eu-west-3",
 *     ],
 * });
 * const testGetProviderAwsAccount = pulumi.all([test, testProviderAwsAccount.resourceId]).apply(([test, resourceId]) => grafana.cloud.getProviderAwsAccountOutput({
 *     stackId: test.id,
 *     resourceId: resourceId,
 * }));
 * ```
 */
export function getProviderAwsAccount(args: GetProviderAwsAccountArgs, opts?: pulumi.InvokeOptions): Promise<GetProviderAwsAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("grafana:cloud/getProviderAwsAccount:getProviderAwsAccount", {
        "resourceId": args.resourceId,
        "stackId": args.stackId,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderAwsAccount.
 */
export interface GetProviderAwsAccountArgs {
    /**
     * The ID given by the Grafana Cloud Provider API to this AWS Account resource.
     */
    resourceId: string;
    stackId: string;
}

/**
 * A collection of values returned by getProviderAwsAccount.
 */
export interface GetProviderAwsAccountResult {
    readonly id: string;
    /**
     * A set of regions that this AWS Account resource applies to.
     */
    readonly regions: string[];
    /**
     * The ID given by the Grafana Cloud Provider API to this AWS Account resource.
     */
    readonly resourceId: string;
    /**
     * An IAM Role ARN string to represent with this AWS Account resource.
     */
    readonly roleArn: string;
    readonly stackId: string;
}
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumi/grafana";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = grafana.cloud.getStack({
 *     slug: "gcloudstacktest",
 * });
 * const testProviderAwsAccount = new grafana.cloud.ProviderAwsAccount("test", {
 *     stackId: test.then(test => test.id),
 *     roleArn: testAwsIamRole.arn,
 *     regions: [
 *         "us-east-2",
 *         "eu-west-3",
 *     ],
 * });
 * const testGetProviderAwsAccount = pulumi.all([test, testProviderAwsAccount.resourceId]).apply(([test, resourceId]) => grafana.cloud.getProviderAwsAccountOutput({
 *     stackId: test.id,
 *     resourceId: resourceId,
 * }));
 * ```
 */
export function getProviderAwsAccountOutput(args: GetProviderAwsAccountOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetProviderAwsAccountResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("grafana:cloud/getProviderAwsAccount:getProviderAwsAccount", {
        "resourceId": args.resourceId,
        "stackId": args.stackId,
    }, opts);
}

/**
 * A collection of arguments for invoking getProviderAwsAccount.
 */
export interface GetProviderAwsAccountOutputArgs {
    /**
     * The ID given by the Grafana Cloud Provider API to this AWS Account resource.
     */
    resourceId: pulumi.Input<string>;
    stackId: pulumi.Input<string>;
}
