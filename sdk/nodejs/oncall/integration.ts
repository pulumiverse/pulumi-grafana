// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * * [Official documentation](https://grafana.com/docs/oncall/latest/configure/integrations/)
 * * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/)
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:onCall/integration:Integration name "{{ id }}"
 * ```
 */
export class Integration extends pulumi.CustomResource {
    /**
     * Get an existing Integration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IntegrationState, opts?: pulumi.CustomResourceOptions): Integration {
        return new Integration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:onCall/integration:Integration';

    /**
     * Returns true if the given object is an instance of Integration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Integration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Integration.__pulumiType;
    }

    /**
     * The Default route for all alerts from the given integration
     */
    public readonly defaultRoute!: pulumi.Output<outputs.onCall.IntegrationDefaultRoute>;
    /**
     * A list of string-to-string mappings for dynamic labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    public readonly dynamicLabels!: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * A list of string-to-string mappings for static labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    public readonly labels!: pulumi.Output<{[key: string]: string}[] | undefined>;
    /**
     * The link for using in an integrated tool.
     */
    public /*out*/ readonly link!: pulumi.Output<string>;
    /**
     * The name of the service integration.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
     */
    public readonly teamId!: pulumi.Output<string | undefined>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    public readonly templates!: pulumi.Output<outputs.onCall.IntegrationTemplates | undefined>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira, zendesk.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a Integration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IntegrationArgs | IntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IntegrationState | undefined;
            resourceInputs["defaultRoute"] = state ? state.defaultRoute : undefined;
            resourceInputs["dynamicLabels"] = state ? state.dynamicLabels : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["link"] = state ? state.link : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["templates"] = state ? state.templates : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as IntegrationArgs | undefined;
            if ((!args || args.defaultRoute === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultRoute'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["defaultRoute"] = args ? args.defaultRoute : undefined;
            resourceInputs["dynamicLabels"] = args ? args.dynamicLabels : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["templates"] = args ? args.templates : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["link"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/oncallIntegration:OncallIntegration" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Integration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Integration resources.
 */
export interface IntegrationState {
    /**
     * The Default route for all alerts from the given integration
     */
    defaultRoute?: pulumi.Input<inputs.onCall.IntegrationDefaultRoute>;
    /**
     * A list of string-to-string mappings for dynamic labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    dynamicLabels?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A list of string-to-string mappings for static labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    labels?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * The link for using in an integrated tool.
     */
    link?: pulumi.Input<string>;
    /**
     * The name of the service integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
     */
    teamId?: pulumi.Input<string>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    templates?: pulumi.Input<inputs.onCall.IntegrationTemplates>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira, zendesk.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Integration resource.
 */
export interface IntegrationArgs {
    /**
     * The Default route for all alerts from the given integration
     */
    defaultRoute: pulumi.Input<inputs.onCall.IntegrationDefaultRoute>;
    /**
     * A list of string-to-string mappings for dynamic labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    dynamicLabels?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * A list of string-to-string mappings for static labels. Each map must include one key named "key" and one key named "value" (using the `grafana.onCall.getLabel` datasource).
     */
    labels?: pulumi.Input<pulumi.Input<{[key: string]: pulumi.Input<string>}>[]>;
    /**
     * The name of the service integration.
     */
    name?: pulumi.Input<string>;
    /**
     * The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
     */
    teamId?: pulumi.Input<string>;
    /**
     * Jinja2 templates for Alert payload. An empty templates block will be ignored.
     */
    templates?: pulumi.Input<inputs.onCall.IntegrationTemplates>;
    /**
     * The type of integration. Can be grafana, grafana*alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog, pagerduty, pingdom, elastalert, amazon*sns, curler, sentry, formatted*webhook, heartbeat, demo, manual, stackdriver, uptimerobot, sentry*platform, zabbix, prtg, slack*channel, inbound*email, direct_paging, jira, zendesk.
     */
    type: pulumi.Input<string>;
}
