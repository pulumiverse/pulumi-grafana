// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { EscalationArgs, EscalationState } from "./escalation";
export type Escalation = import("./escalation").Escalation;
export const Escalation: typeof import("./escalation").Escalation = null as any;
utilities.lazyLoad(exports, ["Escalation"], () => require("./escalation"));

export { EscalationChainArgs, EscalationChainState } from "./escalationChain";
export type EscalationChain = import("./escalationChain").EscalationChain;
export const EscalationChain: typeof import("./escalationChain").EscalationChain = null as any;
utilities.lazyLoad(exports, ["EscalationChain"], () => require("./escalationChain"));

export { GetEscalationChainArgs, GetEscalationChainResult, GetEscalationChainOutputArgs } from "./getEscalationChain";
export const getEscalationChain: typeof import("./getEscalationChain").getEscalationChain = null as any;
export const getEscalationChainOutput: typeof import("./getEscalationChain").getEscalationChainOutput = null as any;
utilities.lazyLoad(exports, ["getEscalationChain","getEscalationChainOutput"], () => require("./getEscalationChain"));

export { GetIntegrationArgs, GetIntegrationResult, GetIntegrationOutputArgs } from "./getIntegration";
export const getIntegration: typeof import("./getIntegration").getIntegration = null as any;
export const getIntegrationOutput: typeof import("./getIntegration").getIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getIntegration","getIntegrationOutput"], () => require("./getIntegration"));

export { GetOutgoingWebhookArgs, GetOutgoingWebhookResult, GetOutgoingWebhookOutputArgs } from "./getOutgoingWebhook";
export const getOutgoingWebhook: typeof import("./getOutgoingWebhook").getOutgoingWebhook = null as any;
export const getOutgoingWebhookOutput: typeof import("./getOutgoingWebhook").getOutgoingWebhookOutput = null as any;
utilities.lazyLoad(exports, ["getOutgoingWebhook","getOutgoingWebhookOutput"], () => require("./getOutgoingWebhook"));

export { GetScheduleArgs, GetScheduleResult, GetScheduleOutputArgs } from "./getSchedule";
export const getSchedule: typeof import("./getSchedule").getSchedule = null as any;
export const getScheduleOutput: typeof import("./getSchedule").getScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getSchedule","getScheduleOutput"], () => require("./getSchedule"));

export { GetSlackChannelArgs, GetSlackChannelResult, GetSlackChannelOutputArgs } from "./getSlackChannel";
export const getSlackChannel: typeof import("./getSlackChannel").getSlackChannel = null as any;
export const getSlackChannelOutput: typeof import("./getSlackChannel").getSlackChannelOutput = null as any;
utilities.lazyLoad(exports, ["getSlackChannel","getSlackChannelOutput"], () => require("./getSlackChannel"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUserGroupArgs, GetUserGroupResult, GetUserGroupOutputArgs } from "./getUserGroup";
export const getUserGroup: typeof import("./getUserGroup").getUserGroup = null as any;
export const getUserGroupOutput: typeof import("./getUserGroup").getUserGroupOutput = null as any;
utilities.lazyLoad(exports, ["getUserGroup","getUserGroupOutput"], () => require("./getUserGroup"));

export { IntegrationArgs, IntegrationState } from "./integration";
export type Integration = import("./integration").Integration;
export const Integration: typeof import("./integration").Integration = null as any;
utilities.lazyLoad(exports, ["Integration"], () => require("./integration"));

export { OnCallShiftArgs, OnCallShiftState } from "./onCallShift";
export type OnCallShift = import("./onCallShift").OnCallShift;
export const OnCallShift: typeof import("./onCallShift").OnCallShift = null as any;
utilities.lazyLoad(exports, ["OnCallShift"], () => require("./onCallShift"));

export { OutgoingWebhookArgs, OutgoingWebhookState } from "./outgoingWebhook";
export type OutgoingWebhook = import("./outgoingWebhook").OutgoingWebhook;
export const OutgoingWebhook: typeof import("./outgoingWebhook").OutgoingWebhook = null as any;
utilities.lazyLoad(exports, ["OutgoingWebhook"], () => require("./outgoingWebhook"));

export { RouteArgs, RouteState } from "./route";
export type Route = import("./route").Route;
export const Route: typeof import("./route").Route = null as any;
utilities.lazyLoad(exports, ["Route"], () => require("./route"));

export { ScheduleArgs, ScheduleState } from "./schedule";
export type Schedule = import("./schedule").Schedule;
export const Schedule: typeof import("./schedule").Schedule = null as any;
utilities.lazyLoad(exports, ["Schedule"], () => require("./schedule"));

export { UserNotificationRuleArgs, UserNotificationRuleState } from "./userNotificationRule";
export type UserNotificationRule = import("./userNotificationRule").UserNotificationRule;
export const UserNotificationRule: typeof import("./userNotificationRule").UserNotificationRule = null as any;
utilities.lazyLoad(exports, ["UserNotificationRule"], () => require("./userNotificationRule"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:onCall/escalation:Escalation":
                return new Escalation(name, <any>undefined, { urn })
            case "grafana:onCall/escalationChain:EscalationChain":
                return new EscalationChain(name, <any>undefined, { urn })
            case "grafana:onCall/integration:Integration":
                return new Integration(name, <any>undefined, { urn })
            case "grafana:onCall/onCallShift:OnCallShift":
                return new OnCallShift(name, <any>undefined, { urn })
            case "grafana:onCall/outgoingWebhook:OutgoingWebhook":
                return new OutgoingWebhook(name, <any>undefined, { urn })
            case "grafana:onCall/route:Route":
                return new Route(name, <any>undefined, { urn })
            case "grafana:onCall/schedule:Schedule":
                return new Schedule(name, <any>undefined, { urn })
            case "grafana:onCall/userNotificationRule:UserNotificationRule":
                return new UserNotificationRule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "onCall/escalation", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/escalationChain", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/integration", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/onCallShift", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/outgoingWebhook", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/route", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/schedule", _module)
pulumi.runtime.registerResourceModule("grafana", "onCall/userNotificationRule", _module)
