// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Asserts Log Configuration through Grafana API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const production = new grafana.assert.LogConfig("production", {
 *     name: "production",
 *     priority: 1000,
 *     defaultConfig: false,
 *     dataSourceUid: "grafanacloud-logs",
 *     errorLabel: "error",
 *     matches: [
 *         {
 *             property: "asserts_entity_type",
 *             op: "EQUALS",
 *             values: ["Service"],
 *         },
 *         {
 *             property: "environment",
 *             op: "EQUALS",
 *             values: [
 *                 "production",
 *                 "staging",
 *             ],
 *         },
 *         {
 *             property: "site",
 *             op: "EQUALS",
 *             values: [
 *                 "us-east-1",
 *                 "us-west-2",
 *             ],
 *         },
 *     ],
 *     entityPropertyToLogLabelMapping: {
 *         otel_namespace: "service_namespace",
 *         otel_service: "service_name",
 *         environment: "env",
 *         site: "region",
 *     },
 *     filterBySpanId: true,
 *     filterByTraceId: true,
 * });
 * const development = new grafana.assert.LogConfig("development", {
 *     name: "development",
 *     priority: 2000,
 *     defaultConfig: true,
 *     dataSourceUid: "elasticsearch-dev",
 *     errorLabel: "error",
 *     matches: [
 *         {
 *             property: "asserts_entity_type",
 *             op: "EQUALS",
 *             values: ["Service"],
 *         },
 *         {
 *             property: "environment",
 *             op: "EQUALS",
 *             values: [
 *                 "development",
 *                 "testing",
 *             ],
 *         },
 *         {
 *             property: "site",
 *             op: "EQUALS",
 *             values: ["us-east-1"],
 *         },
 *         {
 *             property: "service",
 *             op: "EQUALS",
 *             values: ["api"],
 *         },
 *     ],
 *     entityPropertyToLogLabelMapping: {
 *         otel_namespace: "service_namespace",
 *         otel_service: "service_name",
 *         environment: "env",
 *         site: "region",
 *         service: "app",
 *     },
 *     filterBySpanId: true,
 *     filterByTraceId: true,
 * });
 * const minimal = new grafana.assert.LogConfig("minimal", {
 *     name: "minimal",
 *     priority: 3000,
 *     defaultConfig: false,
 *     dataSourceUid: "loki-minimal",
 *     matches: [{
 *         property: "asserts_entity_type",
 *         op: "IS_NOT_NULL",
 *         values: [],
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:assert/logConfig:LogConfig name "{{ name }}"
 * ```
 */
export class LogConfig extends pulumi.CustomResource {
    /**
     * Get an existing LogConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogConfigState, opts?: pulumi.CustomResourceOptions): LogConfig {
        return new LogConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:assert/logConfig:LogConfig';

    /**
     * Returns true if the given object is an instance of LogConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogConfig.__pulumiType;
    }

    /**
     * DataSource to be queried (e.g., a Loki instance).
     */
    declare public readonly dataSourceUid: pulumi.Output<string>;
    /**
     * Is it the default config, therefore undeletable?
     */
    declare public readonly defaultConfig: pulumi.Output<boolean>;
    /**
     * Mapping of entity properties to log labels.
     */
    declare public readonly entityPropertyToLogLabelMapping: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Error label to filter logs.
     */
    declare public readonly errorLabel: pulumi.Output<string | undefined>;
    /**
     * Filter logs by span ID.
     */
    declare public readonly filterBySpanId: pulumi.Output<boolean | undefined>;
    /**
     * Filter logs by trace ID.
     */
    declare public readonly filterByTraceId: pulumi.Output<boolean | undefined>;
    /**
     * List of match rules for entity properties.
     */
    declare public readonly matches: pulumi.Output<outputs.assert.LogConfigMatch[] | undefined>;
    /**
     * The name of the log configuration.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Priority of the log configuration. A lower number means a higher priority.
     */
    declare public readonly priority: pulumi.Output<number>;

    /**
     * Create a LogConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogConfigArgs | LogConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogConfigState | undefined;
            resourceInputs["dataSourceUid"] = state?.dataSourceUid;
            resourceInputs["defaultConfig"] = state?.defaultConfig;
            resourceInputs["entityPropertyToLogLabelMapping"] = state?.entityPropertyToLogLabelMapping;
            resourceInputs["errorLabel"] = state?.errorLabel;
            resourceInputs["filterBySpanId"] = state?.filterBySpanId;
            resourceInputs["filterByTraceId"] = state?.filterByTraceId;
            resourceInputs["matches"] = state?.matches;
            resourceInputs["name"] = state?.name;
            resourceInputs["priority"] = state?.priority;
        } else {
            const args = argsOrState as LogConfigArgs | undefined;
            if (args?.dataSourceUid === undefined && !opts.urn) {
                throw new Error("Missing required property 'dataSourceUid'");
            }
            if (args?.defaultConfig === undefined && !opts.urn) {
                throw new Error("Missing required property 'defaultConfig'");
            }
            if (args?.priority === undefined && !opts.urn) {
                throw new Error("Missing required property 'priority'");
            }
            resourceInputs["dataSourceUid"] = args?.dataSourceUid;
            resourceInputs["defaultConfig"] = args?.defaultConfig;
            resourceInputs["entityPropertyToLogLabelMapping"] = args?.entityPropertyToLogLabelMapping;
            resourceInputs["errorLabel"] = args?.errorLabel;
            resourceInputs["filterBySpanId"] = args?.filterBySpanId;
            resourceInputs["filterByTraceId"] = args?.filterByTraceId;
            resourceInputs["matches"] = args?.matches;
            resourceInputs["name"] = args?.name;
            resourceInputs["priority"] = args?.priority;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LogConfig resources.
 */
export interface LogConfigState {
    /**
     * DataSource to be queried (e.g., a Loki instance).
     */
    dataSourceUid?: pulumi.Input<string>;
    /**
     * Is it the default config, therefore undeletable?
     */
    defaultConfig?: pulumi.Input<boolean>;
    /**
     * Mapping of entity properties to log labels.
     */
    entityPropertyToLogLabelMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Error label to filter logs.
     */
    errorLabel?: pulumi.Input<string>;
    /**
     * Filter logs by span ID.
     */
    filterBySpanId?: pulumi.Input<boolean>;
    /**
     * Filter logs by trace ID.
     */
    filterByTraceId?: pulumi.Input<boolean>;
    /**
     * List of match rules for entity properties.
     */
    matches?: pulumi.Input<pulumi.Input<inputs.assert.LogConfigMatch>[]>;
    /**
     * The name of the log configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the log configuration. A lower number means a higher priority.
     */
    priority?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a LogConfig resource.
 */
export interface LogConfigArgs {
    /**
     * DataSource to be queried (e.g., a Loki instance).
     */
    dataSourceUid: pulumi.Input<string>;
    /**
     * Is it the default config, therefore undeletable?
     */
    defaultConfig: pulumi.Input<boolean>;
    /**
     * Mapping of entity properties to log labels.
     */
    entityPropertyToLogLabelMapping?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Error label to filter logs.
     */
    errorLabel?: pulumi.Input<string>;
    /**
     * Filter logs by span ID.
     */
    filterBySpanId?: pulumi.Input<boolean>;
    /**
     * Filter logs by trace ID.
     */
    filterByTraceId?: pulumi.Input<boolean>;
    /**
     * List of match rules for entity properties.
     */
    matches?: pulumi.Input<pulumi.Input<inputs.assert.LogConfigMatch>[]>;
    /**
     * The name of the log configuration.
     */
    name?: pulumi.Input<string>;
    /**
     * Priority of the log configuration. A lower number means a higher priority.
     */
    priority: pulumi.Input<number>;
}
