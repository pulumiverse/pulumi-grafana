// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Asserts Disabled Alert Configurations through Grafana API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * // Basic suppressed alert configuration for maintenance
 * const maintenanceWindow = new grafana.assert.SuppressedAssertionsConfig("maintenance_window", {
 *     name: "MaintenanceWindow",
 *     matchLabels: {
 *         service: "api-service",
 *         maintenance: "true",
 *     },
 * });
 * // Suppress specific alertname during deployment
 * const deploymentSuppression = new grafana.assert.SuppressedAssertionsConfig("deployment_suppression", {
 *     name: "DeploymentSuppression",
 *     matchLabels: {
 *         alertname: "HighLatency",
 *         job: "web-service",
 *         env: "staging",
 *     },
 * });
 * // Suppress alerts for specific test environment
 * const testEnvironmentSuppression = new grafana.assert.SuppressedAssertionsConfig("test_environment_suppression", {
 *     name: "TestEnvironmentSuppression",
 *     matchLabels: {
 *         alertgroup: "test.alerts",
 *         environment: "test",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:assert/suppressedAssertionsConfig:SuppressedAssertionsConfig name "{{ name }}"
 * ```
 */
export class SuppressedAssertionsConfig extends pulumi.CustomResource {
    /**
     * Get an existing SuppressedAssertionsConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SuppressedAssertionsConfigState, opts?: pulumi.CustomResourceOptions): SuppressedAssertionsConfig {
        return new SuppressedAssertionsConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:assert/suppressedAssertionsConfig:SuppressedAssertionsConfig';

    /**
     * Returns true if the given object is an instance of SuppressedAssertionsConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SuppressedAssertionsConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SuppressedAssertionsConfig.__pulumiType;
    }

    /**
     * Labels to match for this disabled alert configuration.
     */
    declare public readonly matchLabels: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the disabled alert configuration.
     */
    declare public readonly name: pulumi.Output<string>;

    /**
     * Create a SuppressedAssertionsConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: SuppressedAssertionsConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SuppressedAssertionsConfigArgs | SuppressedAssertionsConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SuppressedAssertionsConfigState | undefined;
            resourceInputs["matchLabels"] = state?.matchLabels;
            resourceInputs["name"] = state?.name;
        } else {
            const args = argsOrState as SuppressedAssertionsConfigArgs | undefined;
            resourceInputs["matchLabels"] = args?.matchLabels;
            resourceInputs["name"] = args?.name;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SuppressedAssertionsConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SuppressedAssertionsConfig resources.
 */
export interface SuppressedAssertionsConfigState {
    /**
     * Labels to match for this disabled alert configuration.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the disabled alert configuration.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SuppressedAssertionsConfig resource.
 */
export interface SuppressedAssertionsConfigArgs {
    /**
     * Labels to match for this disabled alert configuration.
     */
    matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the disabled alert configuration.
     */
    name?: pulumi.Input<string>;
}
