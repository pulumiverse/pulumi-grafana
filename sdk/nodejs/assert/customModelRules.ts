// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages Asserts Custom Model Rules through the Grafana API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.assert.CustomModelRules("test", {
 *     name: "test-anything",
 *     rules: {
 *         entities: [{
 *             type: "Service",
 *             name: "workload | service | job",
 *             scope: {
 *                 namespace: "namespace",
 *                 env: "asserts_env",
 *                 site: "asserts_site",
 *             },
 *             lookup: {
 *                 workload: "workload | deployment | statefulset | daemonset | replicaset",
 *                 service: "service",
 *                 job: "job",
 *                 proxy_job: "job",
 *             },
 *             definedBies: [
 *                 {
 *                     query: "up{job!=''}",
 *                     disabled: false,
 *                     labelValues: {
 *                         service: "service",
 *                         job: "job",
 *                     },
 *                     literals: {
 *                         _source: "up_query",
 *                     },
 *                 },
 *                 {
 *                     query: "up{job='disabled'}",
 *                     disabled: true,
 *                 },
 *             ],
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:assert/customModelRules:CustomModelRules name "{{ name }}"
 * ```
 */
export class CustomModelRules extends pulumi.CustomResource {
    /**
     * Get an existing CustomModelRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomModelRulesState, opts?: pulumi.CustomResourceOptions): CustomModelRules {
        return new CustomModelRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:assert/customModelRules:CustomModelRules';

    /**
     * Returns true if the given object is an instance of CustomModelRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomModelRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomModelRules.__pulumiType;
    }

    /**
     * The name of the custom model rules.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The rules configuration for the custom model rules.
     */
    declare public readonly rules: pulumi.Output<outputs.assert.CustomModelRulesRules>;

    /**
     * Create a CustomModelRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomModelRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomModelRulesArgs | CustomModelRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomModelRulesState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["rules"] = state?.rules;
        } else {
            const args = argsOrState as CustomModelRulesArgs | undefined;
            if (args?.rules === undefined && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["rules"] = args?.rules;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomModelRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomModelRules resources.
 */
export interface CustomModelRulesState {
    /**
     * The name of the custom model rules.
     */
    name?: pulumi.Input<string>;
    /**
     * The rules configuration for the custom model rules.
     */
    rules?: pulumi.Input<inputs.assert.CustomModelRulesRules>;
}

/**
 * The set of arguments for constructing a CustomModelRules resource.
 */
export interface CustomModelRulesArgs {
    /**
     * The name of the custom model rules.
     */
    name?: pulumi.Input<string>;
    /**
     * The rules configuration for the custom model rules.
     */
    rules: pulumi.Input<inputs.assert.CustomModelRulesRules>;
}
