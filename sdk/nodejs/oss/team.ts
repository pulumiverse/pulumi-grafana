// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const viewer = new grafana.oss.User("viewer", {
 *     name: "Viewer",
 *     email: "viewer@example.com",
 *     login: "viewer",
 *     password: "my-password",
 * });
 * const test_team = new grafana.oss.Team("test-team", {
 *     name: "Test Team",
 *     email: "teamemail@example.com",
 *     members: [viewer.email],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:oss/team:Team name "{{ id }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:oss/team:Team name "{{ orgID }}:{{ id }}"
 * ```
 */
export class Team extends pulumi.CustomResource {
    /**
     * Get an existing Team resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamState, opts?: pulumi.CustomResourceOptions): Team {
        return new Team(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:oss/team:Team';

    /**
     * Returns true if the given object is an instance of Team.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Team {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Team.__pulumiType;
    }

    /**
     * An email address for the team.
     */
    declare public readonly email: pulumi.Output<string | undefined>;
    declare public readonly ignoreExternallySyncedMembers: pulumi.Output<boolean | undefined>;
    /**
     * A set of email addresses corresponding to users who should be given membership
     * to the team. Note: users specified here must already exist in Grafana.
     */
    declare public readonly members: pulumi.Output<string[] | undefined>;
    /**
     * The display name for the Grafana team created.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    declare public readonly orgId: pulumi.Output<string | undefined>;
    declare public readonly preferences: pulumi.Output<outputs.oss.TeamPreferences | undefined>;
    /**
     * The team id assigned to this team by Grafana.
     */
    declare public /*out*/ readonly teamId: pulumi.Output<number>;
    /**
     * Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise.
     * 	* [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/)
     * 	* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
     */
    declare public readonly teamSync: pulumi.Output<outputs.oss.TeamTeamSync | undefined>;
    /**
     * The team uid assigned to this team by Grafana.
     */
    declare public /*out*/ readonly teamUid: pulumi.Output<string>;

    /**
     * Create a Team resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TeamArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamArgs | TeamState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamState | undefined;
            resourceInputs["email"] = state?.email;
            resourceInputs["ignoreExternallySyncedMembers"] = state?.ignoreExternallySyncedMembers;
            resourceInputs["members"] = state?.members;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["preferences"] = state?.preferences;
            resourceInputs["teamId"] = state?.teamId;
            resourceInputs["teamSync"] = state?.teamSync;
            resourceInputs["teamUid"] = state?.teamUid;
        } else {
            const args = argsOrState as TeamArgs | undefined;
            resourceInputs["email"] = args?.email;
            resourceInputs["ignoreExternallySyncedMembers"] = args?.ignoreExternallySyncedMembers;
            resourceInputs["members"] = args?.members;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["preferences"] = args?.preferences;
            resourceInputs["teamSync"] = args?.teamSync;
            resourceInputs["teamId"] = undefined /*out*/;
            resourceInputs["teamUid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/team:Team" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(Team.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Team resources.
 */
export interface TeamState {
    /**
     * An email address for the team.
     */
    email?: pulumi.Input<string>;
    ignoreExternallySyncedMembers?: pulumi.Input<boolean>;
    /**
     * A set of email addresses corresponding to users who should be given membership
     * to the team. Note: users specified here must already exist in Grafana.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The display name for the Grafana team created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    preferences?: pulumi.Input<inputs.oss.TeamPreferences>;
    /**
     * The team id assigned to this team by Grafana.
     */
    teamId?: pulumi.Input<number>;
    /**
     * Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise.
     * 	* [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/)
     * 	* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
     */
    teamSync?: pulumi.Input<inputs.oss.TeamTeamSync>;
    /**
     * The team uid assigned to this team by Grafana.
     */
    teamUid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Team resource.
 */
export interface TeamArgs {
    /**
     * An email address for the team.
     */
    email?: pulumi.Input<string>;
    ignoreExternallySyncedMembers?: pulumi.Input<boolean>;
    /**
     * A set of email addresses corresponding to users who should be given membership
     * to the team. Note: users specified here must already exist in Grafana.
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The display name for the Grafana team created.
     */
    name?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    preferences?: pulumi.Input<inputs.oss.TeamPreferences>;
    /**
     * Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise.
     * 	* [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/)
     * 	* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
     */
    teamSync?: pulumi.Input<inputs.oss.TeamTeamSync>;
}
