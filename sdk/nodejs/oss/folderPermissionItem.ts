// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages a single permission item for a folder. Conflicts with the "grafana.oss.FolderPermission" resource which manages the entire set of permissions for a folder.
 * 		* [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
 * 		* [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_permissions/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const team = new grafana.oss.Team("team", {name: "Team Name"});
 * const user = new grafana.oss.User("user", {
 *     email: "user.name@example.com",
 *     login: "user.name",
 *     password: "my-password",
 * });
 * const collection = new grafana.oss.Folder("collection", {title: "Folder Title"});
 * const onRole = new grafana.oss.FolderPermissionItem("on_role", {
 *     folderUid: collection.uid,
 *     role: "Viewer",
 *     permission: "Edit",
 * });
 * const onTeam = new grafana.oss.FolderPermissionItem("on_team", {
 *     folderUid: collection.uid,
 *     team: team.id,
 *     permission: "View",
 * });
 * const onUser = new grafana.oss.FolderPermissionItem("on_user", {
 *     folderUid: collection.uid,
 *     user: user.id,
 *     permission: "Admin",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:oss/folderPermissionItem:FolderPermissionItem name "{{ folderUID }}:{{ type (role, team, or user) }}:{{ identifier }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:oss/folderPermissionItem:FolderPermissionItem name "{{ orgID }}:{{ folderUID }}:{{ type (role, team, or user) }}:{{ identifier }}"
 * ```
 */
export class FolderPermissionItem extends pulumi.CustomResource {
    /**
     * Get an existing FolderPermissionItem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderPermissionItemState, opts?: pulumi.CustomResourceOptions): FolderPermissionItem {
        return new FolderPermissionItem(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:oss/folderPermissionItem:FolderPermissionItem';

    /**
     * Returns true if the given object is an instance of FolderPermissionItem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderPermissionItem {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderPermissionItem.__pulumiType;
    }

    /**
     * The UID of the folder.
     */
    declare public readonly folderUid: pulumi.Output<string>;
    /**
     * The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
     */
    declare public readonly orgId: pulumi.Output<string>;
    /**
     * the permission to be assigned
     */
    declare public readonly permission: pulumi.Output<string>;
    /**
     * the role onto which the permission is to be assigned
     */
    declare public readonly role: pulumi.Output<string | undefined>;
    /**
     * the team onto which the permission is to be assigned
     */
    declare public readonly team: pulumi.Output<string | undefined>;
    /**
     * the user or service account onto which the permission is to be assigned
     */
    declare public readonly user: pulumi.Output<string | undefined>;

    /**
     * Create a FolderPermissionItem resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderPermissionItemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderPermissionItemArgs | FolderPermissionItemState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderPermissionItemState | undefined;
            resourceInputs["folderUid"] = state?.folderUid;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["permission"] = state?.permission;
            resourceInputs["role"] = state?.role;
            resourceInputs["team"] = state?.team;
            resourceInputs["user"] = state?.user;
        } else {
            const args = argsOrState as FolderPermissionItemArgs | undefined;
            if (args?.folderUid === undefined && !opts.urn) {
                throw new Error("Missing required property 'folderUid'");
            }
            if (args?.permission === undefined && !opts.urn) {
                throw new Error("Missing required property 'permission'");
            }
            resourceInputs["folderUid"] = args?.folderUid;
            resourceInputs["orgId"] = args?.orgId;
            resourceInputs["permission"] = args?.permission;
            resourceInputs["role"] = args?.role;
            resourceInputs["team"] = args?.team;
            resourceInputs["user"] = args?.user;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const aliasOpts = { aliases: [{ type: "grafana:index/folderPermissionItem:FolderPermissionItem" }] };
        opts = pulumi.mergeOptions(opts, aliasOpts);
        super(FolderPermissionItem.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FolderPermissionItem resources.
 */
export interface FolderPermissionItemState {
    /**
     * The UID of the folder.
     */
    folderUid?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
     */
    orgId?: pulumi.Input<string>;
    /**
     * the permission to be assigned
     */
    permission?: pulumi.Input<string>;
    /**
     * the role onto which the permission is to be assigned
     */
    role?: pulumi.Input<string>;
    /**
     * the team onto which the permission is to be assigned
     */
    team?: pulumi.Input<string>;
    /**
     * the user or service account onto which the permission is to be assigned
     */
    user?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FolderPermissionItem resource.
 */
export interface FolderPermissionItemArgs {
    /**
     * The UID of the folder.
     */
    folderUid: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
     */
    orgId?: pulumi.Input<string>;
    /**
     * the permission to be assigned
     */
    permission: pulumi.Input<string>;
    /**
     * the role onto which the permission is to be assigned
     */
    role?: pulumi.Input<string>;
    /**
     * the team onto which the permission is to be assigned
     */
    team?: pulumi.Input<string>;
    /**
     * the user or service account onto which the permission is to be assigned
     */
    user?: pulumi.Input<string>;
}
