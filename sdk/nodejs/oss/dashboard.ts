// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Manages Grafana dashboards.
 *
 * * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.oss.Folder("test", {
 *     title: "My Folder",
 *     uid: "my-folder-uid",
 * });
 * const testDashboard = new grafana.oss.Dashboard("test", {
 *     folder: test.uid,
 *     configJson: JSON.stringify({
 *         title: "My Dashboard",
 *         uid: "my-dashboard-uid",
 *     }),
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:oss/dashboard:Dashboard name "{{ uid }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:oss/dashboard:Dashboard name "{{ orgID }}:{{ uid }}"
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:oss/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * The complete dashboard model JSON.
     */
    public readonly configJson!: pulumi.Output<string>;
    /**
     * The numeric ID of the dashboard computed by Grafana.
     */
    public /*out*/ readonly dashboardId!: pulumi.Output<number>;
    /**
     * The id or UID of the folder to save the dashboard in.
     */
    public readonly folder!: pulumi.Output<string | undefined>;
    /**
     * Set a commit message for the version history.
     */
    public readonly message!: pulumi.Output<string | undefined>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
     */
    public readonly overwrite!: pulumi.Output<boolean | undefined>;
    /**
     * The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The full URL of the dashboard.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
     */
    public /*out*/ readonly version!: pulumi.Output<number>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["configJson"] = state ? state.configJson : undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["folder"] = state ? state.folder : undefined;
            resourceInputs["message"] = state ? state.message : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["overwrite"] = state ? state.overwrite : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if ((!args || args.configJson === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configJson'");
            }
            resourceInputs["configJson"] = args ? args.configJson : undefined;
            resourceInputs["folder"] = args ? args.folder : undefined;
            resourceInputs["message"] = args ? args.message : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["overwrite"] = args ? args.overwrite : undefined;
            resourceInputs["dashboardId"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The complete dashboard model JSON.
     */
    configJson?: pulumi.Input<string>;
    /**
     * The numeric ID of the dashboard computed by Grafana.
     */
    dashboardId?: pulumi.Input<number>;
    /**
     * The id or UID of the folder to save the dashboard in.
     */
    folder?: pulumi.Input<string>;
    /**
     * Set a commit message for the version history.
     */
    message?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
     */
    overwrite?: pulumi.Input<boolean>;
    /**
     * The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards between multiple Grafana installs.
     */
    uid?: pulumi.Input<string>;
    /**
     * The full URL of the dashboard.
     */
    url?: pulumi.Input<string>;
    /**
     * Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your dashboard are not lost.
     */
    version?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The complete dashboard model JSON.
     */
    configJson: pulumi.Input<string>;
    /**
     * The id or UID of the folder to save the dashboard in.
     */
    folder?: pulumi.Input<string>;
    /**
     * Set a commit message for the version history.
     */
    message?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same dashboard uid.
     */
    overwrite?: pulumi.Input<boolean>;
}
