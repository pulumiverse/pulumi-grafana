// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Manages the entire set of permissions for a folder. Permissions that aren't specified when applying this resource will be removed.
 * * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
 * * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_permissions/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const team = new grafana.oss.Team("team", {name: "Team Name"});
 * const user = new grafana.oss.User("user", {
 *     email: "user.name@example.com",
 *     login: "user.name",
 *     password: "my-password",
 * });
 * const collection = new grafana.oss.Folder("collection", {title: "Folder Title"});
 * const collectionPermission = new grafana.oss.FolderPermission("collectionPermission", {
 *     folderUid: collection.uid,
 *     permissions: [
 *         {
 *             role: "Editor",
 *             permission: "Edit",
 *         },
 *         {
 *             teamId: team.id,
 *             permission: "View",
 *         },
 *         {
 *             userId: user.id,
 *             permission: "Admin",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:oss/folderPermission:FolderPermission name "{{ folderUID }}"
 * ```
 *
 * ```sh
 * $ pulumi import grafana:oss/folderPermission:FolderPermission name "{{ orgID }}:{{ folderUID }}"
 * ```
 */
export class FolderPermission extends pulumi.CustomResource {
    /**
     * Get an existing FolderPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FolderPermissionState, opts?: pulumi.CustomResourceOptions): FolderPermission {
        return new FolderPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:oss/folderPermission:FolderPermission';

    /**
     * Returns true if the given object is an instance of FolderPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FolderPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FolderPermission.__pulumiType;
    }

    /**
     * The UID of the folder.
     */
    public readonly folderUid!: pulumi.Output<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    public readonly orgId!: pulumi.Output<string | undefined>;
    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     */
    public readonly permissions!: pulumi.Output<outputs.oss.FolderPermissionPermission[] | undefined>;

    /**
     * Create a FolderPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FolderPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FolderPermissionArgs | FolderPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FolderPermissionState | undefined;
            resourceInputs["folderUid"] = state ? state.folderUid : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["permissions"] = state ? state.permissions : undefined;
        } else {
            const args = argsOrState as FolderPermissionArgs | undefined;
            if ((!args || args.folderUid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderUid'");
            }
            resourceInputs["folderUid"] = args ? args.folderUid : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["permissions"] = args ? args.permissions : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FolderPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FolderPermission resources.
 */
export interface FolderPermissionState {
    /**
     * The UID of the folder.
     */
    folderUid?: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.oss.FolderPermissionPermission>[]>;
}

/**
 * The set of arguments for constructing a FolderPermission resource.
 */
export interface FolderPermissionArgs {
    /**
     * The UID of the folder.
     */
    folderUid: pulumi.Input<string>;
    /**
     * The Organization ID. If not set, the Org ID defined in the provider block will be used.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The permission items to add/update. Items that are omitted from the list will be removed.
     */
    permissions?: pulumi.Input<pulumi.Input<inputs.oss.FolderPermissionPermission>[]>;
}
