// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AnnotationArgs, AnnotationState } from "./annotation";
export type Annotation = import("./annotation").Annotation;
export const Annotation: typeof import("./annotation").Annotation = null as any;
utilities.lazyLoad(exports, ["Annotation"], () => require("./annotation"));

export { DashboardArgs, DashboardState } from "./dashboard";
export type Dashboard = import("./dashboard").Dashboard;
export const Dashboard: typeof import("./dashboard").Dashboard = null as any;
utilities.lazyLoad(exports, ["Dashboard"], () => require("./dashboard"));

export { DashboardPermissionArgs, DashboardPermissionState } from "./dashboardPermission";
export type DashboardPermission = import("./dashboardPermission").DashboardPermission;
export const DashboardPermission: typeof import("./dashboardPermission").DashboardPermission = null as any;
utilities.lazyLoad(exports, ["DashboardPermission"], () => require("./dashboardPermission"));

export { DashboardPermissionItemArgs, DashboardPermissionItemState } from "./dashboardPermissionItem";
export type DashboardPermissionItem = import("./dashboardPermissionItem").DashboardPermissionItem;
export const DashboardPermissionItem: typeof import("./dashboardPermissionItem").DashboardPermissionItem = null as any;
utilities.lazyLoad(exports, ["DashboardPermissionItem"], () => require("./dashboardPermissionItem"));

export { DashboardPublicArgs, DashboardPublicState } from "./dashboardPublic";
export type DashboardPublic = import("./dashboardPublic").DashboardPublic;
export const DashboardPublic: typeof import("./dashboardPublic").DashboardPublic = null as any;
utilities.lazyLoad(exports, ["DashboardPublic"], () => require("./dashboardPublic"));

export { DataSourceArgs, DataSourceState } from "./dataSource";
export type DataSource = import("./dataSource").DataSource;
export const DataSource: typeof import("./dataSource").DataSource = null as any;
utilities.lazyLoad(exports, ["DataSource"], () => require("./dataSource"));

export { DataSourceConfigArgs, DataSourceConfigState } from "./dataSourceConfig";
export type DataSourceConfig = import("./dataSourceConfig").DataSourceConfig;
export const DataSourceConfig: typeof import("./dataSourceConfig").DataSourceConfig = null as any;
utilities.lazyLoad(exports, ["DataSourceConfig"], () => require("./dataSourceConfig"));

export { FolderArgs, FolderState } from "./folder";
export type Folder = import("./folder").Folder;
export const Folder: typeof import("./folder").Folder = null as any;
utilities.lazyLoad(exports, ["Folder"], () => require("./folder"));

export { FolderPermissionArgs, FolderPermissionState } from "./folderPermission";
export type FolderPermission = import("./folderPermission").FolderPermission;
export const FolderPermission: typeof import("./folderPermission").FolderPermission = null as any;
utilities.lazyLoad(exports, ["FolderPermission"], () => require("./folderPermission"));

export { FolderPermissionItemArgs, FolderPermissionItemState } from "./folderPermissionItem";
export type FolderPermissionItem = import("./folderPermissionItem").FolderPermissionItem;
export const FolderPermissionItem: typeof import("./folderPermissionItem").FolderPermissionItem = null as any;
utilities.lazyLoad(exports, ["FolderPermissionItem"], () => require("./folderPermissionItem"));

export { GetDashboardArgs, GetDashboardResult, GetDashboardOutputArgs } from "./getDashboard";
export const getDashboard: typeof import("./getDashboard").getDashboard = null as any;
export const getDashboardOutput: typeof import("./getDashboard").getDashboardOutput = null as any;
utilities.lazyLoad(exports, ["getDashboard","getDashboardOutput"], () => require("./getDashboard"));

export { GetDashboardsArgs, GetDashboardsResult, GetDashboardsOutputArgs } from "./getDashboards";
export const getDashboards: typeof import("./getDashboards").getDashboards = null as any;
export const getDashboardsOutput: typeof import("./getDashboards").getDashboardsOutput = null as any;
utilities.lazyLoad(exports, ["getDashboards","getDashboardsOutput"], () => require("./getDashboards"));

export { GetDataSourceArgs, GetDataSourceResult, GetDataSourceOutputArgs } from "./getDataSource";
export const getDataSource: typeof import("./getDataSource").getDataSource = null as any;
export const getDataSourceOutput: typeof import("./getDataSource").getDataSourceOutput = null as any;
utilities.lazyLoad(exports, ["getDataSource","getDataSourceOutput"], () => require("./getDataSource"));

export { GetFolderArgs, GetFolderResult, GetFolderOutputArgs } from "./getFolder";
export const getFolder: typeof import("./getFolder").getFolder = null as any;
export const getFolderOutput: typeof import("./getFolder").getFolderOutput = null as any;
utilities.lazyLoad(exports, ["getFolder","getFolderOutput"], () => require("./getFolder"));

export { GetFoldersArgs, GetFoldersResult, GetFoldersOutputArgs } from "./getFolders";
export const getFolders: typeof import("./getFolders").getFolders = null as any;
export const getFoldersOutput: typeof import("./getFolders").getFoldersOutput = null as any;
utilities.lazyLoad(exports, ["getFolders","getFoldersOutput"], () => require("./getFolders"));

export { GetLibraryPanelArgs, GetLibraryPanelResult, GetLibraryPanelOutputArgs } from "./getLibraryPanel";
export const getLibraryPanel: typeof import("./getLibraryPanel").getLibraryPanel = null as any;
export const getLibraryPanelOutput: typeof import("./getLibraryPanel").getLibraryPanelOutput = null as any;
utilities.lazyLoad(exports, ["getLibraryPanel","getLibraryPanelOutput"], () => require("./getLibraryPanel"));

export { GetLibraryPanelsArgs, GetLibraryPanelsResult, GetLibraryPanelsOutputArgs } from "./getLibraryPanels";
export const getLibraryPanels: typeof import("./getLibraryPanels").getLibraryPanels = null as any;
export const getLibraryPanelsOutput: typeof import("./getLibraryPanels").getLibraryPanelsOutput = null as any;
utilities.lazyLoad(exports, ["getLibraryPanels","getLibraryPanelsOutput"], () => require("./getLibraryPanels"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationPreferencesArgs, GetOrganizationPreferencesResult, GetOrganizationPreferencesOutputArgs } from "./getOrganizationPreferences";
export const getOrganizationPreferences: typeof import("./getOrganizationPreferences").getOrganizationPreferences = null as any;
export const getOrganizationPreferencesOutput: typeof import("./getOrganizationPreferences").getOrganizationPreferencesOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationPreferences","getOrganizationPreferencesOutput"], () => require("./getOrganizationPreferences"));

export { GetOrganizationUserArgs, GetOrganizationUserResult, GetOrganizationUserOutputArgs } from "./getOrganizationUser";
export const getOrganizationUser: typeof import("./getOrganizationUser").getOrganizationUser = null as any;
export const getOrganizationUserOutput: typeof import("./getOrganizationUser").getOrganizationUserOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizationUser","getOrganizationUserOutput"], () => require("./getOrganizationUser"));

export { GetServiceAccountArgs, GetServiceAccountResult, GetServiceAccountOutputArgs } from "./getServiceAccount";
export const getServiceAccount: typeof import("./getServiceAccount").getServiceAccount = null as any;
export const getServiceAccountOutput: typeof import("./getServiceAccount").getServiceAccountOutput = null as any;
utilities.lazyLoad(exports, ["getServiceAccount","getServiceAccountOutput"], () => require("./getServiceAccount"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetUsersResult } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { LibraryPanelArgs, LibraryPanelState } from "./libraryPanel";
export type LibraryPanel = import("./libraryPanel").LibraryPanel;
export const LibraryPanel: typeof import("./libraryPanel").LibraryPanel = null as any;
utilities.lazyLoad(exports, ["LibraryPanel"], () => require("./libraryPanel"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationPreferencesArgs, OrganizationPreferencesState } from "./organizationPreferences";
export type OrganizationPreferences = import("./organizationPreferences").OrganizationPreferences;
export const OrganizationPreferences: typeof import("./organizationPreferences").OrganizationPreferences = null as any;
utilities.lazyLoad(exports, ["OrganizationPreferences"], () => require("./organizationPreferences"));

export { PlaylistArgs, PlaylistState } from "./playlist";
export type Playlist = import("./playlist").Playlist;
export const Playlist: typeof import("./playlist").Playlist = null as any;
utilities.lazyLoad(exports, ["Playlist"], () => require("./playlist"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountPermissionArgs, ServiceAccountPermissionState } from "./serviceAccountPermission";
export type ServiceAccountPermission = import("./serviceAccountPermission").ServiceAccountPermission;
export const ServiceAccountPermission: typeof import("./serviceAccountPermission").ServiceAccountPermission = null as any;
utilities.lazyLoad(exports, ["ServiceAccountPermission"], () => require("./serviceAccountPermission"));

export { ServiceAccountPermissionItemArgs, ServiceAccountPermissionItemState } from "./serviceAccountPermissionItem";
export type ServiceAccountPermissionItem = import("./serviceAccountPermissionItem").ServiceAccountPermissionItem;
export const ServiceAccountPermissionItem: typeof import("./serviceAccountPermissionItem").ServiceAccountPermissionItem = null as any;
utilities.lazyLoad(exports, ["ServiceAccountPermissionItem"], () => require("./serviceAccountPermissionItem"));

export { ServiceAccountTokenArgs, ServiceAccountTokenState } from "./serviceAccountToken";
export type ServiceAccountToken = import("./serviceAccountToken").ServiceAccountToken;
export const ServiceAccountToken: typeof import("./serviceAccountToken").ServiceAccountToken = null as any;
utilities.lazyLoad(exports, ["ServiceAccountToken"], () => require("./serviceAccountToken"));

export { SsoSettingsArgs, SsoSettingsState } from "./ssoSettings";
export type SsoSettings = import("./ssoSettings").SsoSettings;
export const SsoSettings: typeof import("./ssoSettings").SsoSettings = null as any;
utilities.lazyLoad(exports, ["SsoSettings"], () => require("./ssoSettings"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "grafana:oss/annotation:Annotation":
                return new Annotation(name, <any>undefined, { urn })
            case "grafana:oss/dashboard:Dashboard":
                return new Dashboard(name, <any>undefined, { urn })
            case "grafana:oss/dashboardPermission:DashboardPermission":
                return new DashboardPermission(name, <any>undefined, { urn })
            case "grafana:oss/dashboardPermissionItem:DashboardPermissionItem":
                return new DashboardPermissionItem(name, <any>undefined, { urn })
            case "grafana:oss/dashboardPublic:DashboardPublic":
                return new DashboardPublic(name, <any>undefined, { urn })
            case "grafana:oss/dataSource:DataSource":
                return new DataSource(name, <any>undefined, { urn })
            case "grafana:oss/dataSourceConfig:DataSourceConfig":
                return new DataSourceConfig(name, <any>undefined, { urn })
            case "grafana:oss/folder:Folder":
                return new Folder(name, <any>undefined, { urn })
            case "grafana:oss/folderPermission:FolderPermission":
                return new FolderPermission(name, <any>undefined, { urn })
            case "grafana:oss/folderPermissionItem:FolderPermissionItem":
                return new FolderPermissionItem(name, <any>undefined, { urn })
            case "grafana:oss/libraryPanel:LibraryPanel":
                return new LibraryPanel(name, <any>undefined, { urn })
            case "grafana:oss/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "grafana:oss/organizationPreferences:OrganizationPreferences":
                return new OrganizationPreferences(name, <any>undefined, { urn })
            case "grafana:oss/playlist:Playlist":
                return new Playlist(name, <any>undefined, { urn })
            case "grafana:oss/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "grafana:oss/serviceAccountPermission:ServiceAccountPermission":
                return new ServiceAccountPermission(name, <any>undefined, { urn })
            case "grafana:oss/serviceAccountPermissionItem:ServiceAccountPermissionItem":
                return new ServiceAccountPermissionItem(name, <any>undefined, { urn })
            case "grafana:oss/serviceAccountToken:ServiceAccountToken":
                return new ServiceAccountToken(name, <any>undefined, { urn })
            case "grafana:oss/ssoSettings:SsoSettings":
                return new SsoSettings(name, <any>undefined, { urn })
            case "grafana:oss/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "grafana:oss/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("grafana", "oss/annotation", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dashboard", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dashboardPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dashboardPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dashboardPublic", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dataSource", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/dataSourceConfig", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/folder", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/folderPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/folderPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/libraryPanel", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/organization", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/organizationPreferences", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/playlist", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/serviceAccount", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/serviceAccountPermission", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/serviceAccountPermissionItem", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/serviceAccountToken", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/ssoSettings", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/team", _module)
pulumi.runtime.registerResourceModule("grafana", "oss/user", _module)
