// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumiverse/grafana";
 *
 * const test = new grafana.ConnectionsMetricsEndpointScrapeJob("test", {
 *     stackId: "1",
 *     name: "my-scrape-job",
 *     enabled: true,
 *     authenticationMethod: "basic",
 *     authenticationBasicUsername: "my-username",
 *     authenticationBasicPassword: "my-password",
 *     url: "https://grafana.com/metrics",
 *     scrapeIntervalSeconds: 120,
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 * $ pulumi import grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob name "{{ stack_id }}:{{ name }}"
 * ```
 */
export class ConnectionsMetricsEndpointScrapeJob extends pulumi.CustomResource {
    /**
     * Get an existing ConnectionsMetricsEndpointScrapeJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConnectionsMetricsEndpointScrapeJobState, opts?: pulumi.CustomResourceOptions): ConnectionsMetricsEndpointScrapeJob {
        return new ConnectionsMetricsEndpointScrapeJob(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob';

    /**
     * Returns true if the given object is an instance of ConnectionsMetricsEndpointScrapeJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConnectionsMetricsEndpointScrapeJob {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConnectionsMetricsEndpointScrapeJob.__pulumiType;
    }

    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    public readonly authenticationBasicPassword!: pulumi.Output<string | undefined>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    public readonly authenticationBasicUsername!: pulumi.Output<string | undefined>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    public readonly authenticationBearerToken!: pulumi.Output<string | undefined>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    public readonly authenticationMethod!: pulumi.Output<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    public readonly name!: pulumi.Output<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    public readonly scrapeIntervalSeconds!: pulumi.Output<number>;
    public readonly stackId!: pulumi.Output<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a ConnectionsMetricsEndpointScrapeJob resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConnectionsMetricsEndpointScrapeJobArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConnectionsMetricsEndpointScrapeJobArgs | ConnectionsMetricsEndpointScrapeJobState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConnectionsMetricsEndpointScrapeJobState | undefined;
            resourceInputs["authenticationBasicPassword"] = state ? state.authenticationBasicPassword : undefined;
            resourceInputs["authenticationBasicUsername"] = state ? state.authenticationBasicUsername : undefined;
            resourceInputs["authenticationBearerToken"] = state ? state.authenticationBearerToken : undefined;
            resourceInputs["authenticationMethod"] = state ? state.authenticationMethod : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scrapeIntervalSeconds"] = state ? state.scrapeIntervalSeconds : undefined;
            resourceInputs["stackId"] = state ? state.stackId : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as ConnectionsMetricsEndpointScrapeJobArgs | undefined;
            if ((!args || args.authenticationMethod === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationMethod'");
            }
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["authenticationBasicPassword"] = args?.authenticationBasicPassword ? pulumi.secret(args.authenticationBasicPassword) : undefined;
            resourceInputs["authenticationBasicUsername"] = args ? args.authenticationBasicUsername : undefined;
            resourceInputs["authenticationBearerToken"] = args?.authenticationBearerToken ? pulumi.secret(args.authenticationBearerToken) : undefined;
            resourceInputs["authenticationMethod"] = args ? args.authenticationMethod : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scrapeIntervalSeconds"] = args ? args.scrapeIntervalSeconds : undefined;
            resourceInputs["stackId"] = args ? args.stackId : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authenticationBasicPassword", "authenticationBearerToken"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ConnectionsMetricsEndpointScrapeJob.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConnectionsMetricsEndpointScrapeJob resources.
 */
export interface ConnectionsMetricsEndpointScrapeJobState {
    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicPassword?: pulumi.Input<string>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicUsername?: pulumi.Input<string>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    authenticationBearerToken?: pulumi.Input<string>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    authenticationMethod?: pulumi.Input<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    scrapeIntervalSeconds?: pulumi.Input<number>;
    stackId?: pulumi.Input<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ConnectionsMetricsEndpointScrapeJob resource.
 */
export interface ConnectionsMetricsEndpointScrapeJobArgs {
    /**
     * Password for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicPassword?: pulumi.Input<string>;
    /**
     * Username for basic authentication, use if scrape job is using basic authentication method
     */
    authenticationBasicUsername?: pulumi.Input<string>;
    /**
     * Bearer token used for authentication, use if scrape job is using bearer authentication method
     */
    authenticationBearerToken?: pulumi.Input<string>;
    /**
     * Method to pass authentication credentials: basic or bearer.
     */
    authenticationMethod: pulumi.Input<string>;
    /**
     * Whether the metrics endpoint scrape job is enabled or not.
     */
    enabled?: pulumi.Input<boolean>;
    name?: pulumi.Input<string>;
    /**
     * Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
     */
    scrapeIntervalSeconds?: pulumi.Input<number>;
    stackId: pulumi.Input<string>;
    /**
     * The url to scrape metrics from; a valid HTTPs URL is required.
     */
    url: pulumi.Input<string>;
}
