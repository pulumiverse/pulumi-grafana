# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchedulesResult',
    'AwaitableGetSchedulesResult',
    'get_schedules',
    'get_schedules_output',
]

@pulumi.output_type
class GetSchedulesResult:
    """
    A collection of values returned by getSchedules.
    """
    def __init__(__self__, id=None, schedules=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if schedules and not isinstance(schedules, list):
            raise TypeError("Expected argument 'schedules' to be a list")
        pulumi.set(__self__, "schedules", schedules)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The identifier for this data source.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def schedules(self) -> Sequence['outputs.GetSchedulesScheduleResult']:
        """
        List of k6 schedules.
        """
        return pulumi.get(self, "schedules")


class AwaitableGetSchedulesResult(GetSchedulesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchedulesResult(
            id=self.id,
            schedules=self.schedules)


def get_schedules(opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchedulesResult:
    """
    Retrieves all k6 schedules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_grafana as grafana
    import pulumiverse_grafana as grafana

    schedules_project = grafana.k6.Project("schedules_project", name="Terraform Schedules Test Project")
    schedules_load_test = grafana.k6.LoadTest("schedules_load_test",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    schedules_load_test2 = grafana.k6.LoadTest("schedules_load_test_2",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules (2)",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    schedules_load_test3 = grafana.k6.LoadTest("schedules_load_test_3",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules (3)",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    test_schedule1 = grafana.k6.Schedule("test_schedule_1",
        load_test_id=schedules_load_test.id,
        starts="2029-12-25T10:00:00Z",
        recurrence_rule={
            "frequency": "MONTHLY",
            "interval": 15,
            "count": 100,
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test]))
    test_schedule2 = grafana.k6.Schedule("test_schedule_2",
        load_test_id=schedules_load_test2.id,
        starts="2023-12-26T14:00:00Z",
        recurrence_rule={
            "frequency": "WEEKLY",
            "interval": 2,
            "until": "2047-01-31T23:59:59Z",
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test2]))
    test_schedule3 = grafana.k6.Schedule("test_schedule_3",
        load_test_id=schedules_load_test3.id,
        starts="2023-12-26T14:00:00Z",
        cron={
            "schedule": "0 10 1 12 6",
            "timezone": "UTC",
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test3]))
    from_load_test_id = grafana.k6.get_schedules()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('grafana:k6/getSchedules:getSchedules', __args__, opts=opts, typ=GetSchedulesResult).value

    return AwaitableGetSchedulesResult(
        id=pulumi.get(__ret__, 'id'),
        schedules=pulumi.get(__ret__, 'schedules'))
def get_schedules_output(opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSchedulesResult]:
    """
    Retrieves all k6 schedules.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_grafana as grafana
    import pulumiverse_grafana as grafana

    schedules_project = grafana.k6.Project("schedules_project", name="Terraform Schedules Test Project")
    schedules_load_test = grafana.k6.LoadTest("schedules_load_test",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    schedules_load_test2 = grafana.k6.LoadTest("schedules_load_test_2",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules (2)",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    schedules_load_test3 = grafana.k6.LoadTest("schedules_load_test_3",
        project_id=schedules_project.id,
        name="Terraform Test Load Test for Schedules (3)",
        script=\"\"\"export default function() {
      console.log('Hello from k6 schedules test!');
    }
    \"\"\",
        opts = pulumi.ResourceOptions(depends_on=[schedules_project]))
    test_schedule1 = grafana.k6.Schedule("test_schedule_1",
        load_test_id=schedules_load_test.id,
        starts="2029-12-25T10:00:00Z",
        recurrence_rule={
            "frequency": "MONTHLY",
            "interval": 15,
            "count": 100,
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test]))
    test_schedule2 = grafana.k6.Schedule("test_schedule_2",
        load_test_id=schedules_load_test2.id,
        starts="2023-12-26T14:00:00Z",
        recurrence_rule={
            "frequency": "WEEKLY",
            "interval": 2,
            "until": "2047-01-31T23:59:59Z",
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test2]))
    test_schedule3 = grafana.k6.Schedule("test_schedule_3",
        load_test_id=schedules_load_test3.id,
        starts="2023-12-26T14:00:00Z",
        cron={
            "schedule": "0 10 1 12 6",
            "timezone": "UTC",
        },
        opts = pulumi.ResourceOptions(depends_on=[schedules_load_test3]))
    from_load_test_id = grafana.k6.get_schedules()
    ```
    """
    __args__ = dict()
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('grafana:k6/getSchedules:getSchedules', __args__, opts=opts, typ=GetSchedulesResult)
    return __ret__.apply(lambda __response__: GetSchedulesResult(
        id=pulumi.get(__response__, 'id'),
        schedules=pulumi.get(__response__, 'schedules')))
