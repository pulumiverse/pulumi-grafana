# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'HolidayCustomPeriod',
    'OutlierDetectorAlgorithm',
    'OutlierDetectorAlgorithmConfig',
]

@pulumi.output_type
class HolidayCustomPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HolidayCustomPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HolidayCustomPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HolidayCustomPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: str,
                 start_time: str,
                 name: Optional[str] = None):
        """
        :param str name: The name of the custom period.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> str:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the custom period.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class OutlierDetectorAlgorithm(dict):
    def __init__(__self__, *,
                 name: str,
                 sensitivity: float,
                 config: Optional['outputs.OutlierDetectorAlgorithmConfig'] = None):
        """
        :param str name: The name of the algorithm to use ('mad' or 'dbscan').
        :param float sensitivity: Specify the sensitivity of the detector (in range [0,1]).
        :param 'OutlierDetectorAlgorithmConfigArgs' config: For DBSCAN only, specify the configuration map
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitivity", sensitivity)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the algorithm to use ('mad' or 'dbscan').
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sensitivity(self) -> float:
        """
        Specify the sensitivity of the detector (in range [0,1]).
        """
        return pulumi.get(self, "sensitivity")

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.OutlierDetectorAlgorithmConfig']:
        """
        For DBSCAN only, specify the configuration map
        """
        return pulumi.get(self, "config")


@pulumi.output_type
class OutlierDetectorAlgorithmConfig(dict):
    def __init__(__self__, *,
                 epsilon: float):
        """
        :param float epsilon: Specify the epsilon parameter (positive float)
        """
        pulumi.set(__self__, "epsilon", epsilon)

    @property
    @pulumi.getter
    def epsilon(self) -> float:
        """
        Specify the epsilon parameter (positive float)
        """
        return pulumi.get(self, "epsilon")


