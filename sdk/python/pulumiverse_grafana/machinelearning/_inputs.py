# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'HolidayCustomPeriodArgs',
    'HolidayCustomPeriodArgsDict',
    'OutlierDetectorAlgorithmArgs',
    'OutlierDetectorAlgorithmArgsDict',
    'OutlierDetectorAlgorithmConfigArgs',
    'OutlierDetectorAlgorithmConfigArgsDict',
]

MYPY = False

if not MYPY:
    class HolidayCustomPeriodArgsDict(TypedDict):
        end_time: pulumi.Input[str]
        start_time: pulumi.Input[str]
        name: NotRequired[pulumi.Input[str]]
        """
        The name of the custom period.
        """
elif False:
    HolidayCustomPeriodArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HolidayCustomPeriodArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the custom period.
        """
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the custom period.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


if not MYPY:
    class OutlierDetectorAlgorithmArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the algorithm to use ('mad' or 'dbscan').
        """
        sensitivity: pulumi.Input[float]
        """
        Specify the sensitivity of the detector (in range [0,1]).
        """
        config: NotRequired[pulumi.Input['OutlierDetectorAlgorithmConfigArgsDict']]
        """
        For DBSCAN only, specify the configuration map
        """
elif False:
    OutlierDetectorAlgorithmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OutlierDetectorAlgorithmArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 sensitivity: pulumi.Input[float],
                 config: Optional[pulumi.Input['OutlierDetectorAlgorithmConfigArgs']] = None):
        """
        :param pulumi.Input[str] name: The name of the algorithm to use ('mad' or 'dbscan').
        :param pulumi.Input[float] sensitivity: Specify the sensitivity of the detector (in range [0,1]).
        :param pulumi.Input['OutlierDetectorAlgorithmConfigArgs'] config: For DBSCAN only, specify the configuration map
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "sensitivity", sensitivity)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the algorithm to use ('mad' or 'dbscan').
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def sensitivity(self) -> pulumi.Input[float]:
        """
        Specify the sensitivity of the detector (in range [0,1]).
        """
        return pulumi.get(self, "sensitivity")

    @sensitivity.setter
    def sensitivity(self, value: pulumi.Input[float]):
        pulumi.set(self, "sensitivity", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input['OutlierDetectorAlgorithmConfigArgs']]:
        """
        For DBSCAN only, specify the configuration map
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input['OutlierDetectorAlgorithmConfigArgs']]):
        pulumi.set(self, "config", value)


if not MYPY:
    class OutlierDetectorAlgorithmConfigArgsDict(TypedDict):
        epsilon: pulumi.Input[float]
        """
        Specify the epsilon parameter (positive float)
        """
elif False:
    OutlierDetectorAlgorithmConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OutlierDetectorAlgorithmConfigArgs:
    def __init__(__self__, *,
                 epsilon: pulumi.Input[float]):
        """
        :param pulumi.Input[float] epsilon: Specify the epsilon parameter (positive float)
        """
        pulumi.set(__self__, "epsilon", epsilon)

    @property
    @pulumi.getter
    def epsilon(self) -> pulumi.Input[float]:
        """
        Specify the epsilon parameter (positive float)
        """
        return pulumi.get(self, "epsilon")

    @epsilon.setter
    def epsilon(self, value: pulumi.Input[float]):
        pulumi.set(self, "epsilon", value)


