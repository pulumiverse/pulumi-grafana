# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AppsDashboardV1Alpha1Args', 'AppsDashboardV1Alpha1']

@pulumi.input_type
class AppsDashboardV1Alpha1Args:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']] = None,
                 options: Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']] = None,
                 spec: Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']] = None):
        """
        The set of arguments for constructing a AppsDashboardV1Alpha1 resource.
        :param pulumi.Input['AppsDashboardV1Alpha1MetadataArgs'] metadata: The metadata of the resource.
        :param pulumi.Input['AppsDashboardV1Alpha1OptionsArgs'] options: Options for applying the resource.
        :param pulumi.Input['AppsDashboardV1Alpha1SpecArgs'] spec: The spec of the resource.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']]:
        """
        The metadata of the resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']]:
        """
        Options for applying the resource.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']]:
        """
        The spec of the resource.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class _AppsDashboardV1Alpha1State:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']] = None,
                 options: Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']] = None,
                 spec: Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']] = None):
        """
        Input properties used for looking up and filtering AppsDashboardV1Alpha1 resources.
        :param pulumi.Input['AppsDashboardV1Alpha1MetadataArgs'] metadata: The metadata of the resource.
        :param pulumi.Input['AppsDashboardV1Alpha1OptionsArgs'] options: Options for applying the resource.
        :param pulumi.Input['AppsDashboardV1Alpha1SpecArgs'] spec: The spec of the resource.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']]:
        """
        The metadata of the resource.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1MetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']]:
        """
        Options for applying the resource.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1OptionsArgs']]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']]:
        """
        The spec of the resource.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['AppsDashboardV1Alpha1SpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.type_token("grafana:experimental/appsDashboardV1Alpha1:AppsDashboardV1Alpha1")
class AppsDashboardV1Alpha1(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1MetadataArgs', 'AppsDashboardV1Alpha1MetadataArgsDict']]] = None,
                 options: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1OptionsArgs', 'AppsDashboardV1Alpha1OptionsArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1SpecArgs', 'AppsDashboardV1Alpha1SpecArgsDict']]] = None,
                 __props__=None):
        """
        Manages Grafana dashboards via the new Grafana App Platform API. This resource is currently **EXPERIMENTAL** and may be subject to change. It requires a development build of Grafana with specific feature flags enabled.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1MetadataArgs', 'AppsDashboardV1Alpha1MetadataArgsDict']] metadata: The metadata of the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1OptionsArgs', 'AppsDashboardV1Alpha1OptionsArgsDict']] options: Options for applying the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1SpecArgs', 'AppsDashboardV1Alpha1SpecArgsDict']] spec: The spec of the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AppsDashboardV1Alpha1Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Grafana dashboards via the new Grafana App Platform API. This resource is currently **EXPERIMENTAL** and may be subject to change. It requires a development build of Grafana with specific feature flags enabled.

        :param str resource_name: The name of the resource.
        :param AppsDashboardV1Alpha1Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppsDashboardV1Alpha1Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 metadata: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1MetadataArgs', 'AppsDashboardV1Alpha1MetadataArgsDict']]] = None,
                 options: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1OptionsArgs', 'AppsDashboardV1Alpha1OptionsArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1SpecArgs', 'AppsDashboardV1Alpha1SpecArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppsDashboardV1Alpha1Args.__new__(AppsDashboardV1Alpha1Args)

            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["options"] = options
            __props__.__dict__["spec"] = spec
        super(AppsDashboardV1Alpha1, __self__).__init__(
            'grafana:experimental/appsDashboardV1Alpha1:AppsDashboardV1Alpha1',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            metadata: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1MetadataArgs', 'AppsDashboardV1Alpha1MetadataArgsDict']]] = None,
            options: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1OptionsArgs', 'AppsDashboardV1Alpha1OptionsArgsDict']]] = None,
            spec: Optional[pulumi.Input[Union['AppsDashboardV1Alpha1SpecArgs', 'AppsDashboardV1Alpha1SpecArgsDict']]] = None) -> 'AppsDashboardV1Alpha1':
        """
        Get an existing AppsDashboardV1Alpha1 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1MetadataArgs', 'AppsDashboardV1Alpha1MetadataArgsDict']] metadata: The metadata of the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1OptionsArgs', 'AppsDashboardV1Alpha1OptionsArgsDict']] options: Options for applying the resource.
        :param pulumi.Input[Union['AppsDashboardV1Alpha1SpecArgs', 'AppsDashboardV1Alpha1SpecArgsDict']] spec: The spec of the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppsDashboardV1Alpha1State.__new__(_AppsDashboardV1Alpha1State)

        __props__.__dict__["metadata"] = metadata
        __props__.__dict__["options"] = options
        __props__.__dict__["spec"] = spec
        return AppsDashboardV1Alpha1(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['outputs.AppsDashboardV1Alpha1Metadata']]:
        """
        The metadata of the resource.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def options(self) -> pulumi.Output[Optional['outputs.AppsDashboardV1Alpha1Options']]:
        """
        Options for applying the resource.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[Optional['outputs.AppsDashboardV1Alpha1Spec']]:
        """
        The spec of the resource.
        """
        return pulumi.get(self, "spec")

