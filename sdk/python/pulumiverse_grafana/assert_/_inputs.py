# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'CustomModelRulesRulesArgs',
    'CustomModelRulesRulesArgsDict',
    'CustomModelRulesRulesEntityArgs',
    'CustomModelRulesRulesEntityArgsDict',
    'CustomModelRulesRulesEntityDefinedByArgs',
    'CustomModelRulesRulesEntityDefinedByArgsDict',
    'LogConfigMatchArgs',
    'LogConfigMatchArgsDict',
]

MYPY = False

if not MYPY:
    class CustomModelRulesRulesArgsDict(TypedDict):
        entities: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityArgsDict']]]
        """
        List of entities to define in the custom model rules.
        """
elif False:
    CustomModelRulesRulesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomModelRulesRulesArgs:
    def __init__(__self__, *,
                 entities: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityArgs']]] entities: List of entities to define in the custom model rules.
        """
        pulumi.set(__self__, "entities", entities)

    @_builtins.property
    @pulumi.getter
    def entities(self) -> pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityArgs']]]:
        """
        List of entities to define in the custom model rules.
        """
        return pulumi.get(self, "entities")

    @entities.setter
    def entities(self, value: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityArgs']]]):
        pulumi.set(self, "entities", value)


if not MYPY:
    class CustomModelRulesRulesEntityArgsDict(TypedDict):
        defined_bies: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityDefinedByArgsDict']]]
        """
        List of queries that define this entity.
        """
        name: pulumi.Input[_builtins.str]
        """
        The name of the entity.
        """
        type: pulumi.Input[_builtins.str]
        """
        The type of the entity (e.g., Service, Pod, Namespace).
        """
        disabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether this entity is disabled.
        """
        enriched_bies: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        List of enrichment sources for the entity.
        """
        lookup: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Lookup mappings for the entity.
        """
        scope: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Scope labels for the entity.
        """
elif False:
    CustomModelRulesRulesEntityArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomModelRulesRulesEntityArgs:
    def __init__(__self__, *,
                 defined_bies: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityDefinedByArgs']]],
                 name: pulumi.Input[_builtins.str],
                 type: pulumi.Input[_builtins.str],
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 enriched_bies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 lookup: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 scope: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityDefinedByArgs']]] defined_bies: List of queries that define this entity.
        :param pulumi.Input[_builtins.str] name: The name of the entity.
        :param pulumi.Input[_builtins.str] type: The type of the entity (e.g., Service, Pod, Namespace).
        :param pulumi.Input[_builtins.bool] disabled: Whether this entity is disabled.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] enriched_bies: List of enrichment sources for the entity.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] lookup: Lookup mappings for the entity.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] scope: Scope labels for the entity.
        """
        pulumi.set(__self__, "defined_bies", defined_bies)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enriched_bies is not None:
            pulumi.set(__self__, "enriched_bies", enriched_bies)
        if lookup is not None:
            pulumi.set(__self__, "lookup", lookup)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @_builtins.property
    @pulumi.getter(name="definedBies")
    def defined_bies(self) -> pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityDefinedByArgs']]]:
        """
        List of queries that define this entity.
        """
        return pulumi.get(self, "defined_bies")

    @defined_bies.setter
    def defined_bies(self, value: pulumi.Input[Sequence[pulumi.Input['CustomModelRulesRulesEntityDefinedByArgs']]]):
        pulumi.set(self, "defined_bies", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the entity.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of the entity (e.g., Service, Pod, Namespace).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this entity is disabled.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="enrichedBies")
    def enriched_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        List of enrichment sources for the entity.
        """
        return pulumi.get(self, "enriched_bies")

    @enriched_bies.setter
    def enriched_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "enriched_bies", value)

    @_builtins.property
    @pulumi.getter
    def lookup(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Lookup mappings for the entity.
        """
        return pulumi.get(self, "lookup")

    @lookup.setter
    def lookup(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "lookup", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Scope labels for the entity.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "scope", value)


if not MYPY:
    class CustomModelRulesRulesEntityDefinedByArgsDict(TypedDict):
        query: pulumi.Input[_builtins.str]
        """
        The Prometheus query that defines this entity.
        """
        disabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
        """
        label_values: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Label value mappings for the query.
        """
        literals: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
        """
        Literal value mappings for the query.
        """
        metric_value: NotRequired[pulumi.Input[_builtins.str]]
        """
        Metric value for the query.
        """
elif False:
    CustomModelRulesRulesEntityDefinedByArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CustomModelRulesRulesEntityDefinedByArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[_builtins.str],
                 disabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 label_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 literals: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 metric_value: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] query: The Prometheus query that defines this entity.
        :param pulumi.Input[_builtins.bool] disabled: Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] label_values: Label value mappings for the query.
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] literals: Literal value mappings for the query.
        :param pulumi.Input[_builtins.str] metric_value: Metric value for the query.
        """
        pulumi.set(__self__, "query", query)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if label_values is not None:
            pulumi.set(__self__, "label_values", label_values)
        if literals is not None:
            pulumi.set(__self__, "literals", literals)
        if metric_value is not None:
            pulumi.set(__self__, "metric_value", metric_value)

    @_builtins.property
    @pulumi.getter
    def query(self) -> pulumi.Input[_builtins.str]:
        """
        The Prometheus query that defines this entity.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "query", value)

    @_builtins.property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        Whether this rule is disabled. When true, only the 'query' field is used to match an existing rule to disable; other fields are ignored.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "disabled", value)

    @_builtins.property
    @pulumi.getter(name="labelValues")
    def label_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Label value mappings for the query.
        """
        return pulumi.get(self, "label_values")

    @label_values.setter
    def label_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "label_values", value)

    @_builtins.property
    @pulumi.getter
    def literals(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Literal value mappings for the query.
        """
        return pulumi.get(self, "literals")

    @literals.setter
    def literals(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "literals", value)

    @_builtins.property
    @pulumi.getter(name="metricValue")
    def metric_value(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Metric value for the query.
        """
        return pulumi.get(self, "metric_value")

    @metric_value.setter
    def metric_value(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "metric_value", value)


if not MYPY:
    class LogConfigMatchArgsDict(TypedDict):
        op: pulumi.Input[_builtins.str]
        """
        Operation to use for matching. One of: EQUALS, NOT*EQUALS, CONTAINS, DOES*NOT*CONTAIN, IS*NULL, IS*NOT*NULL.
        """
        property: pulumi.Input[_builtins.str]
        """
        Entity property to match.
        """
        values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        Values to match against.
        """
elif False:
    LogConfigMatchArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LogConfigMatchArgs:
    def __init__(__self__, *,
                 op: pulumi.Input[_builtins.str],
                 property: pulumi.Input[_builtins.str],
                 values: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        :param pulumi.Input[_builtins.str] op: Operation to use for matching. One of: EQUALS, NOT*EQUALS, CONTAINS, DOES*NOT*CONTAIN, IS*NULL, IS*NOT*NULL.
        :param pulumi.Input[_builtins.str] property: Entity property to match.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] values: Values to match against.
        """
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "values", values)

    @_builtins.property
    @pulumi.getter
    def op(self) -> pulumi.Input[_builtins.str]:
        """
        Operation to use for matching. One of: EQUALS, NOT*EQUALS, CONTAINS, DOES*NOT*CONTAIN, IS*NULL, IS*NOT*NULL.
        """
        return pulumi.get(self, "op")

    @op.setter
    def op(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "op", value)

    @_builtins.property
    @pulumi.getter
    def property(self) -> pulumi.Input[_builtins.str]:
        """
        Entity property to match.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "property", value)

    @_builtins.property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        Values to match against.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "values", value)


