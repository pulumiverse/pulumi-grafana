# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomModelRulesArgs', 'CustomModelRules']

@pulumi.input_type
class CustomModelRulesArgs:
    def __init__(__self__, *,
                 rules: pulumi.Input['CustomModelRulesRulesArgs'],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a CustomModelRules resource.
        :param pulumi.Input['CustomModelRulesRulesArgs'] rules: The rules configuration for the custom model rules.
        :param pulumi.Input[_builtins.str] name: The name of the custom model rules.
        """
        pulumi.set(__self__, "rules", rules)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Input['CustomModelRulesRulesArgs']:
        """
        The rules configuration for the custom model rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input['CustomModelRulesRulesArgs']):
        pulumi.set(self, "rules", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the custom model rules.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _CustomModelRulesState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input['CustomModelRulesRulesArgs']] = None):
        """
        Input properties used for looking up and filtering CustomModelRules resources.
        :param pulumi.Input[_builtins.str] name: The name of the custom model rules.
        :param pulumi.Input['CustomModelRulesRulesArgs'] rules: The rules configuration for the custom model rules.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the custom model rules.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input['CustomModelRulesRulesArgs']]:
        """
        The rules configuration for the custom model rules.
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input['CustomModelRulesRulesArgs']]):
        pulumi.set(self, "rules", value)


@pulumi.type_token("grafana:assert/customModelRules:CustomModelRules")
class CustomModelRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Union['CustomModelRulesRulesArgs', 'CustomModelRulesRulesArgsDict']]] = None,
                 __props__=None):
        """
        Manages Asserts Custom Model Rules through the Grafana API.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_grafana as grafana

        test = grafana.assert_.CustomModelRules("test",
            name="test-anything",
            rules={
                "entities": [{
                    "type": "Service",
                    "name": "workload | service | job",
                    "scope": {
                        "namespace": "namespace",
                        "env": "asserts_env",
                        "site": "asserts_site",
                    },
                    "lookup": {
                        "workload": "workload | deployment | statefulset | daemonset | replicaset",
                        "service": "service",
                        "job": "job",
                        "proxy_job": "job",
                    },
                    "defined_bies": [
                        {
                            "query": "up{job!=''}",
                            "disabled": False,
                            "label_values": {
                                "service": "service",
                                "job": "job",
                            },
                            "literals": {
                                "_source": "up_query",
                            },
                        },
                        {
                            "query": "up{job='disabled'}",
                            "disabled": True,
                        },
                    ],
                }],
            })
        ```

        ## Import

        ```sh
        $ pulumi import grafana:assert/customModelRules:CustomModelRules name "{{ name }}"
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the custom model rules.
        :param pulumi.Input[Union['CustomModelRulesRulesArgs', 'CustomModelRulesRulesArgsDict']] rules: The rules configuration for the custom model rules.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomModelRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages Asserts Custom Model Rules through the Grafana API.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_grafana as grafana

        test = grafana.assert_.CustomModelRules("test",
            name="test-anything",
            rules={
                "entities": [{
                    "type": "Service",
                    "name": "workload | service | job",
                    "scope": {
                        "namespace": "namespace",
                        "env": "asserts_env",
                        "site": "asserts_site",
                    },
                    "lookup": {
                        "workload": "workload | deployment | statefulset | daemonset | replicaset",
                        "service": "service",
                        "job": "job",
                        "proxy_job": "job",
                    },
                    "defined_bies": [
                        {
                            "query": "up{job!=''}",
                            "disabled": False,
                            "label_values": {
                                "service": "service",
                                "job": "job",
                            },
                            "literals": {
                                "_source": "up_query",
                            },
                        },
                        {
                            "query": "up{job='disabled'}",
                            "disabled": True,
                        },
                    ],
                }],
            })
        ```

        ## Import

        ```sh
        $ pulumi import grafana:assert/customModelRules:CustomModelRules name "{{ name }}"
        ```

        :param str resource_name: The name of the resource.
        :param CustomModelRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomModelRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 rules: Optional[pulumi.Input[Union['CustomModelRulesRulesArgs', 'CustomModelRulesRulesArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomModelRulesArgs.__new__(CustomModelRulesArgs)

            __props__.__dict__["name"] = name
            if rules is None and not opts.urn:
                raise TypeError("Missing required property 'rules'")
            __props__.__dict__["rules"] = rules
        super(CustomModelRules, __self__).__init__(
            'grafana:assert/customModelRules:CustomModelRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            rules: Optional[pulumi.Input[Union['CustomModelRulesRulesArgs', 'CustomModelRulesRulesArgsDict']]] = None) -> 'CustomModelRules':
        """
        Get an existing CustomModelRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: The name of the custom model rules.
        :param pulumi.Input[Union['CustomModelRulesRulesArgs', 'CustomModelRulesRulesArgsDict']] rules: The rules configuration for the custom model rules.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CustomModelRulesState.__new__(_CustomModelRulesState)

        __props__.__dict__["name"] = name
        __props__.__dict__["rules"] = rules
        return CustomModelRules(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the custom model rules.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def rules(self) -> pulumi.Output['outputs.CustomModelRulesRules']:
        """
        The rules configuration for the custom model rules.
        """
        return pulumi.get(self, "rules")

