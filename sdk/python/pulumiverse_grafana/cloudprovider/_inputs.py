# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AwsCloudwatchScrapeJobCustomNamespaceArgs',
    'AwsCloudwatchScrapeJobCustomNamespaceArgsDict',
    'AwsCloudwatchScrapeJobCustomNamespaceMetricArgs',
    'AwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict',
    'AwsCloudwatchScrapeJobServiceArgs',
    'AwsCloudwatchScrapeJobServiceArgsDict',
    'AwsCloudwatchScrapeJobServiceMetricArgs',
    'AwsCloudwatchScrapeJobServiceMetricArgsDict',
    'AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs',
    'AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict',
    'AzureCredentialAutoDiscoveryConfigurationArgs',
    'AzureCredentialAutoDiscoveryConfigurationArgsDict',
    'AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs',
    'AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict',
    'AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs',
    'AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict',
    'AzureCredentialResourceDiscoveryTagFilterArgs',
    'AzureCredentialResourceDiscoveryTagFilterArgsDict',
    'GetAwsCloudwatchScrapeJobCustomNamespaceArgs',
    'GetAwsCloudwatchScrapeJobCustomNamespaceArgsDict',
    'GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs',
    'GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict',
    'GetAwsCloudwatchScrapeJobServiceArgs',
    'GetAwsCloudwatchScrapeJobServiceArgsDict',
    'GetAwsCloudwatchScrapeJobServiceMetricArgs',
    'GetAwsCloudwatchScrapeJobServiceMetricArgsDict',
    'GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs',
    'GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgsDict',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs',
    'GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgsDict',
    'GetAzureCredentialAutoDiscoveryConfigurationArgs',
    'GetAzureCredentialAutoDiscoveryConfigurationArgsDict',
    'GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs',
    'GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict',
    'GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs',
    'GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict',
    'GetAzureCredentialResourceDiscoveryTagFilterArgs',
    'GetAzureCredentialResourceDiscoveryTagFilterArgsDict',
]

MYPY = False

if not MYPY:
    class AwsCloudwatchScrapeJobCustomNamespaceArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the custom namespace to scrape.
        """
        metrics: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict']]]]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        scrape_interval_seconds: NotRequired[pulumi.Input[int]]
        """
        The interval in seconds to scrape the custom namespace.
        """
elif False:
    AwsCloudwatchScrapeJobCustomNamespaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchScrapeJobCustomNamespaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]]] = None,
                 scrape_interval_seconds: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: The name of the custom namespace to scrape.
        :param pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        :param pulumi.Input[int] scrape_interval_seconds: The interval in seconds to scrape the custom namespace.
        """
        pulumi.set(__self__, "name", name)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if scrape_interval_seconds is not None:
            pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the custom namespace to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]]]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The interval in seconds to scrape the custom namespace.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scrape_interval_seconds", value)


if not MYPY:
    class AwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the metric to scrape.
        """
        statistics: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A set of statistics to scrape.
        """
elif False:
    AwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchScrapeJobCustomNamespaceMetricArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 statistics: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: The name of the metric to scrape.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class AwsCloudwatchScrapeJobServiceArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
        """
        metrics: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceMetricArgsDict']]]]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        resource_discovery_tag_filters: NotRequired[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict']]]]
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        scrape_interval_seconds: NotRequired[pulumi.Input[int]]
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        tags_to_add_to_metrics: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
elif False:
    AwsCloudwatchScrapeJobServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchScrapeJobServiceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceMetricArgs']]]] = None,
                 resource_discovery_tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]]] = None,
                 scrape_interval_seconds: Optional[pulumi.Input[int]] = None,
                 tags_to_add_to_metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
        :param pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceMetricArgs']]] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        :param pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]] resource_discovery_tag_filters: One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        :param pulumi.Input[int] scrape_interval_seconds: The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags_to_add_to_metrics: A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        pulumi.set(__self__, "name", name)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if resource_discovery_tag_filters is not None:
            pulumi.set(__self__, "resource_discovery_tag_filters", resource_discovery_tag_filters)
        if scrape_interval_seconds is not None:
            pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)
        if tags_to_add_to_metrics is not None:
            pulumi.set(__self__, "tags_to_add_to_metrics", tags_to_add_to_metrics)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceMetricArgs']]]]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Please note that AWS metric names must be supplied, and not their PromQL counterparts. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceMetricArgs']]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="resourceDiscoveryTagFilters")
    def resource_discovery_tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]]]:
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "resource_discovery_tag_filters")

    @resource_discovery_tag_filters.setter
    def resource_discovery_tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]]]):
        pulumi.set(self, "resource_discovery_tag_filters", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scrape_interval_seconds", value)

    @property
    @pulumi.getter(name="tagsToAddToMetrics")
    def tags_to_add_to_metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        return pulumi.get(self, "tags_to_add_to_metrics")

    @tags_to_add_to_metrics.setter
    def tags_to_add_to_metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags_to_add_to_metrics", value)


if not MYPY:
    class AwsCloudwatchScrapeJobServiceMetricArgsDict(TypedDict):
        name: pulumi.Input[str]
        """
        The name of the metric to scrape.
        """
        statistics: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        A set of statistics to scrape.
        """
elif False:
    AwsCloudwatchScrapeJobServiceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchScrapeJobServiceMetricArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 statistics: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] name: The name of the metric to scrape.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        The key of the tag filter.
        """
        value: pulumi.Input[str]
        """
        The value of the tag filter.
        """
elif False:
    AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key of the tag filter.
        :param pulumi.Input[str] value: The value of the tag filter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AzureCredentialAutoDiscoveryConfigurationArgsDict(TypedDict):
        resource_type_configurations: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict']]]
        """
        The list of resource type configurations.
        """
        subscription_id: pulumi.Input[str]
        """
        The subscription ID of the Azure account.
        """
elif False:
    AzureCredentialAutoDiscoveryConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureCredentialAutoDiscoveryConfigurationArgs:
    def __init__(__self__, *,
                 resource_type_configurations: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']]],
                 subscription_id: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']]] resource_type_configurations: The list of resource type configurations.
        :param pulumi.Input[str] subscription_id: The subscription ID of the Azure account.
        """
        pulumi.set(__self__, "resource_type_configurations", resource_type_configurations)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="resourceTypeConfigurations")
    def resource_type_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']]]:
        """
        The list of resource type configurations.
        """
        return pulumi.get(self, "resource_type_configurations")

    @resource_type_configurations.setter
    def resource_type_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']]]):
        pulumi.set(self, "resource_type_configurations", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> pulumi.Input[str]:
        """
        The subscription ID of the Azure account.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)


if not MYPY:
    class AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict(TypedDict):
        metric_configurations: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict']]]
        resource_type_name: pulumi.Input[str]
elif False:
    AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs:
    def __init__(__self__, *,
                 metric_configurations: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs']]],
                 resource_type_name: pulumi.Input[str]):
        pulumi.set(__self__, "metric_configurations", metric_configurations)
        pulumi.set(__self__, "resource_type_name", resource_type_name)

    @property
    @pulumi.getter(name="metricConfigurations")
    def metric_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs']]]:
        return pulumi.get(self, "metric_configurations")

    @metric_configurations.setter
    def metric_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs']]]):
        pulumi.set(self, "metric_configurations", value)

    @property
    @pulumi.getter(name="resourceTypeName")
    def resource_type_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_type_name")

    @resource_type_name.setter
    def resource_type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_name", value)


if not MYPY:
    class AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict(TypedDict):
        aggregations: pulumi.Input[Sequence[pulumi.Input[str]]]
        dimensions: pulumi.Input[Sequence[pulumi.Input[str]]]
        name: pulumi.Input[str]
elif False:
    AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs:
    def __init__(__self__, *,
                 aggregations: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dimensions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def aggregations(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "aggregations")

    @aggregations.setter
    def aggregations(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "aggregations", value)

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class AzureCredentialResourceDiscoveryTagFilterArgsDict(TypedDict):
        key: pulumi.Input[str]
        """
        The key of the tag filter.
        """
        value: pulumi.Input[str]
        """
        The value of the tag filter.
        """
elif False:
    AzureCredentialResourceDiscoveryTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AzureCredentialResourceDiscoveryTagFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The key of the tag filter.
        :param pulumi.Input[str] value: The value of the tag filter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobCustomNamespaceArgsDict(TypedDict):
        name: str
        """
        The name of the custom namespace to scrape.
        """
        scrape_interval_seconds: int
        """
        The interval in seconds to scrape the custom namespace.
        """
        metrics: NotRequired[Sequence['GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict']]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
elif False:
    GetAwsCloudwatchScrapeJobCustomNamespaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobCustomNamespaceArgs:
    def __init__(__self__, *,
                 name: str,
                 scrape_interval_seconds: int,
                 metrics: Optional[Sequence['GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs']] = None):
        """
        :param str name: The name of the custom namespace to scrape.
        :param int scrape_interval_seconds: The interval in seconds to scrape the custom namespace.
        :param Sequence['GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs'] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the custom namespace to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> int:
        """
        The interval in seconds to scrape the custom namespace.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: int):
        pulumi.set(self, "scrape_interval_seconds", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs']]):
        pulumi.set(self, "metrics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict(TypedDict):
        name: str
        """
        The name of the metric to scrape.
        """
        statistics: Sequence[str]
        """
        A set of statistics to scrape.
        """
elif False:
    GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobCustomNamespaceMetricArgs:
    def __init__(__self__, *,
                 name: str,
                 statistics: Sequence[str]):
        """
        :param str name: The name of the metric to scrape.
        :param Sequence[str] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> Sequence[str]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Sequence[str]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobServiceArgsDict(TypedDict):
        name: str
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        """
        scrape_interval_seconds: int
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        tags_to_add_to_metrics: Sequence[str]
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        metrics: NotRequired[Sequence['GetAwsCloudwatchScrapeJobServiceMetricArgsDict']]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        resource_discovery_tag_filters: NotRequired[Sequence['GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict']]
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
elif False:
    GetAwsCloudwatchScrapeJobServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobServiceArgs:
    def __init__(__self__, *,
                 name: str,
                 scrape_interval_seconds: int,
                 tags_to_add_to_metrics: Sequence[str],
                 metrics: Optional[Sequence['GetAwsCloudwatchScrapeJobServiceMetricArgs']] = None,
                 resource_discovery_tag_filters: Optional[Sequence['GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']] = None):
        """
        :param str name: The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        :param int scrape_interval_seconds: The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        :param Sequence[str] tags_to_add_to_metrics: A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        :param Sequence['GetAwsCloudwatchScrapeJobServiceMetricArgs'] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        :param Sequence['GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs'] resource_discovery_tag_filters: One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)
        pulumi.set(__self__, "tags_to_add_to_metrics", tags_to_add_to_metrics)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if resource_discovery_tag_filters is not None:
            pulumi.set(__self__, "resource_discovery_tag_filters", resource_discovery_tag_filters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> int:
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: int):
        pulumi.set(self, "scrape_interval_seconds", value)

    @property
    @pulumi.getter(name="tagsToAddToMetrics")
    def tags_to_add_to_metrics(self) -> Sequence[str]:
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        return pulumi.get(self, "tags_to_add_to_metrics")

    @tags_to_add_to_metrics.setter
    def tags_to_add_to_metrics(self, value: Sequence[str]):
        pulumi.set(self, "tags_to_add_to_metrics", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobServiceMetricArgs']]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobServiceMetricArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="resourceDiscoveryTagFilters")
    def resource_discovery_tag_filters(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]:
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "resource_discovery_tag_filters")

    @resource_discovery_tag_filters.setter
    def resource_discovery_tag_filters(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs']]):
        pulumi.set(self, "resource_discovery_tag_filters", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobServiceMetricArgsDict(TypedDict):
        name: str
        """
        The name of the metric to scrape.
        """
        statistics: Sequence[str]
        """
        A set of statistics to scrape.
        """
elif False:
    GetAwsCloudwatchScrapeJobServiceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobServiceMetricArgs:
    def __init__(__self__, *,
                 name: str,
                 statistics: Sequence[str]):
        """
        :param str name: The name of the metric to scrape.
        :param Sequence[str] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> Sequence[str]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Sequence[str]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict(TypedDict):
        key: str
        """
        The key of the tag filter.
        """
        value: str
        """
        The value of the tag filter.
        """
elif False:
    GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag filter.
        :param str value: The value of the tag filter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobArgsDict(TypedDict):
        aws_account_resource_id: str
        """
        The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `cloudProvider.AwsAccount` resource.
        """
        disabled_reason: str
        """
        When the CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
        """
        enabled: bool
        """
        Whether the CloudWatch Scrape Job is enabled or not.
        """
        export_tags: bool
        """
        When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
        """
        id: str
        name: str
        regions: Sequence[str]
        """
        The set of AWS region names that this CloudWatch Scrape Job is configured to scrape.
        """
        regions_subset_override_used: bool
        """
        When true, the `regions` attribute will be the set of regions configured in the override. When false, the `regions` attribute will be the set of regions belonging to the AWS Account resource that is associated with this CloudWatch Scrape Job.
        """
        role_arn: str
        """
        The AWS ARN of the IAM role associated with the AWS Account resource that is being used by this CloudWatch Scrape Job.
        """
        stack_id: str
        static_labels: Mapping[str, str]
        """
        A set of static labels to add to all metrics exported by this scrape job.
        """
        custom_namespaces: NotRequired[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgsDict']]
        """
        Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        """
        services: NotRequired[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceArgsDict']]
        """
        One or more configuration blocks to dictate what this CloudWatch Scrape Job should scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobArgs:
    def __init__(__self__, *,
                 aws_account_resource_id: str,
                 disabled_reason: str,
                 enabled: bool,
                 export_tags: bool,
                 id: str,
                 name: str,
                 regions: Sequence[str],
                 regions_subset_override_used: bool,
                 role_arn: str,
                 stack_id: str,
                 static_labels: Mapping[str, str],
                 custom_namespaces: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs']] = None,
                 services: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs']] = None):
        """
        :param str aws_account_resource_id: The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `cloudProvider.AwsAccount` resource.
        :param str disabled_reason: When the CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
        :param bool enabled: Whether the CloudWatch Scrape Job is enabled or not.
        :param bool export_tags: When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
        :param Sequence[str] regions: The set of AWS region names that this CloudWatch Scrape Job is configured to scrape.
        :param bool regions_subset_override_used: When true, the `regions` attribute will be the set of regions configured in the override. When false, the `regions` attribute will be the set of regions belonging to the AWS Account resource that is associated with this CloudWatch Scrape Job.
        :param str role_arn: The AWS ARN of the IAM role associated with the AWS Account resource that is being used by this CloudWatch Scrape Job.
        :param Mapping[str, str] static_labels: A set of static labels to add to all metrics exported by this scrape job.
        :param Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs'] custom_namespaces: Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        :param Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs'] services: One or more configuration blocks to dictate what this CloudWatch Scrape Job should scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        """
        pulumi.set(__self__, "aws_account_resource_id", aws_account_resource_id)
        pulumi.set(__self__, "disabled_reason", disabled_reason)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "export_tags", export_tags)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "regions_subset_override_used", regions_subset_override_used)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "stack_id", stack_id)
        pulumi.set(__self__, "static_labels", static_labels)
        if custom_namespaces is not None:
            pulumi.set(__self__, "custom_namespaces", custom_namespaces)
        if services is not None:
            pulumi.set(__self__, "services", services)

    @property
    @pulumi.getter(name="awsAccountResourceId")
    def aws_account_resource_id(self) -> str:
        """
        The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resource_id` attribute of the `cloudProvider.AwsAccount` resource.
        """
        return pulumi.get(self, "aws_account_resource_id")

    @aws_account_resource_id.setter
    def aws_account_resource_id(self, value: str):
        pulumi.set(self, "aws_account_resource_id", value)

    @property
    @pulumi.getter(name="disabledReason")
    def disabled_reason(self) -> str:
        """
        When the CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
        """
        return pulumi.get(self, "disabled_reason")

    @disabled_reason.setter
    def disabled_reason(self, value: str):
        pulumi.set(self, "disabled_reason", value)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether the CloudWatch Scrape Job is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: bool):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="exportTags")
    def export_tags(self) -> bool:
        """
        When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`.
        """
        return pulumi.get(self, "export_tags")

    @export_tags.setter
    def export_tags(self, value: bool):
        pulumi.set(self, "export_tags", value)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: str):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regions(self) -> Sequence[str]:
        """
        The set of AWS region names that this CloudWatch Scrape Job is configured to scrape.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Sequence[str]):
        pulumi.set(self, "regions", value)

    @property
    @pulumi.getter(name="regionsSubsetOverrideUsed")
    def regions_subset_override_used(self) -> bool:
        """
        When true, the `regions` attribute will be the set of regions configured in the override. When false, the `regions` attribute will be the set of regions belonging to the AWS Account resource that is associated with this CloudWatch Scrape Job.
        """
        return pulumi.get(self, "regions_subset_override_used")

    @regions_subset_override_used.setter
    def regions_subset_override_used(self, value: bool):
        pulumi.set(self, "regions_subset_override_used", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        """
        The AWS ARN of the IAM role associated with the AWS Account resource that is being used by this CloudWatch Scrape Job.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: str):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        return pulumi.get(self, "stack_id")

    @stack_id.setter
    def stack_id(self, value: str):
        pulumi.set(self, "stack_id", value)

    @property
    @pulumi.getter(name="staticLabels")
    def static_labels(self) -> Mapping[str, str]:
        """
        A set of static labels to add to all metrics exported by this scrape job.
        """
        return pulumi.get(self, "static_labels")

    @static_labels.setter
    def static_labels(self, value: Mapping[str, str]):
        pulumi.set(self, "static_labels", value)

    @property
    @pulumi.getter(name="customNamespaces")
    def custom_namespaces(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs']]:
        """
        Zero or more configuration blocks to configure custom namespaces for the CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "custom_namespaces")

    @custom_namespaces.setter
    def custom_namespaces(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs']]):
        pulumi.set(self, "custom_namespaces", value)

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs']]:
        """
        One or more configuration blocks to dictate what this CloudWatch Scrape Job should scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "services")

    @services.setter
    def services(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs']]):
        pulumi.set(self, "services", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgsDict(TypedDict):
        name: str
        """
        The name of the custom namespace to scrape.
        """
        scrape_interval_seconds: int
        """
        The interval in seconds to scrape the custom namespace.
        """
        metrics: NotRequired[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgsDict']]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceArgs:
    def __init__(__self__, *,
                 name: str,
                 scrape_interval_seconds: int,
                 metrics: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs']] = None):
        """
        :param str name: The name of the custom namespace to scrape.
        :param int scrape_interval_seconds: The interval in seconds to scrape the custom namespace.
        :param Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs'] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the custom namespace to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> int:
        """
        The interval in seconds to scrape the custom namespace.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: int):
        pulumi.set(self, "scrape_interval_seconds", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs']]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs']]):
        pulumi.set(self, "metrics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgsDict(TypedDict):
        name: str
        """
        The name of the metric to scrape.
        """
        statistics: Sequence[str]
        """
        A set of statistics to scrape.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobCustomNamespaceMetricArgs:
    def __init__(__self__, *,
                 name: str,
                 statistics: Sequence[str]):
        """
        :param str name: The name of the metric to scrape.
        :param Sequence[str] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> Sequence[str]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Sequence[str]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobServiceArgsDict(TypedDict):
        name: str
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        """
        scrape_interval_seconds: int
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        tags_to_add_to_metrics: Sequence[str]
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        metrics: NotRequired[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgsDict']]
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        resource_discovery_tag_filters: NotRequired[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgsDict']]
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobServiceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobServiceArgs:
    def __init__(__self__, *,
                 name: str,
                 scrape_interval_seconds: int,
                 tags_to_add_to_metrics: Sequence[str],
                 metrics: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs']] = None,
                 resource_discovery_tag_filters: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs']] = None):
        """
        :param str name: The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        :param int scrape_interval_seconds: The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        :param Sequence[str] tags_to_add_to_metrics: A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        :param Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs'] metrics: One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        :param Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs'] resource_discovery_tag_filters: One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "scrape_interval_seconds", scrape_interval_seconds)
        pulumi.set(__self__, "tags_to_add_to_metrics", tags_to_add_to_metrics)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if resource_discovery_tag_filters is not None:
            pulumi.set(__self__, "resource_discovery_tag_filters", resource_discovery_tag_filters)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the service to scrape. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported services, metrics, and their statistics.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scrapeIntervalSeconds")
    def scrape_interval_seconds(self) -> int:
        """
        The interval in seconds to scrape the service. See https://grafana.com/docs/grafana-cloud/monitor-infrastructure/aws/cloudwatch-metrics/services/ for supported scrape intervals.
        """
        return pulumi.get(self, "scrape_interval_seconds")

    @scrape_interval_seconds.setter
    def scrape_interval_seconds(self, value: int):
        pulumi.set(self, "scrape_interval_seconds", value)

    @property
    @pulumi.getter(name="tagsToAddToMetrics")
    def tags_to_add_to_metrics(self) -> Sequence[str]:
        """
        A set of tags to add to all metrics exported by this scrape job, for use in PromQL queries.
        """
        return pulumi.get(self, "tags_to_add_to_metrics")

    @tags_to_add_to_metrics.setter
    def tags_to_add_to_metrics(self, value: Sequence[str]):
        pulumi.set(self, "tags_to_add_to_metrics", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs']]:
        """
        One or more configuration blocks to configure metrics and their statistics to scrape. Each block must represent a distinct metric name. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs']]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="resourceDiscoveryTagFilters")
    def resource_discovery_tag_filters(self) -> Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs']]:
        """
        One or more configuration blocks to configure tag filters applied to discovery of resource entities in the associated AWS account. When accessing this as an attribute reference, it is a list of objects.
        """
        return pulumi.get(self, "resource_discovery_tag_filters")

    @resource_discovery_tag_filters.setter
    def resource_discovery_tag_filters(self, value: Optional[Sequence['GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs']]):
        pulumi.set(self, "resource_discovery_tag_filters", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgsDict(TypedDict):
        name: str
        """
        The name of the metric to scrape.
        """
        statistics: Sequence[str]
        """
        A set of statistics to scrape.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobServiceMetricArgs:
    def __init__(__self__, *,
                 name: str,
                 statistics: Sequence[str]):
        """
        :param str name: The name of the metric to scrape.
        :param Sequence[str] statistics: A set of statistics to scrape.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "statistics", statistics)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the metric to scrape.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def statistics(self) -> Sequence[str]:
        """
        A set of statistics to scrape.
        """
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: Sequence[str]):
        pulumi.set(self, "statistics", value)


if not MYPY:
    class GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgsDict(TypedDict):
        key: str
        """
        The key of the tag filter.
        """
        value: str
        """
        The value of the tag filter.
        """
elif False:
    GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAwsCloudwatchScrapeJobsScrapeJobServiceResourceDiscoveryTagFilterArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag filter.
        :param str value: The value of the tag filter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


if not MYPY:
    class GetAzureCredentialAutoDiscoveryConfigurationArgsDict(TypedDict):
        resource_type_configurations: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict']
        """
        The list of resource type configurations.
        """
        subscription_id: str
        """
        The subscription ID of the Azure account.
        """
elif False:
    GetAzureCredentialAutoDiscoveryConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAzureCredentialAutoDiscoveryConfigurationArgs:
    def __init__(__self__, *,
                 resource_type_configurations: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs'],
                 subscription_id: str):
        """
        :param Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs'] resource_type_configurations: The list of resource type configurations.
        :param str subscription_id: The subscription ID of the Azure account.
        """
        pulumi.set(__self__, "resource_type_configurations", resource_type_configurations)
        pulumi.set(__self__, "subscription_id", subscription_id)

    @property
    @pulumi.getter(name="resourceTypeConfigurations")
    def resource_type_configurations(self) -> Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']:
        """
        The list of resource type configurations.
        """
        return pulumi.get(self, "resource_type_configurations")

    @resource_type_configurations.setter
    def resource_type_configurations(self, value: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs']):
        pulumi.set(self, "resource_type_configurations", value)

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The subscription ID of the Azure account.
        """
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: str):
        pulumi.set(self, "subscription_id", value)


if not MYPY:
    class GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict(TypedDict):
        metric_configurations: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict']
        resource_type_name: str
elif False:
    GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationArgs:
    def __init__(__self__, *,
                 metric_configurations: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs'],
                 resource_type_name: str):
        pulumi.set(__self__, "metric_configurations", metric_configurations)
        pulumi.set(__self__, "resource_type_name", resource_type_name)

    @property
    @pulumi.getter(name="metricConfigurations")
    def metric_configurations(self) -> Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs']:
        return pulumi.get(self, "metric_configurations")

    @metric_configurations.setter
    def metric_configurations(self, value: Sequence['GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs']):
        pulumi.set(self, "metric_configurations", value)

    @property
    @pulumi.getter(name="resourceTypeName")
    def resource_type_name(self) -> str:
        return pulumi.get(self, "resource_type_name")

    @resource_type_name.setter
    def resource_type_name(self, value: str):
        pulumi.set(self, "resource_type_name", value)


if not MYPY:
    class GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict(TypedDict):
        aggregations: Sequence[str]
        dimensions: Sequence[str]
        name: str
elif False:
    GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAzureCredentialAutoDiscoveryConfigurationResourceTypeConfigurationMetricConfigurationArgs:
    def __init__(__self__, *,
                 aggregations: Sequence[str],
                 dimensions: Sequence[str],
                 name: str):
        pulumi.set(__self__, "aggregations", aggregations)
        pulumi.set(__self__, "dimensions", dimensions)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def aggregations(self) -> Sequence[str]:
        return pulumi.get(self, "aggregations")

    @aggregations.setter
    def aggregations(self, value: Sequence[str]):
        pulumi.set(self, "aggregations", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Sequence[str]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Sequence[str]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


if not MYPY:
    class GetAzureCredentialResourceDiscoveryTagFilterArgsDict(TypedDict):
        key: str
        """
        The key of the tag filter.
        """
        value: str
        """
        The value of the tag filter.
        """
elif False:
    GetAzureCredentialResourceDiscoveryTagFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetAzureCredentialResourceDiscoveryTagFilterArgs:
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        :param str key: The key of the tag filter.
        :param str value: The value of the tag filter.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the tag filter.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: str):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value of the tag filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: str):
        pulumi.set(self, "value", value)


