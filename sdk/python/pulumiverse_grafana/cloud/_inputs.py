# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'AccessPolicyConditionArgs',
    'AccessPolicyConditionArgsDict',
    'AccessPolicyRealmArgs',
    'AccessPolicyRealmArgsDict',
    'AccessPolicyRealmLabelPolicyArgs',
    'AccessPolicyRealmLabelPolicyArgsDict',
]

MYPY = False

if not MYPY:
    class AccessPolicyConditionArgsDict(TypedDict):
        allowed_subnets: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        Conditions that apply to the access policy,such as IP Allow lists.
        """
elif False:
    AccessPolicyConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessPolicyConditionArgs:
    def __init__(__self__, *,
                 allowed_subnets: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] allowed_subnets: Conditions that apply to the access policy,such as IP Allow lists.
        """
        pulumi.set(__self__, "allowed_subnets", allowed_subnets)

    @property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        Conditions that apply to the access policy,such as IP Allow lists.
        """
        return pulumi.get(self, "allowed_subnets")

    @allowed_subnets.setter
    def allowed_subnets(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "allowed_subnets", value)


if not MYPY:
    class AccessPolicyRealmArgsDict(TypedDict):
        identifier: pulumi.Input[builtins.str]
        """
        The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
        """
        type: pulumi.Input[builtins.str]
        """
        Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
        """
        label_policies: NotRequired[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRealmLabelPolicyArgsDict']]]]
elif False:
    AccessPolicyRealmArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessPolicyRealmArgs:
    def __init__(__self__, *,
                 identifier: pulumi.Input[builtins.str],
                 type: pulumi.Input[builtins.str],
                 label_policies: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRealmLabelPolicyArgs']]]] = None):
        """
        :param pulumi.Input[builtins.str] identifier: The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
        :param pulumi.Input[builtins.str] type: Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "type", type)
        if label_policies is not None:
            pulumi.set(__self__, "label_policies", label_policies)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[builtins.str]:
        """
        The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
        """
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "identifier", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[builtins.str]:
        """
        Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="labelPolicies")
    def label_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRealmLabelPolicyArgs']]]]:
        return pulumi.get(self, "label_policies")

    @label_policies.setter
    def label_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AccessPolicyRealmLabelPolicyArgs']]]]):
        pulumi.set(self, "label_policies", value)


if not MYPY:
    class AccessPolicyRealmLabelPolicyArgsDict(TypedDict):
        selector: pulumi.Input[builtins.str]
        """
        The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
        """
elif False:
    AccessPolicyRealmLabelPolicyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AccessPolicyRealmLabelPolicyArgs:
    def __init__(__self__, *,
                 selector: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] selector: The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
        """
        pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def selector(self) -> pulumi.Input[builtins.str]:
        """
        The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "selector", value)


