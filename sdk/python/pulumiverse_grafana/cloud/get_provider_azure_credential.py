# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetProviderAzureCredentialResult',
    'AwaitableGetProviderAzureCredentialResult',
    'get_provider_azure_credential',
    'get_provider_azure_credential_output',
]

@pulumi.output_type
class GetProviderAzureCredentialResult:
    """
    A collection of values returned by getProviderAzureCredential.
    """
    def __init__(__self__, client_id=None, client_secret=None, id=None, name=None, resource_discovery_tag_filters=None, resource_id=None, stack_id=None, tenant_id=None):
        if client_id and not isinstance(client_id, str):
            raise TypeError("Expected argument 'client_id' to be a str")
        pulumi.set(__self__, "client_id", client_id)
        if client_secret and not isinstance(client_secret, str):
            raise TypeError("Expected argument 'client_secret' to be a str")
        pulumi.set(__self__, "client_secret", client_secret)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if resource_discovery_tag_filters and not isinstance(resource_discovery_tag_filters, list):
            raise TypeError("Expected argument 'resource_discovery_tag_filters' to be a list")
        pulumi.set(__self__, "resource_discovery_tag_filters", resource_discovery_tag_filters)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if stack_id and not isinstance(stack_id, str):
            raise TypeError("Expected argument 'stack_id' to be a str")
        pulumi.set(__self__, "stack_id", stack_id)
        if tenant_id and not isinstance(tenant_id, str):
            raise TypeError("Expected argument 'tenant_id' to be a str")
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        """
        The client ID of the Azure Credential.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        """
        The client secret of the Azure Credential.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the Azure Credential.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="resourceDiscoveryTagFilters")
    def resource_discovery_tag_filters(self) -> Optional[Sequence['outputs.GetProviderAzureCredentialResourceDiscoveryTagFilterResult']]:
        """
        The list of tag filters to apply to resources.
        """
        return pulumi.get(self, "resource_discovery_tag_filters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="stackId")
    def stack_id(self) -> str:
        return pulumi.get(self, "stack_id")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> str:
        """
        The tenant ID of the Azure Credential.
        """
        return pulumi.get(self, "tenant_id")


class AwaitableGetProviderAzureCredentialResult(GetProviderAzureCredentialResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProviderAzureCredentialResult(
            client_id=self.client_id,
            client_secret=self.client_secret,
            id=self.id,
            name=self.name,
            resource_discovery_tag_filters=self.resource_discovery_tag_filters,
            resource_id=self.resource_id,
            stack_id=self.stack_id,
            tenant_id=self.tenant_id)


def get_provider_azure_credential(resource_discovery_tag_filters: Optional[Sequence[Union['GetProviderAzureCredentialResourceDiscoveryTagFilterArgs', 'GetProviderAzureCredentialResourceDiscoveryTagFilterArgsDict']]] = None,
                                  resource_id: Optional[str] = None,
                                  stack_id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProviderAzureCredentialResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_grafana as grafana
    import pulumiverse_grafana as grafana

    test_provider_azure_credential = grafana.cloud.ProviderAzureCredential("test",
        stack_id="1",
        name="test-name",
        client_id="my-client-id",
        client_secret="my-client-secret",
        tenant_id="my-tenant-id",
        resource_discovery_tag_filters=[
            {
                "key": "key-1",
                "value": "value-1",
            },
            {
                "key": "key-2",
                "value": "value-2",
            },
        ])
    test = grafana.cloud.get_provider_azure_credential_output(stack_id=test_provider_azure_credential.stack_id,
        resource_id=test_provider_azure_credential.resource_id)
    ```


    :param Sequence[Union['GetProviderAzureCredentialResourceDiscoveryTagFilterArgs', 'GetProviderAzureCredentialResourceDiscoveryTagFilterArgsDict']] resource_discovery_tag_filters: The list of tag filters to apply to resources.
    :param str resource_id: The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
    """
    __args__ = dict()
    __args__['resourceDiscoveryTagFilters'] = resource_discovery_tag_filters
    __args__['resourceId'] = resource_id
    __args__['stackId'] = stack_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('grafana:cloud/getProviderAzureCredential:getProviderAzureCredential', __args__, opts=opts, typ=GetProviderAzureCredentialResult).value

    return AwaitableGetProviderAzureCredentialResult(
        client_id=pulumi.get(__ret__, 'client_id'),
        client_secret=pulumi.get(__ret__, 'client_secret'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        resource_discovery_tag_filters=pulumi.get(__ret__, 'resource_discovery_tag_filters'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        stack_id=pulumi.get(__ret__, 'stack_id'),
        tenant_id=pulumi.get(__ret__, 'tenant_id'))
def get_provider_azure_credential_output(resource_discovery_tag_filters: Optional[pulumi.Input[Optional[Sequence[Union['GetProviderAzureCredentialResourceDiscoveryTagFilterArgs', 'GetProviderAzureCredentialResourceDiscoveryTagFilterArgsDict']]]]] = None,
                                         resource_id: Optional[pulumi.Input[str]] = None,
                                         stack_id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProviderAzureCredentialResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_grafana as grafana
    import pulumiverse_grafana as grafana

    test_provider_azure_credential = grafana.cloud.ProviderAzureCredential("test",
        stack_id="1",
        name="test-name",
        client_id="my-client-id",
        client_secret="my-client-secret",
        tenant_id="my-tenant-id",
        resource_discovery_tag_filters=[
            {
                "key": "key-1",
                "value": "value-1",
            },
            {
                "key": "key-2",
                "value": "value-2",
            },
        ])
    test = grafana.cloud.get_provider_azure_credential_output(stack_id=test_provider_azure_credential.stack_id,
        resource_id=test_provider_azure_credential.resource_id)
    ```


    :param Sequence[Union['GetProviderAzureCredentialResourceDiscoveryTagFilterArgs', 'GetProviderAzureCredentialResourceDiscoveryTagFilterArgsDict']] resource_discovery_tag_filters: The list of tag filters to apply to resources.
    :param str resource_id: The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
    """
    __args__ = dict()
    __args__['resourceDiscoveryTagFilters'] = resource_discovery_tag_filters
    __args__['resourceId'] = resource_id
    __args__['stackId'] = stack_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('grafana:cloud/getProviderAzureCredential:getProviderAzureCredential', __args__, opts=opts, typ=GetProviderAzureCredentialResult)
    return __ret__.apply(lambda __response__: GetProviderAzureCredentialResult(
        client_id=pulumi.get(__response__, 'client_id'),
        client_secret=pulumi.get(__response__, 'client_secret'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        resource_discovery_tag_filters=pulumi.get(__response__, 'resource_discovery_tag_filters'),
        resource_id=pulumi.get(__response__, 'resource_id'),
        stack_id=pulumi.get(__response__, 'stack_id'),
        tenant_id=pulumi.get(__response__, 'tenant_id')))
