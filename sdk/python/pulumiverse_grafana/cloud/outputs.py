# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'AccessPolicyCondition',
    'AccessPolicyRealm',
    'AccessPolicyRealmLabelPolicy',
    'ProductActivationAppO11yConfigV1Alpha1Metadata',
    'ProductActivationAppO11yConfigV1Alpha1Options',
    'ProductActivationAppO11yConfigV1Alpha1Spec',
    'ProductActivationK8sO11yConfigV1Alpha1Metadata',
    'ProductActivationK8sO11yConfigV1Alpha1Options',
    'ProductActivationK8sO11yConfigV1Alpha1Spec',
    'GetAccessPoliciesAccessPolicyResult',
    'GetPrivateDataSourceConnectNetworksPrivateDataSourceConnectNetworkResult',
]

@pulumi.output_type
class AccessPolicyCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSubnets":
            suggest = "allowed_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessPolicyCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessPolicyCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessPolicyCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_subnets: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] allowed_subnets: Conditions that apply to the access policy,such as IP Allow lists.
        """
        pulumi.set(__self__, "allowed_subnets", allowed_subnets)

    @_builtins.property
    @pulumi.getter(name="allowedSubnets")
    def allowed_subnets(self) -> Sequence[_builtins.str]:
        """
        Conditions that apply to the access policy,such as IP Allow lists.
        """
        return pulumi.get(self, "allowed_subnets")


@pulumi.output_type
class AccessPolicyRealm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelPolicies":
            suggest = "label_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AccessPolicyRealm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AccessPolicyRealm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AccessPolicyRealm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 identifier: _builtins.str,
                 type: _builtins.str,
                 label_policies: Optional[Sequence['outputs.AccessPolicyRealmLabelPolicy']] = None):
        """
        :param _builtins.str identifier: The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
        :param _builtins.str type: Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
        """
        pulumi.set(__self__, "identifier", identifier)
        pulumi.set(__self__, "type", type)
        if label_policies is not None:
            pulumi.set(__self__, "label_policies", label_policies)

    @_builtins.property
    @pulumi.getter
    def identifier(self) -> _builtins.str:
        """
        The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
        """
        return pulumi.get(self, "identifier")

    @_builtins.property
    @pulumi.getter
    def type(self) -> _builtins.str:
        """
        Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
        """
        return pulumi.get(self, "type")

    @_builtins.property
    @pulumi.getter(name="labelPolicies")
    def label_policies(self) -> Optional[Sequence['outputs.AccessPolicyRealmLabelPolicy']]:
        return pulumi.get(self, "label_policies")


@pulumi.output_type
class AccessPolicyRealmLabelPolicy(dict):
    def __init__(__self__, *,
                 selector: _builtins.str):
        """
        :param _builtins.str selector: The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
        """
        pulumi.set(__self__, "selector", selector)

    @_builtins.property
    @pulumi.getter
    def selector(self) -> _builtins.str:
        """
        The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
        """
        return pulumi.get(self, "selector")


@pulumi.output_type
class ProductActivationAppO11yConfigV1Alpha1Metadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderUid":
            suggest = "folder_uid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductActivationAppO11yConfigV1Alpha1Metadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductActivationAppO11yConfigV1Alpha1Metadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductActivationAppO11yConfigV1Alpha1Metadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uid: _builtins.str,
                 annotations: Optional[Mapping[str, _builtins.str]] = None,
                 folder_uid: Optional[_builtins.str] = None,
                 url: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str uid: The unique identifier of the resource.
        :param Mapping[str, _builtins.str] annotations: Annotations of the resource.
        :param _builtins.str folder_uid: The UID of the folder to save the resource in.
        :param _builtins.str url: The full URL of the resource.
        :param _builtins.str uuid: The globally unique identifier of a resource, used by the API for tracking.
        :param _builtins.str version: The version of the resource.
        """
        pulumi.set(__self__, "uid", uid)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if folder_uid is not None:
            pulumi.set(__self__, "folder_uid", folder_uid)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        """
        The unique identifier of the resource.
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Annotations of the resource.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="folderUid")
    def folder_uid(self) -> Optional[_builtins.str]:
        """
        The UID of the folder to save the resource in.
        """
        return pulumi.get(self, "folder_uid")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The full URL of the resource.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        The globally unique identifier of a resource, used by the API for tracking.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version of the resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ProductActivationAppO11yConfigV1Alpha1Options(dict):
    def __init__(__self__, *,
                 overwrite: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool overwrite: Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
        """
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)

    @_builtins.property
    @pulumi.getter
    def overwrite(self) -> Optional[_builtins.bool]:
        """
        Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
        """
        return pulumi.get(self, "overwrite")


@pulumi.output_type
class ProductActivationAppO11yConfigV1Alpha1Spec(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        """
        :param _builtins.bool enabled: Whether application observability is enabled.
        """
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether application observability is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ProductActivationK8sO11yConfigV1Alpha1Metadata(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderUid":
            suggest = "folder_uid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProductActivationK8sO11yConfigV1Alpha1Metadata. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProductActivationK8sO11yConfigV1Alpha1Metadata.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProductActivationK8sO11yConfigV1Alpha1Metadata.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 uid: _builtins.str,
                 annotations: Optional[Mapping[str, _builtins.str]] = None,
                 folder_uid: Optional[_builtins.str] = None,
                 url: Optional[_builtins.str] = None,
                 uuid: Optional[_builtins.str] = None,
                 version: Optional[_builtins.str] = None):
        """
        :param _builtins.str uid: The unique identifier of the resource.
        :param Mapping[str, _builtins.str] annotations: Annotations of the resource.
        :param _builtins.str folder_uid: The UID of the folder to save the resource in.
        :param _builtins.str url: The full URL of the resource.
        :param _builtins.str uuid: The globally unique identifier of a resource, used by the API for tracking.
        :param _builtins.str version: The version of the resource.
        """
        pulumi.set(__self__, "uid", uid)
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if folder_uid is not None:
            pulumi.set(__self__, "folder_uid", folder_uid)
        if url is not None:
            pulumi.set(__self__, "url", url)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @_builtins.property
    @pulumi.getter
    def uid(self) -> _builtins.str:
        """
        The unique identifier of the resource.
        """
        return pulumi.get(self, "uid")

    @_builtins.property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        Annotations of the resource.
        """
        return pulumi.get(self, "annotations")

    @_builtins.property
    @pulumi.getter(name="folderUid")
    def folder_uid(self) -> Optional[_builtins.str]:
        """
        The UID of the folder to save the resource in.
        """
        return pulumi.get(self, "folder_uid")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The full URL of the resource.
        """
        return pulumi.get(self, "url")

    @_builtins.property
    @pulumi.getter
    def uuid(self) -> Optional[_builtins.str]:
        """
        The globally unique identifier of a resource, used by the API for tracking.
        """
        return pulumi.get(self, "uuid")

    @_builtins.property
    @pulumi.getter
    def version(self) -> Optional[_builtins.str]:
        """
        The version of the resource.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class ProductActivationK8sO11yConfigV1Alpha1Options(dict):
    def __init__(__self__, *,
                 overwrite: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool overwrite: Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
        """
        if overwrite is not None:
            pulumi.set(__self__, "overwrite", overwrite)

    @_builtins.property
    @pulumi.getter
    def overwrite(self) -> Optional[_builtins.bool]:
        """
        Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
        """
        return pulumi.get(self, "overwrite")


@pulumi.output_type
class ProductActivationK8sO11yConfigV1Alpha1Spec(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        """
        :param _builtins.bool enabled: Whether Kubernetes observability is enabled.
        """
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Kubernetes observability is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetAccessPoliciesAccessPolicyResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 region: _builtins.str,
                 status: _builtins.str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetPrivateDataSourceConnectNetworksPrivateDataSourceConnectNetworkResult(dict):
    def __init__(__self__, *,
                 display_name: _builtins.str,
                 id: _builtins.str,
                 name: _builtins.str,
                 region: _builtins.str,
                 status: _builtins.str):
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        return pulumi.get(self, "status")


