// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Cloud
{
    public static class GetStack
    {
        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        [Input("slug", required: true)]
        public string Slug { get; set; } = null!;

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Alertmanager instances (Optional)
        /// </summary>
        public readonly string AlertmanagerIpAllowListCname;
        /// <summary>
        /// Name of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerName;
        /// <summary>
        /// Status of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerStatus;
        /// <summary>
        /// Base URL of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerUrl;
        /// <summary>
        /// User ID of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly int AlertmanagerUserId;
        /// <summary>
        /// Slug of the cluster where this stack resides.
        /// </summary>
        public readonly string ClusterSlug;
        /// <summary>
        /// Description of stack.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Name of the Fleet Management instance configured for this stack.
        /// </summary>
        public readonly string FleetManagementName;
        /// <summary>
        /// Private DNS for Fleet Management when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string FleetManagementPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Fleet Management when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string FleetManagementPrivateConnectivityInfoServiceName;
        /// <summary>
        /// Status of the Fleet Management instance configured for this stack.
        /// </summary>
        public readonly string FleetManagementStatus;
        /// <summary>
        /// Base URL of the Fleet Management instance configured for this stack.
        /// </summary>
        public readonly string FleetManagementUrl;
        /// <summary>
        /// User ID of the Fleet Management instance configured for this stack.
        /// </summary>
        public readonly int FleetManagementUserId;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the grafana instance (Optional)
        /// </summary>
        public readonly string GrafanasIpAllowListCname;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Graphite instance (Optional)
        /// </summary>
        public readonly string GraphiteIpAllowListCname;
        public readonly string GraphiteName;
        /// <summary>
        /// Private DNS for Graphite when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string GraphitePrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Graphite when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string GraphitePrivateConnectivityInfoServiceName;
        public readonly string GraphiteStatus;
        public readonly string GraphiteUrl;
        public readonly int GraphiteUserId;
        /// <summary>
        /// The stack id assigned to this stack by Grafana.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheus_user_id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
        /// </summary>
        public readonly string InfluxUrl;
        /// <summary>
        /// A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Logs instance (Optional)
        /// </summary>
        public readonly string LogsIpAllowListCname;
        public readonly string LogsName;
        /// <summary>
        /// Private DNS for Logs when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string LogsPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Logs when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string LogsPrivateConnectivityInfoServiceName;
        public readonly string LogsStatus;
        public readonly string LogsUrl;
        public readonly int LogsUserId;
        /// <summary>
        /// Name of stack. Conventionally matches the url of the instance (e.g. `&lt;stack_slug&gt;.grafana.net`).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Base URL of the OnCall API instance configured for this stack.
        /// </summary>
        public readonly string OncallApiUrl;
        /// <summary>
        /// Organization id to assign to this stack.
        /// </summary>
        public readonly int OrgId;
        /// <summary>
        /// Organization name to assign to this stack.
        /// </summary>
        public readonly string OrgName;
        /// <summary>
        /// Organization slug to assign to this stack.
        /// </summary>
        public readonly string OrgSlug;
        /// <summary>
        /// Private DNS for OTLP when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string OtlpPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for OTLP when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string OtlpPrivateConnectivityInfoServiceName;
        /// <summary>
        /// Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
        /// </summary>
        public readonly string OtlpUrl;
        /// <summary>
        /// Private DNS for PDC's API when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PdcApiPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for PDC's API when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PdcApiPrivateConnectivityInfoServiceName;
        /// <summary>
        /// Private DNS for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PdcGatewayPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for PDC's Gateway when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PdcGatewayPrivateConnectivityInfoServiceName;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Profiles instance (Optional)
        /// </summary>
        public readonly string ProfilesIpAllowListCname;
        public readonly string ProfilesName;
        /// <summary>
        /// Private DNS for Profiles when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string ProfilesPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Profiles when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string ProfilesPrivateConnectivityInfoServiceName;
        public readonly string ProfilesStatus;
        public readonly string ProfilesUrl;
        public readonly int ProfilesUserId;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Prometheus instance (Optional)
        /// </summary>
        public readonly string PrometheusIpAllowListCname;
        /// <summary>
        /// Prometheus name for this instance.
        /// </summary>
        public readonly string PrometheusName;
        /// <summary>
        /// Private DNS for Prometheus when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PrometheusPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Prometheus when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string PrometheusPrivateConnectivityInfoServiceName;
        /// <summary>
        /// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
        /// </summary>
        public readonly string PrometheusRemoteEndpoint;
        /// <summary>
        /// Use this URL to send prometheus metrics to Grafana cloud
        /// </summary>
        public readonly string PrometheusRemoteWriteEndpoint;
        /// <summary>
        /// Prometheus status for this instance.
        /// </summary>
        public readonly string PrometheusStatus;
        /// <summary>
        /// Prometheus url for this instance.
        /// </summary>
        public readonly string PrometheusUrl;
        /// <summary>
        /// Prometheus user ID. Used for e.g. remote_write.
        /// </summary>
        public readonly int PrometheusUserId;
        /// <summary>
        /// The region this stack is deployed to.
        /// </summary>
        public readonly string RegionSlug;
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        public readonly string Slug;
        /// <summary>
        /// Status of the stack.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Comma-separated list of CNAMEs that can be whitelisted to access the Traces instance (Optional)
        /// </summary>
        public readonly string TracesIpAllowListCname;
        public readonly string TracesName;
        /// <summary>
        /// Private DNS for Traces when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string TracesPrivateConnectivityInfoPrivateDns;
        /// <summary>
        /// Service Name for Traces when using AWS PrivateLink (only for AWS stacks)
        /// </summary>
        public readonly string TracesPrivateConnectivityInfoServiceName;
        public readonly string TracesStatus;
        /// <summary>
        /// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
        /// </summary>
        public readonly string TracesUrl;
        public readonly int TracesUserId;
        /// <summary>
        /// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetStackResult(
            string alertmanagerIpAllowListCname,

            string alertmanagerName,

            string alertmanagerStatus,

            string alertmanagerUrl,

            int alertmanagerUserId,

            string clusterSlug,

            string description,

            string fleetManagementName,

            string fleetManagementPrivateConnectivityInfoPrivateDns,

            string fleetManagementPrivateConnectivityInfoServiceName,

            string fleetManagementStatus,

            string fleetManagementUrl,

            int fleetManagementUserId,

            string grafanasIpAllowListCname,

            string graphiteIpAllowListCname,

            string graphiteName,

            string graphitePrivateConnectivityInfoPrivateDns,

            string graphitePrivateConnectivityInfoServiceName,

            string graphiteStatus,

            string graphiteUrl,

            int graphiteUserId,

            string id,

            string influxUrl,

            ImmutableDictionary<string, string> labels,

            string logsIpAllowListCname,

            string logsName,

            string logsPrivateConnectivityInfoPrivateDns,

            string logsPrivateConnectivityInfoServiceName,

            string logsStatus,

            string logsUrl,

            int logsUserId,

            string name,

            string oncallApiUrl,

            int orgId,

            string orgName,

            string orgSlug,

            string otlpPrivateConnectivityInfoPrivateDns,

            string otlpPrivateConnectivityInfoServiceName,

            string otlpUrl,

            string pdcApiPrivateConnectivityInfoPrivateDns,

            string pdcApiPrivateConnectivityInfoServiceName,

            string pdcGatewayPrivateConnectivityInfoPrivateDns,

            string pdcGatewayPrivateConnectivityInfoServiceName,

            string profilesIpAllowListCname,

            string profilesName,

            string profilesPrivateConnectivityInfoPrivateDns,

            string profilesPrivateConnectivityInfoServiceName,

            string profilesStatus,

            string profilesUrl,

            int profilesUserId,

            string prometheusIpAllowListCname,

            string prometheusName,

            string prometheusPrivateConnectivityInfoPrivateDns,

            string prometheusPrivateConnectivityInfoServiceName,

            string prometheusRemoteEndpoint,

            string prometheusRemoteWriteEndpoint,

            string prometheusStatus,

            string prometheusUrl,

            int prometheusUserId,

            string regionSlug,

            string slug,

            string status,

            string tracesIpAllowListCname,

            string tracesName,

            string tracesPrivateConnectivityInfoPrivateDns,

            string tracesPrivateConnectivityInfoServiceName,

            string tracesStatus,

            string tracesUrl,

            int tracesUserId,

            string url)
        {
            AlertmanagerIpAllowListCname = alertmanagerIpAllowListCname;
            AlertmanagerName = alertmanagerName;
            AlertmanagerStatus = alertmanagerStatus;
            AlertmanagerUrl = alertmanagerUrl;
            AlertmanagerUserId = alertmanagerUserId;
            ClusterSlug = clusterSlug;
            Description = description;
            FleetManagementName = fleetManagementName;
            FleetManagementPrivateConnectivityInfoPrivateDns = fleetManagementPrivateConnectivityInfoPrivateDns;
            FleetManagementPrivateConnectivityInfoServiceName = fleetManagementPrivateConnectivityInfoServiceName;
            FleetManagementStatus = fleetManagementStatus;
            FleetManagementUrl = fleetManagementUrl;
            FleetManagementUserId = fleetManagementUserId;
            GrafanasIpAllowListCname = grafanasIpAllowListCname;
            GraphiteIpAllowListCname = graphiteIpAllowListCname;
            GraphiteName = graphiteName;
            GraphitePrivateConnectivityInfoPrivateDns = graphitePrivateConnectivityInfoPrivateDns;
            GraphitePrivateConnectivityInfoServiceName = graphitePrivateConnectivityInfoServiceName;
            GraphiteStatus = graphiteStatus;
            GraphiteUrl = graphiteUrl;
            GraphiteUserId = graphiteUserId;
            Id = id;
            InfluxUrl = influxUrl;
            Labels = labels;
            LogsIpAllowListCname = logsIpAllowListCname;
            LogsName = logsName;
            LogsPrivateConnectivityInfoPrivateDns = logsPrivateConnectivityInfoPrivateDns;
            LogsPrivateConnectivityInfoServiceName = logsPrivateConnectivityInfoServiceName;
            LogsStatus = logsStatus;
            LogsUrl = logsUrl;
            LogsUserId = logsUserId;
            Name = name;
            OncallApiUrl = oncallApiUrl;
            OrgId = orgId;
            OrgName = orgName;
            OrgSlug = orgSlug;
            OtlpPrivateConnectivityInfoPrivateDns = otlpPrivateConnectivityInfoPrivateDns;
            OtlpPrivateConnectivityInfoServiceName = otlpPrivateConnectivityInfoServiceName;
            OtlpUrl = otlpUrl;
            PdcApiPrivateConnectivityInfoPrivateDns = pdcApiPrivateConnectivityInfoPrivateDns;
            PdcApiPrivateConnectivityInfoServiceName = pdcApiPrivateConnectivityInfoServiceName;
            PdcGatewayPrivateConnectivityInfoPrivateDns = pdcGatewayPrivateConnectivityInfoPrivateDns;
            PdcGatewayPrivateConnectivityInfoServiceName = pdcGatewayPrivateConnectivityInfoServiceName;
            ProfilesIpAllowListCname = profilesIpAllowListCname;
            ProfilesName = profilesName;
            ProfilesPrivateConnectivityInfoPrivateDns = profilesPrivateConnectivityInfoPrivateDns;
            ProfilesPrivateConnectivityInfoServiceName = profilesPrivateConnectivityInfoServiceName;
            ProfilesStatus = profilesStatus;
            ProfilesUrl = profilesUrl;
            ProfilesUserId = profilesUserId;
            PrometheusIpAllowListCname = prometheusIpAllowListCname;
            PrometheusName = prometheusName;
            PrometheusPrivateConnectivityInfoPrivateDns = prometheusPrivateConnectivityInfoPrivateDns;
            PrometheusPrivateConnectivityInfoServiceName = prometheusPrivateConnectivityInfoServiceName;
            PrometheusRemoteEndpoint = prometheusRemoteEndpoint;
            PrometheusRemoteWriteEndpoint = prometheusRemoteWriteEndpoint;
            PrometheusStatus = prometheusStatus;
            PrometheusUrl = prometheusUrl;
            PrometheusUserId = prometheusUserId;
            RegionSlug = regionSlug;
            Slug = slug;
            Status = status;
            TracesIpAllowListCname = tracesIpAllowListCname;
            TracesName = tracesName;
            TracesPrivateConnectivityInfoPrivateDns = tracesPrivateConnectivityInfoPrivateDns;
            TracesPrivateConnectivityInfoServiceName = tracesPrivateConnectivityInfoServiceName;
            TracesStatus = tracesStatus;
            TracesUrl = tracesUrl;
            TracesUserId = tracesUserId;
            Url = url;
        }
    }
}
