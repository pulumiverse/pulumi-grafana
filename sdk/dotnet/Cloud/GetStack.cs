// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Cloud
{
    public static class GetStack
    {
        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStackResult> InvokeAsync(GetStackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for Grafana Stack
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testStack = new Grafana.Cloud.Stack("test", new()
        ///     {
        ///         Name = "gcloudstacktest",
        ///         Slug = "gcloudstacktest",
        ///         RegionSlug = "eu",
        ///         Description = "Test Grafana Cloud Stack",
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetStack.Invoke(new()
        ///     {
        ///         Slug = testStack.Slug,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStackResult> Invoke(GetStackInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStackResult>("grafana:cloud/getStack:getStack", args ?? new GetStackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStackArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        [Input("slug", required: true)]
        public string Slug { get; set; } = null!;

        public GetStackArgs()
        {
        }
        public static new GetStackArgs Empty => new GetStackArgs();
    }

    public sealed class GetStackInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        [Input("slug", required: true)]
        public Input<string> Slug { get; set; } = null!;

        public GetStackInvokeArgs()
        {
        }
        public static new GetStackInvokeArgs Empty => new GetStackInvokeArgs();
    }


    [OutputType]
    public sealed class GetStackResult
    {
        /// <summary>
        /// Name of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerName;
        /// <summary>
        /// Status of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerStatus;
        /// <summary>
        /// Base URL of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly string AlertmanagerUrl;
        /// <summary>
        /// User ID of the Alertmanager instance configured for this stack.
        /// </summary>
        public readonly int AlertmanagerUserId;
        /// <summary>
        /// Slug of the cluster where this stack resides.
        /// </summary>
        public readonly string ClusterSlug;
        /// <summary>
        /// Description of stack.
        /// </summary>
        public readonly string Description;
        public readonly string GraphiteName;
        public readonly string GraphiteStatus;
        public readonly string GraphiteUrl;
        public readonly int GraphiteUserId;
        /// <summary>
        /// The stack id assigned to this stack by Grafana.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Base URL of the InfluxDB instance configured for this stack. The username is the same as the metrics' (`prometheus_user_id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/metrics/metrics-influxdb/push-from-telegraf/ for docs on how to use this.
        /// </summary>
        public readonly string InfluxUrl;
        /// <summary>
        /// A map of labels to assign to the stack. Label keys and values must match the following regexp: "^[a-zA-Z0-9/\-.]+$" and stacks cannot have more than 10 labels.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly string LogsName;
        public readonly string LogsStatus;
        public readonly string LogsUrl;
        public readonly int LogsUserId;
        /// <summary>
        /// Name of stack. Conventionally matches the url of the instance (e.g. `&lt;stack_slug&gt;.grafana.net`).
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Organization id to assign to this stack.
        /// </summary>
        public readonly int OrgId;
        /// <summary>
        /// Organization name to assign to this stack.
        /// </summary>
        public readonly string OrgName;
        /// <summary>
        /// Organization slug to assign to this stack.
        /// </summary>
        public readonly string OrgSlug;
        /// <summary>
        /// Base URL of the OTLP instance configured for this stack. The username is the stack's ID (`id` attribute of this resource). See https://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.
        /// </summary>
        public readonly string OtlpUrl;
        public readonly string ProfilesName;
        public readonly string ProfilesStatus;
        public readonly string ProfilesUrl;
        public readonly int ProfilesUserId;
        /// <summary>
        /// Prometheus name for this instance.
        /// </summary>
        public readonly string PrometheusName;
        /// <summary>
        /// Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana
        /// </summary>
        public readonly string PrometheusRemoteEndpoint;
        /// <summary>
        /// Use this URL to send prometheus metrics to Grafana cloud
        /// </summary>
        public readonly string PrometheusRemoteWriteEndpoint;
        /// <summary>
        /// Prometheus status for this instance.
        /// </summary>
        public readonly string PrometheusStatus;
        /// <summary>
        /// Prometheus url for this instance.
        /// </summary>
        public readonly string PrometheusUrl;
        /// <summary>
        /// Prometheus user ID. Used for e.g. remote_write.
        /// </summary>
        public readonly int PrometheusUserId;
        /// <summary>
        /// The region this stack is deployed to.
        /// </summary>
        public readonly string RegionSlug;
        /// <summary>
        /// Subdomain that the Grafana instance will be available at (i.e. setting slug to “\n\n” will make the instance
        /// available at “https://\n\n.grafana.net".
        /// </summary>
        public readonly string Slug;
        /// <summary>
        /// Status of the stack.
        /// </summary>
        public readonly string Status;
        public readonly string TracesName;
        public readonly string TracesStatus;
        /// <summary>
        /// Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append `/tempo` to the URL.
        /// </summary>
        public readonly string TracesUrl;
        public readonly int TracesUserId;
        /// <summary>
        /// Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetStackResult(
            string alertmanagerName,

            string alertmanagerStatus,

            string alertmanagerUrl,

            int alertmanagerUserId,

            string clusterSlug,

            string description,

            string graphiteName,

            string graphiteStatus,

            string graphiteUrl,

            int graphiteUserId,

            string id,

            string influxUrl,

            ImmutableDictionary<string, string> labels,

            string logsName,

            string logsStatus,

            string logsUrl,

            int logsUserId,

            string name,

            int orgId,

            string orgName,

            string orgSlug,

            string otlpUrl,

            string profilesName,

            string profilesStatus,

            string profilesUrl,

            int profilesUserId,

            string prometheusName,

            string prometheusRemoteEndpoint,

            string prometheusRemoteWriteEndpoint,

            string prometheusStatus,

            string prometheusUrl,

            int prometheusUserId,

            string regionSlug,

            string slug,

            string status,

            string tracesName,

            string tracesStatus,

            string tracesUrl,

            int tracesUserId,

            string url)
        {
            AlertmanagerName = alertmanagerName;
            AlertmanagerStatus = alertmanagerStatus;
            AlertmanagerUrl = alertmanagerUrl;
            AlertmanagerUserId = alertmanagerUserId;
            ClusterSlug = clusterSlug;
            Description = description;
            GraphiteName = graphiteName;
            GraphiteStatus = graphiteStatus;
            GraphiteUrl = graphiteUrl;
            GraphiteUserId = graphiteUserId;
            Id = id;
            InfluxUrl = influxUrl;
            Labels = labels;
            LogsName = logsName;
            LogsStatus = logsStatus;
            LogsUrl = logsUrl;
            LogsUserId = logsUserId;
            Name = name;
            OrgId = orgId;
            OrgName = orgName;
            OrgSlug = orgSlug;
            OtlpUrl = otlpUrl;
            ProfilesName = profilesName;
            ProfilesStatus = profilesStatus;
            ProfilesUrl = profilesUrl;
            ProfilesUserId = profilesUserId;
            PrometheusName = prometheusName;
            PrometheusRemoteEndpoint = prometheusRemoteEndpoint;
            PrometheusRemoteWriteEndpoint = prometheusRemoteWriteEndpoint;
            PrometheusStatus = prometheusStatus;
            PrometheusUrl = prometheusUrl;
            PrometheusUserId = prometheusUserId;
            RegionSlug = regionSlug;
            Slug = slug;
            Status = status;
            TracesName = tracesName;
            TracesStatus = tracesStatus;
            TracesUrl = tracesUrl;
            TracesUserId = tracesUserId;
            Url = url;
        }
    }
}
