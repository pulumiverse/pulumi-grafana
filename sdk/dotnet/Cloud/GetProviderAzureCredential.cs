// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Cloud
{
    public static class GetProviderAzureCredential
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProviderAzureCredential = new Grafana.Cloud.ProviderAzureCredential("test", new()
        ///     {
        ///         StackId = "1",
        ///         Name = "test-name",
        ///         ClientId = "my-client-id",
        ///         ClientSecret = "my-client-secret",
        ///         TenantId = "my-tenant-id",
        ///         ResourceDiscoveryTagFilters = new[]
        ///         {
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-1",
        ///                 Value = "value-1",
        ///             },
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-2",
        ///                 Value = "value-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetProviderAzureCredential.Invoke(new()
        ///     {
        ///         StackId = testProviderAzureCredential.StackId,
        ///         ResourceId = testProviderAzureCredential.ResourceId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProviderAzureCredentialResult> InvokeAsync(GetProviderAzureCredentialArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProviderAzureCredentialResult>("grafana:cloud/getProviderAzureCredential:getProviderAzureCredential", args ?? new GetProviderAzureCredentialArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProviderAzureCredential = new Grafana.Cloud.ProviderAzureCredential("test", new()
        ///     {
        ///         StackId = "1",
        ///         Name = "test-name",
        ///         ClientId = "my-client-id",
        ///         ClientSecret = "my-client-secret",
        ///         TenantId = "my-tenant-id",
        ///         ResourceDiscoveryTagFilters = new[]
        ///         {
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-1",
        ///                 Value = "value-1",
        ///             },
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-2",
        ///                 Value = "value-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetProviderAzureCredential.Invoke(new()
        ///     {
        ///         StackId = testProviderAzureCredential.StackId,
        ///         ResourceId = testProviderAzureCredential.ResourceId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProviderAzureCredentialResult> Invoke(GetProviderAzureCredentialInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderAzureCredentialResult>("grafana:cloud/getProviderAzureCredential:getProviderAzureCredential", args ?? new GetProviderAzureCredentialInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testProviderAzureCredential = new Grafana.Cloud.ProviderAzureCredential("test", new()
        ///     {
        ///         StackId = "1",
        ///         Name = "test-name",
        ///         ClientId = "my-client-id",
        ///         ClientSecret = "my-client-secret",
        ///         TenantId = "my-tenant-id",
        ///         ResourceDiscoveryTagFilters = new[]
        ///         {
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-1",
        ///                 Value = "value-1",
        ///             },
        ///             new Grafana.Cloud.Inputs.ProviderAzureCredentialResourceDiscoveryTagFilterArgs
        ///             {
        ///                 Key = "key-2",
        ///                 Value = "value-2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var test = Grafana.Cloud.GetProviderAzureCredential.Invoke(new()
        ///     {
        ///         StackId = testProviderAzureCredential.StackId,
        ///         ResourceId = testProviderAzureCredential.ResourceId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProviderAzureCredentialResult> Invoke(GetProviderAzureCredentialInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProviderAzureCredentialResult>("grafana:cloud/getProviderAzureCredential:getProviderAzureCredential", args ?? new GetProviderAzureCredentialInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProviderAzureCredentialArgs : global::Pulumi.InvokeArgs
    {
        [Input("resourceDiscoveryTagFilters")]
        private List<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterArgs>? _resourceDiscoveryTagFilters;

        /// <summary>
        /// The list of tag filters to apply to resources.
        /// </summary>
        public List<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterArgs> ResourceDiscoveryTagFilters
        {
            get => _resourceDiscoveryTagFilters ?? (_resourceDiscoveryTagFilters = new List<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterArgs>());
            set => _resourceDiscoveryTagFilters = value;
        }

        /// <summary>
        /// The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public string ResourceId { get; set; } = null!;

        [Input("stackId", required: true)]
        public string StackId { get; set; } = null!;

        public GetProviderAzureCredentialArgs()
        {
        }
        public static new GetProviderAzureCredentialArgs Empty => new GetProviderAzureCredentialArgs();
    }

    public sealed class GetProviderAzureCredentialInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("resourceDiscoveryTagFilters")]
        private InputList<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterInputArgs>? _resourceDiscoveryTagFilters;

        /// <summary>
        /// The list of tag filters to apply to resources.
        /// </summary>
        public InputList<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterInputArgs> ResourceDiscoveryTagFilters
        {
            get => _resourceDiscoveryTagFilters ?? (_resourceDiscoveryTagFilters = new InputList<Inputs.GetProviderAzureCredentialResourceDiscoveryTagFilterInputArgs>());
            set => _resourceDiscoveryTagFilters = value;
        }

        /// <summary>
        /// The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public GetProviderAzureCredentialInvokeArgs()
        {
        }
        public static new GetProviderAzureCredentialInvokeArgs Empty => new GetProviderAzureCredentialInvokeArgs();
    }


    [OutputType]
    public sealed class GetProviderAzureCredentialResult
    {
        /// <summary>
        /// The client ID of the Azure Credential.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The client secret of the Azure Credential.
        /// </summary>
        public readonly string ClientSecret;
        public readonly string Id;
        /// <summary>
        /// The name of the Azure Credential.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The list of tag filters to apply to resources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProviderAzureCredentialResourceDiscoveryTagFilterResult> ResourceDiscoveryTagFilters;
        /// <summary>
        /// The ID given by the Grafana Cloud Provider API to this Azure Credential resource.
        /// </summary>
        public readonly string ResourceId;
        public readonly string StackId;
        /// <summary>
        /// The tenant ID of the Azure Credential.
        /// </summary>
        public readonly string TenantId;

        [OutputConstructor]
        private GetProviderAzureCredentialResult(
            string clientId,

            string clientSecret,

            string id,

            string name,

            ImmutableArray<Outputs.GetProviderAzureCredentialResourceDiscoveryTagFilterResult> resourceDiscoveryTagFilters,

            string resourceId,

            string stackId,

            string tenantId)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            Id = id;
            Name = name;
            ResourceDiscoveryTagFilters = resourceDiscoveryTagFilters;
            ResourceId = resourceId;
            StackId = stackId;
            TenantId = tenantId;
        }
    }
}
