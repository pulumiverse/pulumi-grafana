// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.K6
{
    /// <summary>
    /// Sets up the k6 App on a Grafana Cloud instance and generates a token.
    /// Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install k6.
    /// This resource cannot be imported but it can be used on an existing k6 App installation without issues.
    /// 
    /// **Note that this resource must be used on a provider configured with Grafana Cloud credentials.**
    /// 
    /// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/k6/)
    /// 
    /// Required access policy scopes:
    /// 
    /// * stacks:read
    /// * stacks:write
    /// * subscriptions:read
    /// * orgs:read
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var config = new Config();
    ///     // Cloud Access Policy token for Grafana Cloud with the following scopes: stacks:read|write|delete, stack-service-accounts:write
    ///     var cloudAccessPolicyToken = config.RequireObject&lt;dynamic&gt;("cloudAccessPolicyToken");
    ///     var stackSlug = config.RequireObject&lt;dynamic&gt;("stackSlug");
    ///     var cloudRegion = config.Get("cloudRegion") ?? "us";
    ///     var k6Stack = new Grafana.Cloud.Stack("k6_stack", new()
    ///     {
    ///         Name = stackSlug,
    ///         Slug = stackSlug,
    ///         RegionSlug = cloudRegion,
    ///     });
    /// 
    ///     // Step 2: Create a Service Account and a token to install the k6 App
    ///     var k6Sa = new Grafana.Cloud.StackServiceAccount("k6_sa", new()
    ///     {
    ///         StackSlug = stackSlug,
    ///         Name = $"{stackSlug}-k6-app",
    ///         Role = "Admin",
    ///         IsDisabled = false,
    ///     });
    /// 
    ///     var k6SaToken = new Grafana.Cloud.StackServiceAccountToken("k6_sa_token", new()
    ///     {
    ///         StackSlug = stackSlug,
    ///         Name = $"{stackSlug}-k6-app-token",
    ///         ServiceAccountId = k6Sa.Id,
    ///     });
    /// 
    ///     // Step 3: Install the k6 App on the stack
    ///     var k6Installation = new Grafana.K6.Installation("k6_installation", new()
    ///     {
    ///         CloudAccessPolicyToken = cloudAccessPolicyToken,
    ///         StackId = k6Stack.Id,
    ///         GrafanaSaToken = k6SaToken.Key,
    ///         GrafanaUser = "admin",
    ///     });
    /// 
    ///     var myK6Project = new Grafana.K6.Project("my_k6_project", new()
    ///     {
    ///         Name = "k6 Project created with TF",
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:k6/installation:Installation")]
    public partial class Installation : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
        /// </summary>
        [Output("cloudAccessPolicyToken")]
        public Output<string> CloudAccessPolicyToken { get; private set; } = null!;

        /// <summary>
        /// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
        /// </summary>
        [Output("grafanaSaToken")]
        public Output<string> GrafanaSaToken { get; private set; } = null!;

        /// <summary>
        /// The user to use for the installation.
        /// </summary>
        [Output("grafanaUser")]
        public Output<string> GrafanaUser { get; private set; } = null!;

        /// <summary>
        /// Generated token to access the k6 API.
        /// </summary>
        [Output("k6AccessToken")]
        public Output<string> K6AccessToken { get; private set; } = null!;

        /// <summary>
        /// The identifier of the k6 organization.
        /// </summary>
        [Output("k6Organization")]
        public Output<string> K6Organization { get; private set; } = null!;

        /// <summary>
        /// The identifier of the stack to install k6 on.
        /// </summary>
        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;


        /// <summary>
        /// Create a Installation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Installation(string name, InstallationArgs args, CustomResourceOptions? options = null)
            : base("grafana:k6/installation:Installation", name, args ?? new InstallationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Installation(string name, Input<string> id, InstallationState? state = null, CustomResourceOptions? options = null)
            : base("grafana:k6/installation:Installation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "cloudAccessPolicyToken",
                    "grafanaSaToken",
                    "k6AccessToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Installation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Installation Get(string name, Input<string> id, InstallationState? state = null, CustomResourceOptions? options = null)
        {
            return new Installation(name, id, state, options);
        }
    }

    public sealed class InstallationArgs : global::Pulumi.ResourceArgs
    {
        [Input("cloudAccessPolicyToken", required: true)]
        private Input<string>? _cloudAccessPolicyToken;

        /// <summary>
        /// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
        /// </summary>
        public Input<string>? CloudAccessPolicyToken
        {
            get => _cloudAccessPolicyToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cloudAccessPolicyToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("grafanaSaToken", required: true)]
        private Input<string>? _grafanaSaToken;

        /// <summary>
        /// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
        /// </summary>
        public Input<string>? GrafanaSaToken
        {
            get => _grafanaSaToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _grafanaSaToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The user to use for the installation.
        /// </summary>
        [Input("grafanaUser", required: true)]
        public Input<string> GrafanaUser { get; set; } = null!;

        /// <summary>
        /// The identifier of the stack to install k6 on.
        /// </summary>
        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        public InstallationArgs()
        {
        }
        public static new InstallationArgs Empty => new InstallationArgs();
    }

    public sealed class InstallationState : global::Pulumi.ResourceArgs
    {
        [Input("cloudAccessPolicyToken")]
        private Input<string>? _cloudAccessPolicyToken;

        /// <summary>
        /// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
        /// </summary>
        public Input<string>? CloudAccessPolicyToken
        {
            get => _cloudAccessPolicyToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _cloudAccessPolicyToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("grafanaSaToken")]
        private Input<string>? _grafanaSaToken;

        /// <summary>
        /// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
        /// </summary>
        public Input<string>? GrafanaSaToken
        {
            get => _grafanaSaToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _grafanaSaToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The user to use for the installation.
        /// </summary>
        [Input("grafanaUser")]
        public Input<string>? GrafanaUser { get; set; }

        [Input("k6AccessToken")]
        private Input<string>? _k6AccessToken;

        /// <summary>
        /// Generated token to access the k6 API.
        /// </summary>
        public Input<string>? K6AccessToken
        {
            get => _k6AccessToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _k6AccessToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The identifier of the k6 organization.
        /// </summary>
        [Input("k6Organization")]
        public Input<string>? K6Organization { get; set; }

        /// <summary>
        /// The identifier of the stack to install k6 on.
        /// </summary>
        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        public InstallationState()
        {
        }
        public static new InstallationState Empty => new InstallationState();
    }
}
