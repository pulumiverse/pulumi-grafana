// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.K6
{
    public static class GetSchedule
    {
        /// <summary>
        /// Retrieves a k6 schedule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scheduleProject = new Grafana.K6.Project("schedule_project", new()
        ///     {
        ///         Name = "Terraform Schedule Test Project",
        ///     });
        /// 
        ///     var scheduleLoadTest = new Grafana.K6.LoadTest("schedule_load_test", new()
        ///     {
        ///         ProjectId = scheduleProject.Id,
        ///         Name = "Terraform Test Load Test for Schedule",
        ///         Script = @"export default function() {
        ///   console.log('Hello from k6 schedule test!');
        /// }
        /// ",
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleProject,
        ///         },
        ///     });
        /// 
        ///     var testSchedule = new Grafana.K6.Schedule("test_schedule", new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///         Starts = "2024-12-25T10:00:00Z",
        ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
        ///         {
        ///             Frequency = "MONTHLY",
        ///             Interval = 12,
        ///             Count = 100,
        ///         },
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleLoadTest,
        ///         },
        ///     });
        /// 
        ///     var fromLoadTest = Grafana.K6.GetSchedule.Invoke(new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["completeScheduleInfo"] = 
        ///         {
        ///             { "id", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Id) },
        ///             { "loadTestId", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.LoadTestId) },
        ///             { "starts", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Starts) },
        ///             { "deactivated", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Deactivated) },
        ///             { "nextRun", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.NextRun) },
        ///             { "createdBy", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.CreatedBy) },
        ///             { "recurrenceRule", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.RecurrenceRule) },
        ///             { "cron", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Cron) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetScheduleResult> InvokeAsync(GetScheduleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetScheduleResult>("grafana:k6/getSchedule:getSchedule", args ?? new GetScheduleArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a k6 schedule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scheduleProject = new Grafana.K6.Project("schedule_project", new()
        ///     {
        ///         Name = "Terraform Schedule Test Project",
        ///     });
        /// 
        ///     var scheduleLoadTest = new Grafana.K6.LoadTest("schedule_load_test", new()
        ///     {
        ///         ProjectId = scheduleProject.Id,
        ///         Name = "Terraform Test Load Test for Schedule",
        ///         Script = @"export default function() {
        ///   console.log('Hello from k6 schedule test!');
        /// }
        /// ",
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleProject,
        ///         },
        ///     });
        /// 
        ///     var testSchedule = new Grafana.K6.Schedule("test_schedule", new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///         Starts = "2024-12-25T10:00:00Z",
        ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
        ///         {
        ///             Frequency = "MONTHLY",
        ///             Interval = 12,
        ///             Count = 100,
        ///         },
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleLoadTest,
        ///         },
        ///     });
        /// 
        ///     var fromLoadTest = Grafana.K6.GetSchedule.Invoke(new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["completeScheduleInfo"] = 
        ///         {
        ///             { "id", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Id) },
        ///             { "loadTestId", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.LoadTestId) },
        ///             { "starts", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Starts) },
        ///             { "deactivated", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Deactivated) },
        ///             { "nextRun", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.NextRun) },
        ///             { "createdBy", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.CreatedBy) },
        ///             { "recurrenceRule", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.RecurrenceRule) },
        ///             { "cron", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Cron) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("grafana:k6/getSchedule:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves a k6 schedule.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var scheduleProject = new Grafana.K6.Project("schedule_project", new()
        ///     {
        ///         Name = "Terraform Schedule Test Project",
        ///     });
        /// 
        ///     var scheduleLoadTest = new Grafana.K6.LoadTest("schedule_load_test", new()
        ///     {
        ///         ProjectId = scheduleProject.Id,
        ///         Name = "Terraform Test Load Test for Schedule",
        ///         Script = @"export default function() {
        ///   console.log('Hello from k6 schedule test!');
        /// }
        /// ",
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleProject,
        ///         },
        ///     });
        /// 
        ///     var testSchedule = new Grafana.K6.Schedule("test_schedule", new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///         Starts = "2024-12-25T10:00:00Z",
        ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
        ///         {
        ///             Frequency = "MONTHLY",
        ///             Interval = 12,
        ///             Count = 100,
        ///         },
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             scheduleLoadTest,
        ///         },
        ///     });
        /// 
        ///     var fromLoadTest = Grafana.K6.GetSchedule.Invoke(new()
        ///     {
        ///         LoadTestId = scheduleLoadTest.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["completeScheduleInfo"] = 
        ///         {
        ///             { "id", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Id) },
        ///             { "loadTestId", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.LoadTestId) },
        ///             { "starts", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Starts) },
        ///             { "deactivated", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Deactivated) },
        ///             { "nextRun", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.NextRun) },
        ///             { "createdBy", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.CreatedBy) },
        ///             { "recurrenceRule", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.RecurrenceRule) },
        ///             { "cron", fromLoadTest.Apply(getScheduleResult =&gt; getScheduleResult.Cron) },
        ///         },
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetScheduleResult> Invoke(GetScheduleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetScheduleResult>("grafana:k6/getSchedule:getSchedule", args ?? new GetScheduleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetScheduleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
        /// </summary>
        [Input("cron")]
        public Inputs.GetScheduleCronArgs? Cron { get; set; }

        /// <summary>
        /// The identifier of the load test to retrieve the schedule for.
        /// </summary>
        [Input("loadTestId", required: true)]
        public string LoadTestId { get; set; } = null!;

        /// <summary>
        /// The schedule recurrence settings. If null, the test will run only once on the starts date.
        /// </summary>
        [Input("recurrenceRule")]
        public Inputs.GetScheduleRecurrenceRuleArgs? RecurrenceRule { get; set; }

        public GetScheduleArgs()
        {
        }
        public static new GetScheduleArgs Empty => new GetScheduleArgs();
    }

    public sealed class GetScheduleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
        /// </summary>
        [Input("cron")]
        public Input<Inputs.GetScheduleCronInputArgs>? Cron { get; set; }

        /// <summary>
        /// The identifier of the load test to retrieve the schedule for.
        /// </summary>
        [Input("loadTestId", required: true)]
        public Input<string> LoadTestId { get; set; } = null!;

        /// <summary>
        /// The schedule recurrence settings. If null, the test will run only once on the starts date.
        /// </summary>
        [Input("recurrenceRule")]
        public Input<Inputs.GetScheduleRecurrenceRuleInputArgs>? RecurrenceRule { get; set; }

        public GetScheduleInvokeArgs()
        {
        }
        public static new GetScheduleInvokeArgs Empty => new GetScheduleInvokeArgs();
    }


    [OutputType]
    public sealed class GetScheduleResult
    {
        /// <summary>
        /// The email of the user who created the schedule.
        /// </summary>
        public readonly string CreatedBy;
        /// <summary>
        /// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
        /// </summary>
        public readonly Outputs.GetScheduleCronResult? Cron;
        /// <summary>
        /// Whether the schedule is deactivated.
        /// </summary>
        public readonly bool Deactivated;
        /// <summary>
        /// Numeric identifier of the schedule.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The identifier of the load test to retrieve the schedule for.
        /// </summary>
        public readonly string LoadTestId;
        /// <summary>
        /// The next scheduled execution time.
        /// </summary>
        public readonly string NextRun;
        /// <summary>
        /// The schedule recurrence settings. If null, the test will run only once on the starts date.
        /// </summary>
        public readonly Outputs.GetScheduleRecurrenceRuleResult? RecurrenceRule;
        /// <summary>
        /// The start time for the schedule (RFC3339 format).
        /// </summary>
        public readonly string Starts;

        [OutputConstructor]
        private GetScheduleResult(
            string createdBy,

            Outputs.GetScheduleCronResult? cron,

            bool deactivated,

            string id,

            string loadTestId,

            string nextRun,

            Outputs.GetScheduleRecurrenceRuleResult? recurrenceRule,

            string starts)
        {
            CreatedBy = createdBy;
            Cron = cron;
            Deactivated = deactivated;
            Id = id;
            LoadTestId = loadTestId;
            NextRun = nextRun;
            RecurrenceRule = recurrenceRule;
            Starts = starts;
        }
    }
}
