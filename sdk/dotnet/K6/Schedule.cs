// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.K6
{
    /// <summary>
    /// Manages a k6 schedule for automated test execution.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var scheduleProject = new Grafana.K6.Project("schedule_project", new()
    ///     {
    ///         Name = "Terraform Schedule Resource Project",
    ///     });
    /// 
    ///     var scheduledTest = new Grafana.K6.LoadTest("scheduled_test", new()
    ///     {
    ///         ProjectId = scheduleProject.Id,
    ///         Name = "Terraform Scheduled Resource Test",
    ///         Script = @"export default function() {
    ///   console.log('Hello from scheduled k6 test!');
    /// }
    /// ",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             scheduleProject,
    ///         },
    ///     });
    /// 
    ///     var cronMonthly = new Grafana.K6.Schedule("cron_monthly", new()
    ///     {
    ///         LoadTestId = scheduledTest.Id,
    ///         Starts = "2024-12-25T10:00:00Z",
    ///         Cron = new Grafana.K6.Inputs.ScheduleCronArgs
    ///         {
    ///             Schedule = "0 10 1 * *",
    ///             Timezone = "UTC",
    ///         },
    ///     });
    /// 
    ///     var daily = new Grafana.K6.Schedule("daily", new()
    ///     {
    ///         LoadTestId = scheduledTest.Id,
    ///         Starts = "2024-12-25T10:00:00Z",
    ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
    ///         {
    ///             Frequency = "DAILY",
    ///             Interval = 1,
    ///         },
    ///     });
    /// 
    ///     var weekly = new Grafana.K6.Schedule("weekly", new()
    ///     {
    ///         LoadTestId = scheduledTest.Id,
    ///         Starts = "2024-12-25T09:00:00Z",
    ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
    ///         {
    ///             Frequency = "WEEKLY",
    ///             Interval = 1,
    ///             Bydays = new[]
    ///             {
    ///                 "MO",
    ///                 "WE",
    ///                 "FR",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // Example with YEARLY frequency and count
    ///     var yearly = new Grafana.K6.Schedule("yearly", new()
    ///     {
    ///         LoadTestId = scheduledTest.Id,
    ///         Starts = "2024-01-01T12:00:00Z",
    ///         RecurrenceRule = new Grafana.K6.Inputs.ScheduleRecurrenceRuleArgs
    ///         {
    ///             Frequency = "YEARLY",
    ///             Interval = 1,
    ///             Count = 5,
    ///         },
    ///     });
    /// 
    ///     // One-time schedule without recurrence
    ///     var oneTime = new Grafana.K6.Schedule("one_time", new()
    ///     {
    ///         LoadTestId = scheduledTest.Id,
    ///         Starts = "2024-12-25T15:00:00Z",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:k6/schedule:Schedule name "{{ load_test_id }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:k6/schedule:Schedule")]
    public partial class Schedule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The email of the user who created the schedule.
        /// </summary>
        [Output("createdBy")]
        public Output<string> CreatedBy { get; private set; } = null!;

        /// <summary>
        /// The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Output("cron")]
        public Output<Outputs.ScheduleCron?> Cron { get; private set; } = null!;

        /// <summary>
        /// Whether the schedule is deactivated.
        /// </summary>
        [Output("deactivated")]
        public Output<bool> Deactivated { get; private set; } = null!;

        /// <summary>
        /// The identifier of the load test to schedule.
        /// </summary>
        [Output("loadTestId")]
        public Output<string> LoadTestId { get; private set; } = null!;

        /// <summary>
        /// The next scheduled execution time.
        /// </summary>
        [Output("nextRun")]
        public Output<string> NextRun { get; private set; } = null!;

        /// <summary>
        /// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Output("recurrenceRule")]
        public Output<Outputs.ScheduleRecurrenceRule?> RecurrenceRule { get; private set; } = null!;

        /// <summary>
        /// The start time for the schedule (RFC3339 format).
        /// </summary>
        [Output("starts")]
        public Output<string> Starts { get; private set; } = null!;


        /// <summary>
        /// Create a Schedule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schedule(string name, ScheduleArgs args, CustomResourceOptions? options = null)
            : base("grafana:k6/schedule:Schedule", name, args ?? new ScheduleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schedule(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
            : base("grafana:k6/schedule:Schedule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schedule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schedule Get(string name, Input<string> id, ScheduleState? state = null, CustomResourceOptions? options = null)
        {
            return new Schedule(name, id, state, options);
        }
    }

    public sealed class ScheduleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Input("cron")]
        public Input<Inputs.ScheduleCronArgs>? Cron { get; set; }

        /// <summary>
        /// The identifier of the load test to schedule.
        /// </summary>
        [Input("loadTestId", required: true)]
        public Input<string> LoadTestId { get; set; } = null!;

        /// <summary>
        /// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Input("recurrenceRule")]
        public Input<Inputs.ScheduleRecurrenceRuleArgs>? RecurrenceRule { get; set; }

        /// <summary>
        /// The start time for the schedule (RFC3339 format).
        /// </summary>
        [Input("starts", required: true)]
        public Input<string> Starts { get; set; } = null!;

        public ScheduleArgs()
        {
        }
        public static new ScheduleArgs Empty => new ScheduleArgs();
    }

    public sealed class ScheduleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The email of the user who created the schedule.
        /// </summary>
        [Input("createdBy")]
        public Input<string>? CreatedBy { get; set; }

        /// <summary>
        /// The cron schedule to trigger the test periodically. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Input("cron")]
        public Input<Inputs.ScheduleCronGetArgs>? Cron { get; set; }

        /// <summary>
        /// Whether the schedule is deactivated.
        /// </summary>
        [Input("deactivated")]
        public Input<bool>? Deactivated { get; set; }

        /// <summary>
        /// The identifier of the load test to schedule.
        /// </summary>
        [Input("loadTestId")]
        public Input<string>? LoadTestId { get; set; }

        /// <summary>
        /// The next scheduled execution time.
        /// </summary>
        [Input("nextRun")]
        public Input<string>? NextRun { get; set; }

        /// <summary>
        /// The schedule recurrence settings. If not specified, the test will run only once on the 'starts' date. Only one of `recurrence_rule` and `cron` can be set.
        /// </summary>
        [Input("recurrenceRule")]
        public Input<Inputs.ScheduleRecurrenceRuleGetArgs>? RecurrenceRule { get; set; }

        /// <summary>
        /// The start time for the schedule (RFC3339 format).
        /// </summary>
        [Input("starts")]
        public Input<string>? Starts { get; set; }

        public ScheduleState()
        {
        }
        public static new ScheduleState Empty => new ScheduleState();
    }
}
