// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.K6
{
    /// <summary>
    /// Manages limits for a k6 project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testProjectLimits = new Grafana.K6.Project("test_project_limits", new()
    ///     {
    ///         Name = "Terraform Project Test Limits",
    ///     });
    /// 
    ///     var testLimits = new Grafana.K6.ProjectLimits("test_limits", new()
    ///     {
    ///         ProjectId = testProjectLimits.Id,
    ///         VuhMaxPerMonth = 1000,
    ///         VuMaxPerTest = 100,
    ///         VuBrowserMaxPerTest = 10,
    ///         DurationMaxPerTest = 3600,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:k6/projectLimits:ProjectLimits name "{{ project_id }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:k6/projectLimits:ProjectLimits")]
    public partial class ProjectLimits : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Maximum duration of a test in seconds.
        /// </summary>
        [Output("durationMaxPerTest")]
        public Output<int?> DurationMaxPerTest { get; private set; } = null!;

        /// <summary>
        /// The identifier of the project to manage limits for.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Maximum number of concurrent browser virtual users (VUs) used in one test.
        /// </summary>
        [Output("vuBrowserMaxPerTest")]
        public Output<int?> VuBrowserMaxPerTest { get; private set; } = null!;

        /// <summary>
        /// Maximum number of concurrent virtual users (VUs) used in one test.
        /// </summary>
        [Output("vuMaxPerTest")]
        public Output<int?> VuMaxPerTest { get; private set; } = null!;

        /// <summary>
        /// Maximum amount of virtual user hours (VU/h) used per one calendar month.
        /// </summary>
        [Output("vuhMaxPerMonth")]
        public Output<int?> VuhMaxPerMonth { get; private set; } = null!;


        /// <summary>
        /// Create a ProjectLimits resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ProjectLimits(string name, ProjectLimitsArgs args, CustomResourceOptions? options = null)
            : base("grafana:k6/projectLimits:ProjectLimits", name, args ?? new ProjectLimitsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ProjectLimits(string name, Input<string> id, ProjectLimitsState? state = null, CustomResourceOptions? options = null)
            : base("grafana:k6/projectLimits:ProjectLimits", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ProjectLimits resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ProjectLimits Get(string name, Input<string> id, ProjectLimitsState? state = null, CustomResourceOptions? options = null)
        {
            return new ProjectLimits(name, id, state, options);
        }
    }

    public sealed class ProjectLimitsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum duration of a test in seconds.
        /// </summary>
        [Input("durationMaxPerTest")]
        public Input<int>? DurationMaxPerTest { get; set; }

        /// <summary>
        /// The identifier of the project to manage limits for.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Maximum number of concurrent browser virtual users (VUs) used in one test.
        /// </summary>
        [Input("vuBrowserMaxPerTest")]
        public Input<int>? VuBrowserMaxPerTest { get; set; }

        /// <summary>
        /// Maximum number of concurrent virtual users (VUs) used in one test.
        /// </summary>
        [Input("vuMaxPerTest")]
        public Input<int>? VuMaxPerTest { get; set; }

        /// <summary>
        /// Maximum amount of virtual user hours (VU/h) used per one calendar month.
        /// </summary>
        [Input("vuhMaxPerMonth")]
        public Input<int>? VuhMaxPerMonth { get; set; }

        public ProjectLimitsArgs()
        {
        }
        public static new ProjectLimitsArgs Empty => new ProjectLimitsArgs();
    }

    public sealed class ProjectLimitsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Maximum duration of a test in seconds.
        /// </summary>
        [Input("durationMaxPerTest")]
        public Input<int>? DurationMaxPerTest { get; set; }

        /// <summary>
        /// The identifier of the project to manage limits for.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Maximum number of concurrent browser virtual users (VUs) used in one test.
        /// </summary>
        [Input("vuBrowserMaxPerTest")]
        public Input<int>? VuBrowserMaxPerTest { get; set; }

        /// <summary>
        /// Maximum number of concurrent virtual users (VUs) used in one test.
        /// </summary>
        [Input("vuMaxPerTest")]
        public Input<int>? VuMaxPerTest { get; set; }

        /// <summary>
        /// Maximum amount of virtual user hours (VU/h) used per one calendar month.
        /// </summary>
        [Input("vuhMaxPerMonth")]
        public Input<int>? VuhMaxPerMonth { get; set; }

        public ProjectLimitsState()
        {
        }
        public static new ProjectLimitsState Empty => new ProjectLimitsState();
    }
}
