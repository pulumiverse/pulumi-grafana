// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Enterprise
{
    public static class GetRole
    {
        /// <summary>
        /// **Note:** This resource is available only with Grafana Enterprise 8.+.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Enterprise.Role("test", new()
        ///     {
        ///         Name = "test-role",
        ///         Description = "test-role description",
        ///         Uid = "test-ds-role-uid",
        ///         Version = 1,
        ///         Global = true,
        ///         Hidden = false,
        ///         Permissions = new[]
        ///         {
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:add",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:write",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:read",
        ///                 Scope = "users:*",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fromName = Grafana.Enterprise.GetRole.Invoke(new()
        ///     {
        ///         Name = test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("grafana:enterprise/getRole:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// **Note:** This resource is available only with Grafana Enterprise 8.+.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Enterprise.Role("test", new()
        ///     {
        ///         Name = "test-role",
        ///         Description = "test-role description",
        ///         Uid = "test-ds-role-uid",
        ///         Version = 1,
        ///         Global = true,
        ///         Hidden = false,
        ///         Permissions = new[]
        ///         {
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:add",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:write",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:read",
        ///                 Scope = "users:*",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fromName = Grafana.Enterprise.GetRole.Invoke(new()
        ///     {
        ///         Name = test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("grafana:enterprise/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// **Note:** This resource is available only with Grafana Enterprise 8.+.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Enterprise.Role("test", new()
        ///     {
        ///         Name = "test-role",
        ///         Description = "test-role description",
        ///         Uid = "test-ds-role-uid",
        ///         Version = 1,
        ///         Global = true,
        ///         Hidden = false,
        ///         Permissions = new[]
        ///         {
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:add",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:write",
        ///                 Scope = "users:*",
        ///             },
        ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
        ///             {
        ///                 Action = "org.users:read",
        ///                 Scope = "users:*",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fromName = Grafana.Enterprise.GetRole.Invoke(new()
        ///     {
        ///         Name = test.Name,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetRoleResult>("grafana:enterprise/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the role
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the role
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        /// <summary>
        /// Description of the role.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Display name of the role. Available with Grafana 8.5+.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Boolean to state whether the role is available across all organizations or not.
        /// </summary>
        public readonly bool Global;
        /// <summary>
        /// Group of the role. Available with Grafana 8.5+.
        /// </summary>
        public readonly string Group;
        /// <summary>
        /// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.
        /// </summary>
        public readonly bool Hidden;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the role
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        public readonly string OrgId;
        /// <summary>
        /// Specific set of actions granted by the role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRolePermissionResult> Permissions;
        /// <summary>
        /// Unique identifier of the role. Used for assignments.
        /// </summary>
        public readonly string Uid;
        /// <summary>
        /// Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetRoleResult(
            string description,

            string displayName,

            bool global,

            string group,

            bool hidden,

            string id,

            string name,

            string orgId,

            ImmutableArray<Outputs.GetRolePermissionResult> permissions,

            string uid,

            int version)
        {
            Description = description;
            DisplayName = displayName;
            Global = global;
            Group = group;
            Hidden = hidden;
            Id = id;
            Name = name;
            OrgId = orgId;
            Permissions = permissions;
            Uid = uid;
            Version = version;
        }
    }
}
