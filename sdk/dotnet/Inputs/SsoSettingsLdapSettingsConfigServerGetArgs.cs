// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Inputs
{

    public sealed class SsoSettingsLdapSettingsConfigServerGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// The search user bind DN.
        /// </summary>
        [Input("bindDn")]
        public Input<string>? BindDn { get; set; }

        [Input("bindPassword")]
        private Input<string>? _bindPassword;

        /// <summary>
        /// The search user bind password.
        /// </summary>
        public Input<string>? BindPassword
        {
            get => _bindPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _bindPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The path to the client certificate.
        /// </summary>
        [Input("clientCert")]
        public Input<string>? ClientCert { get; set; }

        /// <summary>
        /// The Base64 encoded value of the client certificate.
        /// </summary>
        [Input("clientCertValue")]
        public Input<string>? ClientCertValue { get; set; }

        [Input("clientKey")]
        private Input<string>? _clientKey;

        /// <summary>
        /// The path to the client private key.
        /// </summary>
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientKeyValue")]
        private Input<string>? _clientKeyValue;

        /// <summary>
        /// The Base64 encoded value of the client private key.
        /// </summary>
        public Input<string>? ClientKeyValue
        {
            get => _clientKeyValue;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKeyValue = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("groupMappings")]
        private InputList<Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingGetArgs>? _groupMappings;

        /// <summary>
        /// For mapping an LDAP group to a Grafana organization and role.
        /// </summary>
        public InputList<Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingGetArgs> GroupMappings
        {
            get => _groupMappings ?? (_groupMappings = new InputList<Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingGetArgs>());
            set => _groupMappings = value;
        }

        [Input("groupSearchBaseDns")]
        private InputList<string>? _groupSearchBaseDns;

        /// <summary>
        /// An array of the base DNs to search through for groups. Typically uses ou=groups.
        /// </summary>
        public InputList<string> GroupSearchBaseDns
        {
            get => _groupSearchBaseDns ?? (_groupSearchBaseDns = new InputList<string>());
            set => _groupSearchBaseDns = value;
        }

        /// <summary>
        /// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
        /// </summary>
        [Input("groupSearchFilter")]
        public Input<string>? GroupSearchFilter { get; set; }

        /// <summary>
        /// The %s in the search filter will be replaced with the attribute defined in this field.
        /// </summary>
        [Input("groupSearchFilterUserAttribute")]
        public Input<string>? GroupSearchFilterUserAttribute { get; set; }

        /// <summary>
        /// The LDAP server host.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// The LDAP server port.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The path to the root CA certificate.
        /// </summary>
        [Input("rootCaCert")]
        public Input<string>? RootCaCert { get; set; }

        [Input("rootCaCertValues")]
        private InputList<string>? _rootCaCertValues;

        /// <summary>
        /// The Base64 encoded values of the root CA certificates.
        /// </summary>
        public InputList<string> RootCaCertValues
        {
            get => _rootCaCertValues ?? (_rootCaCertValues = new InputList<string>());
            set => _rootCaCertValues = value;
        }

        [Input("searchBaseDns", required: true)]
        private InputList<string>? _searchBaseDns;

        /// <summary>
        /// An array of base DNs to search through.
        /// </summary>
        public InputList<string> SearchBaseDns
        {
            get => _searchBaseDns ?? (_searchBaseDns = new InputList<string>());
            set => _searchBaseDns = value;
        }

        /// <summary>
        /// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
        /// </summary>
        [Input("searchFilter", required: true)]
        public Input<string> SearchFilter { get; set; } = null!;

        /// <summary>
        /// If set to true, the SSL cert validation will be skipped.
        /// </summary>
        [Input("sslSkipVerify")]
        public Input<bool>? SslSkipVerify { get; set; }

        /// <summary>
        /// If set to true, use LDAP with STARTTLS instead of LDAPS.
        /// </summary>
        [Input("startTls")]
        public Input<bool>? StartTls { get; set; }

        /// <summary>
        /// The timeout in seconds for connecting to the LDAP host.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("tlsCiphers")]
        private InputList<string>? _tlsCiphers;

        /// <summary>
        /// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
        /// </summary>
        public InputList<string> TlsCiphers
        {
            get => _tlsCiphers ?? (_tlsCiphers = new InputList<string>());
            set => _tlsCiphers = value;
        }

        /// <summary>
        /// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        public SsoSettingsLdapSettingsConfigServerGetArgs()
        {
        }
        public static new SsoSettingsLdapSettingsConfigServerGetArgs Empty => new SsoSettingsLdapSettingsConfigServerGetArgs();
    }
}
