// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Inputs
{

    public sealed class ContactPointPushoverGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiToken", required: true)]
        private Input<string>? _apiToken;

        /// <summary>
        /// The Pushover API token.
        /// </summary>
        public Input<string>? ApiToken
        {
            get => _apiToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _apiToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Comma-separated list of devices to which the event is associated.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Whether to disable sending resolve messages. Defaults to `false`.
        /// </summary>
        [Input("disableResolveMessage")]
        public Input<bool>? DisableResolveMessage { get; set; }

        /// <summary>
        /// How many seconds for which the notification will continue to be retried by Pushover.
        /// </summary>
        [Input("expire")]
        public Input<int>? Expire { get; set; }

        /// <summary>
        /// The templated notification message content.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The priority level of the resolved event.
        /// </summary>
        [Input("okPriority")]
        public Input<int>? OkPriority { get; set; }

        /// <summary>
        /// The sound associated with the resolved notification.
        /// </summary>
        [Input("okSound")]
        public Input<string>? OkSound { get; set; }

        /// <summary>
        /// The priority level of the event.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// How often, in seconds, the Pushover servers will send the same notification to the user.
        /// </summary>
        [Input("retry")]
        public Input<int>? Retry { get; set; }

        [Input("settings")]
        private InputMap<string>? _settings;

        /// <summary>
        /// Additional custom properties to attach to the notifier. Defaults to `map[]`.
        /// </summary>
        public InputMap<string> Settings
        {
            get => _settings ?? (_settings = new InputMap<string>());
            set
            {
                var emptySecret = Output.CreateSecret(ImmutableDictionary.Create<string, string>());
                _settings = Output.All(value, emptySecret).Apply(v => v[0]);
            }
        }

        /// <summary>
        /// The sound associated with the notification.
        /// </summary>
        [Input("sound")]
        public Input<string>? Sound { get; set; }

        /// <summary>
        /// The templated title of the message.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// The UID of the contact point.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        /// <summary>
        /// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
        /// </summary>
        [Input("uploadImage")]
        public Input<bool>? UploadImage { get; set; }

        [Input("userKey", required: true)]
        private Input<string>? _userKey;

        /// <summary>
        /// The Pushover user key.
        /// </summary>
        public Input<string>? UserKey
        {
            get => _userKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public ContactPointPushoverGetArgs()
        {
        }
        public static new ContactPointPushoverGetArgs Empty => new ContactPointPushoverGetArgs();
    }
}
