// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Inputs
{

    public sealed class RuleGroupRuleGetArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The `ref_id` of the query node in the `data` field to use as the alert condition.
        /// </summary>
        [Input("condition", required: true)]
        public Input<string> Condition { get; set; } = null!;

        [Input("datas", required: true)]
        private InputList<Inputs.RuleGroupRuleDataGetArgs>? _datas;

        /// <summary>
        /// A sequence of stages that describe the contents of the rule.
        /// </summary>
        public InputList<Inputs.RuleGroupRuleDataGetArgs> Datas
        {
            get => _datas ?? (_datas = new InputList<Inputs.RuleGroupRuleDataGetArgs>());
            set => _datas = value;
        }

        /// <summary>
        /// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting.
        /// </summary>
        [Input("execErrState")]
        public Input<string>? ExecErrState { get; set; }

        /// <summary>
        /// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending.
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        /// <summary>
        /// Sets whether the alert should be paused or not.
        /// </summary>
        [Input("isPaused")]
        public Input<bool>? IsPaused { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The name of the alert rule.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting.
        /// </summary>
        [Input("noDataState")]
        public Input<string>? NoDataState { get; set; }

        /// <summary>
        /// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' enabled.
        /// </summary>
        [Input("notificationSettings")]
        public Input<Inputs.RuleGroupRuleNotificationSettingsGetArgs>? NotificationSettings { get; set; }

        /// <summary>
        /// The unique identifier of the alert rule.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public RuleGroupRuleGetArgs()
        {
        }
        public static new RuleGroupRuleGetArgs Empty => new RuleGroupRuleGetArgs();
    }
}
