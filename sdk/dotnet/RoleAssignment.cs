// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana
{
    /// <summary>
    /// Manages the entire set of assignments for a role. Assignments that aren't specified when applying this resource will be removed.
    /// **Note:** This resource is available only with Grafana Enterprise 9.2+.
    /// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
    /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testRole = new Grafana.Enterprise.Role("test_role", new()
    ///     {
    ///         Name = "Test Role",
    ///         Uid = "testrole",
    ///         Version = 1,
    ///         Global = true,
    ///         Permissions = new[]
    ///         {
    ///             new Grafana.Enterprise.Inputs.RolePermissionArgs
    ///             {
    ///                 Action = "org.users:add",
    ///                 Scope = "users:*",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testTeam = new Grafana.Oss.Team("test_team", new()
    ///     {
    ///         Name = "terraform_test_team",
    ///     });
    /// 
    ///     var testUser = new Grafana.Oss.User("test_user", new()
    ///     {
    ///         Email = "terraform_user@test.com",
    ///         Login = "terraform_user@test.com",
    ///         Password = "password",
    ///     });
    /// 
    ///     var testSa = new Grafana.Oss.ServiceAccount("test_sa", new()
    ///     {
    ///         Name = "terraform_test_sa",
    ///         Role = "Viewer",
    ///     });
    /// 
    ///     var test = new Grafana.Enterprise.RoleAssignment("test", new()
    ///     {
    ///         RoleUid = testRole.Uid,
    ///         Users = new[]
    ///         {
    ///             testUser.Id,
    ///         },
    ///         Teams = new[]
    ///         {
    ///             testTeam.Id,
    ///         },
    ///         ServiceAccounts = new[]
    ///         {
    ///             testSa.Id,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/roleAssignment:RoleAssignment name "{{ roleUID }}"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/roleAssignment:RoleAssignment name "{{ orgID }}:{{ roleUID }}"
    /// ```
    /// </summary>
    [Obsolete(@"grafana.index/roleassignment.RoleAssignment has been deprecated in favor of grafana.enterprise/roleassignment.RoleAssignment")]
    [GrafanaResourceType("grafana:index/roleAssignment:RoleAssignment")]
    public partial class RoleAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Grafana RBAC role UID.
        /// </summary>
        [Output("roleUid")]
        public Output<string> RoleUid { get; private set; } = null!;

        /// <summary>
        /// IDs of service accounts that the role should be assigned to.
        /// </summary>
        [Output("serviceAccounts")]
        public Output<ImmutableArray<string>> ServiceAccounts { get; private set; } = null!;

        /// <summary>
        /// IDs of teams that the role should be assigned to.
        /// </summary>
        [Output("teams")]
        public Output<ImmutableArray<string>> Teams { get; private set; } = null!;

        /// <summary>
        /// IDs of users that the role should be assigned to.
        /// </summary>
        [Output("users")]
        public Output<ImmutableArray<int>> Users { get; private set; } = null!;


        /// <summary>
        /// Create a RoleAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RoleAssignment(string name, RoleAssignmentArgs args, CustomResourceOptions? options = null)
            : base("grafana:index/roleAssignment:RoleAssignment", name, args ?? new RoleAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RoleAssignment(string name, Input<string> id, RoleAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("grafana:index/roleAssignment:RoleAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "grafana:index/roleAssignment:RoleAssignment" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RoleAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RoleAssignment Get(string name, Input<string> id, RoleAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new RoleAssignment(name, id, state, options);
        }
    }

    public sealed class RoleAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Grafana RBAC role UID.
        /// </summary>
        [Input("roleUid", required: true)]
        public Input<string> RoleUid { get; set; } = null!;

        [Input("serviceAccounts")]
        private InputList<string>? _serviceAccounts;

        /// <summary>
        /// IDs of service accounts that the role should be assigned to.
        /// </summary>
        public InputList<string> ServiceAccounts
        {
            get => _serviceAccounts ?? (_serviceAccounts = new InputList<string>());
            set => _serviceAccounts = value;
        }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// IDs of teams that the role should be assigned to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        [Input("users")]
        private InputList<int>? _users;

        /// <summary>
        /// IDs of users that the role should be assigned to.
        /// </summary>
        public InputList<int> Users
        {
            get => _users ?? (_users = new InputList<int>());
            set => _users = value;
        }

        public RoleAssignmentArgs()
        {
        }
        public static new RoleAssignmentArgs Empty => new RoleAssignmentArgs();
    }

    public sealed class RoleAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Grafana RBAC role UID.
        /// </summary>
        [Input("roleUid")]
        public Input<string>? RoleUid { get; set; }

        [Input("serviceAccounts")]
        private InputList<string>? _serviceAccounts;

        /// <summary>
        /// IDs of service accounts that the role should be assigned to.
        /// </summary>
        public InputList<string> ServiceAccounts
        {
            get => _serviceAccounts ?? (_serviceAccounts = new InputList<string>());
            set => _serviceAccounts = value;
        }

        [Input("teams")]
        private InputList<string>? _teams;

        /// <summary>
        /// IDs of teams that the role should be assigned to.
        /// </summary>
        public InputList<string> Teams
        {
            get => _teams ?? (_teams = new InputList<string>());
            set => _teams = value;
        }

        [Input("users")]
        private InputList<int>? _users;

        /// <summary>
        /// IDs of users that the role should be assigned to.
        /// </summary>
        public InputList<int> Users
        {
            get => _users ?? (_users = new InputList<int>());
            set => _users = value;
        }

        public RoleAssignmentState()
        {
        }
        public static new RoleAssignmentState Empty => new RoleAssignmentState();
    }
}
