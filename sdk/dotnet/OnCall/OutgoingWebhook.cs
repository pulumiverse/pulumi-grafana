// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.OnCall
{
    /// <summary>
    /// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumi.Grafana;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myTeam = Grafana.Oss.GetTeam.Invoke(new()
    ///     {
    ///         Name = "my team",
    ///     });
    /// 
    ///     var myTeamGetTeam = Grafana.OnCall.GetTeam.Invoke(new()
    ///     {
    ///         Name = myTeam.Apply(getTeamResult =&gt; getTeamResult.Name),
    ///     });
    /// 
    ///     var test_acc_outgoingWebhook = new Grafana.OnCall.OutgoingWebhook("test-acc-outgoing_webhook", new()
    ///     {
    ///         Name = "my outgoing webhook",
    ///         Url = "https://example.com/",
    ///         TeamId = myTeamGetTeam.Apply(getTeamResult =&gt; getTeamResult.Id),
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:onCall/outgoingWebhook:OutgoingWebhook name "{{ id }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:onCall/outgoingWebhook:OutgoingWebhook")]
    public partial class OutgoingWebhook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The auth data of the webhook. Used in Authorization header instead of user/password auth.
        /// </summary>
        [Output("authorizationHeader")]
        public Output<string?> AuthorizationHeader { get; private set; } = null!;

        /// <summary>
        /// The data of the webhook.
        /// </summary>
        [Output("data")]
        public Output<string?> Data { get; private set; } = null!;

        /// <summary>
        /// Toggle to send the entire webhook payload instead of using the values in the Data field.
        /// </summary>
        [Output("forwardWholePayload")]
        public Output<bool?> ForwardWholePayload { get; private set; } = null!;

        /// <summary>
        /// Headers to add to the outgoing webhook request.
        /// </summary>
        [Output("headers")]
        public Output<string?> Headers { get; private set; } = null!;

        /// <summary>
        /// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
        /// </summary>
        [Output("httpMethod")]
        public Output<string?> HttpMethod { get; private set; } = null!;

        /// <summary>
        /// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
        /// </summary>
        [Output("integrationFilters")]
        public Output<ImmutableArray<string>> IntegrationFilters { get; private set; } = null!;

        /// <summary>
        /// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
        /// </summary>
        [Output("isWebhookEnabled")]
        public Output<bool?> IsWebhookEnabled { get; private set; } = null!;

        /// <summary>
        /// The name of the outgoing webhook.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The auth data of the webhook. Used for Basic authentication
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
        /// </summary>
        [Output("teamId")]
        public Output<string?> TeamId { get; private set; } = null!;

        /// <summary>
        /// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
        /// </summary>
        [Output("triggerTemplate")]
        public Output<string?> TriggerTemplate { get; private set; } = null!;

        /// <summary>
        /// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
        /// </summary>
        [Output("triggerType")]
        public Output<string?> TriggerType { get; private set; } = null!;

        /// <summary>
        /// The webhook URL.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;

        /// <summary>
        /// Username to use when making the outgoing webhook request.
        /// </summary>
        [Output("user")]
        public Output<string?> User { get; private set; } = null!;


        /// <summary>
        /// Create a OutgoingWebhook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OutgoingWebhook(string name, OutgoingWebhookArgs args, CustomResourceOptions? options = null)
            : base("grafana:onCall/outgoingWebhook:OutgoingWebhook", name, args ?? new OutgoingWebhookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OutgoingWebhook(string name, Input<string> id, OutgoingWebhookState? state = null, CustomResourceOptions? options = null)
            : base("grafana:onCall/outgoingWebhook:OutgoingWebhook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                AdditionalSecretOutputs =
                {
                    "authorizationHeader",
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OutgoingWebhook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OutgoingWebhook Get(string name, Input<string> id, OutgoingWebhookState? state = null, CustomResourceOptions? options = null)
        {
            return new OutgoingWebhook(name, id, state, options);
        }
    }

    public sealed class OutgoingWebhookArgs : global::Pulumi.ResourceArgs
    {
        [Input("authorizationHeader")]
        private Input<string>? _authorizationHeader;

        /// <summary>
        /// The auth data of the webhook. Used in Authorization header instead of user/password auth.
        /// </summary>
        public Input<string>? AuthorizationHeader
        {
            get => _authorizationHeader;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authorizationHeader = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The data of the webhook.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// Toggle to send the entire webhook payload instead of using the values in the Data field.
        /// </summary>
        [Input("forwardWholePayload")]
        public Input<bool>? ForwardWholePayload { get; set; }

        /// <summary>
        /// Headers to add to the outgoing webhook request.
        /// </summary>
        [Input("headers")]
        public Input<string>? Headers { get; set; }

        /// <summary>
        /// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
        /// </summary>
        [Input("httpMethod")]
        public Input<string>? HttpMethod { get; set; }

        [Input("integrationFilters")]
        private InputList<string>? _integrationFilters;

        /// <summary>
        /// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
        /// </summary>
        public InputList<string> IntegrationFilters
        {
            get => _integrationFilters ?? (_integrationFilters = new InputList<string>());
            set => _integrationFilters = value;
        }

        /// <summary>
        /// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
        /// </summary>
        [Input("isWebhookEnabled")]
        public Input<bool>? IsWebhookEnabled { get; set; }

        /// <summary>
        /// The name of the outgoing webhook.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The auth data of the webhook. Used for Basic authentication
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
        /// </summary>
        [Input("triggerTemplate")]
        public Input<string>? TriggerTemplate { get; set; }

        /// <summary>
        /// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
        /// </summary>
        [Input("triggerType")]
        public Input<string>? TriggerType { get; set; }

        /// <summary>
        /// The webhook URL.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        /// <summary>
        /// Username to use when making the outgoing webhook request.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public OutgoingWebhookArgs()
        {
        }
        public static new OutgoingWebhookArgs Empty => new OutgoingWebhookArgs();
    }

    public sealed class OutgoingWebhookState : global::Pulumi.ResourceArgs
    {
        [Input("authorizationHeader")]
        private Input<string>? _authorizationHeader;

        /// <summary>
        /// The auth data of the webhook. Used in Authorization header instead of user/password auth.
        /// </summary>
        public Input<string>? AuthorizationHeader
        {
            get => _authorizationHeader;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authorizationHeader = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The data of the webhook.
        /// </summary>
        [Input("data")]
        public Input<string>? Data { get; set; }

        /// <summary>
        /// Toggle to send the entire webhook payload instead of using the values in the Data field.
        /// </summary>
        [Input("forwardWholePayload")]
        public Input<bool>? ForwardWholePayload { get; set; }

        /// <summary>
        /// Headers to add to the outgoing webhook request.
        /// </summary>
        [Input("headers")]
        public Input<string>? Headers { get; set; }

        /// <summary>
        /// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
        /// </summary>
        [Input("httpMethod")]
        public Input<string>? HttpMethod { get; set; }

        [Input("integrationFilters")]
        private InputList<string>? _integrationFilters;

        /// <summary>
        /// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
        /// </summary>
        public InputList<string> IntegrationFilters
        {
            get => _integrationFilters ?? (_integrationFilters = new InputList<string>());
            set => _integrationFilters = value;
        }

        /// <summary>
        /// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
        /// </summary>
        [Input("isWebhookEnabled")]
        public Input<bool>? IsWebhookEnabled { get; set; }

        /// <summary>
        /// The name of the outgoing webhook.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The auth data of the webhook. Used for Basic authentication
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The ID of the OnCall team (using the `grafana.onCall.getTeam` datasource).
        /// </summary>
        [Input("teamId")]
        public Input<string>? TeamId { get; set; }

        /// <summary>
        /// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
        /// </summary>
        [Input("triggerTemplate")]
        public Input<string>? TriggerTemplate { get; set; }

        /// <summary>
        /// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
        /// </summary>
        [Input("triggerType")]
        public Input<string>? TriggerType { get; set; }

        /// <summary>
        /// The webhook URL.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        /// <summary>
        /// Username to use when making the outgoing webhook request.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public OutgoingWebhookState()
        {
        }
        public static new OutgoingWebhookState Empty => new OutgoingWebhookState();
    }
}
