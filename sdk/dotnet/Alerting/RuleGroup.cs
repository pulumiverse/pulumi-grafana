// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting
{
    /// <summary>
    /// Manages Grafana Alerting rule groups.
    /// 
    /// * Official documentation
    /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/alerting_provisioning/#alert-rules)
    /// 
    /// This resource requires Grafana 9.1.0 or later.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var ruleFolder = new Grafana.Oss.Folder("rule_folder", new()
    ///     {
    ///         Title = "My Alert Rule Folder",
    ///     });
    /// 
    ///     var myAlertRule = new Grafana.Alerting.RuleGroup("my_alert_rule", new()
    ///     {
    ///         Name = "My Rule Group",
    ///         FolderUid = ruleFolder.Uid,
    ///         IntervalSeconds = 240,
    ///         OrgId = "1",
    ///         Rules = new[]
    ///         {
    ///             new Grafana.Alerting.Inputs.RuleGroupRuleArgs
    ///             {
    ///                 Name = "My Alert Rule 1",
    ///                 For = "2m",
    ///                 Condition = "B",
    ///                 NoDataState = "NoData",
    ///                 ExecErrState = "Alerting",
    ///                 Annotations = 
    ///                 {
    ///                     { "a", "b" },
    ///                     { "c", "d" },
    ///                 },
    ///                 Labels = 
    ///                 {
    ///                     { "e", "f" },
    ///                     { "g", "h" },
    ///                 },
    ///                 IsPaused = false,
    ///                 Datas = new[]
    ///                 {
    ///                     new Grafana.Alerting.Inputs.RuleGroupRuleDataArgs
    ///                     {
    ///                         RefId = "A",
    ///                         QueryType = "",
    ///                         RelativeTimeRange = new Grafana.Alerting.Inputs.RuleGroupRuleDataRelativeTimeRangeArgs
    ///                         {
    ///                             From = 600,
    ///                             To = 0,
    ///                         },
    ///                         DatasourceUid = "PD8C576611E62080A",
    ///                         Model = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["hide"] = false,
    ///                             ["intervalMs"] = 1000,
    ///                             ["maxDataPoints"] = 43200,
    ///                             ["refId"] = "A",
    ///                         }),
    ///                     },
    ///                     new Grafana.Alerting.Inputs.RuleGroupRuleDataArgs
    ///                     {
    ///                         RefId = "B",
    ///                         QueryType = "",
    ///                         RelativeTimeRange = new Grafana.Alerting.Inputs.RuleGroupRuleDataRelativeTimeRangeArgs
    ///                         {
    ///                             From = 0,
    ///                             To = 0,
    ///                         },
    ///                         DatasourceUid = "-100",
    ///                         Model = @"{
    ///     ""conditions"": [
    ///         {
    ///         ""evaluator"": {
    ///             ""params"": [
    ///             3
    ///             ],
    ///             ""type"": ""gt""
    ///         },
    ///         ""operator"": {
    ///             ""type"": ""and""
    ///         },
    ///         ""query"": {
    ///             ""params"": [
    ///             ""A""
    ///             ]
    ///         },
    ///         ""reducer"": {
    ///             ""params"": [],
    ///             ""type"": ""last""
    ///         },
    ///         ""type"": ""query""
    ///         }
    ///     ],
    ///     ""datasource"": {
    ///         ""type"": ""__expr__"",
    ///         ""uid"": ""-100""
    ///     },
    ///     ""hide"": false,
    ///     ""intervalMs"": 1000,
    ///     ""maxDataPoints"": 43200,
    ///     ""refId"": ""B"",
    ///     ""type"": ""classic_conditions""
    /// }
    /// ",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:alerting/ruleGroup:RuleGroup name "{{ folderUID }}:{{ title }}"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import grafana:alerting/ruleGroup:RuleGroup name "{{ orgID }}:{{ folderUID }}:{{ title }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:alerting/ruleGroup:RuleGroup")]
    public partial class RuleGroup : global::Pulumi.CustomResource
    {
        [Output("disableProvenance")]
        public Output<bool?> DisableProvenance { get; private set; } = null!;

        /// <summary>
        /// The UID of the folder that the group belongs to.
        /// </summary>
        [Output("folderUid")]
        public Output<string> FolderUid { get; private set; } = null!;

        /// <summary>
        /// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
        /// </summary>
        [Output("intervalSeconds")]
        public Output<int> IntervalSeconds { get; private set; } = null!;

        /// <summary>
        /// The name of the rule group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// The rules within the group.
        /// </summary>
        [Output("rules")]
        public Output<ImmutableArray<Outputs.RuleGroupRule>> Rules { get; private set; } = null!;


        /// <summary>
        /// Create a RuleGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RuleGroup(string name, RuleGroupArgs args, CustomResourceOptions? options = null)
            : base("grafana:alerting/ruleGroup:RuleGroup", name, args ?? new RuleGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RuleGroup(string name, Input<string> id, RuleGroupState? state = null, CustomResourceOptions? options = null)
            : base("grafana:alerting/ruleGroup:RuleGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "grafana:index/ruleGroup:RuleGroup" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RuleGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RuleGroup Get(string name, Input<string> id, RuleGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new RuleGroup(name, id, state, options);
        }
    }

    public sealed class RuleGroupArgs : global::Pulumi.ResourceArgs
    {
        [Input("disableProvenance")]
        public Input<bool>? DisableProvenance { get; set; }

        /// <summary>
        /// The UID of the folder that the group belongs to.
        /// </summary>
        [Input("folderUid", required: true)]
        public Input<string> FolderUid { get; set; } = null!;

        /// <summary>
        /// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
        /// </summary>
        [Input("intervalSeconds", required: true)]
        public Input<int> IntervalSeconds { get; set; } = null!;

        /// <summary>
        /// The name of the rule group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("rules", required: true)]
        private InputList<Inputs.RuleGroupRuleArgs>? _rules;

        /// <summary>
        /// The rules within the group.
        /// </summary>
        public InputList<Inputs.RuleGroupRuleArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RuleGroupRuleArgs>());
            set => _rules = value;
        }

        public RuleGroupArgs()
        {
        }
        public static new RuleGroupArgs Empty => new RuleGroupArgs();
    }

    public sealed class RuleGroupState : global::Pulumi.ResourceArgs
    {
        [Input("disableProvenance")]
        public Input<bool>? DisableProvenance { get; set; }

        /// <summary>
        /// The UID of the folder that the group belongs to.
        /// </summary>
        [Input("folderUid")]
        public Input<string>? FolderUid { get; set; }

        /// <summary>
        /// The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are evaluated sequentially.
        /// </summary>
        [Input("intervalSeconds")]
        public Input<int>? IntervalSeconds { get; set; }

        /// <summary>
        /// The name of the rule group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("rules")]
        private InputList<Inputs.RuleGroupRuleGetArgs>? _rules;

        /// <summary>
        /// The rules within the group.
        /// </summary>
        public InputList<Inputs.RuleGroupRuleGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<Inputs.RuleGroupRuleGetArgs>());
            set => _rules = value;
        }

        public RuleGroupState()
        {
        }
        public static new RuleGroupState Empty => new RuleGroupState();
    }
}
