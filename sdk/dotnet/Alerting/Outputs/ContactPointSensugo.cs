// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Outputs
{

    [OutputType]
    public sealed class ContactPointSensugo
    {
        /// <summary>
        /// The SensuGo API key.
        /// </summary>
        public readonly string ApiKey;
        /// <summary>
        /// The SensuGo check to which the event should be routed.
        /// </summary>
        public readonly string? Check;
        /// <summary>
        /// Whether to disable sending resolve messages. Defaults to `false`.
        /// </summary>
        public readonly bool? DisableResolveMessage;
        /// <summary>
        /// The entity being monitored.
        /// </summary>
        public readonly string? Entity;
        /// <summary>
        /// A custom handler to execute in addition to the check.
        /// </summary>
        public readonly string? Handler;
        /// <summary>
        /// Templated message content describing the alert.
        /// </summary>
        public readonly string? Message;
        /// <summary>
        /// The namespace in which the check resides.
        /// </summary>
        public readonly string? Namespace;
        /// <summary>
        /// Additional custom properties to attach to the notifier. Defaults to `map[]`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Settings;
        /// <summary>
        /// The UID of the contact point.
        /// </summary>
        public readonly string? Uid;
        /// <summary>
        /// The SensuGo URL to send requests to.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private ContactPointSensugo(
            string apiKey,

            string? check,

            bool? disableResolveMessage,

            string? entity,

            string? handler,

            string? message,

            string? @namespace,

            ImmutableDictionary<string, string>? settings,

            string? uid,

            string url)
        {
            ApiKey = apiKey;
            Check = check;
            DisableResolveMessage = disableResolveMessage;
            Entity = entity;
            Handler = handler;
            Message = message;
            Namespace = @namespace;
            Settings = settings;
            Uid = uid;
            Url = url;
        }
    }
}
