// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Outputs
{

    [OutputType]
    public sealed class AlertEnrichmentSpec
    {
        /// <summary>
        /// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
        /// </summary>
        public readonly ImmutableArray<string> AlertRuleUids;
        /// <summary>
        /// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertEnrichmentSpecAnnotationMatcher> AnnotationMatchers;
        /// <summary>
        /// Description of the alert enrichment.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertEnrichmentSpecLabelMatcher> LabelMatchers;
        /// <summary>
        /// Receiver names to match. If empty, applies to all receivers.
        /// </summary>
        public readonly ImmutableArray<string> Receivers;
        /// <summary>
        /// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertEnrichmentSpecStep> Steps;
        /// <summary>
        /// The title of the alert enrichment.
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private AlertEnrichmentSpec(
            ImmutableArray<string> alertRuleUids,

            ImmutableArray<Outputs.AlertEnrichmentSpecAnnotationMatcher> annotationMatchers,

            string? description,

            ImmutableArray<Outputs.AlertEnrichmentSpecLabelMatcher> labelMatchers,

            ImmutableArray<string> receivers,

            ImmutableArray<Outputs.AlertEnrichmentSpecStep> steps,

            string title)
        {
            AlertRuleUids = alertRuleUids;
            AnnotationMatchers = annotationMatchers;
            Description = description;
            LabelMatchers = labelMatchers;
            Receivers = receivers;
            Steps = steps;
            Title = title;
        }
    }
}
