// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Outputs
{

    [OutputType]
    public sealed class AlertEnrichmentSpecStep
    {
        /// <summary>
        /// Integrate with Grafana Asserts for enrichment.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepAsserts? Asserts;
        /// <summary>
        /// Assign annotations to an alert.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepAssign? Assign;
        /// <summary>
        /// Use AI assistant to investigate alerts and add insights.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepAssistantInvestigations? AssistantInvestigations;
        /// <summary>
        /// Conditional step with if/then/else.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepConditional? Conditional;
        /// <summary>
        /// Query Grafana data sources and add results to alerts.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepDataSource? DataSource;
        /// <summary>
        /// Generate AI explanation and store in an annotation.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepExplain? Explain;
        /// <summary>
        /// Call an external HTTP service for enrichment.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepExternal? External;
        /// <summary>
        /// Analyze alerts for patterns and insights.
        /// </summary>
        public readonly Outputs.AlertEnrichmentSpecStepSift? Sift;

        [OutputConstructor]
        private AlertEnrichmentSpecStep(
            Outputs.AlertEnrichmentSpecStepAsserts? asserts,

            Outputs.AlertEnrichmentSpecStepAssign? assign,

            Outputs.AlertEnrichmentSpecStepAssistantInvestigations? assistantInvestigations,

            Outputs.AlertEnrichmentSpecStepConditional? conditional,

            Outputs.AlertEnrichmentSpecStepDataSource? dataSource,

            Outputs.AlertEnrichmentSpecStepExplain? explain,

            Outputs.AlertEnrichmentSpecStepExternal? external,

            Outputs.AlertEnrichmentSpecStepSift? sift)
        {
            Asserts = asserts;
            Assign = assign;
            AssistantInvestigations = assistantInvestigations;
            Conditional = conditional;
            DataSource = dataSource;
            Explain = explain;
            External = external;
            Sift = sift;
        }
    }
}
