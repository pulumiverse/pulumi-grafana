// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Outputs
{

    [OutputType]
    public sealed class ContactPointSn
    {
        /// <summary>
        /// AWS access key ID used to authenticate with Amazon SNS.
        /// </summary>
        public readonly string? AccessKey;
        /// <summary>
        /// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
        /// </summary>
        public readonly string? AssumeRoleArn;
        /// <summary>
        /// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
        /// </summary>
        public readonly string? AuthProvider;
        public readonly string? Body;
        /// <summary>
        /// Whether to disable sending resolve messages. Defaults to `false`.
        /// </summary>
        public readonly bool? DisableResolveMessage;
        /// <summary>
        /// The external ID to use when assuming the role.
        /// </summary>
        public readonly string? ExternalId;
        /// <summary>
        /// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
        /// </summary>
        public readonly string? MessageFormat;
        /// <summary>
        /// AWS secret access key used to authenticate with Amazon SNS.
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// Additional custom properties to attach to the notifier. Defaults to `map[]`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Settings;
        public readonly string? Subject;
        /// <summary>
        /// The Amazon SNS topic to send notifications to.
        /// </summary>
        public readonly string Topic;
        /// <summary>
        /// The UID of the contact point.
        /// </summary>
        public readonly string? Uid;

        [OutputConstructor]
        private ContactPointSn(
            string? accessKey,

            string? assumeRoleArn,

            string? authProvider,

            string? body,

            bool? disableResolveMessage,

            string? externalId,

            string? messageFormat,

            string? secretKey,

            ImmutableDictionary<string, string>? settings,

            string? subject,

            string topic,

            string? uid)
        {
            AccessKey = accessKey;
            AssumeRoleArn = assumeRoleArn;
            AuthProvider = authProvider;
            Body = body;
            DisableResolveMessage = disableResolveMessage;
            ExternalId = externalId;
            MessageFormat = messageFormat;
            SecretKey = secretKey;
            Settings = settings;
            Subject = subject;
            Topic = topic;
            Uid = uid;
        }
    }
}
