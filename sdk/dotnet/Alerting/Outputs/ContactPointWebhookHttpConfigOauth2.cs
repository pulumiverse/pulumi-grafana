// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Outputs
{

    [OutputType]
    public sealed class ContactPointWebhookHttpConfigOauth2
    {
        /// <summary>
        /// Client ID to use when authenticating.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// Client secret to use when authenticating.
        /// </summary>
        public readonly string ClientSecret;
        /// <summary>
        /// Optional parameters to append to the access token request.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? EndpointParams;
        /// <summary>
        /// Optional proxy configuration for OAuth2 requests.
        /// </summary>
        public readonly Outputs.ContactPointWebhookHttpConfigOauth2ProxyConfig? ProxyConfig;
        /// <summary>
        /// Optional scopes to request when obtaining an access token.
        /// </summary>
        public readonly ImmutableArray<string> Scopes;
        /// <summary>
        /// Optional TLS configuration options for OAuth2 requests.
        /// </summary>
        public readonly Outputs.ContactPointWebhookHttpConfigOauth2TlsConfig? TlsConfig;
        /// <summary>
        /// URL for the access token endpoint.
        /// </summary>
        public readonly string TokenUrl;

        [OutputConstructor]
        private ContactPointWebhookHttpConfigOauth2(
            string clientId,

            string clientSecret,

            ImmutableDictionary<string, string>? endpointParams,

            Outputs.ContactPointWebhookHttpConfigOauth2ProxyConfig? proxyConfig,

            ImmutableArray<string> scopes,

            Outputs.ContactPointWebhookHttpConfigOauth2TlsConfig? tlsConfig,

            string tokenUrl)
        {
            ClientId = clientId;
            ClientSecret = clientSecret;
            EndpointParams = endpointParams;
            ProxyConfig = proxyConfig;
            Scopes = scopes;
            TlsConfig = tlsConfig;
            TokenUrl = tokenUrl;
        }
    }
}
