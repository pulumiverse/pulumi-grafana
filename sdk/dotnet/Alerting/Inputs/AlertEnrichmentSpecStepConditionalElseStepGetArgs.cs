// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Inputs
{

    public sealed class AlertEnrichmentSpecStepConditionalElseStepGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Integrate with Grafana Asserts for enrichment.
        /// </summary>
        [Input("asserts")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepAssertsGetArgs>? Asserts { get; set; }

        /// <summary>
        /// Assign annotations to an alert.
        /// </summary>
        [Input("assign")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepAssignGetArgs>? Assign { get; set; }

        /// <summary>
        /// Use AI assistant to investigate alerts and add insights.
        /// </summary>
        [Input("assistantInvestigations")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepAssistantInvestigationsGetArgs>? AssistantInvestigations { get; set; }

        /// <summary>
        /// Query Grafana data sources and add results to alerts.
        /// </summary>
        [Input("dataSource")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepDataSourceGetArgs>? DataSource { get; set; }

        /// <summary>
        /// Generate AI explanation and store in an annotation.
        /// </summary>
        [Input("explain")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepExplainGetArgs>? Explain { get; set; }

        /// <summary>
        /// Call an external HTTP service for enrichment.
        /// </summary>
        [Input("external")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepExternalGetArgs>? External { get; set; }

        /// <summary>
        /// Analyze alerts for patterns and insights.
        /// </summary>
        [Input("sift")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalElseStepSiftGetArgs>? Sift { get; set; }

        public AlertEnrichmentSpecStepConditionalElseStepGetArgs()
        {
        }
        public static new AlertEnrichmentSpecStepConditionalElseStepGetArgs Empty => new AlertEnrichmentSpecStepConditionalElseStepGetArgs();
    }
}
