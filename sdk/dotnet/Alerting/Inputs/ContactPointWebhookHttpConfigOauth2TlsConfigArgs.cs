// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Inputs
{

    public sealed class ContactPointWebhookHttpConfigOauth2TlsConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("caCertificate")]
        private Input<string>? _caCertificate;

        /// <summary>
        /// Certificate in PEM format to use when verifying the server's certificate chain.
        /// </summary>
        public Input<string>? CaCertificate
        {
            get => _caCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _caCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientCertificate")]
        private Input<string>? _clientCertificate;

        /// <summary>
        /// Client certificate in PEM format to use when connecting to the server.
        /// </summary>
        public Input<string>? ClientCertificate
        {
            get => _clientCertificate;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientCertificate = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("clientKey")]
        private Input<string>? _clientKey;

        /// <summary>
        /// Client key in PEM format to use when connecting to the server.
        /// </summary>
        public Input<string>? ClientKey
        {
            get => _clientKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Do not verify the server's certificate chain and host name. Defaults to `false`.
        /// </summary>
        [Input("insecureSkipVerify")]
        public Input<bool>? InsecureSkipVerify { get; set; }

        public ContactPointWebhookHttpConfigOauth2TlsConfigArgs()
        {
        }
        public static new ContactPointWebhookHttpConfigOauth2TlsConfigArgs Empty => new ContactPointWebhookHttpConfigOauth2TlsConfigArgs();
    }
}
