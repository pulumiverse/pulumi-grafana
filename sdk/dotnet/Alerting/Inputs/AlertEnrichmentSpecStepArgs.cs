// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Alerting.Inputs
{

    public sealed class AlertEnrichmentSpecStepArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Integrate with Grafana Asserts for enrichment.
        /// </summary>
        [Input("asserts")]
        public Input<Inputs.AlertEnrichmentSpecStepAssertsArgs>? Asserts { get; set; }

        /// <summary>
        /// Assign annotations to an alert.
        /// </summary>
        [Input("assign")]
        public Input<Inputs.AlertEnrichmentSpecStepAssignArgs>? Assign { get; set; }

        /// <summary>
        /// Use AI assistant to investigate alerts and add insights.
        /// </summary>
        [Input("assistantInvestigations")]
        public Input<Inputs.AlertEnrichmentSpecStepAssistantInvestigationsArgs>? AssistantInvestigations { get; set; }

        /// <summary>
        /// Conditional step with if/then/else.
        /// </summary>
        [Input("conditional")]
        public Input<Inputs.AlertEnrichmentSpecStepConditionalArgs>? Conditional { get; set; }

        /// <summary>
        /// Query Grafana data sources and add results to alerts.
        /// </summary>
        [Input("dataSource")]
        public Input<Inputs.AlertEnrichmentSpecStepDataSourceArgs>? DataSource { get; set; }

        /// <summary>
        /// Generate AI explanation and store in an annotation.
        /// </summary>
        [Input("explain")]
        public Input<Inputs.AlertEnrichmentSpecStepExplainArgs>? Explain { get; set; }

        /// <summary>
        /// Call an external HTTP service for enrichment.
        /// </summary>
        [Input("external")]
        public Input<Inputs.AlertEnrichmentSpecStepExternalArgs>? External { get; set; }

        /// <summary>
        /// Analyze alerts for patterns and insights.
        /// </summary>
        [Input("sift")]
        public Input<Inputs.AlertEnrichmentSpecStepSiftArgs>? Sift { get; set; }

        public AlertEnrichmentSpecStepArgs()
        {
        }
        public static new AlertEnrichmentSpecStepArgs Empty => new AlertEnrichmentSpecStepArgs();
    }
}
