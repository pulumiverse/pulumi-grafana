// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Connections
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Grafana.Connections.MetricsEndpointScrapeJob("test", new()
    ///     {
    ///         StackId = "1",
    ///         Name = "my-scrape-job",
    ///         Enabled = true,
    ///         AuthenticationMethod = "basic",
    ///         AuthenticationBasicUsername = "my-username",
    ///         AuthenticationBasicPassword = "my-password",
    ///         Url = "https://grafana.com/metrics",
    ///         ScrapeIntervalSeconds = 120,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob name "{{ stack_id }}:{{ name }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob")]
    public partial class MetricsEndpointScrapeJob : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Password for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        [Output("authenticationBasicPassword")]
        public Output<string?> AuthenticationBasicPassword { get; private set; } = null!;

        /// <summary>
        /// Username for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        [Output("authenticationBasicUsername")]
        public Output<string?> AuthenticationBasicUsername { get; private set; } = null!;

        /// <summary>
        /// Bearer token used for authentication, use if scrape job is using bearer authentication method
        /// </summary>
        [Output("authenticationBearerToken")]
        public Output<string?> AuthenticationBearerToken { get; private set; } = null!;

        /// <summary>
        /// Method to pass authentication credentials: basic or bearer.
        /// </summary>
        [Output("authenticationMethod")]
        public Output<string> AuthenticationMethod { get; private set; } = null!;

        /// <summary>
        /// Whether the metrics endpoint scrape job is enabled or not.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
        /// </summary>
        [Output("scrapeIntervalSeconds")]
        public Output<int> ScrapeIntervalSeconds { get; private set; } = null!;

        [Output("stackId")]
        public Output<string> StackId { get; private set; } = null!;

        /// <summary>
        /// The url to scrape metrics from; a valid HTTPs URL is required.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a MetricsEndpointScrapeJob resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MetricsEndpointScrapeJob(string name, MetricsEndpointScrapeJobArgs args, CustomResourceOptions? options = null)
            : base("grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob", name, args ?? new MetricsEndpointScrapeJobArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MetricsEndpointScrapeJob(string name, Input<string> id, MetricsEndpointScrapeJobState? state = null, CustomResourceOptions? options = null)
            : base("grafana:connections/metricsEndpointScrapeJob:MetricsEndpointScrapeJob", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob" },
                },
                AdditionalSecretOutputs =
                {
                    "authenticationBasicPassword",
                    "authenticationBearerToken",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MetricsEndpointScrapeJob resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MetricsEndpointScrapeJob Get(string name, Input<string> id, MetricsEndpointScrapeJobState? state = null, CustomResourceOptions? options = null)
        {
            return new MetricsEndpointScrapeJob(name, id, state, options);
        }
    }

    public sealed class MetricsEndpointScrapeJobArgs : global::Pulumi.ResourceArgs
    {
        [Input("authenticationBasicPassword")]
        private Input<string>? _authenticationBasicPassword;

        /// <summary>
        /// Password for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        public Input<string>? AuthenticationBasicPassword
        {
            get => _authenticationBasicPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationBasicPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Username for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        [Input("authenticationBasicUsername")]
        public Input<string>? AuthenticationBasicUsername { get; set; }

        [Input("authenticationBearerToken")]
        private Input<string>? _authenticationBearerToken;

        /// <summary>
        /// Bearer token used for authentication, use if scrape job is using bearer authentication method
        /// </summary>
        public Input<string>? AuthenticationBearerToken
        {
            get => _authenticationBearerToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationBearerToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Method to pass authentication credentials: basic or bearer.
        /// </summary>
        [Input("authenticationMethod", required: true)]
        public Input<string> AuthenticationMethod { get; set; } = null!;

        /// <summary>
        /// Whether the metrics endpoint scrape job is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
        /// </summary>
        [Input("scrapeIntervalSeconds")]
        public Input<int>? ScrapeIntervalSeconds { get; set; }

        [Input("stackId", required: true)]
        public Input<string> StackId { get; set; } = null!;

        /// <summary>
        /// The url to scrape metrics from; a valid HTTPs URL is required.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public MetricsEndpointScrapeJobArgs()
        {
        }
        public static new MetricsEndpointScrapeJobArgs Empty => new MetricsEndpointScrapeJobArgs();
    }

    public sealed class MetricsEndpointScrapeJobState : global::Pulumi.ResourceArgs
    {
        [Input("authenticationBasicPassword")]
        private Input<string>? _authenticationBasicPassword;

        /// <summary>
        /// Password for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        public Input<string>? AuthenticationBasicPassword
        {
            get => _authenticationBasicPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationBasicPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Username for basic authentication, use if scrape job is using basic authentication method
        /// </summary>
        [Input("authenticationBasicUsername")]
        public Input<string>? AuthenticationBasicUsername { get; set; }

        [Input("authenticationBearerToken")]
        private Input<string>? _authenticationBearerToken;

        /// <summary>
        /// Bearer token used for authentication, use if scrape job is using bearer authentication method
        /// </summary>
        public Input<string>? AuthenticationBearerToken
        {
            get => _authenticationBearerToken;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _authenticationBearerToken = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Method to pass authentication credentials: basic or bearer.
        /// </summary>
        [Input("authenticationMethod")]
        public Input<string>? AuthenticationMethod { get; set; }

        /// <summary>
        /// Whether the metrics endpoint scrape job is enabled or not.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
        /// </summary>
        [Input("scrapeIntervalSeconds")]
        public Input<int>? ScrapeIntervalSeconds { get; set; }

        [Input("stackId")]
        public Input<string>? StackId { get; set; }

        /// <summary>
        /// The url to scrape metrics from; a valid HTTPs URL is required.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public MetricsEndpointScrapeJobState()
        {
        }
        public static new MetricsEndpointScrapeJobState Empty => new MetricsEndpointScrapeJobState();
    }
}
