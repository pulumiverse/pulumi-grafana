// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana
{
    /// <summary>
    /// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/routes/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumi.Grafana;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleSlackChannel = Grafana.OnCall.GetSlackChannel.Invoke(new()
    ///     {
    ///         Name = "example_slack_channel",
    ///     });
    /// 
    ///     var @default = new Grafana.OnCall.EscalationChain("default", new()
    ///     {
    ///         Name = "default",
    ///     });
    /// 
    ///     var exampleIntegration = new Grafana.OnCall.Integration("example_integration", new()
    ///     {
    ///         Name = "Grafana Integration",
    ///         Type = "grafana",
    ///         DefaultRoute = null,
    ///     });
    /// 
    ///     var exampleRoute = new Grafana.OnCall.Route("example_route", new()
    ///     {
    ///         IntegrationId = exampleIntegration.Id,
    ///         EscalationChainId = @default.Id,
    ///         RoutingRegex = "us-(east|west)",
    ///         Position = 0,
    ///         Slack = new Grafana.OnCall.Inputs.RouteSlackArgs
    ///         {
    ///             ChannelId = exampleSlackChannel.Apply(getSlackChannelResult =&gt; getSlackChannelResult.SlackId),
    ///             Enabled = true,
    ///         },
    ///         Telegram = new Grafana.OnCall.Inputs.RouteTelegramArgs
    ///         {
    ///             Id = "ONCALLTELEGRAMID",
    ///             Enabled = true,
    ///         },
    ///         Msteams = new Grafana.OnCall.Inputs.RouteMsteamsArgs
    ///         {
    ///             Id = "ONCALLMSTEAMSID",
    ///             Enabled = false,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/oncallRoute:OncallRoute name "{{ id }}"
    /// ```
    /// </summary>
    [Obsolete(@"grafana.index/oncallroute.OncallRoute has been deprecated in favor of grafana.oncall/route.Route")]
    [GrafanaResourceType("grafana:index/oncallRoute:OncallRoute")]
    public partial class OncallRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of the escalation chain.
        /// </summary>
        [Output("escalationChainId")]
        public Output<string> EscalationChainId { get; private set; } = null!;

        /// <summary>
        /// The ID of the integration.
        /// </summary>
        [Output("integrationId")]
        public Output<string> IntegrationId { get; private set; } = null!;

        /// <summary>
        /// MS teams-specific settings for a route.
        /// </summary>
        [Output("msteams")]
        public Output<Outputs.OncallRouteMsteams?> Msteams { get; private set; } = null!;

        /// <summary>
        /// The position of the route (starts from 0).
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
        /// </summary>
        [Output("routingRegex")]
        public Output<string> RoutingRegex { get; private set; } = null!;

        /// <summary>
        /// The type of route. Can be jinja2, regex Defaults to `regex`.
        /// </summary>
        [Output("routingType")]
        public Output<string?> RoutingType { get; private set; } = null!;

        /// <summary>
        /// Slack-specific settings for a route.
        /// </summary>
        [Output("slack")]
        public Output<Outputs.OncallRouteSlack?> Slack { get; private set; } = null!;

        /// <summary>
        /// Telegram-specific settings for a route.
        /// </summary>
        [Output("telegram")]
        public Output<Outputs.OncallRouteTelegram?> Telegram { get; private set; } = null!;


        /// <summary>
        /// Create a OncallRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OncallRoute(string name, OncallRouteArgs args, CustomResourceOptions? options = null)
            : base("grafana:index/oncallRoute:OncallRoute", name, args ?? new OncallRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OncallRoute(string name, Input<string> id, OncallRouteState? state = null, CustomResourceOptions? options = null)
            : base("grafana:index/oncallRoute:OncallRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OncallRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OncallRoute Get(string name, Input<string> id, OncallRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new OncallRoute(name, id, state, options);
        }
    }

    public sealed class OncallRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the escalation chain.
        /// </summary>
        [Input("escalationChainId", required: true)]
        public Input<string> EscalationChainId { get; set; } = null!;

        /// <summary>
        /// The ID of the integration.
        /// </summary>
        [Input("integrationId", required: true)]
        public Input<string> IntegrationId { get; set; } = null!;

        /// <summary>
        /// MS teams-specific settings for a route.
        /// </summary>
        [Input("msteams")]
        public Input<Inputs.OncallRouteMsteamsArgs>? Msteams { get; set; }

        /// <summary>
        /// The position of the route (starts from 0).
        /// </summary>
        [Input("position", required: true)]
        public Input<int> Position { get; set; } = null!;

        /// <summary>
        /// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
        /// </summary>
        [Input("routingRegex", required: true)]
        public Input<string> RoutingRegex { get; set; } = null!;

        /// <summary>
        /// The type of route. Can be jinja2, regex Defaults to `regex`.
        /// </summary>
        [Input("routingType")]
        public Input<string>? RoutingType { get; set; }

        /// <summary>
        /// Slack-specific settings for a route.
        /// </summary>
        [Input("slack")]
        public Input<Inputs.OncallRouteSlackArgs>? Slack { get; set; }

        /// <summary>
        /// Telegram-specific settings for a route.
        /// </summary>
        [Input("telegram")]
        public Input<Inputs.OncallRouteTelegramArgs>? Telegram { get; set; }

        public OncallRouteArgs()
        {
        }
        public static new OncallRouteArgs Empty => new OncallRouteArgs();
    }

    public sealed class OncallRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the escalation chain.
        /// </summary>
        [Input("escalationChainId")]
        public Input<string>? EscalationChainId { get; set; }

        /// <summary>
        /// The ID of the integration.
        /// </summary>
        [Input("integrationId")]
        public Input<string>? IntegrationId { get; set; }

        /// <summary>
        /// MS teams-specific settings for a route.
        /// </summary>
        [Input("msteams")]
        public Input<Inputs.OncallRouteMsteamsGetArgs>? Msteams { get; set; }

        /// <summary>
        /// The position of the route (starts from 0).
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
        /// </summary>
        [Input("routingRegex")]
        public Input<string>? RoutingRegex { get; set; }

        /// <summary>
        /// The type of route. Can be jinja2, regex Defaults to `regex`.
        /// </summary>
        [Input("routingType")]
        public Input<string>? RoutingType { get; set; }

        /// <summary>
        /// Slack-specific settings for a route.
        /// </summary>
        [Input("slack")]
        public Input<Inputs.OncallRouteSlackGetArgs>? Slack { get; set; }

        /// <summary>
        /// Telegram-specific settings for a route.
        /// </summary>
        [Input("telegram")]
        public Input<Inputs.OncallRouteTelegramGetArgs>? Telegram { get; set; }

        public OncallRouteState()
        {
        }
        public static new OncallRouteState Empty => new OncallRouteState();
    }
}
