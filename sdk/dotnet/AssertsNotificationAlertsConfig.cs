// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana
{
    /// <summary>
    /// Manages Asserts Alert Configurations through Grafana API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Basic alert configuration with silencing
    ///     var prometheusRemoteStorageFailures = new Grafana.AssertsNotificationAlertsConfig("prometheus_remote_storage_failures", new()
    ///     {
    ///         Name = "PrometheusRemoteStorageFailures",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "PrometheusRemoteStorageFailures" },
    ///             { "alertgroup", "prometheus.alerts" },
    ///             { "asserts_env", "prod" },
    ///         },
    ///         Silenced = true,
    ///     });
    /// 
    ///     // High severity alert with specific job and context matching
    ///     var errorBuildupNotify = new Grafana.AssertsNotificationAlertsConfig("error_buildup_notify", new()
    ///     {
    ///         Name = "ErrorBuildupNotify",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "ErrorBuildup" },
    ///             { "job", "acai" },
    ///             { "asserts_request_type", "inbound" },
    ///             { "asserts_request_context", "/auth" },
    ///         },
    ///         Silenced = false,
    ///     });
    /// 
    ///     // Alert with additional labels and custom duration
    ///     var paymentTestAlert = new Grafana.AssertsNotificationAlertsConfig("payment_test_alert", new()
    ///     {
    ///         Name = "PaymentTestAlert",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "PaymentTestAlert" },
    ///             { "additional_labels", "asserts_severity=~\"critical\"" },
    ///             { "alertgroup", "alex-k8s-integration-test.alerts" },
    ///         },
    ///         AlertLabels = 
    ///         {
    ///             { "testing", "onetwothree" },
    ///         },
    ///         Duration = "5m",
    ///         Silenced = false,
    ///     });
    /// 
    ///     // Latency alert for shipping service
    ///     var highShippingLatency = new Grafana.AssertsNotificationAlertsConfig("high_shipping_latency", new()
    ///     {
    ///         Name = "high shipping latency",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "LatencyP99ErrorBuildup" },
    ///             { "job", "shipping" },
    ///             { "asserts_request_type", "inbound" },
    ///         },
    ///         Silenced = false,
    ///     });
    /// 
    ///     // CPU throttling alert with warning severity
    ///     var cpuThrottlingSustained = new Grafana.AssertsNotificationAlertsConfig("cpu_throttling_sustained", new()
    ///     {
    ///         Name = "CPUThrottlingSustained",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "CPUThrottlingSustained" },
    ///             { "additional_labels", "asserts_severity=~\"warning\"" },
    ///         },
    ///         Silenced = true,
    ///     });
    /// 
    ///     // Ingress error rate alert
    ///     var ingressError = new Grafana.AssertsNotificationAlertsConfig("ingress_error", new()
    ///     {
    ///         Name = "ingress error",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "ErrorRatioBreach" },
    ///             { "job", "ingress-nginx-controller-metrics" },
    ///             { "asserts_request_type", "inbound" },
    ///         },
    ///         Silenced = false,
    ///     });
    /// 
    ///     // MySQL Galera cluster alert
    ///     var mysqlGaleraNotReady = new Grafana.AssertsNotificationAlertsConfig("mysql_galera_not_ready", new()
    ///     {
    ///         Name = "MySQLGaleraNotReady",
    ///         MatchLabels = 
    ///         {
    ///             { "alertname", "MySQLGaleraNotReady" },
    ///         },
    ///         Silenced = false,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig name "{{ name }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig")]
    public partial class AssertsNotificationAlertsConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Labels to add to alerts generated by this configuration.
        /// </summary>
        [Output("alertLabels")]
        public Output<ImmutableDictionary<string, string>?> AlertLabels { get; private set; } = null!;

        /// <summary>
        /// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
        /// </summary>
        [Output("duration")]
        public Output<string?> Duration { get; private set; } = null!;

        /// <summary>
        /// Labels to match for this alert configuration.
        /// </summary>
        [Output("matchLabels")]
        public Output<ImmutableDictionary<string, string>?> MatchLabels { get; private set; } = null!;

        /// <summary>
        /// The name of the alert configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Whether this alert configuration is silenced. Defaults to `false`.
        /// </summary>
        [Output("silenced")]
        public Output<bool?> Silenced { get; private set; } = null!;


        /// <summary>
        /// Create a AssertsNotificationAlertsConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AssertsNotificationAlertsConfig(string name, AssertsNotificationAlertsConfigArgs? args = null, CustomResourceOptions? options = null)
            : base("grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig", name, args ?? new AssertsNotificationAlertsConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AssertsNotificationAlertsConfig(string name, Input<string> id, AssertsNotificationAlertsConfigState? state = null, CustomResourceOptions? options = null)
            : base("grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AssertsNotificationAlertsConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AssertsNotificationAlertsConfig Get(string name, Input<string> id, AssertsNotificationAlertsConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new AssertsNotificationAlertsConfig(name, id, state, options);
        }
    }

    public sealed class AssertsNotificationAlertsConfigArgs : global::Pulumi.ResourceArgs
    {
        [Input("alertLabels")]
        private InputMap<string>? _alertLabels;

        /// <summary>
        /// Labels to add to alerts generated by this configuration.
        /// </summary>
        public InputMap<string> AlertLabels
        {
            get => _alertLabels ?? (_alertLabels = new InputMap<string>());
            set => _alertLabels = value;
        }

        /// <summary>
        /// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        [Input("matchLabels")]
        private InputMap<string>? _matchLabels;

        /// <summary>
        /// Labels to match for this alert configuration.
        /// </summary>
        public InputMap<string> MatchLabels
        {
            get => _matchLabels ?? (_matchLabels = new InputMap<string>());
            set => _matchLabels = value;
        }

        /// <summary>
        /// The name of the alert configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this alert configuration is silenced. Defaults to `false`.
        /// </summary>
        [Input("silenced")]
        public Input<bool>? Silenced { get; set; }

        public AssertsNotificationAlertsConfigArgs()
        {
        }
        public static new AssertsNotificationAlertsConfigArgs Empty => new AssertsNotificationAlertsConfigArgs();
    }

    public sealed class AssertsNotificationAlertsConfigState : global::Pulumi.ResourceArgs
    {
        [Input("alertLabels")]
        private InputMap<string>? _alertLabels;

        /// <summary>
        /// Labels to add to alerts generated by this configuration.
        /// </summary>
        public InputMap<string> AlertLabels
        {
            get => _alertLabels ?? (_alertLabels = new InputMap<string>());
            set => _alertLabels = value;
        }

        /// <summary>
        /// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
        /// </summary>
        [Input("duration")]
        public Input<string>? Duration { get; set; }

        [Input("matchLabels")]
        private InputMap<string>? _matchLabels;

        /// <summary>
        /// Labels to match for this alert configuration.
        /// </summary>
        public InputMap<string> MatchLabels
        {
            get => _matchLabels ?? (_matchLabels = new InputMap<string>());
            set => _matchLabels = value;
        }

        /// <summary>
        /// The name of the alert configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Whether this alert configuration is silenced. Defaults to `false`.
        /// </summary>
        [Input("silenced")]
        public Input<bool>? Silenced { get; set; }

        public AssertsNotificationAlertsConfigState()
        {
        }
        public static new AssertsNotificationAlertsConfigState Empty => new AssertsNotificationAlertsConfigState();
    }
}
