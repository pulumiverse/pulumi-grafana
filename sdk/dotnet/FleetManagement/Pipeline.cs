// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.FleetManagement
{
    /// <summary>
    /// Manages Grafana Fleet Management pipelines.
    /// 
    /// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
    /// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/pipeline-api/)
    /// 
    /// Required access policy scopes:
    /// 
    /// * fleet-management:read
    /// * fleet-management:write
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:fleetManagement/pipeline:Pipeline name "{{ name }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:fleetManagement/pipeline:Pipeline")]
    public partial class Pipeline : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configuration contents of the pipeline to be used by collectors
        /// </summary>
        [Output("contents")]
        public Output<string> Contents { get; private set; } = null!;

        /// <summary>
        /// Whether the pipeline is enabled for collectors
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
        /// </summary>
        [Output("matchers")]
        public Output<ImmutableArray<string>> Matchers { get; private set; } = null!;

        /// <summary>
        /// Name of the pipeline which is the unique identifier for the pipeline
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a Pipeline resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Pipeline(string name, PipelineArgs args, CustomResourceOptions? options = null)
            : base("grafana:fleetManagement/pipeline:Pipeline", name, args ?? new PipelineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Pipeline(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
            : base("grafana:fleetManagement/pipeline:Pipeline", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Pipeline resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Pipeline Get(string name, Input<string> id, PipelineState? state = null, CustomResourceOptions? options = null)
        {
            return new Pipeline(name, id, state, options);
        }
    }

    public sealed class PipelineArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration contents of the pipeline to be used by collectors
        /// </summary>
        [Input("contents", required: true)]
        public Input<string> Contents { get; set; } = null!;

        /// <summary>
        /// Whether the pipeline is enabled for collectors
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("matchers")]
        private InputList<string>? _matchers;

        /// <summary>
        /// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
        /// </summary>
        public InputList<string> Matchers
        {
            get => _matchers ?? (_matchers = new InputList<string>());
            set => _matchers = value;
        }

        /// <summary>
        /// Name of the pipeline which is the unique identifier for the pipeline
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PipelineArgs()
        {
        }
        public static new PipelineArgs Empty => new PipelineArgs();
    }

    public sealed class PipelineState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configuration contents of the pipeline to be used by collectors
        /// </summary>
        [Input("contents")]
        public Input<string>? Contents { get; set; }

        /// <summary>
        /// Whether the pipeline is enabled for collectors
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("matchers")]
        private InputList<string>? _matchers;

        /// <summary>
        /// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
        /// </summary>
        public InputList<string> Matchers
        {
            get => _matchers ?? (_matchers = new InputList<string>());
            set => _matchers = value;
        }

        /// <summary>
        /// Name of the pipeline which is the unique identifier for the pipeline
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PipelineState()
        {
        }
        public static new PipelineState Empty => new PipelineState();
    }
}
