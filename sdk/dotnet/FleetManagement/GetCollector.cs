// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.FleetManagement
{
    public static class GetCollector
    {
        /// <summary>
        /// Represents a Grafana Fleet Management collector.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
        /// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/collector-api/)
        /// 
        /// Required access policy scopes:
        /// 
        /// * fleet-management:read
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Grafana.FleetManagement.GetCollector.Invoke(new()
        ///     {
        ///         Id = "my_collector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCollectorResult> InvokeAsync(GetCollectorArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCollectorResult>("grafana:fleetManagement/getCollector:getCollector", args ?? new GetCollectorArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a Grafana Fleet Management collector.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
        /// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/collector-api/)
        /// 
        /// Required access policy scopes:
        /// 
        /// * fleet-management:read
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Grafana.FleetManagement.GetCollector.Invoke(new()
        ///     {
        ///         Id = "my_collector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCollectorResult> Invoke(GetCollectorInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCollectorResult>("grafana:fleetManagement/getCollector:getCollector", args ?? new GetCollectorInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Represents a Grafana Fleet Management collector.
        /// 
        /// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
        /// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/collector-api/)
        /// 
        /// Required access policy scopes:
        /// 
        /// * fleet-management:read
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Grafana.FleetManagement.GetCollector.Invoke(new()
        ///     {
        ///         Id = "my_collector",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCollectorResult> Invoke(GetCollectorInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetCollectorResult>("grafana:fleetManagement/getCollector:getCollector", args ?? new GetCollectorInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCollectorArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the collector
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetCollectorArgs()
        {
        }
        public static new GetCollectorArgs Empty => new GetCollectorArgs();
    }

    public sealed class GetCollectorInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the collector
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetCollectorInvokeArgs()
        {
        }
        public static new GetCollectorInvokeArgs Empty => new GetCollectorInvokeArgs();
    }


    [OutputType]
    public sealed class GetCollectorResult
    {
        /// <summary>
        /// Whether remote configuration for the collector is enabled or not. If the collector is disabled, it will receive empty configurations from the Fleet Management service
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// ID of the collector
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Local attributes for the collector
        /// </summary>
        public readonly ImmutableDictionary<string, string> LocalAttributes;
        /// <summary>
        /// Remote attributes for the collector
        /// </summary>
        public readonly ImmutableDictionary<string, string> RemoteAttributes;

        [OutputConstructor]
        private GetCollectorResult(
            bool enabled,

            string id,

            ImmutableDictionary<string, string> localAttributes,

            ImmutableDictionary<string, string> remoteAttributes)
        {
            Enabled = enabled;
            Id = id;
            LocalAttributes = localAttributes;
            RemoteAttributes = remoteAttributes;
        }
    }
}
