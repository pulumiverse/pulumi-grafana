// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.MachineLearning
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Forecast Alert
    /// 
    /// This alert uses a forecast.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAlertJob = new Grafana.MachineLearning.Job("test_alert_job", new()
    ///     {
    ///         Name = "Test Job",
    ///         Metric = "tf_test_alert_job",
    ///         DatasourceType = "prometheus",
    ///         DatasourceUid = "abcd12345",
    ///         QueryParams = 
    ///         {
    ///             { "expr", "grafanacloud_grafana_instance_active_user_count" },
    ///         },
    ///     });
    /// 
    ///     var testJobAlert = new Grafana.MachineLearning.Alert("test_job_alert", new()
    ///     {
    ///         JobId = testAlertJob.Id,
    ///         Title = "Test Alert",
    ///         AnomalyCondition = "any",
    ///         Threshold = "&gt;0.8",
    ///         Window = "15m",
    ///         NoDataState = "OK",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Outlier Alert
    /// 
    /// This alert uses an outlier detector.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var testAlertOutlierDetector = new Grafana.MachineLearning.OutlierDetector("test_alert_outlier_detector", new()
    ///     {
    ///         Name = "Test Outlier",
    ///         Metric = "tf_test_alert_outlier",
    ///         DatasourceType = "prometheus",
    ///         DatasourceUid = "AbCd12345",
    ///         QueryParams = 
    ///         {
    ///             { "expr", "grafanacloud_grafana_instance_active_user_count" },
    ///         },
    ///         Interval = 300,
    ///         Algorithm = new Grafana.MachineLearning.Inputs.OutlierDetectorAlgorithmArgs
    ///         {
    ///             Name = "dbscan",
    ///             Sensitivity = 0.5,
    ///             Config = new Grafana.MachineLearning.Inputs.OutlierDetectorAlgorithmConfigArgs
    ///             {
    ///                 Epsilon = 1,
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testOutlierAlert = new Grafana.MachineLearning.Alert("test_outlier_alert", new()
    ///     {
    ///         OutlierId = testAlertOutlierDetector.Id,
    ///         Title = "Test Alert",
    ///         Window = "1h",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:machineLearning/alert:Alert name "{{ id }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:machineLearning/alert:Alert")]
    public partial class Alert : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Annotations to add to the alert generated in Grafana.
        /// </summary>
        [Output("annotations")]
        public Output<ImmutableDictionary<string, string>?> Annotations { get; private set; } = null!;

        /// <summary>
        /// The condition for when to consider a point as anomalous.
        /// </summary>
        [Output("anomalyCondition")]
        public Output<string?> AnomalyCondition { get; private set; } = null!;

        /// <summary>
        /// How long values must be anomalous before firing an alert.
        /// </summary>
        [Output("for")]
        public Output<string> For { get; private set; } = null!;

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Output("jobId")]
        public Output<string?> JobId { get; private set; } = null!;

        /// <summary>
        /// Labels to add to the alert generated in Grafana.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// How the alert should be processed when no data is returned by the underlying series
        /// </summary>
        [Output("noDataState")]
        public Output<string?> NoDataState { get; private set; } = null!;

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Output("outlierId")]
        public Output<string?> OutlierId { get; private set; } = null!;

        /// <summary>
        /// The threshold of points over the window that need to be anomalous to alert.
        /// </summary>
        [Output("threshold")]
        public Output<string?> Threshold { get; private set; } = null!;

        /// <summary>
        /// The title of the alert.
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// How much time to average values over
        /// </summary>
        [Output("window")]
        public Output<string> Window { get; private set; } = null!;


        /// <summary>
        /// Create a Alert resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alert(string name, AlertArgs args, CustomResourceOptions? options = null)
            : base("grafana:machineLearning/alert:Alert", name, args ?? new AlertArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alert(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
            : base("grafana:machineLearning/alert:Alert", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alert resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alert Get(string name, Input<string> id, AlertState? state = null, CustomResourceOptions? options = null)
        {
            return new Alert(name, id, state, options);
        }
    }

    public sealed class AlertArgs : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations to add to the alert generated in Grafana.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The condition for when to consider a point as anomalous.
        /// </summary>
        [Input("anomalyCondition")]
        public Input<string>? AnomalyCondition { get; set; }

        /// <summary>
        /// How long values must be anomalous before firing an alert.
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to add to the alert generated in Grafana.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// How the alert should be processed when no data is returned by the underlying series
        /// </summary>
        [Input("noDataState")]
        public Input<string>? NoDataState { get; set; }

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Input("outlierId")]
        public Input<string>? OutlierId { get; set; }

        /// <summary>
        /// The threshold of points over the window that need to be anomalous to alert.
        /// </summary>
        [Input("threshold")]
        public Input<string>? Threshold { get; set; }

        /// <summary>
        /// The title of the alert.
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// How much time to average values over
        /// </summary>
        [Input("window")]
        public Input<string>? Window { get; set; }

        public AlertArgs()
        {
        }
        public static new AlertArgs Empty => new AlertArgs();
    }

    public sealed class AlertState : global::Pulumi.ResourceArgs
    {
        [Input("annotations")]
        private InputMap<string>? _annotations;

        /// <summary>
        /// Annotations to add to the alert generated in Grafana.
        /// </summary>
        public InputMap<string> Annotations
        {
            get => _annotations ?? (_annotations = new InputMap<string>());
            set => _annotations = value;
        }

        /// <summary>
        /// The condition for when to consider a point as anomalous.
        /// </summary>
        [Input("anomalyCondition")]
        public Input<string>? AnomalyCondition { get; set; }

        /// <summary>
        /// How long values must be anomalous before firing an alert.
        /// </summary>
        [Input("for")]
        public Input<string>? For { get; set; }

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Input("jobId")]
        public Input<string>? JobId { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to add to the alert generated in Grafana.
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// How the alert should be processed when no data is returned by the underlying series
        /// </summary>
        [Input("noDataState")]
        public Input<string>? NoDataState { get; set; }

        /// <summary>
        /// The forecast this alert belongs to.
        /// </summary>
        [Input("outlierId")]
        public Input<string>? OutlierId { get; set; }

        /// <summary>
        /// The threshold of points over the window that need to be anomalous to alert.
        /// </summary>
        [Input("threshold")]
        public Input<string>? Threshold { get; set; }

        /// <summary>
        /// The title of the alert.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// How much time to average values over
        /// </summary>
        [Input("window")]
        public Input<string>? Window { get; set; }

        public AlertState()
        {
        }
        public static new AlertState Empty => new AlertState();
    }
}
