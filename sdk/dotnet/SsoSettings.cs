// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana
{
    /// <summary>
    /// Manages Grafana SSO Settings for OAuth2, SAML and LDAP. Support for LDAP is currently in preview, it will be available in Grafana starting with v11.3.
    /// 
    /// * [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/)
    /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/sso-settings/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Configure SSO for GitHub using OAuth2
    ///     var githubSsoSettings = new Grafana.Oss.SsoSettings("github_sso_settings", new()
    ///     {
    ///         ProviderName = "github",
    ///         Oauth2Settings = new Grafana.Oss.Inputs.SsoSettingsOauth2SettingsArgs
    ///         {
    ///             Name = "Github",
    ///             ClientId = "&lt;your GitHub app client id&gt;",
    ///             ClientSecret = "&lt;your GitHub app client secret&gt;",
    ///             AllowSignUp = true,
    ///             AutoLogin = false,
    ///             Scopes = "user:email,read:org",
    ///             TeamIds = "150,300",
    ///             AllowedOrganizations = "[\"My Organization\", \"Octocats\"]",
    ///             AllowedDomains = "mycompany.com mycompany.org",
    ///         },
    ///     });
    /// 
    ///     // Configure SSO using generic OAuth2
    ///     var genericSsoSettings = new Grafana.Oss.SsoSettings("generic_sso_settings", new()
    ///     {
    ///         ProviderName = "generic_oauth",
    ///         Oauth2Settings = new Grafana.Oss.Inputs.SsoSettingsOauth2SettingsArgs
    ///         {
    ///             Name = "Auth0",
    ///             AuthUrl = "https://&lt;domain&gt;/authorize",
    ///             TokenUrl = "https://&lt;domain&gt;/oauth/token",
    ///             ApiUrl = "https://&lt;domain&gt;/userinfo",
    ///             ClientId = "&lt;client id&gt;",
    ///             ClientSecret = "&lt;client secret&gt;",
    ///             AllowSignUp = true,
    ///             AutoLogin = false,
    ///             Scopes = "openid profile email offline_access",
    ///             UsePkce = true,
    ///             UseRefreshToken = true,
    ///         },
    ///     });
    /// 
    ///     // Configure SSO using SAML
    ///     var samlSsoSettings = new Grafana.Oss.SsoSettings("saml_sso_settings", new()
    ///     {
    ///         ProviderName = "saml",
    ///         SamlSettings = new Grafana.Oss.Inputs.SsoSettingsSamlSettingsArgs
    ///         {
    ///             AllowSignUp = true,
    ///             CertificatePath = "/certs/saml.crt",
    ///             PrivateKeyPath = "/certs/saml.key",
    ///             IdpMetadataUrl = "https://nexus.microsoftonline-p.com/federationmetadata/saml20/federationmetadata.xml",
    ///             SignatureAlgorithm = "rsa-sha256",
    ///             AssertionAttributeLogin = "login",
    ///             AssertionAttributeEmail = "email",
    ///             NameIdFormat = "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
    ///         },
    ///     });
    /// 
    ///     // Configure SSO using LDAP
    ///     var ldapSsoSettings = new Grafana.Oss.SsoSettings("ldap_sso_settings", new()
    ///     {
    ///         ProviderName = "ldap",
    ///         LdapSettings = new Grafana.Oss.Inputs.SsoSettingsLdapSettingsArgs
    ///         {
    ///             Enabled = true,
    ///             Config = new Grafana.Oss.Inputs.SsoSettingsLdapSettingsConfigArgs
    ///             {
    ///                 Servers = new[]
    ///                 {
    ///                     new Grafana.Oss.Inputs.SsoSettingsLdapSettingsConfigServerArgs
    ///                     {
    ///                         Host = "127.0.0.1",
    ///                         Port = 389,
    ///                         SearchFilter = "(cn=%s)",
    ///                         BindDn = "cn=admin,dc=grafana,dc=org",
    ///                         BindPassword = "grafana",
    ///                         SearchBaseDns = new[]
    ///                         {
    ///                             "dc=grafana,dc=org",
    ///                         },
    ///                         Attributes = 
    ///                         {
    ///                             { "name", "givenName" },
    ///                             { "surname", "sn" },
    ///                             { "username", "cn" },
    ///                             { "member_of", "memberOf" },
    ///                             { "email", "email" },
    ///                         },
    ///                         GroupMappings = new[]
    ///                         {
    ///                             new Grafana.Oss.Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingArgs
    ///                             {
    ///                                 GroupDn = "cn=superadmins,dc=grafana,dc=org",
    ///                                 OrgRole = "Admin",
    ///                                 OrgId = 1,
    ///                                 GrafanaAdmin = true,
    ///                             },
    ///                             new Grafana.Oss.Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingArgs
    ///                             {
    ///                                 GroupDn = "cn=users,dc=grafana,dc=org",
    ///                                 OrgRole = "Editor",
    ///                             },
    ///                             new Grafana.Oss.Inputs.SsoSettingsLdapSettingsConfigServerGroupMappingArgs
    ///                             {
    ///                                 GroupDn = "*",
    ///                                 OrgRole = "Viewer",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/ssoSettings:SsoSettings name "{{ provider }}"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import grafana:index/ssoSettings:SsoSettings name "{{ orgID }}:{{ provider }}"
    /// ```
    /// </summary>
    [Obsolete(@"grafana.index/ssosettings.SsoSettings has been deprecated in favor of grafana.oss/ssosettings.SsoSettings")]
    [GrafanaResourceType("grafana:index/ssoSettings:SsoSettings")]
    public partial class SsoSettings : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The LDAP settings set. Required for the ldap provider.
        /// </summary>
        [Output("ldapSettings")]
        public Output<Outputs.SsoSettingsLdapSettings?> LdapSettings { get; private set; } = null!;

        /// <summary>
        /// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic*oauth providers.
        /// </summary>
        [Output("oauth2Settings")]
        public Output<Outputs.SsoSettingsOauth2Settings?> Oauth2Settings { get; private set; } = null!;

        /// <summary>
        /// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        /// <summary>
        /// The SAML settings set. Required for the saml provider.
        /// </summary>
        [Output("samlSettings")]
        public Output<Outputs.SsoSettingsSamlSettings?> SamlSettings { get; private set; } = null!;


        /// <summary>
        /// Create a SsoSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SsoSettings(string name, SsoSettingsArgs args, CustomResourceOptions? options = null)
            : base("grafana:index/ssoSettings:SsoSettings", name, args ?? new SsoSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SsoSettings(string name, Input<string> id, SsoSettingsState? state = null, CustomResourceOptions? options = null)
            : base("grafana:index/ssoSettings:SsoSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "grafana:index/ssoSettings:SsoSettings" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SsoSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SsoSettings Get(string name, Input<string> id, SsoSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new SsoSettings(name, id, state, options);
        }
    }

    public sealed class SsoSettingsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The LDAP settings set. Required for the ldap provider.
        /// </summary>
        [Input("ldapSettings")]
        public Input<Inputs.SsoSettingsLdapSettingsArgs>? LdapSettings { get; set; }

        /// <summary>
        /// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic*oauth providers.
        /// </summary>
        [Input("oauth2Settings")]
        public Input<Inputs.SsoSettingsOauth2SettingsArgs>? Oauth2Settings { get; set; }

        /// <summary>
        /// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        /// <summary>
        /// The SAML settings set. Required for the saml provider.
        /// </summary>
        [Input("samlSettings")]
        public Input<Inputs.SsoSettingsSamlSettingsArgs>? SamlSettings { get; set; }

        public SsoSettingsArgs()
        {
        }
        public static new SsoSettingsArgs Empty => new SsoSettingsArgs();
    }

    public sealed class SsoSettingsState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The LDAP settings set. Required for the ldap provider.
        /// </summary>
        [Input("ldapSettings")]
        public Input<Inputs.SsoSettingsLdapSettingsGetArgs>? LdapSettings { get; set; }

        /// <summary>
        /// The OAuth2 settings set. Required for github, gitlab, google, azuread, okta, generic*oauth providers.
        /// </summary>
        [Input("oauth2Settings")]
        public Input<Inputs.SsoSettingsOauth2SettingsGetArgs>? Oauth2Settings { get; set; }

        /// <summary>
        /// The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth, saml, ldap.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// The SAML settings set. Required for the saml provider.
        /// </summary>
        [Input("samlSettings")]
        public Input<Inputs.SsoSettingsSamlSettingsGetArgs>? SamlSettings { get; set; }

        public SsoSettingsState()
        {
        }
        public static new SsoSettingsState Empty => new SsoSettingsState();
    }
}
