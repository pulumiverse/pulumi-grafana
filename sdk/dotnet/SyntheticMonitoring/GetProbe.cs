// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.SyntheticMonitoring
{
    public static class GetProbe
    {
        /// <summary>
        /// Data source for retrieving a single probe by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ohio = Grafana.SyntheticMonitoring.GetProbe.Invoke(new()
        ///     {
        ///         Name = "Ohio",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProbeResult> InvokeAsync(GetProbeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProbeResult>("grafana:syntheticMonitoring/getProbe:getProbe", args ?? new GetProbeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a single probe by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ohio = Grafana.SyntheticMonitoring.GetProbe.Invoke(new()
        ///     {
        ///         Name = "Ohio",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProbeResult> Invoke(GetProbeInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProbeResult>("grafana:syntheticMonitoring/getProbe:getProbe", args ?? new GetProbeInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Data source for retrieving a single probe by name.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ohio = Grafana.SyntheticMonitoring.GetProbe.Invoke(new()
        ///     {
        ///         Name = "Ohio",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProbeResult> Invoke(GetProbeInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProbeResult>("grafana:syntheticMonitoring/getProbe:getProbe", args ?? new GetProbeInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProbeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the probe.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetProbeArgs()
        {
        }
        public static new GetProbeArgs Empty => new GetProbeArgs();
    }

    public sealed class GetProbeInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the probe.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetProbeInvokeArgs()
        {
        }
        public static new GetProbeInvokeArgs Empty => new GetProbeInvokeArgs();
    }


    [OutputType]
    public sealed class GetProbeResult
    {
        /// <summary>
        /// Disables browser checks for this probe.
        /// </summary>
        public readonly bool DisableBrowserChecks;
        /// <summary>
        /// Disables scripted checks for this probe.
        /// </summary>
        public readonly bool DisableScriptedChecks;
        /// <summary>
        /// The ID of the probe.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Custom labels to be included with collected metrics and logs.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Labels;
        /// <summary>
        /// Latitude coordinates.
        /// </summary>
        public readonly double Latitude;
        /// <summary>
        /// Longitude coordinates.
        /// </summary>
        public readonly double Longitude;
        /// <summary>
        /// Name of the probe.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set to `true`.
        /// </summary>
        public readonly bool Public;
        /// <summary>
        /// Region of the probe.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The tenant ID of the probe.
        /// </summary>
        public readonly int TenantId;

        [OutputConstructor]
        private GetProbeResult(
            bool disableBrowserChecks,

            bool disableScriptedChecks,

            string id,

            ImmutableDictionary<string, string> labels,

            double latitude,

            double longitude,

            string name,

            bool @public,

            string region,

            int tenantId)
        {
            DisableBrowserChecks = disableBrowserChecks;
            DisableScriptedChecks = disableScriptedChecks;
            Id = id;
            Labels = labels;
            Latitude = latitude;
            Longitude = longitude;
            Name = name;
            Public = @public;
            Region = region;
            TenantId = tenantId;
        }
    }
}
