// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.SyntheticMonitoring
{
    /// <summary>
    /// Manages alerts for a check in Grafana Synthetic Monitoring.
    /// 
    /// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/configure-alerts/configure-per-check-alerts/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main = new Grafana.SyntheticMonitoring.Check("main", new()
    ///     {
    ///         Job = "Check Alert Test",
    ///         Target = "https://grafana.com",
    ///         Enabled = true,
    ///         Probes = new[]
    ///         {
    ///             1,
    ///         },
    ///         Labels = null,
    ///         Settings = new Grafana.SyntheticMonitoring.Inputs.CheckSettingsArgs
    ///         {
    ///             Http = new Grafana.SyntheticMonitoring.Inputs.CheckSettingsHttpArgs
    ///             {
    ///                 IpVersion = "V4",
    ///                 Method = "GET",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var mainCheckAlerts = new Grafana.SyntheticMonitoring.CheckAlerts("main", new()
    ///     {
    ///         CheckId = main.Id,
    ///         Alerts = new[]
    ///         {
    ///             new Grafana.SyntheticMonitoring.Inputs.CheckAlertsAlertArgs
    ///             {
    ///                 Name = "ProbeFailedExecutionsTooHigh",
    ///                 Threshold = 1,
    ///                 Period = "15m",
    ///             },
    ///             new Grafana.SyntheticMonitoring.Inputs.CheckAlertsAlertArgs
    ///             {
    ///                 Name = "TLSTargetCertificateCloseToExpiring",
    ///                 Threshold = 14,
    ///                 Period = "",
    ///             },
    ///             new Grafana.SyntheticMonitoring.Inputs.CheckAlertsAlertArgs
    ///             {
    ///                 Name = "HTTPRequestDurationTooHighAvg",
    ///                 Threshold = 5000,
    ///                 Period = "10m",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:syntheticMonitoring/checkAlerts:CheckAlerts name "{{ check_id }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:syntheticMonitoring/checkAlerts:CheckAlerts")]
    public partial class CheckAlerts : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of alerts for the check.
        /// </summary>
        [Output("alerts")]
        public Output<ImmutableArray<Outputs.CheckAlertsAlert>> Alerts { get; private set; } = null!;

        /// <summary>
        /// The ID of the check to manage alerts for.
        /// </summary>
        [Output("checkId")]
        public Output<int> CheckId { get; private set; } = null!;


        /// <summary>
        /// Create a CheckAlerts resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CheckAlerts(string name, CheckAlertsArgs args, CustomResourceOptions? options = null)
            : base("grafana:syntheticMonitoring/checkAlerts:CheckAlerts", name, args ?? new CheckAlertsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CheckAlerts(string name, Input<string> id, CheckAlertsState? state = null, CustomResourceOptions? options = null)
            : base("grafana:syntheticMonitoring/checkAlerts:CheckAlerts", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CheckAlerts resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CheckAlerts Get(string name, Input<string> id, CheckAlertsState? state = null, CustomResourceOptions? options = null)
        {
            return new CheckAlerts(name, id, state, options);
        }
    }

    public sealed class CheckAlertsArgs : global::Pulumi.ResourceArgs
    {
        [Input("alerts", required: true)]
        private InputList<Inputs.CheckAlertsAlertArgs>? _alerts;

        /// <summary>
        /// List of alerts for the check.
        /// </summary>
        public InputList<Inputs.CheckAlertsAlertArgs> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<Inputs.CheckAlertsAlertArgs>());
            set => _alerts = value;
        }

        /// <summary>
        /// The ID of the check to manage alerts for.
        /// </summary>
        [Input("checkId", required: true)]
        public Input<int> CheckId { get; set; } = null!;

        public CheckAlertsArgs()
        {
        }
        public static new CheckAlertsArgs Empty => new CheckAlertsArgs();
    }

    public sealed class CheckAlertsState : global::Pulumi.ResourceArgs
    {
        [Input("alerts")]
        private InputList<Inputs.CheckAlertsAlertGetArgs>? _alerts;

        /// <summary>
        /// List of alerts for the check.
        /// </summary>
        public InputList<Inputs.CheckAlertsAlertGetArgs> Alerts
        {
            get => _alerts ?? (_alerts = new InputList<Inputs.CheckAlertsAlertGetArgs>());
            set => _alerts = value;
        }

        /// <summary>
        /// The ID of the check to manage alerts for.
        /// </summary>
        [Input("checkId")]
        public Input<int>? CheckId { get; set; }

        public CheckAlertsState()
        {
        }
        public static new CheckAlertsState Empty => new CheckAlertsState();
    }
}
