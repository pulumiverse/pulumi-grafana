// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Oss
{
    public static class GetFolders
    {
        /// <summary>
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testA = new Grafana.Oss.Folder("test_a", new()
        ///     {
        ///         Title = "test-folder-a",
        ///         Uid = "test-ds-folder-uid-a",
        ///     });
        /// 
        ///     var testB = new Grafana.Oss.Folder("test_b", new()
        ///     {
        ///         Title = "test-folder-b",
        ///         Uid = "test-ds-folder-uid-b",
        ///     });
        /// 
        ///     var test = Grafana.Oss.GetFolders.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFoldersResult> InvokeAsync(GetFoldersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFoldersResult>("grafana:oss/getFolders:getFolders", args ?? new GetFoldersArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testA = new Grafana.Oss.Folder("test_a", new()
        ///     {
        ///         Title = "test-folder-a",
        ///         Uid = "test-ds-folder-uid-a",
        ///     });
        /// 
        ///     var testB = new Grafana.Oss.Folder("test_b", new()
        ///     {
        ///         Title = "test-folder-b",
        ///         Uid = "test-ds-folder-uid-b",
        ///     });
        /// 
        ///     var test = Grafana.Oss.GetFolders.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFoldersResult> Invoke(GetFoldersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoldersResult>("grafana:oss/getFolders:getFolders", args ?? new GetFoldersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/manage-dashboards/)
        /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testA = new Grafana.Oss.Folder("test_a", new()
        ///     {
        ///         Title = "test-folder-a",
        ///         Uid = "test-ds-folder-uid-a",
        ///     });
        /// 
        ///     var testB = new Grafana.Oss.Folder("test_b", new()
        ///     {
        ///         Title = "test-folder-b",
        ///         Uid = "test-ds-folder-uid-b",
        ///     });
        /// 
        ///     var test = Grafana.Oss.GetFolders.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFoldersResult> Invoke(GetFoldersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetFoldersResult>("grafana:oss/getFolders:getFolders", args ?? new GetFoldersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFoldersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        public GetFoldersArgs()
        {
        }
        public static new GetFoldersArgs Empty => new GetFoldersArgs();
    }

    public sealed class GetFoldersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        public GetFoldersInvokeArgs()
        {
        }
        public static new GetFoldersInvokeArgs Empty => new GetFoldersInvokeArgs();
    }


    [OutputType]
    public sealed class GetFoldersResult
    {
        /// <summary>
        /// The Grafana instance's folders.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFoldersFolderResult> Folders;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        public readonly string? OrgId;

        [OutputConstructor]
        private GetFoldersResult(
            ImmutableArray<Outputs.GetFoldersFolderResult> folders,

            string id,

            string? orgId)
        {
            Folders = folders;
            Id = id;
            OrgId = orgId;
        }
    }
}
