// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Oss.Outputs
{

    [OutputType]
    public sealed class SsoSettingsOauth2Settings
    {
        /// <summary>
        /// If enabled, it will automatically sync the Grafana server administrator role.
        /// </summary>
        public readonly bool? AllowAssignGrafanaAdmin;
        /// <summary>
        /// If not enabled, only existing Grafana users can log in using OAuth.
        /// </summary>
        public readonly bool? AllowSignUp;
        /// <summary>
        /// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
        /// </summary>
        public readonly string? AllowedDomains;
        /// <summary>
        /// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
        /// </summary>
        public readonly string? AllowedGroups;
        /// <summary>
        /// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
        /// </summary>
        public readonly string? AllowedOrganizations;
        /// <summary>
        /// The user information endpoint of your OAuth2 provider. Required for okta and generic_oauth providers.
        /// </summary>
        public readonly string? ApiUrl;
        /// <summary>
        /// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
        /// </summary>
        public readonly string? AuthStyle;
        /// <summary>
        /// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
        /// </summary>
        public readonly string? AuthUrl;
        /// <summary>
        /// Log in automatically, skipping the login screen.
        /// </summary>
        public readonly bool? AutoLogin;
        /// <summary>
        /// The client Id of your OAuth2 app.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The client secret of your OAuth2 app.
        /// </summary>
        public readonly string? ClientSecret;
        /// <summary>
        /// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Custom;
        /// <summary>
        /// Define allowed groups.
        /// </summary>
        public readonly bool? DefineAllowedGroups;
        /// <summary>
        /// Define allowed teams ids.
        /// </summary>
        public readonly bool? DefineAllowedTeamsIds;
        /// <summary>
        /// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? EmailAttributeName;
        /// <summary>
        /// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? EmailAttributePath;
        /// <summary>
        /// If enabled, no scopes will be sent to the OAuth2 provider.
        /// </summary>
        public readonly bool? EmptyScopes;
        /// <summary>
        /// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
        /// </summary>
        public readonly string? GroupsAttributePath;
        /// <summary>
        /// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? IdTokenAttributeName;
        /// <summary>
        /// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? LoginAttributePath;
        /// <summary>
        /// Helpful if you use more than one identity providers or SSO protocols.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? NameAttributePath;
        /// <summary>
        /// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "org_mapping"). Only applicable to Generic OAuth and Okta.
        /// </summary>
        public readonly string? OrgAttributePath;
        /// <summary>
        /// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
        /// </summary>
        public readonly string? OrgMapping;
        /// <summary>
        /// JMESPath expression to use for Grafana role lookup.
        /// </summary>
        public readonly string? RoleAttributePath;
        /// <summary>
        /// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
        /// </summary>
        public readonly bool? RoleAttributeStrict;
        /// <summary>
        /// List of comma- or space-separated OAuth2 scopes.
        /// </summary>
        public readonly string? Scopes;
        /// <summary>
        /// The URL to redirect the user to after signing out from Grafana.
        /// </summary>
        public readonly string? SignoutRedirectUrl;
        /// <summary>
        /// Prevent synchronizing users’ organization roles from your IdP.
        /// </summary>
        public readonly bool? SkipOrgRoleSync;
        /// <summary>
        /// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
        /// </summary>
        public readonly string? TeamIds;
        /// <summary>
        /// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? TeamIdsAttributePath;
        /// <summary>
        /// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
        /// </summary>
        public readonly string? TeamsUrl;
        /// <summary>
        /// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
        /// </summary>
        public readonly string? TlsClientCa;
        /// <summary>
        /// The path to the certificate. Is not applicable on Grafana Cloud.
        /// </summary>
        public readonly string? TlsClientCert;
        /// <summary>
        /// The path to the key. Is not applicable on Grafana Cloud.
        /// </summary>
        public readonly string? TlsClientKey;
        /// <summary>
        /// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
        /// </summary>
        public readonly bool? TlsSkipVerifyInsecure;
        /// <summary>
        /// The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.
        /// </summary>
        public readonly string? TokenUrl;
        /// <summary>
        /// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
        /// </summary>
        public readonly bool? UsePkce;
        /// <summary>
        /// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
        /// </summary>
        public readonly bool? UseRefreshToken;

        [OutputConstructor]
        private SsoSettingsOauth2Settings(
            bool? allowAssignGrafanaAdmin,

            bool? allowSignUp,

            string? allowedDomains,

            string? allowedGroups,

            string? allowedOrganizations,

            string? apiUrl,

            string? authStyle,

            string? authUrl,

            bool? autoLogin,

            string clientId,

            string? clientSecret,

            ImmutableDictionary<string, string>? custom,

            bool? defineAllowedGroups,

            bool? defineAllowedTeamsIds,

            string? emailAttributeName,

            string? emailAttributePath,

            bool? emptyScopes,

            bool? enabled,

            string? groupsAttributePath,

            string? idTokenAttributeName,

            string? loginAttributePath,

            string? name,

            string? nameAttributePath,

            string? orgAttributePath,

            string? orgMapping,

            string? roleAttributePath,

            bool? roleAttributeStrict,

            string? scopes,

            string? signoutRedirectUrl,

            bool? skipOrgRoleSync,

            string? teamIds,

            string? teamIdsAttributePath,

            string? teamsUrl,

            string? tlsClientCa,

            string? tlsClientCert,

            string? tlsClientKey,

            bool? tlsSkipVerifyInsecure,

            string? tokenUrl,

            bool? usePkce,

            bool? useRefreshToken)
        {
            AllowAssignGrafanaAdmin = allowAssignGrafanaAdmin;
            AllowSignUp = allowSignUp;
            AllowedDomains = allowedDomains;
            AllowedGroups = allowedGroups;
            AllowedOrganizations = allowedOrganizations;
            ApiUrl = apiUrl;
            AuthStyle = authStyle;
            AuthUrl = authUrl;
            AutoLogin = autoLogin;
            ClientId = clientId;
            ClientSecret = clientSecret;
            Custom = custom;
            DefineAllowedGroups = defineAllowedGroups;
            DefineAllowedTeamsIds = defineAllowedTeamsIds;
            EmailAttributeName = emailAttributeName;
            EmailAttributePath = emailAttributePath;
            EmptyScopes = emptyScopes;
            Enabled = enabled;
            GroupsAttributePath = groupsAttributePath;
            IdTokenAttributeName = idTokenAttributeName;
            LoginAttributePath = loginAttributePath;
            Name = name;
            NameAttributePath = nameAttributePath;
            OrgAttributePath = orgAttributePath;
            OrgMapping = orgMapping;
            RoleAttributePath = roleAttributePath;
            RoleAttributeStrict = roleAttributeStrict;
            Scopes = scopes;
            SignoutRedirectUrl = signoutRedirectUrl;
            SkipOrgRoleSync = skipOrgRoleSync;
            TeamIds = teamIds;
            TeamIdsAttributePath = teamIdsAttributePath;
            TeamsUrl = teamsUrl;
            TlsClientCa = tlsClientCa;
            TlsClientCert = tlsClientCert;
            TlsClientKey = tlsClientKey;
            TlsSkipVerifyInsecure = tlsSkipVerifyInsecure;
            TokenUrl = tokenUrl;
            UsePkce = usePkce;
            UseRefreshToken = useRefreshToken;
        }
    }
}
