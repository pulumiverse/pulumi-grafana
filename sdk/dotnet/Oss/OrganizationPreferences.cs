// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Oss
{
    /// <summary>
    /// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/organization-management/)
    /// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/preferences/#get-current-org-prefs)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Grafana.Oss.OrganizationPreferences("test", new()
    ///     {
    ///         Theme = "light",
    ///         Timezone = "utc",
    ///         WeekStart = "sunday",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:oss/organizationPreferences:OrganizationPreferences name "{{ orgID }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:oss/organizationPreferences:OrganizationPreferences")]
    public partial class OrganizationPreferences : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Organization home dashboard UID. This is only available in Grafana 9.0+.
        /// </summary>
        [Output("homeDashboardUid")]
        public Output<string?> HomeDashboardUid { get; private set; } = null!;

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.
        /// </summary>
        [Output("theme")]
        public Output<string?> Theme { get; private set; } = null!;

        /// <summary>
        /// The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.
        /// </summary>
        [Output("timezone")]
        public Output<string?> Timezone { get; private set; } = null!;

        /// <summary>
        /// The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default. Defaults to ``.
        /// </summary>
        [Output("weekStart")]
        public Output<string?> WeekStart { get; private set; } = null!;


        /// <summary>
        /// Create a OrganizationPreferences resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public OrganizationPreferences(string name, OrganizationPreferencesArgs? args = null, CustomResourceOptions? options = null)
            : base("grafana:oss/organizationPreferences:OrganizationPreferences", name, args ?? new OrganizationPreferencesArgs(), MakeResourceOptions(options, ""))
        {
        }

        private OrganizationPreferences(string name, Input<string> id, OrganizationPreferencesState? state = null, CustomResourceOptions? options = null)
            : base("grafana:oss/organizationPreferences:OrganizationPreferences", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing OrganizationPreferences resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static OrganizationPreferences Get(string name, Input<string> id, OrganizationPreferencesState? state = null, CustomResourceOptions? options = null)
        {
            return new OrganizationPreferences(name, id, state, options);
        }
    }

    public sealed class OrganizationPreferencesArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Organization home dashboard UID. This is only available in Grafana 9.0+.
        /// </summary>
        [Input("homeDashboardUid")]
        public Input<string>? HomeDashboardUid { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default. Defaults to ``.
        /// </summary>
        [Input("weekStart")]
        public Input<string>? WeekStart { get; set; }

        public OrganizationPreferencesArgs()
        {
        }
        public static new OrganizationPreferencesArgs Empty => new OrganizationPreferencesArgs();
    }

    public sealed class OrganizationPreferencesState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Organization home dashboard UID. This is only available in Grafana 9.0+.
        /// </summary>
        [Input("homeDashboardUid")]
        public Input<string>? HomeDashboardUid { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.
        /// </summary>
        [Input("theme")]
        public Input<string>? Theme { get; set; }

        /// <summary>
        /// The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default. Defaults to ``.
        /// </summary>
        [Input("weekStart")]
        public Input<string>? WeekStart { get; set; }

        public OrganizationPreferencesState()
        {
        }
        public static new OrganizationPreferencesState Empty => new OrganizationPreferencesState();
    }
}
