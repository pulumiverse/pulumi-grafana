// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Oss
{
    public static class GetLibraryPanels
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Oss.LibraryPanel("test", new()
        ///     {
        ///         Name = "panelname",
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["title"] = "test name",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///             ["description"] = "test description",
        ///         }),
        ///     });
        /// 
        ///     var testFolder = new Grafana.Oss.Folder("test", new()
        ///     {
        ///         Title = "Panel Folder",
        ///         Uid = "panelname-folder",
        ///     });
        /// 
        ///     var folder = new Grafana.Oss.LibraryPanel("folder", new()
        ///     {
        ///         Name = "panelname In Folder",
        ///         FolderUid = testFolder.Uid,
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["gridPos"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["x"] = 0,
        ///                 ["y"] = 0,
        ///                 ["h"] = 10,
        ///                 ["w"] = 10,
        ///             },
        ///             ["title"] = "panel",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///         }),
        ///     });
        /// 
        ///     var all = Grafana.Oss.GetLibraryPanels.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLibraryPanelsResult> InvokeAsync(GetLibraryPanelsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLibraryPanelsResult>("grafana:oss/getLibraryPanels:getLibraryPanels", args ?? new GetLibraryPanelsArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Oss.LibraryPanel("test", new()
        ///     {
        ///         Name = "panelname",
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["title"] = "test name",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///             ["description"] = "test description",
        ///         }),
        ///     });
        /// 
        ///     var testFolder = new Grafana.Oss.Folder("test", new()
        ///     {
        ///         Title = "Panel Folder",
        ///         Uid = "panelname-folder",
        ///     });
        /// 
        ///     var folder = new Grafana.Oss.LibraryPanel("folder", new()
        ///     {
        ///         Name = "panelname In Folder",
        ///         FolderUid = testFolder.Uid,
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["gridPos"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["x"] = 0,
        ///                 ["y"] = 0,
        ///                 ["h"] = 10,
        ///                 ["w"] = 10,
        ///             },
        ///             ["title"] = "panel",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///         }),
        ///     });
        /// 
        ///     var all = Grafana.Oss.GetLibraryPanels.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLibraryPanelsResult> Invoke(GetLibraryPanelsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLibraryPanelsResult>("grafana:oss/getLibraryPanels:getLibraryPanels", args ?? new GetLibraryPanelsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Grafana = Pulumi.Grafana;
        /// using Grafana = Pulumiverse.Grafana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = new Grafana.Oss.LibraryPanel("test", new()
        ///     {
        ///         Name = "panelname",
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["title"] = "test name",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///             ["description"] = "test description",
        ///         }),
        ///     });
        /// 
        ///     var testFolder = new Grafana.Oss.Folder("test", new()
        ///     {
        ///         Title = "Panel Folder",
        ///         Uid = "panelname-folder",
        ///     });
        /// 
        ///     var folder = new Grafana.Oss.LibraryPanel("folder", new()
        ///     {
        ///         Name = "panelname In Folder",
        ///         FolderUid = testFolder.Uid,
        ///         ModelJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["gridPos"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["x"] = 0,
        ///                 ["y"] = 0,
        ///                 ["h"] = 10,
        ///                 ["w"] = 10,
        ///             },
        ///             ["title"] = "panel",
        ///             ["type"] = "text",
        ///             ["version"] = 0,
        ///         }),
        ///     });
        /// 
        ///     var all = Grafana.Oss.GetLibraryPanels.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLibraryPanelsResult> Invoke(GetLibraryPanelsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLibraryPanelsResult>("grafana:oss/getLibraryPanels:getLibraryPanels", args ?? new GetLibraryPanelsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLibraryPanelsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
        /// </summary>
        [Input("orgId")]
        public string? OrgId { get; set; }

        public GetLibraryPanelsArgs()
        {
        }
        public static new GetLibraryPanelsArgs Empty => new GetLibraryPanelsArgs();
    }

    public sealed class GetLibraryPanelsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        public GetLibraryPanelsInvokeArgs()
        {
        }
        public static new GetLibraryPanelsInvokeArgs Empty => new GetLibraryPanelsInvokeArgs();
    }


    [OutputType]
    public sealed class GetLibraryPanelsResult
    {
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Organization ID. If not set, the default organization is used for basic authentication, or the one that owns your service account for token authentication.
        /// </summary>
        public readonly string OrgId;
        public readonly ImmutableArray<Outputs.GetLibraryPanelsPanelResult> Panels;

        [OutputConstructor]
        private GetLibraryPanelsResult(
            string id,

            string orgId,

            ImmutableArray<Outputs.GetLibraryPanelsPanelResult> panels)
        {
            Id = id;
            OrgId = orgId;
            Panels = panels;
        }
    }
}
