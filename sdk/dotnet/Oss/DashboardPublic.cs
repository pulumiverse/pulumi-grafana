// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Oss
{
    /// <summary>
    /// Manages Grafana public dashboards.
    /// 
    /// **Note:** This resource is available only with Grafana 10.2+.
    /// 
    /// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/share-dashboards-panels/shared-dashboards/)
    /// * [HTTP API](https://grafana.com/docs/grafana/next/developers/http_api/dashboard_public/)
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Optional (On-premise, not supported in Grafana Cloud): Create an organization
    ///     var myOrg = new Grafana.Oss.Organization("my_org", new()
    ///     {
    ///         Name = "test 1",
    ///     });
    /// 
    ///     // Create resources (optional: within the organization)
    ///     var myFolder = new Grafana.Oss.Folder("my_folder", new()
    ///     {
    ///         OrgId = myOrg.OrgId,
    ///         Title = "test Folder",
    ///     });
    /// 
    ///     var testDash = new Grafana.Oss.Dashboard("test_dash", new()
    ///     {
    ///         OrgId = myOrg.OrgId,
    ///         Folder = myFolder.Id,
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["title"] = "My Terraform Dashboard",
    ///             ["uid"] = "my-dashboard-uid",
    ///         }),
    ///     });
    /// 
    ///     var myPublicDashboard = new Grafana.Oss.DashboardPublic("my_public_dashboard", new()
    ///     {
    ///         OrgId = myOrg.OrgId,
    ///         DashboardUid = testDash.Uid,
    ///         Uid = "my-custom-public-uid",
    ///         AccessToken = "e99e4275da6f410d83760eefa934d8d2",
    ///         TimeSelectionEnabled = true,
    ///         IsEnabled = true,
    ///         AnnotationsEnabled = true,
    ///         Share = "public",
    ///     });
    /// 
    ///     // Optional (On-premise, not supported in Grafana Cloud): Create an organization
    ///     var myOrg2 = new Grafana.Oss.Organization("my_org2", new()
    ///     {
    ///         Name = "test 2",
    ///     });
    /// 
    ///     var testDash2 = new Grafana.Oss.Dashboard("test_dash2", new()
    ///     {
    ///         OrgId = myOrg2.OrgId,
    ///         ConfigJson = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///         {
    ///             ["title"] = "My Terraform Dashboard2",
    ///             ["uid"] = "my-dashboard-uid2",
    ///         }),
    ///     });
    /// 
    ///     var myPublicDashboard2 = new Grafana.Oss.DashboardPublic("my_public_dashboard2", new()
    ///     {
    ///         OrgId = myOrg2.OrgId,
    ///         DashboardUid = testDash2.Uid,
    ///         Share = "public",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:oss/dashboardPublic:DashboardPublic name "{{ dashboardUID }}:{{ publicDashboardUID }}"
    /// ```
    /// 
    /// ```sh
    /// $ pulumi import grafana:oss/dashboardPublic:DashboardPublic name "{{ orgID }}:{{ dashboardUID }}:{{ publicDashboardUID }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:oss/dashboardPublic:DashboardPublic")]
    public partial class DashboardPublic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Output("accessToken")]
        public Output<string> AccessToken { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to show annotations. The default value is `false`.
        /// </summary>
        [Output("annotationsEnabled")]
        public Output<bool?> AnnotationsEnabled { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the original dashboard.
        /// </summary>
        [Output("dashboardUid")]
        public Output<string> DashboardUid { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to enable the public dashboard. The default value is `false`.
        /// </summary>
        [Output("isEnabled")]
        public Output<bool?> IsEnabled { get; private set; } = null!;

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Output("orgId")]
        public Output<string?> OrgId { get; private set; } = null!;

        /// <summary>
        /// Set the share mode. The default value is `public`.
        /// </summary>
        [Output("share")]
        public Output<string?> Share { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to enable the time picker in the public dashboard. The default value is `false`.
        /// </summary>
        [Output("timeSelectionEnabled")]
        public Output<bool?> TimeSelectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Output("uid")]
        public Output<string> Uid { get; private set; } = null!;


        /// <summary>
        /// Create a DashboardPublic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DashboardPublic(string name, DashboardPublicArgs args, CustomResourceOptions? options = null)
            : base("grafana:oss/dashboardPublic:DashboardPublic", name, args ?? new DashboardPublicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DashboardPublic(string name, Input<string> id, DashboardPublicState? state = null, CustomResourceOptions? options = null)
            : base("grafana:oss/dashboardPublic:DashboardPublic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
                Aliases =
                {
                    new global::Pulumi.Alias { Type = "grafana:index/dashboardPublic:DashboardPublic" },
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DashboardPublic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DashboardPublic Get(string name, Input<string> id, DashboardPublicState? state = null, CustomResourceOptions? options = null)
        {
            return new DashboardPublic(name, id, state, options);
        }
    }

    public sealed class DashboardPublicArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Input("accessToken")]
        public Input<string>? AccessToken { get; set; }

        /// <summary>
        /// Set to `true` to show annotations. The default value is `false`.
        /// </summary>
        [Input("annotationsEnabled")]
        public Input<bool>? AnnotationsEnabled { get; set; }

        /// <summary>
        /// The unique identifier of the original dashboard.
        /// </summary>
        [Input("dashboardUid", required: true)]
        public Input<string> DashboardUid { get; set; } = null!;

        /// <summary>
        /// Set to `true` to enable the public dashboard. The default value is `false`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Set the share mode. The default value is `public`.
        /// </summary>
        [Input("share")]
        public Input<string>? Share { get; set; }

        /// <summary>
        /// Set to `true` to enable the time picker in the public dashboard. The default value is `false`.
        /// </summary>
        [Input("timeSelectionEnabled")]
        public Input<bool>? TimeSelectionEnabled { get; set; }

        /// <summary>
        /// The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public DashboardPublicArgs()
        {
        }
        public static new DashboardPublicArgs Empty => new DashboardPublicArgs();
    }

    public sealed class DashboardPublicState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Input("accessToken")]
        public Input<string>? AccessToken { get; set; }

        /// <summary>
        /// Set to `true` to show annotations. The default value is `false`.
        /// </summary>
        [Input("annotationsEnabled")]
        public Input<bool>? AnnotationsEnabled { get; set; }

        /// <summary>
        /// The unique identifier of the original dashboard.
        /// </summary>
        [Input("dashboardUid")]
        public Input<string>? DashboardUid { get; set; }

        /// <summary>
        /// Set to `true` to enable the public dashboard. The default value is `false`.
        /// </summary>
        [Input("isEnabled")]
        public Input<bool>? IsEnabled { get; set; }

        /// <summary>
        /// The Organization ID. If not set, the Org ID defined in the provider block will be used.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// Set the share mode. The default value is `public`.
        /// </summary>
        [Input("share")]
        public Input<string>? Share { get; set; }

        /// <summary>
        /// Set to `true` to enable the time picker in the public dashboard. The default value is `false`.
        /// </summary>
        [Input("timeSelectionEnabled")]
        public Input<bool>? TimeSelectionEnabled { get; set; }

        /// <summary>
        /// The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public dashboard.
        /// </summary>
        [Input("uid")]
        public Input<string>? Uid { get; set; }

        public DashboardPublicState()
        {
        }
        public static new DashboardPublicState Empty => new DashboardPublicState();
    }
}
