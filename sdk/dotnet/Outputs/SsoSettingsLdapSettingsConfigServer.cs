// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Outputs
{

    [OutputType]
    public sealed class SsoSettingsLdapSettingsConfigServer
    {
        /// <summary>
        /// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Attributes;
        /// <summary>
        /// The search user bind DN.
        /// </summary>
        public readonly string? BindDn;
        /// <summary>
        /// The search user bind password.
        /// </summary>
        public readonly string? BindPassword;
        /// <summary>
        /// The path to the client certificate.
        /// </summary>
        public readonly string? ClientCert;
        /// <summary>
        /// The Base64 encoded value of the client certificate.
        /// </summary>
        public readonly string? ClientCertValue;
        /// <summary>
        /// The path to the client private key.
        /// </summary>
        public readonly string? ClientKey;
        /// <summary>
        /// The Base64 encoded value of the client private key.
        /// </summary>
        public readonly string? ClientKeyValue;
        /// <summary>
        /// For mapping an LDAP group to a Grafana organization and role.
        /// </summary>
        public readonly ImmutableArray<Outputs.SsoSettingsLdapSettingsConfigServerGroupMapping> GroupMappings;
        /// <summary>
        /// An array of the base DNs to search through for groups. Typically uses ou=groups.
        /// </summary>
        public readonly ImmutableArray<string> GroupSearchBaseDns;
        /// <summary>
        /// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
        /// </summary>
        public readonly string? GroupSearchFilter;
        /// <summary>
        /// The %s in the search filter will be replaced with the attribute defined in this field.
        /// </summary>
        public readonly string? GroupSearchFilterUserAttribute;
        /// <summary>
        /// The LDAP server host.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// The LDAP server port.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The path to the root CA certificate.
        /// </summary>
        public readonly string? RootCaCert;
        /// <summary>
        /// The Base64 encoded values of the root CA certificates.
        /// </summary>
        public readonly ImmutableArray<string> RootCaCertValues;
        /// <summary>
        /// An array of base DNs to search through.
        /// </summary>
        public readonly ImmutableArray<string> SearchBaseDns;
        /// <summary>
        /// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
        /// </summary>
        public readonly string SearchFilter;
        /// <summary>
        /// If set to true, the SSL cert validation will be skipped.
        /// </summary>
        public readonly bool? SslSkipVerify;
        /// <summary>
        /// If set to true, use LDAP with STARTTLS instead of LDAPS.
        /// </summary>
        public readonly bool? StartTls;
        /// <summary>
        /// The timeout in seconds for connecting to the LDAP host.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
        /// </summary>
        public readonly ImmutableArray<string> TlsCiphers;
        /// <summary>
        /// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
        /// </summary>
        public readonly bool? UseSsl;

        [OutputConstructor]
        private SsoSettingsLdapSettingsConfigServer(
            ImmutableDictionary<string, string>? attributes,

            string? bindDn,

            string? bindPassword,

            string? clientCert,

            string? clientCertValue,

            string? clientKey,

            string? clientKeyValue,

            ImmutableArray<Outputs.SsoSettingsLdapSettingsConfigServerGroupMapping> groupMappings,

            ImmutableArray<string> groupSearchBaseDns,

            string? groupSearchFilter,

            string? groupSearchFilterUserAttribute,

            string host,

            string? minTlsVersion,

            int? port,

            string? rootCaCert,

            ImmutableArray<string> rootCaCertValues,

            ImmutableArray<string> searchBaseDns,

            string searchFilter,

            bool? sslSkipVerify,

            bool? startTls,

            int? timeout,

            ImmutableArray<string> tlsCiphers,

            bool? useSsl)
        {
            Attributes = attributes;
            BindDn = bindDn;
            BindPassword = bindPassword;
            ClientCert = clientCert;
            ClientCertValue = clientCertValue;
            ClientKey = clientKey;
            ClientKeyValue = clientKeyValue;
            GroupMappings = groupMappings;
            GroupSearchBaseDns = groupSearchBaseDns;
            GroupSearchFilter = groupSearchFilter;
            GroupSearchFilterUserAttribute = groupSearchFilterUserAttribute;
            Host = host;
            MinTlsVersion = minTlsVersion;
            Port = port;
            RootCaCert = rootCaCert;
            RootCaCertValues = rootCaCertValues;
            SearchBaseDns = searchBaseDns;
            SearchFilter = searchFilter;
            SslSkipVerify = sslSkipVerify;
            StartTls = startTls;
            Timeout = timeout;
            TlsCiphers = tlsCiphers;
            UseSsl = useSsl;
        }
    }
}
