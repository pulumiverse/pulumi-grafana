// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Grafana.Assert
{
    /// <summary>
    /// Manages Asserts Log Configuration through Grafana API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Grafana = Pulumiverse.Grafana;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var production = new Grafana.Assert.LogConfig("production", new()
    ///     {
    ///         Name = "production",
    ///         Priority = 1000,
    ///         DefaultConfig = false,
    ///         DataSourceUid = "grafanacloud-logs",
    ///         ErrorLabel = "error",
    ///         Matches = new[]
    ///         {
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "asserts_entity_type",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "Service",
    ///                 },
    ///             },
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "environment",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "production",
    ///                     "staging",
    ///                 },
    ///             },
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "site",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "us-east-1",
    ///                     "us-west-2",
    ///                 },
    ///             },
    ///         },
    ///         EntityPropertyToLogLabelMapping = 
    ///         {
    ///             { "otel_namespace", "service_namespace" },
    ///             { "otel_service", "service_name" },
    ///             { "environment", "env" },
    ///             { "site", "region" },
    ///         },
    ///         FilterBySpanId = true,
    ///         FilterByTraceId = true,
    ///     });
    /// 
    ///     var development = new Grafana.Assert.LogConfig("development", new()
    ///     {
    ///         Name = "development",
    ///         Priority = 2000,
    ///         DefaultConfig = true,
    ///         DataSourceUid = "elasticsearch-dev",
    ///         ErrorLabel = "error",
    ///         Matches = new[]
    ///         {
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "asserts_entity_type",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "Service",
    ///                 },
    ///             },
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "environment",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "development",
    ///                     "testing",
    ///                 },
    ///             },
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "site",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "us-east-1",
    ///                 },
    ///             },
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "service",
    ///                 Op = "EQUALS",
    ///                 Values = new[]
    ///                 {
    ///                     "api",
    ///                 },
    ///             },
    ///         },
    ///         EntityPropertyToLogLabelMapping = 
    ///         {
    ///             { "otel_namespace", "service_namespace" },
    ///             { "otel_service", "service_name" },
    ///             { "environment", "env" },
    ///             { "site", "region" },
    ///             { "service", "app" },
    ///         },
    ///         FilterBySpanId = true,
    ///         FilterByTraceId = true,
    ///     });
    /// 
    ///     var minimal = new Grafana.Assert.LogConfig("minimal", new()
    ///     {
    ///         Name = "minimal",
    ///         Priority = 3000,
    ///         DefaultConfig = false,
    ///         DataSourceUid = "loki-minimal",
    ///         Matches = new[]
    ///         {
    ///             new Grafana.Assert.Inputs.LogConfigMatchArgs
    ///             {
    ///                 Property = "asserts_entity_type",
    ///                 Op = "IS_NOT_NULL",
    ///                 Values = new() { },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    /// $ pulumi import grafana:assert/logConfig:LogConfig name "{{ name }}"
    /// ```
    /// </summary>
    [GrafanaResourceType("grafana:assert/logConfig:LogConfig")]
    public partial class LogConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// DataSource to be queried (e.g., a Loki instance).
        /// </summary>
        [Output("dataSourceUid")]
        public Output<string> DataSourceUid { get; private set; } = null!;

        /// <summary>
        /// Is it the default config, therefore undeletable?
        /// </summary>
        [Output("defaultConfig")]
        public Output<bool> DefaultConfig { get; private set; } = null!;

        /// <summary>
        /// Mapping of entity properties to log labels.
        /// </summary>
        [Output("entityPropertyToLogLabelMapping")]
        public Output<ImmutableDictionary<string, string>?> EntityPropertyToLogLabelMapping { get; private set; } = null!;

        /// <summary>
        /// Error label to filter logs.
        /// </summary>
        [Output("errorLabel")]
        public Output<string?> ErrorLabel { get; private set; } = null!;

        /// <summary>
        /// Filter logs by span ID.
        /// </summary>
        [Output("filterBySpanId")]
        public Output<bool?> FilterBySpanId { get; private set; } = null!;

        /// <summary>
        /// Filter logs by trace ID.
        /// </summary>
        [Output("filterByTraceId")]
        public Output<bool?> FilterByTraceId { get; private set; } = null!;

        /// <summary>
        /// List of match rules for entity properties.
        /// </summary>
        [Output("matches")]
        public Output<ImmutableArray<Outputs.LogConfigMatch>> Matches { get; private set; } = null!;

        /// <summary>
        /// The name of the log configuration.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Priority of the log configuration. A lower number means a higher priority.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;


        /// <summary>
        /// Create a LogConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LogConfig(string name, LogConfigArgs args, CustomResourceOptions? options = null)
            : base("grafana:assert/logConfig:LogConfig", name, args ?? new LogConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LogConfig(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
            : base("grafana:assert/logConfig:LogConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LogConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LogConfig Get(string name, Input<string> id, LogConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new LogConfig(name, id, state, options);
        }
    }

    public sealed class LogConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DataSource to be queried (e.g., a Loki instance).
        /// </summary>
        [Input("dataSourceUid", required: true)]
        public Input<string> DataSourceUid { get; set; } = null!;

        /// <summary>
        /// Is it the default config, therefore undeletable?
        /// </summary>
        [Input("defaultConfig", required: true)]
        public Input<bool> DefaultConfig { get; set; } = null!;

        [Input("entityPropertyToLogLabelMapping")]
        private InputMap<string>? _entityPropertyToLogLabelMapping;

        /// <summary>
        /// Mapping of entity properties to log labels.
        /// </summary>
        public InputMap<string> EntityPropertyToLogLabelMapping
        {
            get => _entityPropertyToLogLabelMapping ?? (_entityPropertyToLogLabelMapping = new InputMap<string>());
            set => _entityPropertyToLogLabelMapping = value;
        }

        /// <summary>
        /// Error label to filter logs.
        /// </summary>
        [Input("errorLabel")]
        public Input<string>? ErrorLabel { get; set; }

        /// <summary>
        /// Filter logs by span ID.
        /// </summary>
        [Input("filterBySpanId")]
        public Input<bool>? FilterBySpanId { get; set; }

        /// <summary>
        /// Filter logs by trace ID.
        /// </summary>
        [Input("filterByTraceId")]
        public Input<bool>? FilterByTraceId { get; set; }

        [Input("matches")]
        private InputList<Inputs.LogConfigMatchArgs>? _matches;

        /// <summary>
        /// List of match rules for entity properties.
        /// </summary>
        public InputList<Inputs.LogConfigMatchArgs> Matches
        {
            get => _matches ?? (_matches = new InputList<Inputs.LogConfigMatchArgs>());
            set => _matches = value;
        }

        /// <summary>
        /// The name of the log configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority of the log configuration. A lower number means a higher priority.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public LogConfigArgs()
        {
        }
        public static new LogConfigArgs Empty => new LogConfigArgs();
    }

    public sealed class LogConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// DataSource to be queried (e.g., a Loki instance).
        /// </summary>
        [Input("dataSourceUid")]
        public Input<string>? DataSourceUid { get; set; }

        /// <summary>
        /// Is it the default config, therefore undeletable?
        /// </summary>
        [Input("defaultConfig")]
        public Input<bool>? DefaultConfig { get; set; }

        [Input("entityPropertyToLogLabelMapping")]
        private InputMap<string>? _entityPropertyToLogLabelMapping;

        /// <summary>
        /// Mapping of entity properties to log labels.
        /// </summary>
        public InputMap<string> EntityPropertyToLogLabelMapping
        {
            get => _entityPropertyToLogLabelMapping ?? (_entityPropertyToLogLabelMapping = new InputMap<string>());
            set => _entityPropertyToLogLabelMapping = value;
        }

        /// <summary>
        /// Error label to filter logs.
        /// </summary>
        [Input("errorLabel")]
        public Input<string>? ErrorLabel { get; set; }

        /// <summary>
        /// Filter logs by span ID.
        /// </summary>
        [Input("filterBySpanId")]
        public Input<bool>? FilterBySpanId { get; set; }

        /// <summary>
        /// Filter logs by trace ID.
        /// </summary>
        [Input("filterByTraceId")]
        public Input<bool>? FilterByTraceId { get; set; }

        [Input("matches")]
        private InputList<Inputs.LogConfigMatchGetArgs>? _matches;

        /// <summary>
        /// List of match rules for entity properties.
        /// </summary>
        public InputList<Inputs.LogConfigMatchGetArgs> Matches
        {
            get => _matches ?? (_matches = new InputList<Inputs.LogConfigMatchGetArgs>());
            set => _matches = value;
        }

        /// <summary>
        /// The name of the log configuration.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority of the log configuration. A lower number means a higher priority.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        public LogConfigState()
        {
        }
        public static new LogConfigState Empty => new LogConfigState();
    }
}
