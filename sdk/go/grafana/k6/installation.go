// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Sets up the k6 App on a Grafana Cloud instance and generates a token.
// Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install k6.
// This resource cannot be imported but it can be used on an existing k6 App installation without issues.
//
// **Note that this resource must be used on a provider configured with Grafana Cloud credentials.**
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/k6/)
//
// Required access policy scopes:
//
// * stacks:read
// * stacks:write
// * subscriptions:read
// * orgs:read
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/cloud"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Cloud Access Policy token for Grafana Cloud with the following scopes: stacks:read|write|delete, stack-service-accounts:write
//			cloudAccessPolicyToken := cfg.RequireObject("cloudAccessPolicyToken")
//			stackSlug := cfg.RequireObject("stackSlug")
//			cloudRegion := "us"
//			if param := cfg.Get("cloudRegion"); param != "" {
//				cloudRegion = param
//			}
//			k6Stack, err := cloud.NewStack(ctx, "k6_stack", &cloud.StackArgs{
//				Name:       pulumi.Any(stackSlug),
//				Slug:       pulumi.Any(stackSlug),
//				RegionSlug: pulumi.String(cloudRegion),
//			})
//			if err != nil {
//				return err
//			}
//			// Step 2: Create a Service Account and a token to install the k6 App
//			k6Sa, err := cloud.NewStackServiceAccount(ctx, "k6_sa", &cloud.StackServiceAccountArgs{
//				StackSlug:  pulumi.Any(stackSlug),
//				Name:       pulumi.Sprintf("%v-k6-app", stackSlug),
//				Role:       pulumi.String("Admin"),
//				IsDisabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			k6SaToken, err := cloud.NewStackServiceAccountToken(ctx, "k6_sa_token", &cloud.StackServiceAccountTokenArgs{
//				StackSlug:        pulumi.Any(stackSlug),
//				Name:             pulumi.Sprintf("%v-k6-app-token", stackSlug),
//				ServiceAccountId: k6Sa.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// Step 3: Install the k6 App on the stack
//			_, err = k6.NewInstallation(ctx, "k6_installation", &k6.InstallationArgs{
//				CloudAccessPolicyToken: pulumi.Any(cloudAccessPolicyToken),
//				StackId:                k6Stack.ID(),
//				GrafanaSaToken:         k6SaToken.Key,
//				GrafanaUser:            pulumi.String("admin"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewProject(ctx, "my_k6_project", &k6.ProjectArgs{
//				Name: pulumi.String("k6 Project created with TF"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Installation struct {
	pulumi.CustomResourceState

	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
	CloudAccessPolicyToken pulumi.StringOutput `pulumi:"cloudAccessPolicyToken"`
	// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
	GrafanaSaToken pulumi.StringOutput `pulumi:"grafanaSaToken"`
	// The user to use for the installation.
	GrafanaUser pulumi.StringOutput `pulumi:"grafanaUser"`
	// Generated token to access the k6 API.
	K6AccessToken pulumi.StringOutput `pulumi:"k6AccessToken"`
	// The identifier of the k6 organization.
	K6Organization pulumi.StringOutput `pulumi:"k6Organization"`
	// The identifier of the stack to install k6 on.
	StackId pulumi.StringOutput `pulumi:"stackId"`
}

// NewInstallation registers a new resource with the given unique name, arguments, and options.
func NewInstallation(ctx *pulumi.Context,
	name string, args *InstallationArgs, opts ...pulumi.ResourceOption) (*Installation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CloudAccessPolicyToken == nil {
		return nil, errors.New("invalid value for required argument 'CloudAccessPolicyToken'")
	}
	if args.GrafanaSaToken == nil {
		return nil, errors.New("invalid value for required argument 'GrafanaSaToken'")
	}
	if args.GrafanaUser == nil {
		return nil, errors.New("invalid value for required argument 'GrafanaUser'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.CloudAccessPolicyToken != nil {
		args.CloudAccessPolicyToken = pulumi.ToSecret(args.CloudAccessPolicyToken).(pulumi.StringInput)
	}
	if args.GrafanaSaToken != nil {
		args.GrafanaSaToken = pulumi.ToSecret(args.GrafanaSaToken).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"cloudAccessPolicyToken",
		"grafanaSaToken",
		"k6AccessToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Installation
	err := ctx.RegisterResource("grafana:k6/installation:Installation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstallation gets an existing Installation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstallationState, opts ...pulumi.ResourceOption) (*Installation, error) {
	var resource Installation
	err := ctx.ReadResource("grafana:k6/installation:Installation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Installation resources.
type installationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
	CloudAccessPolicyToken *string `pulumi:"cloudAccessPolicyToken"`
	// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
	GrafanaSaToken *string `pulumi:"grafanaSaToken"`
	// The user to use for the installation.
	GrafanaUser *string `pulumi:"grafanaUser"`
	// Generated token to access the k6 API.
	K6AccessToken *string `pulumi:"k6AccessToken"`
	// The identifier of the k6 organization.
	K6Organization *string `pulumi:"k6Organization"`
	// The identifier of the stack to install k6 on.
	StackId *string `pulumi:"stackId"`
}

type InstallationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
	CloudAccessPolicyToken pulumi.StringPtrInput
	// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
	GrafanaSaToken pulumi.StringPtrInput
	// The user to use for the installation.
	GrafanaUser pulumi.StringPtrInput
	// Generated token to access the k6 API.
	K6AccessToken pulumi.StringPtrInput
	// The identifier of the k6 organization.
	K6Organization pulumi.StringPtrInput
	// The identifier of the stack to install k6 on.
	StackId pulumi.StringPtrInput
}

func (InstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*installationState)(nil)).Elem()
}

type installationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
	CloudAccessPolicyToken string `pulumi:"cloudAccessPolicyToken"`
	// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
	GrafanaSaToken string `pulumi:"grafanaSaToken"`
	// The user to use for the installation.
	GrafanaUser string `pulumi:"grafanaUser"`
	// The identifier of the stack to install k6 on.
	StackId string `pulumi:"stackId"`
}

// The set of arguments for constructing a Installation resource.
type InstallationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
	CloudAccessPolicyToken pulumi.StringInput
	// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
	GrafanaSaToken pulumi.StringInput
	// The user to use for the installation.
	GrafanaUser pulumi.StringInput
	// The identifier of the stack to install k6 on.
	StackId pulumi.StringInput
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*installationArgs)(nil)).Elem()
}

type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(ctx context.Context) InstallationOutput
}

func (*Installation) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *Installation) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i *Installation) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

// InstallationArrayInput is an input type that accepts InstallationArray and InstallationArrayOutput values.
// You can construct a concrete instance of `InstallationArrayInput` via:
//
//	InstallationArray{ InstallationArgs{...} }
type InstallationArrayInput interface {
	pulumi.Input

	ToInstallationArrayOutput() InstallationArrayOutput
	ToInstallationArrayOutputWithContext(context.Context) InstallationArrayOutput
}

type InstallationArray []InstallationInput

func (InstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Installation)(nil)).Elem()
}

func (i InstallationArray) ToInstallationArrayOutput() InstallationArrayOutput {
	return i.ToInstallationArrayOutputWithContext(context.Background())
}

func (i InstallationArray) ToInstallationArrayOutputWithContext(ctx context.Context) InstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationArrayOutput)
}

// InstallationMapInput is an input type that accepts InstallationMap and InstallationMapOutput values.
// You can construct a concrete instance of `InstallationMapInput` via:
//
//	InstallationMap{ "key": InstallationArgs{...} }
type InstallationMapInput interface {
	pulumi.Input

	ToInstallationMapOutput() InstallationMapOutput
	ToInstallationMapOutputWithContext(context.Context) InstallationMapOutput
}

type InstallationMap map[string]InstallationInput

func (InstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Installation)(nil)).Elem()
}

func (i InstallationMap) ToInstallationMapOutput() InstallationMapOutput {
	return i.ToInstallationMapOutputWithContext(context.Background())
}

func (i InstallationMap) ToInstallationMapOutputWithContext(ctx context.Context) InstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationMapOutput)
}

type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/).
func (o InstallationOutput) CloudAccessPolicyToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.CloudAccessPolicyToken }).(pulumi.StringOutput)
}

// The [service account](https://grafana.com/docs/grafana/latest/administration/service-accounts/) token.
func (o InstallationOutput) GrafanaSaToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.GrafanaSaToken }).(pulumi.StringOutput)
}

// The user to use for the installation.
func (o InstallationOutput) GrafanaUser() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.GrafanaUser }).(pulumi.StringOutput)
}

// Generated token to access the k6 API.
func (o InstallationOutput) K6AccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.K6AccessToken }).(pulumi.StringOutput)
}

// The identifier of the k6 organization.
func (o InstallationOutput) K6Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.K6Organization }).(pulumi.StringOutput)
}

// The identifier of the stack to install k6 on.
func (o InstallationOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

type InstallationArrayOutput struct{ *pulumi.OutputState }

func (InstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Installation)(nil)).Elem()
}

func (o InstallationArrayOutput) ToInstallationArrayOutput() InstallationArrayOutput {
	return o
}

func (o InstallationArrayOutput) ToInstallationArrayOutputWithContext(ctx context.Context) InstallationArrayOutput {
	return o
}

func (o InstallationArrayOutput) Index(i pulumi.IntInput) InstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Installation {
		return vs[0].([]*Installation)[vs[1].(int)]
	}).(InstallationOutput)
}

type InstallationMapOutput struct{ *pulumi.OutputState }

func (InstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Installation)(nil)).Elem()
}

func (o InstallationMapOutput) ToInstallationMapOutput() InstallationMapOutput {
	return o
}

func (o InstallationMapOutput) ToInstallationMapOutputWithContext(ctx context.Context) InstallationMapOutput {
	return o
}

func (o InstallationMapOutput) MapIndex(k pulumi.StringInput) InstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Installation {
		return vs[0].(map[string]*Installation)[vs[1].(string)]
	}).(InstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationInput)(nil)).Elem(), &Installation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationArrayInput)(nil)).Elem(), InstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationMapInput)(nil)).Elem(), InstallationMap{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationArrayOutput{})
	pulumi.RegisterOutputType(InstallationMapOutput{})
}
