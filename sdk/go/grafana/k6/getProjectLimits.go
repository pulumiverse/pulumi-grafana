// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Retrieves a k6 project limits.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProjectLimits, err := k6.NewProject(ctx, "test_project_limits", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Project Test Limits"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = k6.LookupProjectLimitsOutput(ctx, k6.GetProjectLimitsOutputArgs{
//				ProjectId: testProjectLimits.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupProjectLimits(ctx *pulumi.Context, args *LookupProjectLimitsArgs, opts ...pulumi.InvokeOption) (*LookupProjectLimitsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectLimitsResult
	err := ctx.Invoke("grafana:k6/getProjectLimits:getProjectLimits", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectLimits.
type LookupProjectLimitsArgs struct {
	// The identifier of the project to get limits for.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectLimits.
type LookupProjectLimitsResult struct {
	// Maximum duration of a test in seconds.
	DurationMaxPerTest int `pulumi:"durationMaxPerTest"`
	// The identifier of the project limits. This is set to the same as the project_id.
	Id string `pulumi:"id"`
	// The identifier of the project to get limits for.
	ProjectId string `pulumi:"projectId"`
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest int `pulumi:"vuBrowserMaxPerTest"`
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest int `pulumi:"vuMaxPerTest"`
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth int `pulumi:"vuhMaxPerMonth"`
}

func LookupProjectLimitsOutput(ctx *pulumi.Context, args LookupProjectLimitsOutputArgs, opts ...pulumi.InvokeOption) LookupProjectLimitsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectLimitsResultOutput, error) {
			args := v.(LookupProjectLimitsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:k6/getProjectLimits:getProjectLimits", args, LookupProjectLimitsResultOutput{}, options).(LookupProjectLimitsResultOutput), nil
		}).(LookupProjectLimitsResultOutput)
}

// A collection of arguments for invoking getProjectLimits.
type LookupProjectLimitsOutputArgs struct {
	// The identifier of the project to get limits for.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupProjectLimitsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectLimitsArgs)(nil)).Elem()
}

// A collection of values returned by getProjectLimits.
type LookupProjectLimitsResultOutput struct{ *pulumi.OutputState }

func (LookupProjectLimitsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectLimitsResult)(nil)).Elem()
}

func (o LookupProjectLimitsResultOutput) ToLookupProjectLimitsResultOutput() LookupProjectLimitsResultOutput {
	return o
}

func (o LookupProjectLimitsResultOutput) ToLookupProjectLimitsResultOutputWithContext(ctx context.Context) LookupProjectLimitsResultOutput {
	return o
}

// Maximum duration of a test in seconds.
func (o LookupProjectLimitsResultOutput) DurationMaxPerTest() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) int { return v.DurationMaxPerTest }).(pulumi.IntOutput)
}

// The identifier of the project limits. This is set to the same as the project_id.
func (o LookupProjectLimitsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the project to get limits for.
func (o LookupProjectLimitsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Maximum number of concurrent browser virtual users (VUs) used in one test.
func (o LookupProjectLimitsResultOutput) VuBrowserMaxPerTest() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) int { return v.VuBrowserMaxPerTest }).(pulumi.IntOutput)
}

// Maximum number of concurrent virtual users (VUs) used in one test.
func (o LookupProjectLimitsResultOutput) VuMaxPerTest() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) int { return v.VuMaxPerTest }).(pulumi.IntOutput)
}

// Maximum amount of virtual user hours (VU/h) used per one calendar month.
func (o LookupProjectLimitsResultOutput) VuhMaxPerMonth() pulumi.IntOutput {
	return o.ApplyT(func(v LookupProjectLimitsResult) int { return v.VuhMaxPerMonth }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectLimitsResultOutput{})
}
