// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Retrieves a k6 schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			scheduleProject, err := k6.NewProject(ctx, "schedule_project", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Schedule Test Project"),
//			})
//			if err != nil {
//				return err
//			}
//			scheduleLoadTest, err := k6.NewLoadTest(ctx, "schedule_load_test", &k6.LoadTestArgs{
//				ProjectId: scheduleProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test for Schedule"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6 schedule test!');\n}\n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				scheduleProject,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewSchedule(ctx, "test_schedule", &k6.ScheduleArgs{
//				LoadTestId: scheduleLoadTest.ID(),
//				Starts:     pulumi.String("2024-12-25T10:00:00Z"),
//				RecurrenceRule: &k6.ScheduleRecurrenceRuleArgs{
//					Frequency: pulumi.String("MONTHLY"),
//					Interval:  pulumi.Int(12),
//					Count:     pulumi.Int(100),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				scheduleLoadTest,
//			}))
//			if err != nil {
//				return err
//			}
//			fromLoadTest := k6.LookupScheduleOutput(ctx, k6.GetScheduleOutputArgs{
//				LoadTestId: scheduleLoadTest.ID(),
//			}, nil)
//			ctx.Export("completeScheduleInfo", pulumi.Map{
//				"id": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*string, error) {
//					return &fromLoadTest.Id, nil
//				}).(pulumi.StringPtrOutput),
//				"loadTestId": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*string, error) {
//					return &fromLoadTest.LoadTestId, nil
//				}).(pulumi.StringPtrOutput),
//				"starts": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*string, error) {
//					return &fromLoadTest.Starts, nil
//				}).(pulumi.StringPtrOutput),
//				"deactivated": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*bool, error) {
//					return &fromLoadTest.Deactivated, nil
//				}).(pulumi.BoolPtrOutput),
//				"nextRun": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*string, error) {
//					return &fromLoadTest.NextRun, nil
//				}).(pulumi.StringPtrOutput),
//				"createdBy": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (*string, error) {
//					return &fromLoadTest.CreatedBy, nil
//				}).(pulumi.StringPtrOutput),
//				"recurrenceRule": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (k6.GetScheduleRecurrenceRule, error) {
//					return fromLoadTest.RecurrenceRule, nil
//				}).(k6.GetScheduleRecurrenceRuleOutput),
//				"cron": fromLoadTest.ApplyT(func(fromLoadTest k6.GetScheduleResult) (k6.GetScheduleCron, error) {
//					return fromLoadTest.Cron, nil
//				}).(k6.GetScheduleCronOutput),
//			})
//			return nil
//		})
//	}
//
// ```
func LookupSchedule(ctx *pulumi.Context, args *LookupScheduleArgs, opts ...pulumi.InvokeOption) (*LookupScheduleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupScheduleResult
	err := ctx.Invoke("grafana:k6/getSchedule:getSchedule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSchedule.
type LookupScheduleArgs struct {
	// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
	Cron *GetScheduleCron `pulumi:"cron"`
	// The identifier of the load test to retrieve the schedule for.
	LoadTestId string `pulumi:"loadTestId"`
	// The schedule recurrence settings. If null, the test will run only once on the starts date.
	RecurrenceRule *GetScheduleRecurrenceRule `pulumi:"recurrenceRule"`
}

// A collection of values returned by getSchedule.
type LookupScheduleResult struct {
	// The email of the user who created the schedule.
	CreatedBy string `pulumi:"createdBy"`
	// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
	Cron *GetScheduleCron `pulumi:"cron"`
	// Whether the schedule is deactivated.
	Deactivated bool `pulumi:"deactivated"`
	// Numeric identifier of the schedule.
	Id string `pulumi:"id"`
	// The identifier of the load test to retrieve the schedule for.
	LoadTestId string `pulumi:"loadTestId"`
	// The next scheduled execution time.
	NextRun string `pulumi:"nextRun"`
	// The schedule recurrence settings. If null, the test will run only once on the starts date.
	RecurrenceRule *GetScheduleRecurrenceRule `pulumi:"recurrenceRule"`
	// The start time for the schedule (RFC3339 format).
	Starts string `pulumi:"starts"`
}

func LookupScheduleOutput(ctx *pulumi.Context, args LookupScheduleOutputArgs, opts ...pulumi.InvokeOption) LookupScheduleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupScheduleResultOutput, error) {
			args := v.(LookupScheduleArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:k6/getSchedule:getSchedule", args, LookupScheduleResultOutput{}, options).(LookupScheduleResultOutput), nil
		}).(LookupScheduleResultOutput)
}

// A collection of arguments for invoking getSchedule.
type LookupScheduleOutputArgs struct {
	// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
	Cron GetScheduleCronPtrInput `pulumi:"cron"`
	// The identifier of the load test to retrieve the schedule for.
	LoadTestId pulumi.StringInput `pulumi:"loadTestId"`
	// The schedule recurrence settings. If null, the test will run only once on the starts date.
	RecurrenceRule GetScheduleRecurrenceRulePtrInput `pulumi:"recurrenceRule"`
}

func (LookupScheduleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleArgs)(nil)).Elem()
}

// A collection of values returned by getSchedule.
type LookupScheduleResultOutput struct{ *pulumi.OutputState }

func (LookupScheduleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupScheduleResult)(nil)).Elem()
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutput() LookupScheduleResultOutput {
	return o
}

func (o LookupScheduleResultOutput) ToLookupScheduleResultOutputWithContext(ctx context.Context) LookupScheduleResultOutput {
	return o
}

// The email of the user who created the schedule.
func (o LookupScheduleResultOutput) CreatedBy() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.CreatedBy }).(pulumi.StringOutput)
}

// The cron schedule to trigger the test periodically. If null, the test will run only once on the 'starts' date.
func (o LookupScheduleResultOutput) Cron() GetScheduleCronPtrOutput {
	return o.ApplyT(func(v LookupScheduleResult) *GetScheduleCron { return v.Cron }).(GetScheduleCronPtrOutput)
}

// Whether the schedule is deactivated.
func (o LookupScheduleResultOutput) Deactivated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupScheduleResult) bool { return v.Deactivated }).(pulumi.BoolOutput)
}

// Numeric identifier of the schedule.
func (o LookupScheduleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The identifier of the load test to retrieve the schedule for.
func (o LookupScheduleResultOutput) LoadTestId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.LoadTestId }).(pulumi.StringOutput)
}

// The next scheduled execution time.
func (o LookupScheduleResultOutput) NextRun() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.NextRun }).(pulumi.StringOutput)
}

// The schedule recurrence settings. If null, the test will run only once on the starts date.
func (o LookupScheduleResultOutput) RecurrenceRule() GetScheduleRecurrenceRulePtrOutput {
	return o.ApplyT(func(v LookupScheduleResult) *GetScheduleRecurrenceRule { return v.RecurrenceRule }).(GetScheduleRecurrenceRulePtrOutput)
}

// The start time for the schedule (RFC3339 format).
func (o LookupScheduleResultOutput) Starts() pulumi.StringOutput {
	return o.ApplyT(func(v LookupScheduleResult) string { return v.Starts }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupScheduleResultOutput{})
}
