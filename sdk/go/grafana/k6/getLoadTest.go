// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Retrieves a k6 load test.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			loadTestProject, err := k6.NewProject(ctx, "load_test_project", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Load Test Project"),
//			})
//			if err != nil {
//				return err
//			}
//			testLoadTest, err := k6.NewLoadTest(ctx, "test_load_test", &k6.LoadTestArgs{
//				ProjectId: loadTestProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6!');\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = k6.LookupLoadTestOutput(ctx, k6.GetLoadTestOutputArgs{
//				Id: testLoadTest.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupLoadTest(ctx *pulumi.Context, args *LookupLoadTestArgs, opts ...pulumi.InvokeOption) (*LookupLoadTestResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoadTestResult
	err := ctx.Invoke("grafana:k6/getLoadTest:getLoadTest", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoadTest.
type LookupLoadTestArgs struct {
	// Numeric identifier of the load test.
	Id string `pulumi:"id"`
}

// A collection of values returned by getLoadTest.
type LookupLoadTestResult struct {
	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId string `pulumi:"baselineTestRunId"`
	// The date when the load test was created.
	Created string `pulumi:"created"`
	// Numeric identifier of the load test.
	Id string `pulumi:"id"`
	// Human-friendly identifier of the load test.
	Name string `pulumi:"name"`
	// The identifier of the project this load test belongs to.
	ProjectId string `pulumi:"projectId"`
	// The k6 test script content.
	Script string `pulumi:"script"`
	// The date when the load test was last updated.
	Updated string `pulumi:"updated"`
}

func LookupLoadTestOutput(ctx *pulumi.Context, args LookupLoadTestOutputArgs, opts ...pulumi.InvokeOption) LookupLoadTestResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupLoadTestResultOutput, error) {
			args := v.(LookupLoadTestArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:k6/getLoadTest:getLoadTest", args, LookupLoadTestResultOutput{}, options).(LookupLoadTestResultOutput), nil
		}).(LookupLoadTestResultOutput)
}

// A collection of arguments for invoking getLoadTest.
type LookupLoadTestOutputArgs struct {
	// Numeric identifier of the load test.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupLoadTestOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadTestArgs)(nil)).Elem()
}

// A collection of values returned by getLoadTest.
type LookupLoadTestResultOutput struct{ *pulumi.OutputState }

func (LookupLoadTestResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoadTestResult)(nil)).Elem()
}

func (o LookupLoadTestResultOutput) ToLookupLoadTestResultOutput() LookupLoadTestResultOutput {
	return o
}

func (o LookupLoadTestResultOutput) ToLookupLoadTestResultOutputWithContext(ctx context.Context) LookupLoadTestResultOutput {
	return o
}

// Identifier of a baseline test run used for results comparison.
func (o LookupLoadTestResultOutput) BaselineTestRunId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.BaselineTestRunId }).(pulumi.StringOutput)
}

// The date when the load test was created.
func (o LookupLoadTestResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.Created }).(pulumi.StringOutput)
}

// Numeric identifier of the load test.
func (o LookupLoadTestResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.Id }).(pulumi.StringOutput)
}

// Human-friendly identifier of the load test.
func (o LookupLoadTestResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the project this load test belongs to.
func (o LookupLoadTestResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// The k6 test script content.
func (o LookupLoadTestResultOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.Script }).(pulumi.StringOutput)
}

// The date when the load test was last updated.
func (o LookupLoadTestResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoadTestResult) string { return v.Updated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoadTestResultOutput{})
}
