// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Retrieves all k6 schedules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			schedulesProject, err := k6.NewProject(ctx, "schedules_project", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Schedules Test Project"),
//			})
//			if err != nil {
//				return err
//			}
//			schedulesLoadTest, err := k6.NewLoadTest(ctx, "schedules_load_test", &k6.LoadTestArgs{
//				ProjectId: schedulesProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test for Schedules"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6 schedules test!');\n}\n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesProject,
//			}))
//			if err != nil {
//				return err
//			}
//			schedulesLoadTest2, err := k6.NewLoadTest(ctx, "schedules_load_test_2", &k6.LoadTestArgs{
//				ProjectId: schedulesProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test for Schedules (2)"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6 schedules test!');\n}\n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesProject,
//			}))
//			if err != nil {
//				return err
//			}
//			schedulesLoadTest3, err := k6.NewLoadTest(ctx, "schedules_load_test_3", &k6.LoadTestArgs{
//				ProjectId: schedulesProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test for Schedules (3)"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6 schedules test!');\n}\n"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesProject,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewSchedule(ctx, "test_schedule_1", &k6.ScheduleArgs{
//				LoadTestId: schedulesLoadTest.ID(),
//				Starts:     pulumi.String("2029-12-25T10:00:00Z"),
//				RecurrenceRule: &k6.ScheduleRecurrenceRuleArgs{
//					Frequency: pulumi.String("MONTHLY"),
//					Interval:  pulumi.Int(15),
//					Count:     pulumi.Int(100),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesLoadTest,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewSchedule(ctx, "test_schedule_2", &k6.ScheduleArgs{
//				LoadTestId: schedulesLoadTest2.ID(),
//				Starts:     pulumi.String("2023-12-26T14:00:00Z"),
//				RecurrenceRule: &k6.ScheduleRecurrenceRuleArgs{
//					Frequency: pulumi.String("WEEKLY"),
//					Interval:  pulumi.Int(2),
//					Until:     pulumi.String("2047-01-31T23:59:59Z"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesLoadTest2,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewSchedule(ctx, "test_schedule_3", &k6.ScheduleArgs{
//				LoadTestId: schedulesLoadTest3.ID(),
//				Starts:     pulumi.String("2023-12-26T14:00:00Z"),
//				Cron: &k6.ScheduleCronArgs{
//					Schedule: pulumi.String("0 10 1 12 6"),
//					Timezone: pulumi.String("UTC"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				schedulesLoadTest3,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = k6.GetSchedules(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetSchedules(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetSchedulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSchedulesResult
	err := ctx.Invoke("grafana:k6/getSchedules:getSchedules", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getSchedules.
type GetSchedulesResult struct {
	// The identifier for this data source.
	Id string `pulumi:"id"`
	// List of k6 schedules.
	Schedules []GetSchedulesSchedule `pulumi:"schedules"`
}

func GetSchedulesOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetSchedulesResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetSchedulesResultOutput, error) {
		options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
		return ctx.InvokeOutput("grafana:k6/getSchedules:getSchedules", nil, GetSchedulesResultOutput{}, options).(GetSchedulesResultOutput), nil
	}).(GetSchedulesResultOutput)
}

// A collection of values returned by getSchedules.
type GetSchedulesResultOutput struct{ *pulumi.OutputState }

func (GetSchedulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchedulesResult)(nil)).Elem()
}

func (o GetSchedulesResultOutput) ToGetSchedulesResultOutput() GetSchedulesResultOutput {
	return o
}

func (o GetSchedulesResultOutput) ToGetSchedulesResultOutputWithContext(ctx context.Context) GetSchedulesResultOutput {
	return o
}

// The identifier for this data source.
func (o GetSchedulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchedulesResult) string { return v.Id }).(pulumi.StringOutput)
}

// List of k6 schedules.
func (o GetSchedulesResultOutput) Schedules() GetSchedulesScheduleArrayOutput {
	return o.ApplyT(func(v GetSchedulesResult) []GetSchedulesSchedule { return v.Schedules }).(GetSchedulesScheduleArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSchedulesResultOutput{})
}
