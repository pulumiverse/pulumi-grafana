// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages limits for a k6 project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testProjectLimits, err := k6.NewProject(ctx, "test_project_limits", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Project Test Limits"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewProjectLimits(ctx, "test_limits", &k6.ProjectLimitsArgs{
//				ProjectId:           testProjectLimits.ID(),
//				VuhMaxPerMonth:      pulumi.Int(1000),
//				VuMaxPerTest:        pulumi.Int(100),
//				VuBrowserMaxPerTest: pulumi.Int(10),
//				DurationMaxPerTest:  pulumi.Int(3600),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:k6/projectLimits:ProjectLimits name "{{ project_id }}"
// ```
type ProjectLimits struct {
	pulumi.CustomResourceState

	// Maximum duration of a test in seconds.
	DurationMaxPerTest pulumi.IntPtrOutput `pulumi:"durationMaxPerTest"`
	// The identifier of the project to manage limits for.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest pulumi.IntPtrOutput `pulumi:"vuBrowserMaxPerTest"`
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest pulumi.IntPtrOutput `pulumi:"vuMaxPerTest"`
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth pulumi.IntPtrOutput `pulumi:"vuhMaxPerMonth"`
}

// NewProjectLimits registers a new resource with the given unique name, arguments, and options.
func NewProjectLimits(ctx *pulumi.Context,
	name string, args *ProjectLimitsArgs, opts ...pulumi.ResourceOption) (*ProjectLimits, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ProjectLimits
	err := ctx.RegisterResource("grafana:k6/projectLimits:ProjectLimits", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProjectLimits gets an existing ProjectLimits resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProjectLimits(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectLimitsState, opts ...pulumi.ResourceOption) (*ProjectLimits, error) {
	var resource ProjectLimits
	err := ctx.ReadResource("grafana:k6/projectLimits:ProjectLimits", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProjectLimits resources.
type projectLimitsState struct {
	// Maximum duration of a test in seconds.
	DurationMaxPerTest *int `pulumi:"durationMaxPerTest"`
	// The identifier of the project to manage limits for.
	ProjectId *string `pulumi:"projectId"`
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest *int `pulumi:"vuBrowserMaxPerTest"`
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest *int `pulumi:"vuMaxPerTest"`
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth *int `pulumi:"vuhMaxPerMonth"`
}

type ProjectLimitsState struct {
	// Maximum duration of a test in seconds.
	DurationMaxPerTest pulumi.IntPtrInput
	// The identifier of the project to manage limits for.
	ProjectId pulumi.StringPtrInput
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest pulumi.IntPtrInput
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest pulumi.IntPtrInput
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth pulumi.IntPtrInput
}

func (ProjectLimitsState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLimitsState)(nil)).Elem()
}

type projectLimitsArgs struct {
	// Maximum duration of a test in seconds.
	DurationMaxPerTest *int `pulumi:"durationMaxPerTest"`
	// The identifier of the project to manage limits for.
	ProjectId string `pulumi:"projectId"`
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest *int `pulumi:"vuBrowserMaxPerTest"`
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest *int `pulumi:"vuMaxPerTest"`
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth *int `pulumi:"vuhMaxPerMonth"`
}

// The set of arguments for constructing a ProjectLimits resource.
type ProjectLimitsArgs struct {
	// Maximum duration of a test in seconds.
	DurationMaxPerTest pulumi.IntPtrInput
	// The identifier of the project to manage limits for.
	ProjectId pulumi.StringInput
	// Maximum number of concurrent browser virtual users (VUs) used in one test.
	VuBrowserMaxPerTest pulumi.IntPtrInput
	// Maximum number of concurrent virtual users (VUs) used in one test.
	VuMaxPerTest pulumi.IntPtrInput
	// Maximum amount of virtual user hours (VU/h) used per one calendar month.
	VuhMaxPerMonth pulumi.IntPtrInput
}

func (ProjectLimitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectLimitsArgs)(nil)).Elem()
}

type ProjectLimitsInput interface {
	pulumi.Input

	ToProjectLimitsOutput() ProjectLimitsOutput
	ToProjectLimitsOutputWithContext(ctx context.Context) ProjectLimitsOutput
}

func (*ProjectLimits) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLimits)(nil)).Elem()
}

func (i *ProjectLimits) ToProjectLimitsOutput() ProjectLimitsOutput {
	return i.ToProjectLimitsOutputWithContext(context.Background())
}

func (i *ProjectLimits) ToProjectLimitsOutputWithContext(ctx context.Context) ProjectLimitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLimitsOutput)
}

// ProjectLimitsArrayInput is an input type that accepts ProjectLimitsArray and ProjectLimitsArrayOutput values.
// You can construct a concrete instance of `ProjectLimitsArrayInput` via:
//
//	ProjectLimitsArray{ ProjectLimitsArgs{...} }
type ProjectLimitsArrayInput interface {
	pulumi.Input

	ToProjectLimitsArrayOutput() ProjectLimitsArrayOutput
	ToProjectLimitsArrayOutputWithContext(context.Context) ProjectLimitsArrayOutput
}

type ProjectLimitsArray []ProjectLimitsInput

func (ProjectLimitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectLimits)(nil)).Elem()
}

func (i ProjectLimitsArray) ToProjectLimitsArrayOutput() ProjectLimitsArrayOutput {
	return i.ToProjectLimitsArrayOutputWithContext(context.Background())
}

func (i ProjectLimitsArray) ToProjectLimitsArrayOutputWithContext(ctx context.Context) ProjectLimitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLimitsArrayOutput)
}

// ProjectLimitsMapInput is an input type that accepts ProjectLimitsMap and ProjectLimitsMapOutput values.
// You can construct a concrete instance of `ProjectLimitsMapInput` via:
//
//	ProjectLimitsMap{ "key": ProjectLimitsArgs{...} }
type ProjectLimitsMapInput interface {
	pulumi.Input

	ToProjectLimitsMapOutput() ProjectLimitsMapOutput
	ToProjectLimitsMapOutputWithContext(context.Context) ProjectLimitsMapOutput
}

type ProjectLimitsMap map[string]ProjectLimitsInput

func (ProjectLimitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectLimits)(nil)).Elem()
}

func (i ProjectLimitsMap) ToProjectLimitsMapOutput() ProjectLimitsMapOutput {
	return i.ToProjectLimitsMapOutputWithContext(context.Background())
}

func (i ProjectLimitsMap) ToProjectLimitsMapOutputWithContext(ctx context.Context) ProjectLimitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectLimitsMapOutput)
}

type ProjectLimitsOutput struct{ *pulumi.OutputState }

func (ProjectLimitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProjectLimits)(nil)).Elem()
}

func (o ProjectLimitsOutput) ToProjectLimitsOutput() ProjectLimitsOutput {
	return o
}

func (o ProjectLimitsOutput) ToProjectLimitsOutputWithContext(ctx context.Context) ProjectLimitsOutput {
	return o
}

// Maximum duration of a test in seconds.
func (o ProjectLimitsOutput) DurationMaxPerTest() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectLimits) pulumi.IntPtrOutput { return v.DurationMaxPerTest }).(pulumi.IntPtrOutput)
}

// The identifier of the project to manage limits for.
func (o ProjectLimitsOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ProjectLimits) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Maximum number of concurrent browser virtual users (VUs) used in one test.
func (o ProjectLimitsOutput) VuBrowserMaxPerTest() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectLimits) pulumi.IntPtrOutput { return v.VuBrowserMaxPerTest }).(pulumi.IntPtrOutput)
}

// Maximum number of concurrent virtual users (VUs) used in one test.
func (o ProjectLimitsOutput) VuMaxPerTest() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectLimits) pulumi.IntPtrOutput { return v.VuMaxPerTest }).(pulumi.IntPtrOutput)
}

// Maximum amount of virtual user hours (VU/h) used per one calendar month.
func (o ProjectLimitsOutput) VuhMaxPerMonth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProjectLimits) pulumi.IntPtrOutput { return v.VuhMaxPerMonth }).(pulumi.IntPtrOutput)
}

type ProjectLimitsArrayOutput struct{ *pulumi.OutputState }

func (ProjectLimitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProjectLimits)(nil)).Elem()
}

func (o ProjectLimitsArrayOutput) ToProjectLimitsArrayOutput() ProjectLimitsArrayOutput {
	return o
}

func (o ProjectLimitsArrayOutput) ToProjectLimitsArrayOutputWithContext(ctx context.Context) ProjectLimitsArrayOutput {
	return o
}

func (o ProjectLimitsArrayOutput) Index(i pulumi.IntInput) ProjectLimitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProjectLimits {
		return vs[0].([]*ProjectLimits)[vs[1].(int)]
	}).(ProjectLimitsOutput)
}

type ProjectLimitsMapOutput struct{ *pulumi.OutputState }

func (ProjectLimitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProjectLimits)(nil)).Elem()
}

func (o ProjectLimitsMapOutput) ToProjectLimitsMapOutput() ProjectLimitsMapOutput {
	return o
}

func (o ProjectLimitsMapOutput) ToProjectLimitsMapOutputWithContext(ctx context.Context) ProjectLimitsMapOutput {
	return o
}

func (o ProjectLimitsMapOutput) MapIndex(k pulumi.StringInput) ProjectLimitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProjectLimits {
		return vs[0].(map[string]*ProjectLimits)[vs[1].(string)]
	}).(ProjectLimitsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLimitsInput)(nil)).Elem(), &ProjectLimits{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLimitsArrayInput)(nil)).Elem(), ProjectLimitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectLimitsMapInput)(nil)).Elem(), ProjectLimitsMap{})
	pulumi.RegisterOutputType(ProjectLimitsOutput{})
	pulumi.RegisterOutputType(ProjectLimitsArrayOutput{})
	pulumi.RegisterOutputType(ProjectLimitsMapOutput{})
}
