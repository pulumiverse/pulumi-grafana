// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package k6

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages a k6 load test.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/k6"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			loadTestProject, err := k6.NewProject(ctx, "load_test_project", &k6.ProjectArgs{
//				Name: pulumi.String("Terraform Load Test Project"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = k6.NewLoadTest(ctx, "test_load_test", &k6.LoadTestArgs{
//				ProjectId: loadTestProject.ID(),
//				Name:      pulumi.String("Terraform Test Load Test"),
//				Script:    pulumi.String("export default function() {\n  console.log('Hello from k6!');\n}\n"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:k6/loadTest:LoadTest name "{{ id }}"
// ```
type LoadTest struct {
	pulumi.CustomResourceState

	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId pulumi.StringPtrOutput `pulumi:"baselineTestRunId"`
	// The date when the load test was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Human-friendly identifier of the load test.
	Name pulumi.StringOutput `pulumi:"name"`
	// The identifier of the project this load test belongs to.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The k6 test script content. Can be provided inline or via the `file()` function.
	Script pulumi.StringOutput `pulumi:"script"`
	// The date when the load test was last updated.
	Updated pulumi.StringOutput `pulumi:"updated"`
}

// NewLoadTest registers a new resource with the given unique name, arguments, and options.
func NewLoadTest(ctx *pulumi.Context,
	name string, args *LoadTestArgs, opts ...pulumi.ResourceOption) (*LoadTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoadTest
	err := ctx.RegisterResource("grafana:k6/loadTest:LoadTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadTest gets an existing LoadTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadTestState, opts ...pulumi.ResourceOption) (*LoadTest, error) {
	var resource LoadTest
	err := ctx.ReadResource("grafana:k6/loadTest:LoadTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadTest resources.
type loadTestState struct {
	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId *string `pulumi:"baselineTestRunId"`
	// The date when the load test was created.
	Created *string `pulumi:"created"`
	// Human-friendly identifier of the load test.
	Name *string `pulumi:"name"`
	// The identifier of the project this load test belongs to.
	ProjectId *string `pulumi:"projectId"`
	// The k6 test script content. Can be provided inline or via the `file()` function.
	Script *string `pulumi:"script"`
	// The date when the load test was last updated.
	Updated *string `pulumi:"updated"`
}

type LoadTestState struct {
	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId pulumi.StringPtrInput
	// The date when the load test was created.
	Created pulumi.StringPtrInput
	// Human-friendly identifier of the load test.
	Name pulumi.StringPtrInput
	// The identifier of the project this load test belongs to.
	ProjectId pulumi.StringPtrInput
	// The k6 test script content. Can be provided inline or via the `file()` function.
	Script pulumi.StringPtrInput
	// The date when the load test was last updated.
	Updated pulumi.StringPtrInput
}

func (LoadTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadTestState)(nil)).Elem()
}

type loadTestArgs struct {
	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId *string `pulumi:"baselineTestRunId"`
	// Human-friendly identifier of the load test.
	Name *string `pulumi:"name"`
	// The identifier of the project this load test belongs to.
	ProjectId string `pulumi:"projectId"`
	// The k6 test script content. Can be provided inline or via the `file()` function.
	Script string `pulumi:"script"`
}

// The set of arguments for constructing a LoadTest resource.
type LoadTestArgs struct {
	// Identifier of a baseline test run used for results comparison.
	BaselineTestRunId pulumi.StringPtrInput
	// Human-friendly identifier of the load test.
	Name pulumi.StringPtrInput
	// The identifier of the project this load test belongs to.
	ProjectId pulumi.StringInput
	// The k6 test script content. Can be provided inline or via the `file()` function.
	Script pulumi.StringInput
}

func (LoadTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadTestArgs)(nil)).Elem()
}

type LoadTestInput interface {
	pulumi.Input

	ToLoadTestOutput() LoadTestOutput
	ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput
}

func (*LoadTest) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadTest)(nil)).Elem()
}

func (i *LoadTest) ToLoadTestOutput() LoadTestOutput {
	return i.ToLoadTestOutputWithContext(context.Background())
}

func (i *LoadTest) ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestOutput)
}

// LoadTestArrayInput is an input type that accepts LoadTestArray and LoadTestArrayOutput values.
// You can construct a concrete instance of `LoadTestArrayInput` via:
//
//	LoadTestArray{ LoadTestArgs{...} }
type LoadTestArrayInput interface {
	pulumi.Input

	ToLoadTestArrayOutput() LoadTestArrayOutput
	ToLoadTestArrayOutputWithContext(context.Context) LoadTestArrayOutput
}

type LoadTestArray []LoadTestInput

func (LoadTestArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadTest)(nil)).Elem()
}

func (i LoadTestArray) ToLoadTestArrayOutput() LoadTestArrayOutput {
	return i.ToLoadTestArrayOutputWithContext(context.Background())
}

func (i LoadTestArray) ToLoadTestArrayOutputWithContext(ctx context.Context) LoadTestArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestArrayOutput)
}

// LoadTestMapInput is an input type that accepts LoadTestMap and LoadTestMapOutput values.
// You can construct a concrete instance of `LoadTestMapInput` via:
//
//	LoadTestMap{ "key": LoadTestArgs{...} }
type LoadTestMapInput interface {
	pulumi.Input

	ToLoadTestMapOutput() LoadTestMapOutput
	ToLoadTestMapOutputWithContext(context.Context) LoadTestMapOutput
}

type LoadTestMap map[string]LoadTestInput

func (LoadTestMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadTest)(nil)).Elem()
}

func (i LoadTestMap) ToLoadTestMapOutput() LoadTestMapOutput {
	return i.ToLoadTestMapOutputWithContext(context.Background())
}

func (i LoadTestMap) ToLoadTestMapOutputWithContext(ctx context.Context) LoadTestMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadTestMapOutput)
}

type LoadTestOutput struct{ *pulumi.OutputState }

func (LoadTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadTest)(nil)).Elem()
}

func (o LoadTestOutput) ToLoadTestOutput() LoadTestOutput {
	return o
}

func (o LoadTestOutput) ToLoadTestOutputWithContext(ctx context.Context) LoadTestOutput {
	return o
}

// Identifier of a baseline test run used for results comparison.
func (o LoadTestOutput) BaselineTestRunId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringPtrOutput { return v.BaselineTestRunId }).(pulumi.StringPtrOutput)
}

// The date when the load test was created.
func (o LoadTestOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Created }).(pulumi.StringOutput)
}

// Human-friendly identifier of the load test.
func (o LoadTestOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The identifier of the project this load test belongs to.
func (o LoadTestOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The k6 test script content. Can be provided inline or via the `file()` function.
func (o LoadTestOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Script }).(pulumi.StringOutput)
}

// The date when the load test was last updated.
func (o LoadTestOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v *LoadTest) pulumi.StringOutput { return v.Updated }).(pulumi.StringOutput)
}

type LoadTestArrayOutput struct{ *pulumi.OutputState }

func (LoadTestArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadTest)(nil)).Elem()
}

func (o LoadTestArrayOutput) ToLoadTestArrayOutput() LoadTestArrayOutput {
	return o
}

func (o LoadTestArrayOutput) ToLoadTestArrayOutputWithContext(ctx context.Context) LoadTestArrayOutput {
	return o
}

func (o LoadTestArrayOutput) Index(i pulumi.IntInput) LoadTestOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoadTest {
		return vs[0].([]*LoadTest)[vs[1].(int)]
	}).(LoadTestOutput)
}

type LoadTestMapOutput struct{ *pulumi.OutputState }

func (LoadTestMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadTest)(nil)).Elem()
}

func (o LoadTestMapOutput) ToLoadTestMapOutput() LoadTestMapOutput {
	return o
}

func (o LoadTestMapOutput) ToLoadTestMapOutputWithContext(ctx context.Context) LoadTestMapOutput {
	return o
}

func (o LoadTestMapOutput) MapIndex(k pulumi.StringInput) LoadTestOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoadTest {
		return vs[0].(map[string]*LoadTest)[vs[1].(string)]
	}).(LoadTestOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestInput)(nil)).Elem(), &LoadTest{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestArrayInput)(nil)).Elem(), LoadTestArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoadTestMapInput)(nil)).Elem(), LoadTestMap{})
	pulumi.RegisterOutputType(LoadTestOutput{})
	pulumi.RegisterOutputType(LoadTestArrayOutput{})
	pulumi.RegisterOutputType(LoadTestMapOutput{})
}
