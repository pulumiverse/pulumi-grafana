// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/team-management/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/team/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			viewer, err := oss.NewUser(ctx, "viewer", &oss.UserArgs{
//				Name:     pulumi.String("Viewer"),
//				Email:    pulumi.String("viewer@example.com"),
//				Login:    pulumi.String("viewer"),
//				Password: pulumi.String("my-password"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewTeam(ctx, "test-team", &oss.TeamArgs{
//				Name:  pulumi.String("Test Team"),
//				Email: pulumi.String("teamemail@example.com"),
//				Members: pulumi.StringArray{
//					viewer.Email,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/team:Team name "{{ id }}"
// ```
//
// ```sh
// $ pulumi import grafana:index/team:Team name "{{ orgID }}:{{ id }}"
// ```
//
// Deprecated: grafana.index/team.Team has been deprecated in favor of grafana.oss/team.Team
type Team struct {
	pulumi.CustomResourceState

	// An email address for the team.
	Email                         pulumi.StringPtrOutput `pulumi:"email"`
	IgnoreExternallySyncedMembers pulumi.BoolPtrOutput   `pulumi:"ignoreExternallySyncedMembers"`
	// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
	// must already exist in Grafana.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The display name for the Grafana team created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId       pulumi.StringPtrOutput   `pulumi:"orgId"`
	Preferences TeamPreferencesPtrOutput `pulumi:"preferences"`
	// The team id assigned to this team by Grafana.
	TeamId pulumi.IntOutput `pulumi:"teamId"`
	// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
	// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
	// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
	TeamSync TeamTeamSyncPtrOutput `pulumi:"teamSync"`
	// The team uid assigned to this team by Grafana.
	TeamUid pulumi.StringOutput `pulumi:"teamUid"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		args = &TeamArgs{}
	}

	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/team:Team"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Team
	err := ctx.RegisterResource("grafana:index/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("grafana:index/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	// An email address for the team.
	Email                         *string `pulumi:"email"`
	IgnoreExternallySyncedMembers *bool   `pulumi:"ignoreExternallySyncedMembers"`
	// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
	// must already exist in Grafana.
	Members []string `pulumi:"members"`
	// The display name for the Grafana team created.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId       *string          `pulumi:"orgId"`
	Preferences *TeamPreferences `pulumi:"preferences"`
	// The team id assigned to this team by Grafana.
	TeamId *int `pulumi:"teamId"`
	// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
	// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
	// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
	TeamSync *TeamTeamSync `pulumi:"teamSync"`
	// The team uid assigned to this team by Grafana.
	TeamUid *string `pulumi:"teamUid"`
}

type TeamState struct {
	// An email address for the team.
	Email                         pulumi.StringPtrInput
	IgnoreExternallySyncedMembers pulumi.BoolPtrInput
	// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
	// must already exist in Grafana.
	Members pulumi.StringArrayInput
	// The display name for the Grafana team created.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId       pulumi.StringPtrInput
	Preferences TeamPreferencesPtrInput
	// The team id assigned to this team by Grafana.
	TeamId pulumi.IntPtrInput
	// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
	// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
	// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
	TeamSync TeamTeamSyncPtrInput
	// The team uid assigned to this team by Grafana.
	TeamUid pulumi.StringPtrInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	// An email address for the team.
	Email                         *string `pulumi:"email"`
	IgnoreExternallySyncedMembers *bool   `pulumi:"ignoreExternallySyncedMembers"`
	// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
	// must already exist in Grafana.
	Members []string `pulumi:"members"`
	// The display name for the Grafana team created.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId       *string          `pulumi:"orgId"`
	Preferences *TeamPreferences `pulumi:"preferences"`
	// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
	// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
	// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
	TeamSync *TeamTeamSync `pulumi:"teamSync"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// An email address for the team.
	Email                         pulumi.StringPtrInput
	IgnoreExternallySyncedMembers pulumi.BoolPtrInput
	// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
	// must already exist in Grafana.
	Members pulumi.StringArrayInput
	// The display name for the Grafana team created.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId       pulumi.StringPtrInput
	Preferences TeamPreferencesPtrInput
	// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
	// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
	// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
	TeamSync TeamTeamSyncPtrInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//	TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//	TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

// An email address for the team.
func (o TeamOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

func (o TeamOutput) IgnoreExternallySyncedMembers() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.BoolPtrOutput { return v.IgnoreExternallySyncedMembers }).(pulumi.BoolPtrOutput)
}

// A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here
// must already exist in Grafana.
func (o TeamOutput) Members() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.Members }).(pulumi.StringArrayOutput)
}

// The display name for the Grafana team created.
func (o TeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o TeamOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Team) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

func (o TeamOutput) Preferences() TeamPreferencesPtrOutput {
	return o.ApplyT(func(v *Team) TeamPreferencesPtrOutput { return v.Preferences }).(TeamPreferencesPtrOutput)
}

// The team id assigned to this team by Grafana.
func (o TeamOutput) TeamId() pulumi.IntOutput {
	return o.ApplyT(func(v *Team) pulumi.IntOutput { return v.TeamId }).(pulumi.IntOutput)
}

// Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official
// documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP
// API](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)
func (o TeamOutput) TeamSync() TeamTeamSyncPtrOutput {
	return o.ApplyT(func(v *Team) TeamTeamSyncPtrOutput { return v.TeamSync }).(TeamTeamSyncPtrOutput)
}

// The team uid assigned to this team by Grafana.
func (o TeamOutput) TeamUid() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.TeamUid }).(pulumi.StringOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Team {
		return vs[0].([]*Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Team {
		return vs[0].(map[string]*Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamInput)(nil)).Elem(), &Team{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamArrayInput)(nil)).Elem(), TeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMapInput)(nil)).Elem(), TeamMap{})
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
