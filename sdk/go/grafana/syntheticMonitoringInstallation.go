// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Sets up Synthetic Monitoring on a Grafana cloud stack and generates a token.
// Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install synthetic monitoring.
// This resource cannot be imported but it can be used on an existing Synthetic Monitoring installation without issues.
//
// **Note that this resource must be used on a provider configured with Grafana Cloud credentials.**
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/)
// * [API documentation](https://github.com/grafana/synthetic-monitoring-api-go-client/blob/main/docs/API.md#apiv1registerinstall)
//
// Required access policy scopes:
//
// * stacks:read
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/cloud"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/syntheticMonitoring"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Cloud Access Policy token for Grafana Cloud with the following scopes: accesspolicies:read|write|delete, stacks:read|write|delete
//			cloudAccessPolicyToken := cfg.RequireObject("cloudAccessPolicyToken")
//			stackSlug := cfg.RequireObject("stackSlug")
//			cloudRegion := "us"
//			if param := cfg.Get("cloudRegion"); param != "" {
//				cloudRegion = param
//			}
//			smStack, err := cloud.NewStack(ctx, "sm_stack", &cloud.StackArgs{
//				Name:       pulumi.Any(stackSlug),
//				Slug:       pulumi.Any(stackSlug),
//				RegionSlug: pulumi.String(cloudRegion),
//			})
//			if err != nil {
//				return err
//			}
//			// Step 2: Install Synthetic Monitoring on the stack
//			smMetricsPublish, err := cloud.NewAccessPolicy(ctx, "sm_metrics_publish", &cloud.AccessPolicyArgs{
//				Region: pulumi.String(cloudRegion),
//				Name:   pulumi.String("metric-publisher-for-sm"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("metrics:write"),
//					pulumi.String("stacks:read"),
//					pulumi.String("logs:write"),
//					pulumi.String("traces:write"),
//				},
//				Realms: cloud.AccessPolicyRealmArray{
//					&cloud.AccessPolicyRealmArgs{
//						Type:       pulumi.String("stack"),
//						Identifier: smStack.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			smMetricsPublishAccessPolicyToken, err := cloud.NewAccessPolicyToken(ctx, "sm_metrics_publish", &cloud.AccessPolicyTokenArgs{
//				Region:         pulumi.String(cloudRegion),
//				AccessPolicyId: smMetricsPublish.PolicyId,
//				Name:           pulumi.String("metric-publisher-for-sm"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = syntheticMonitoring.NewInstallation(ctx, "sm_stack", &syntheticMonitoring.InstallationArgs{
//				StackId:             smStack.ID(),
//				MetricsPublisherKey: smMetricsPublishAccessPolicyToken.Token,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = syntheticMonitoring.GetProbes(ctx, &syntheticmonitoring.GetProbesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: grafana.index/syntheticmonitoringinstallation.SyntheticMonitoringInstallation has been deprecated in favor of grafana.syntheticmonitoring/installation.Installation
type SyntheticMonitoringInstallation struct {
	pulumi.CustomResourceState

	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringOutput `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken pulumi.StringOutput `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringOutput `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringOutput `pulumi:"stackSmApiUrl"`
}

// NewSyntheticMonitoringInstallation registers a new resource with the given unique name, arguments, and options.
func NewSyntheticMonitoringInstallation(ctx *pulumi.Context,
	name string, args *SyntheticMonitoringInstallationArgs, opts ...pulumi.ResourceOption) (*SyntheticMonitoringInstallation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsPublisherKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricsPublisherKey'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.MetricsPublisherKey != nil {
		args.MetricsPublisherKey = pulumi.ToSecret(args.MetricsPublisherKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"metricsPublisherKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SyntheticMonitoringInstallation
	err := ctx.RegisterResource("grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticMonitoringInstallation gets an existing SyntheticMonitoringInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticMonitoringInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticMonitoringInstallationState, opts ...pulumi.ResourceOption) (*SyntheticMonitoringInstallation, error) {
	var resource SyntheticMonitoringInstallation
	err := ctx.ReadResource("grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticMonitoringInstallation resources.
type syntheticMonitoringInstallationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey *string `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken *string `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId *string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

type SyntheticMonitoringInstallationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringPtrInput
	// Generated token to access the SM API.
	SmAccessToken pulumi.StringPtrInput
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringPtrInput
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringPtrInput
}

func (SyntheticMonitoringInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringInstallationState)(nil)).Elem()
}

type syntheticMonitoringInstallationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey string `pulumi:"metricsPublisherKey"`
	// The ID or slug of the stack to install SM on.
	StackId string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

// The set of arguments for constructing a SyntheticMonitoringInstallation resource.
type SyntheticMonitoringInstallationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringInput
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringInput
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringPtrInput
}

func (SyntheticMonitoringInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticMonitoringInstallationArgs)(nil)).Elem()
}

type SyntheticMonitoringInstallationInput interface {
	pulumi.Input

	ToSyntheticMonitoringInstallationOutput() SyntheticMonitoringInstallationOutput
	ToSyntheticMonitoringInstallationOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationOutput
}

func (*SyntheticMonitoringInstallation) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringInstallation)(nil)).Elem()
}

func (i *SyntheticMonitoringInstallation) ToSyntheticMonitoringInstallationOutput() SyntheticMonitoringInstallationOutput {
	return i.ToSyntheticMonitoringInstallationOutputWithContext(context.Background())
}

func (i *SyntheticMonitoringInstallation) ToSyntheticMonitoringInstallationOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringInstallationOutput)
}

// SyntheticMonitoringInstallationArrayInput is an input type that accepts SyntheticMonitoringInstallationArray and SyntheticMonitoringInstallationArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringInstallationArrayInput` via:
//
//	SyntheticMonitoringInstallationArray{ SyntheticMonitoringInstallationArgs{...} }
type SyntheticMonitoringInstallationArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringInstallationArrayOutput() SyntheticMonitoringInstallationArrayOutput
	ToSyntheticMonitoringInstallationArrayOutputWithContext(context.Context) SyntheticMonitoringInstallationArrayOutput
}

type SyntheticMonitoringInstallationArray []SyntheticMonitoringInstallationInput

func (SyntheticMonitoringInstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticMonitoringInstallation)(nil)).Elem()
}

func (i SyntheticMonitoringInstallationArray) ToSyntheticMonitoringInstallationArrayOutput() SyntheticMonitoringInstallationArrayOutput {
	return i.ToSyntheticMonitoringInstallationArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringInstallationArray) ToSyntheticMonitoringInstallationArrayOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringInstallationArrayOutput)
}

// SyntheticMonitoringInstallationMapInput is an input type that accepts SyntheticMonitoringInstallationMap and SyntheticMonitoringInstallationMapOutput values.
// You can construct a concrete instance of `SyntheticMonitoringInstallationMapInput` via:
//
//	SyntheticMonitoringInstallationMap{ "key": SyntheticMonitoringInstallationArgs{...} }
type SyntheticMonitoringInstallationMapInput interface {
	pulumi.Input

	ToSyntheticMonitoringInstallationMapOutput() SyntheticMonitoringInstallationMapOutput
	ToSyntheticMonitoringInstallationMapOutputWithContext(context.Context) SyntheticMonitoringInstallationMapOutput
}

type SyntheticMonitoringInstallationMap map[string]SyntheticMonitoringInstallationInput

func (SyntheticMonitoringInstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticMonitoringInstallation)(nil)).Elem()
}

func (i SyntheticMonitoringInstallationMap) ToSyntheticMonitoringInstallationMapOutput() SyntheticMonitoringInstallationMapOutput {
	return i.ToSyntheticMonitoringInstallationMapOutputWithContext(context.Background())
}

func (i SyntheticMonitoringInstallationMap) ToSyntheticMonitoringInstallationMapOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringInstallationMapOutput)
}

type SyntheticMonitoringInstallationOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringInstallation)(nil)).Elem()
}

func (o SyntheticMonitoringInstallationOutput) ToSyntheticMonitoringInstallationOutput() SyntheticMonitoringInstallationOutput {
	return o
}

func (o SyntheticMonitoringInstallationOutput) ToSyntheticMonitoringInstallationOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationOutput {
	return o
}

// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
func (o SyntheticMonitoringInstallationOutput) MetricsPublisherKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticMonitoringInstallation) pulumi.StringOutput { return v.MetricsPublisherKey }).(pulumi.StringOutput)
}

// Generated token to access the SM API.
func (o SyntheticMonitoringInstallationOutput) SmAccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticMonitoringInstallation) pulumi.StringOutput { return v.SmAccessToken }).(pulumi.StringOutput)
}

// The ID or slug of the stack to install SM on.
func (o SyntheticMonitoringInstallationOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticMonitoringInstallation) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
func (o SyntheticMonitoringInstallationOutput) StackSmApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *SyntheticMonitoringInstallation) pulumi.StringOutput { return v.StackSmApiUrl }).(pulumi.StringOutput)
}

type SyntheticMonitoringInstallationArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringInstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SyntheticMonitoringInstallation)(nil)).Elem()
}

func (o SyntheticMonitoringInstallationArrayOutput) ToSyntheticMonitoringInstallationArrayOutput() SyntheticMonitoringInstallationArrayOutput {
	return o
}

func (o SyntheticMonitoringInstallationArrayOutput) ToSyntheticMonitoringInstallationArrayOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationArrayOutput {
	return o
}

func (o SyntheticMonitoringInstallationArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringInstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SyntheticMonitoringInstallation {
		return vs[0].([]*SyntheticMonitoringInstallation)[vs[1].(int)]
	}).(SyntheticMonitoringInstallationOutput)
}

type SyntheticMonitoringInstallationMapOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringInstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SyntheticMonitoringInstallation)(nil)).Elem()
}

func (o SyntheticMonitoringInstallationMapOutput) ToSyntheticMonitoringInstallationMapOutput() SyntheticMonitoringInstallationMapOutput {
	return o
}

func (o SyntheticMonitoringInstallationMapOutput) ToSyntheticMonitoringInstallationMapOutputWithContext(ctx context.Context) SyntheticMonitoringInstallationMapOutput {
	return o
}

func (o SyntheticMonitoringInstallationMapOutput) MapIndex(k pulumi.StringInput) SyntheticMonitoringInstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SyntheticMonitoringInstallation {
		return vs[0].(map[string]*SyntheticMonitoringInstallation)[vs[1].(string)]
	}).(SyntheticMonitoringInstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringInstallationInput)(nil)).Elem(), &SyntheticMonitoringInstallation{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringInstallationArrayInput)(nil)).Elem(), SyntheticMonitoringInstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringInstallationMapInput)(nil)).Elem(), SyntheticMonitoringInstallationMap{})
	pulumi.RegisterOutputType(SyntheticMonitoringInstallationOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringInstallationArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringInstallationMapOutput{})
}
