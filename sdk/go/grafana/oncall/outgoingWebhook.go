// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oncall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/outgoing_webhooks/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oncall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oncall.NewOutgoingWebhook(ctx, "test-acc-outgoing_webhook", &oncall.OutgoingWebhookArgs{
//				Name: pulumi.String("my outgoing webhook"),
//				Url:  pulumi.String("https://example.com/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:onCall/outgoingWebhook:OutgoingWebhook name "{{ id }}"
// ```
type OutgoingWebhook struct {
	pulumi.CustomResourceState

	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumi.StringPtrOutput `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data pulumi.StringPtrOutput `pulumi:"data"`
	// Toggle to send the entire webhook payload instead of using the values in the Data field.
	ForwardWholePayload pulumi.BoolPtrOutput `pulumi:"forwardWholePayload"`
	// Headers to add to the outgoing webhook request.
	Headers pulumi.StringPtrOutput `pulumi:"headers"`
	// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
	HttpMethod pulumi.StringPtrOutput `pulumi:"httpMethod"`
	// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
	IntegrationFilters pulumi.StringArrayOutput `pulumi:"integrationFilters"`
	// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
	IsWebhookEnabled pulumi.BoolPtrOutput `pulumi:"isWebhookEnabled"`
	// The name of the outgoing webhook.
	Name pulumi.StringOutput `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrOutput `pulumi:"teamId"`
	// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
	TriggerTemplate pulumi.StringPtrOutput `pulumi:"triggerTemplate"`
	// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
	TriggerType pulumi.StringPtrOutput `pulumi:"triggerType"`
	// The webhook URL.
	Url pulumi.StringOutput `pulumi:"url"`
	// Username to use when making the outgoing webhook request.
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewOutgoingWebhook registers a new resource with the given unique name, arguments, and options.
func NewOutgoingWebhook(ctx *pulumi.Context,
	name string, args *OutgoingWebhookArgs, opts ...pulumi.ResourceOption) (*OutgoingWebhook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.AuthorizationHeader != nil {
		args.AuthorizationHeader = pulumi.ToSecret(args.AuthorizationHeader).(pulumi.StringPtrInput)
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authorizationHeader",
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutgoingWebhook
	err := ctx.RegisterResource("grafana:onCall/outgoingWebhook:OutgoingWebhook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutgoingWebhook gets an existing OutgoingWebhook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutgoingWebhook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutgoingWebhookState, opts ...pulumi.ResourceOption) (*OutgoingWebhook, error) {
	var resource OutgoingWebhook
	err := ctx.ReadResource("grafana:onCall/outgoingWebhook:OutgoingWebhook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutgoingWebhook resources.
type outgoingWebhookState struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader *string `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data *string `pulumi:"data"`
	// Toggle to send the entire webhook payload instead of using the values in the Data field.
	ForwardWholePayload *bool `pulumi:"forwardWholePayload"`
	// Headers to add to the outgoing webhook request.
	Headers *string `pulumi:"headers"`
	// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
	IntegrationFilters []string `pulumi:"integrationFilters"`
	// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
	IsWebhookEnabled *bool `pulumi:"isWebhookEnabled"`
	// The name of the outgoing webhook.
	Name *string `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password *string `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
	TriggerTemplate *string `pulumi:"triggerTemplate"`
	// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
	TriggerType *string `pulumi:"triggerType"`
	// The webhook URL.
	Url *string `pulumi:"url"`
	// Username to use when making the outgoing webhook request.
	User *string `pulumi:"user"`
}

type OutgoingWebhookState struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumi.StringPtrInput
	// The data of the webhook.
	Data pulumi.StringPtrInput
	// Toggle to send the entire webhook payload instead of using the values in the Data field.
	ForwardWholePayload pulumi.BoolPtrInput
	// Headers to add to the outgoing webhook request.
	Headers pulumi.StringPtrInput
	// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput
	// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
	IntegrationFilters pulumi.StringArrayInput
	// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
	IsWebhookEnabled pulumi.BoolPtrInput
	// The name of the outgoing webhook.
	Name pulumi.StringPtrInput
	// The auth data of the webhook. Used for Basic authentication
	Password pulumi.StringPtrInput
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrInput
	// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
	TriggerTemplate pulumi.StringPtrInput
	// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
	TriggerType pulumi.StringPtrInput
	// The webhook URL.
	Url pulumi.StringPtrInput
	// Username to use when making the outgoing webhook request.
	User pulumi.StringPtrInput
}

func (OutgoingWebhookState) ElementType() reflect.Type {
	return reflect.TypeOf((*outgoingWebhookState)(nil)).Elem()
}

type outgoingWebhookArgs struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader *string `pulumi:"authorizationHeader"`
	// The data of the webhook.
	Data *string `pulumi:"data"`
	// Toggle to send the entire webhook payload instead of using the values in the Data field.
	ForwardWholePayload *bool `pulumi:"forwardWholePayload"`
	// Headers to add to the outgoing webhook request.
	Headers *string `pulumi:"headers"`
	// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
	IntegrationFilters []string `pulumi:"integrationFilters"`
	// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
	IsWebhookEnabled *bool `pulumi:"isWebhookEnabled"`
	// The name of the outgoing webhook.
	Name *string `pulumi:"name"`
	// The auth data of the webhook. Used for Basic authentication
	Password *string `pulumi:"password"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
	TriggerTemplate *string `pulumi:"triggerTemplate"`
	// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
	TriggerType *string `pulumi:"triggerType"`
	// The webhook URL.
	Url string `pulumi:"url"`
	// Username to use when making the outgoing webhook request.
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a OutgoingWebhook resource.
type OutgoingWebhookArgs struct {
	// The auth data of the webhook. Used in Authorization header instead of user/password auth.
	AuthorizationHeader pulumi.StringPtrInput
	// The data of the webhook.
	Data pulumi.StringPtrInput
	// Toggle to send the entire webhook payload instead of using the values in the Data field.
	ForwardWholePayload pulumi.BoolPtrInput
	// Headers to add to the outgoing webhook request.
	Headers pulumi.StringPtrInput
	// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput
	// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
	IntegrationFilters pulumi.StringArrayInput
	// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
	IsWebhookEnabled pulumi.BoolPtrInput
	// The name of the outgoing webhook.
	Name pulumi.StringPtrInput
	// The auth data of the webhook. Used for Basic authentication
	Password pulumi.StringPtrInput
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrInput
	// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
	TriggerTemplate pulumi.StringPtrInput
	// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
	TriggerType pulumi.StringPtrInput
	// The webhook URL.
	Url pulumi.StringInput
	// Username to use when making the outgoing webhook request.
	User pulumi.StringPtrInput
}

func (OutgoingWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outgoingWebhookArgs)(nil)).Elem()
}

type OutgoingWebhookInput interface {
	pulumi.Input

	ToOutgoingWebhookOutput() OutgoingWebhookOutput
	ToOutgoingWebhookOutputWithContext(ctx context.Context) OutgoingWebhookOutput
}

func (*OutgoingWebhook) ElementType() reflect.Type {
	return reflect.TypeOf((**OutgoingWebhook)(nil)).Elem()
}

func (i *OutgoingWebhook) ToOutgoingWebhookOutput() OutgoingWebhookOutput {
	return i.ToOutgoingWebhookOutputWithContext(context.Background())
}

func (i *OutgoingWebhook) ToOutgoingWebhookOutputWithContext(ctx context.Context) OutgoingWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutgoingWebhookOutput)
}

// OutgoingWebhookArrayInput is an input type that accepts OutgoingWebhookArray and OutgoingWebhookArrayOutput values.
// You can construct a concrete instance of `OutgoingWebhookArrayInput` via:
//
//	OutgoingWebhookArray{ OutgoingWebhookArgs{...} }
type OutgoingWebhookArrayInput interface {
	pulumi.Input

	ToOutgoingWebhookArrayOutput() OutgoingWebhookArrayOutput
	ToOutgoingWebhookArrayOutputWithContext(context.Context) OutgoingWebhookArrayOutput
}

type OutgoingWebhookArray []OutgoingWebhookInput

func (OutgoingWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutgoingWebhook)(nil)).Elem()
}

func (i OutgoingWebhookArray) ToOutgoingWebhookArrayOutput() OutgoingWebhookArrayOutput {
	return i.ToOutgoingWebhookArrayOutputWithContext(context.Background())
}

func (i OutgoingWebhookArray) ToOutgoingWebhookArrayOutputWithContext(ctx context.Context) OutgoingWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutgoingWebhookArrayOutput)
}

// OutgoingWebhookMapInput is an input type that accepts OutgoingWebhookMap and OutgoingWebhookMapOutput values.
// You can construct a concrete instance of `OutgoingWebhookMapInput` via:
//
//	OutgoingWebhookMap{ "key": OutgoingWebhookArgs{...} }
type OutgoingWebhookMapInput interface {
	pulumi.Input

	ToOutgoingWebhookMapOutput() OutgoingWebhookMapOutput
	ToOutgoingWebhookMapOutputWithContext(context.Context) OutgoingWebhookMapOutput
}

type OutgoingWebhookMap map[string]OutgoingWebhookInput

func (OutgoingWebhookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutgoingWebhook)(nil)).Elem()
}

func (i OutgoingWebhookMap) ToOutgoingWebhookMapOutput() OutgoingWebhookMapOutput {
	return i.ToOutgoingWebhookMapOutputWithContext(context.Background())
}

func (i OutgoingWebhookMap) ToOutgoingWebhookMapOutputWithContext(ctx context.Context) OutgoingWebhookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutgoingWebhookMapOutput)
}

type OutgoingWebhookOutput struct{ *pulumi.OutputState }

func (OutgoingWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutgoingWebhook)(nil)).Elem()
}

func (o OutgoingWebhookOutput) ToOutgoingWebhookOutput() OutgoingWebhookOutput {
	return o
}

func (o OutgoingWebhookOutput) ToOutgoingWebhookOutputWithContext(ctx context.Context) OutgoingWebhookOutput {
	return o
}

// The auth data of the webhook. Used in Authorization header instead of user/password auth.
func (o OutgoingWebhookOutput) AuthorizationHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.AuthorizationHeader }).(pulumi.StringPtrOutput)
}

// The data of the webhook.
func (o OutgoingWebhookOutput) Data() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.Data }).(pulumi.StringPtrOutput)
}

// Toggle to send the entire webhook payload instead of using the values in the Data field.
func (o OutgoingWebhookOutput) ForwardWholePayload() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.BoolPtrOutput { return v.ForwardWholePayload }).(pulumi.BoolPtrOutput)
}

// Headers to add to the outgoing webhook request.
func (o OutgoingWebhookOutput) Headers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.Headers }).(pulumi.StringPtrOutput)
}

// The HTTP method used in the request made by the outgoing webhook. Defaults to `POST`.
func (o OutgoingWebhookOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are selected the outgoing webhook will trigger for any integration.
func (o OutgoingWebhookOutput) IntegrationFilters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringArrayOutput { return v.IntegrationFilters }).(pulumi.StringArrayOutput)
}

// Controls whether the outgoing webhook will trigger or is ignored. Defaults to `true`.
func (o OutgoingWebhookOutput) IsWebhookEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.BoolPtrOutput { return v.IsWebhookEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the outgoing webhook.
func (o OutgoingWebhookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The auth data of the webhook. Used for Basic authentication
func (o OutgoingWebhookOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
func (o OutgoingWebhookOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

// A template used to dynamically determine whether the webhook should execute based on the content of the payload.
func (o OutgoingWebhookOutput) TriggerTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.TriggerTemplate }).(pulumi.StringPtrOutput)
}

// The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert group created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`. Defaults to `escalation`.
func (o OutgoingWebhookOutput) TriggerType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.TriggerType }).(pulumi.StringPtrOutput)
}

// The webhook URL.
func (o OutgoingWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

// Username to use when making the outgoing webhook request.
func (o OutgoingWebhookOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutgoingWebhook) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type OutgoingWebhookArrayOutput struct{ *pulumi.OutputState }

func (OutgoingWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutgoingWebhook)(nil)).Elem()
}

func (o OutgoingWebhookArrayOutput) ToOutgoingWebhookArrayOutput() OutgoingWebhookArrayOutput {
	return o
}

func (o OutgoingWebhookArrayOutput) ToOutgoingWebhookArrayOutputWithContext(ctx context.Context) OutgoingWebhookArrayOutput {
	return o
}

func (o OutgoingWebhookArrayOutput) Index(i pulumi.IntInput) OutgoingWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutgoingWebhook {
		return vs[0].([]*OutgoingWebhook)[vs[1].(int)]
	}).(OutgoingWebhookOutput)
}

type OutgoingWebhookMapOutput struct{ *pulumi.OutputState }

func (OutgoingWebhookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutgoingWebhook)(nil)).Elem()
}

func (o OutgoingWebhookMapOutput) ToOutgoingWebhookMapOutput() OutgoingWebhookMapOutput {
	return o
}

func (o OutgoingWebhookMapOutput) ToOutgoingWebhookMapOutputWithContext(ctx context.Context) OutgoingWebhookMapOutput {
	return o
}

func (o OutgoingWebhookMapOutput) MapIndex(k pulumi.StringInput) OutgoingWebhookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutgoingWebhook {
		return vs[0].(map[string]*OutgoingWebhook)[vs[1].(string)]
	}).(OutgoingWebhookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutgoingWebhookInput)(nil)).Elem(), &OutgoingWebhook{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutgoingWebhookArrayInput)(nil)).Elem(), OutgoingWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutgoingWebhookMapInput)(nil)).Elem(), OutgoingWebhookMap{})
	pulumi.RegisterOutputType(OutgoingWebhookOutput{})
	pulumi.RegisterOutputType(OutgoingWebhookArrayOutput{})
	pulumi.RegisterOutputType(OutgoingWebhookMapOutput{})
}
