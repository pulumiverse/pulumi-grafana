// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oncall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/oncall"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myTeam, err := oss.LookupTeam(ctx, &oss.LookupTeamArgs{
//				Name: "my team",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = oncall.GetTeam(ctx, &oncall.GetTeamArgs{
//				Name: myTeam.Name,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTeam(ctx *pulumi.Context, args *GetTeamArgs, opts ...pulumi.InvokeOption) (*GetTeamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTeamResult
	err := ctx.Invoke("grafana:onCall/getTeam:getTeam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTeam.
type GetTeamArgs struct {
	// The team name.
	Name string `pulumi:"name"`
}

// A collection of values returned by getTeam.
type GetTeamResult struct {
	AvatarUrl string `pulumi:"avatarUrl"`
	Email     string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The team name.
	Name string `pulumi:"name"`
}

func GetTeamOutput(ctx *pulumi.Context, args GetTeamOutputArgs, opts ...pulumi.InvokeOption) GetTeamResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (GetTeamResultOutput, error) {
			args := v.(GetTeamArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:onCall/getTeam:getTeam", args, GetTeamResultOutput{}, options).(GetTeamResultOutput), nil
		}).(GetTeamResultOutput)
}

// A collection of arguments for invoking getTeam.
type GetTeamOutputArgs struct {
	// The team name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetTeamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamArgs)(nil)).Elem()
}

// A collection of values returned by getTeam.
type GetTeamResultOutput struct{ *pulumi.OutputState }

func (GetTeamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamResult)(nil)).Elem()
}

func (o GetTeamResultOutput) ToGetTeamResultOutput() GetTeamResultOutput {
	return o
}

func (o GetTeamResultOutput) ToGetTeamResultOutputWithContext(ctx context.Context) GetTeamResultOutput {
	return o
}

func (o GetTeamResultOutput) AvatarUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamResult) string { return v.AvatarUrl }).(pulumi.StringOutput)
}

func (o GetTeamResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamResult) string { return v.Email }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetTeamResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamResult) string { return v.Id }).(pulumi.StringOutput)
}

// The team name.
func (o GetTeamResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTeamResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTeamResultOutput{})
}
