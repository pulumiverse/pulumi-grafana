// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oncall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/oncall/latest/configure/escalation-chains-and-routes/)
// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/escalation_policies/)
//
// ## Import
//
// ```sh
// $ pulumi import grafana:onCall/escalation:Escalation name "{{ id }}"
// ```
type Escalation struct {
	pulumi.CustomResourceState

	// The ID of an Action for triggerWebhook type step.
	ActionToTrigger pulumi.StringPtrOutput `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step. (60-86400) seconds
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringOutput `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumi.StringPtrOutput `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
	Important pulumi.BoolPtrOutput `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumi.StringPtrOutput `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumi.StringPtrOutput `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumi.StringPtrOutput `pulumi:"notifyOnCallFromSchedule"`
	// The ID of a Team for a notify*team*members type step.
	NotifyToTeamMembers pulumi.StringPtrOutput `pulumi:"notifyToTeamMembers"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumi.StringArrayOutput `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumi.StringArrayOutput `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position pulumi.IntOutput `pulumi:"position"`
	// The severity of the incident for declareIncident type step.
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewEscalation registers a new resource with the given unique name, arguments, and options.
func NewEscalation(ctx *pulumi.Context,
	name string, args *EscalationArgs, opts ...pulumi.ResourceOption) (*Escalation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EscalationChainId == nil {
		return nil, errors.New("invalid value for required argument 'EscalationChainId'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/oncallEscalation:OncallEscalation"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Escalation
	err := ctx.RegisterResource("grafana:onCall/escalation:Escalation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscalation gets an existing Escalation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscalation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscalationState, opts ...pulumi.ResourceOption) (*Escalation, error) {
	var resource Escalation
	err := ctx.ReadResource("grafana:onCall/escalation:Escalation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Escalation resources.
type escalationState struct {
	// The ID of an Action for triggerWebhook type step.
	ActionToTrigger *string `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step. (60-86400) seconds
	Duration *int `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify *string `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
	Important *bool `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom *string `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo *string `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule *string `pulumi:"notifyOnCallFromSchedule"`
	// The ID of a Team for a notify*team*members type step.
	NotifyToTeamMembers *string `pulumi:"notifyToTeamMembers"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies []string `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes []string `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position *int `pulumi:"position"`
	// The severity of the incident for declareIncident type step.
	Severity *string `pulumi:"severity"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
	Type *string `pulumi:"type"`
}

type EscalationState struct {
	// The ID of an Action for triggerWebhook type step.
	ActionToTrigger pulumi.StringPtrInput
	// The duration of delay for wait type step. (60-86400) seconds
	Duration pulumi.IntPtrInput
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringPtrInput
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumi.StringPtrInput
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
	Important pulumi.BoolPtrInput
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumi.StringPtrInput
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumi.StringPtrInput
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumi.StringPtrInput
	// The ID of a Team for a notify*team*members type step.
	NotifyToTeamMembers pulumi.StringPtrInput
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumi.StringArrayInput
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumi.StringArrayInput
	// The position of the escalation step (starts from 0).
	Position pulumi.IntPtrInput
	// The severity of the incident for declareIncident type step.
	Severity pulumi.StringPtrInput
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
	Type pulumi.StringPtrInput
}

func (EscalationState) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationState)(nil)).Elem()
}

type escalationArgs struct {
	// The ID of an Action for triggerWebhook type step.
	ActionToTrigger *string `pulumi:"actionToTrigger"`
	// The duration of delay for wait type step. (60-86400) seconds
	Duration *int `pulumi:"duration"`
	// The ID of the escalation chain.
	EscalationChainId string `pulumi:"escalationChainId"`
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify *string `pulumi:"groupToNotify"`
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
	Important *bool `pulumi:"important"`
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom *string `pulumi:"notifyIfTimeFrom"`
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo *string `pulumi:"notifyIfTimeTo"`
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule *string `pulumi:"notifyOnCallFromSchedule"`
	// The ID of a Team for a notify*team*members type step.
	NotifyToTeamMembers *string `pulumi:"notifyToTeamMembers"`
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies []string `pulumi:"personsToNotifies"`
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes []string `pulumi:"personsToNotifyNextEachTimes"`
	// The position of the escalation step (starts from 0).
	Position int `pulumi:"position"`
	// The severity of the incident for declareIncident type step.
	Severity *string `pulumi:"severity"`
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a Escalation resource.
type EscalationArgs struct {
	// The ID of an Action for triggerWebhook type step.
	ActionToTrigger pulumi.StringPtrInput
	// The duration of delay for wait type step. (60-86400) seconds
	Duration pulumi.IntPtrInput
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringInput
	// The ID of a User Group for notify*user*group type step.
	GroupToNotify pulumi.StringPtrInput
	// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
	Important pulumi.BoolPtrInput
	// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
	NotifyIfTimeFrom pulumi.StringPtrInput
	// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
	NotifyIfTimeTo pulumi.StringPtrInput
	// ID of a Schedule for notify*on*call*from*schedule type step.
	NotifyOnCallFromSchedule pulumi.StringPtrInput
	// The ID of a Team for a notify*team*members type step.
	NotifyToTeamMembers pulumi.StringPtrInput
	// The list of ID's of users for notifyPersons type step.
	PersonsToNotifies pulumi.StringArrayInput
	// The list of ID's of users for notify*person*next*each*time type step.
	PersonsToNotifyNextEachTimes pulumi.StringArrayInput
	// The position of the escalation step (starts from 0).
	Position pulumi.IntInput
	// The severity of the incident for declareIncident type step.
	Severity pulumi.StringPtrInput
	// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
	Type pulumi.StringInput
}

func (EscalationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationArgs)(nil)).Elem()
}

type EscalationInput interface {
	pulumi.Input

	ToEscalationOutput() EscalationOutput
	ToEscalationOutputWithContext(ctx context.Context) EscalationOutput
}

func (*Escalation) ElementType() reflect.Type {
	return reflect.TypeOf((**Escalation)(nil)).Elem()
}

func (i *Escalation) ToEscalationOutput() EscalationOutput {
	return i.ToEscalationOutputWithContext(context.Background())
}

func (i *Escalation) ToEscalationOutputWithContext(ctx context.Context) EscalationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationOutput)
}

// EscalationArrayInput is an input type that accepts EscalationArray and EscalationArrayOutput values.
// You can construct a concrete instance of `EscalationArrayInput` via:
//
//	EscalationArray{ EscalationArgs{...} }
type EscalationArrayInput interface {
	pulumi.Input

	ToEscalationArrayOutput() EscalationArrayOutput
	ToEscalationArrayOutputWithContext(context.Context) EscalationArrayOutput
}

type EscalationArray []EscalationInput

func (EscalationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Escalation)(nil)).Elem()
}

func (i EscalationArray) ToEscalationArrayOutput() EscalationArrayOutput {
	return i.ToEscalationArrayOutputWithContext(context.Background())
}

func (i EscalationArray) ToEscalationArrayOutputWithContext(ctx context.Context) EscalationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationArrayOutput)
}

// EscalationMapInput is an input type that accepts EscalationMap and EscalationMapOutput values.
// You can construct a concrete instance of `EscalationMapInput` via:
//
//	EscalationMap{ "key": EscalationArgs{...} }
type EscalationMapInput interface {
	pulumi.Input

	ToEscalationMapOutput() EscalationMapOutput
	ToEscalationMapOutputWithContext(context.Context) EscalationMapOutput
}

type EscalationMap map[string]EscalationInput

func (EscalationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Escalation)(nil)).Elem()
}

func (i EscalationMap) ToEscalationMapOutput() EscalationMapOutput {
	return i.ToEscalationMapOutputWithContext(context.Background())
}

func (i EscalationMap) ToEscalationMapOutputWithContext(ctx context.Context) EscalationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationMapOutput)
}

type EscalationOutput struct{ *pulumi.OutputState }

func (EscalationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Escalation)(nil)).Elem()
}

func (o EscalationOutput) ToEscalationOutput() EscalationOutput {
	return o
}

func (o EscalationOutput) ToEscalationOutputWithContext(ctx context.Context) EscalationOutput {
	return o
}

// The ID of an Action for triggerWebhook type step.
func (o EscalationOutput) ActionToTrigger() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.ActionToTrigger }).(pulumi.StringPtrOutput)
}

// The duration of delay for wait type step. (60-86400) seconds
func (o EscalationOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.IntPtrOutput { return v.Duration }).(pulumi.IntPtrOutput)
}

// The ID of the escalation chain.
func (o EscalationOutput) EscalationChainId() pulumi.StringOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringOutput { return v.EscalationChainId }).(pulumi.StringOutput)
}

// The ID of a User Group for notify*user*group type step.
func (o EscalationOutput) GroupToNotify() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.GroupToNotify }).(pulumi.StringPtrOutput)
}

// Will activate "important" personal notification rules. Actual for steps: notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, notify*user*group and notify*team_members
func (o EscalationOutput) Important() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.BoolPtrOutput { return v.Important }).(pulumi.BoolPtrOutput)
}

// The beginning of the time interval for notify*if*time*from*to type step in UTC (for example 08:00:00Z).
func (o EscalationOutput) NotifyIfTimeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.NotifyIfTimeFrom }).(pulumi.StringPtrOutput)
}

// The end of the time interval for notify*if*time*from*to type step in UTC (for example 18:00:00Z).
func (o EscalationOutput) NotifyIfTimeTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.NotifyIfTimeTo }).(pulumi.StringPtrOutput)
}

// ID of a Schedule for notify*on*call*from*schedule type step.
func (o EscalationOutput) NotifyOnCallFromSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.NotifyOnCallFromSchedule }).(pulumi.StringPtrOutput)
}

// The ID of a Team for a notify*team*members type step.
func (o EscalationOutput) NotifyToTeamMembers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.NotifyToTeamMembers }).(pulumi.StringPtrOutput)
}

// The list of ID's of users for notifyPersons type step.
func (o EscalationOutput) PersonsToNotifies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringArrayOutput { return v.PersonsToNotifies }).(pulumi.StringArrayOutput)
}

// The list of ID's of users for notify*person*next*each*time type step.
func (o EscalationOutput) PersonsToNotifyNextEachTimes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringArrayOutput { return v.PersonsToNotifyNextEachTimes }).(pulumi.StringArrayOutput)
}

// The position of the escalation step (starts from 0).
func (o EscalationOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Escalation) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The severity of the incident for declareIncident type step.
func (o EscalationOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringPtrOutput { return v.Severity }).(pulumi.StringPtrOutput)
}

// The type of escalation policy. Can be wait, notify*persons, notify*person*next*each*time, notify*on*call*from*schedule, trigger*webhook, notify*user*group, resolve, notify*whole*channel, notify*if*time*from*to, repeat*escalation, notify*team*members, declare*incident
func (o EscalationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Escalation) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type EscalationArrayOutput struct{ *pulumi.OutputState }

func (EscalationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Escalation)(nil)).Elem()
}

func (o EscalationArrayOutput) ToEscalationArrayOutput() EscalationArrayOutput {
	return o
}

func (o EscalationArrayOutput) ToEscalationArrayOutputWithContext(ctx context.Context) EscalationArrayOutput {
	return o
}

func (o EscalationArrayOutput) Index(i pulumi.IntInput) EscalationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Escalation {
		return vs[0].([]*Escalation)[vs[1].(int)]
	}).(EscalationOutput)
}

type EscalationMapOutput struct{ *pulumi.OutputState }

func (EscalationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Escalation)(nil)).Elem()
}

func (o EscalationMapOutput) ToEscalationMapOutput() EscalationMapOutput {
	return o
}

func (o EscalationMapOutput) ToEscalationMapOutputWithContext(ctx context.Context) EscalationMapOutput {
	return o
}

func (o EscalationMapOutput) MapIndex(k pulumi.StringInput) EscalationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Escalation {
		return vs[0].(map[string]*Escalation)[vs[1].(string)]
	}).(EscalationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationInput)(nil)).Elem(), &Escalation{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationArrayInput)(nil)).Elem(), EscalationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationMapInput)(nil)).Elem(), EscalationMap{})
	pulumi.RegisterOutputType(EscalationOutput{})
	pulumi.RegisterOutputType(EscalationArrayOutput{})
	pulumi.RegisterOutputType(EscalationMapOutput{})
}
