// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oncall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/integrations/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/onCall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := onCall.GetIntegration(ctx, &oncall.GetIntegrationArgs{
//				Id: "CEXAMPLEID123",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupIntegration(ctx *pulumi.Context, args *LookupIntegrationArgs, opts ...pulumi.InvokeOption) (*LookupIntegrationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupIntegrationResult
	err := ctx.Invoke("grafana:onCall/getIntegration:getIntegration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getIntegration.
type LookupIntegrationArgs struct {
	// The integration ID.
	Id string `pulumi:"id"`
}

// A collection of values returned by getIntegration.
type LookupIntegrationResult struct {
	// The integration ID.
	Id string `pulumi:"id"`
	// The integration name.
	Name string `pulumi:"name"`
}

func LookupIntegrationOutput(ctx *pulumi.Context, args LookupIntegrationOutputArgs, opts ...pulumi.InvokeOption) LookupIntegrationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupIntegrationResultOutput, error) {
			args := v.(LookupIntegrationArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupIntegrationResult
			secret, err := ctx.InvokePackageRaw("grafana:onCall/getIntegration:getIntegration", args, &rv, "", opts...)
			if err != nil {
				return LookupIntegrationResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupIntegrationResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupIntegrationResultOutput), nil
			}
			return output, nil
		}).(LookupIntegrationResultOutput)
}

// A collection of arguments for invoking getIntegration.
type LookupIntegrationOutputArgs struct {
	// The integration ID.
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupIntegrationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationArgs)(nil)).Elem()
}

// A collection of values returned by getIntegration.
type LookupIntegrationResultOutput struct{ *pulumi.OutputState }

func (LookupIntegrationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupIntegrationResult)(nil)).Elem()
}

func (o LookupIntegrationResultOutput) ToLookupIntegrationResultOutput() LookupIntegrationResultOutput {
	return o
}

func (o LookupIntegrationResultOutput) ToLookupIntegrationResultOutputWithContext(ctx context.Context) LookupIntegrationResultOutput {
	return o
}

// The integration ID.
func (o LookupIntegrationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntegrationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The integration name.
func (o LookupIntegrationResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupIntegrationResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupIntegrationResultOutput{})
}
