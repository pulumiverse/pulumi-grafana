// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package assert

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages Asserts Log Configuration through Grafana API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/assert"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := assert.NewLogConfig(ctx, "production", &assert.LogConfigArgs{
//				Name:          pulumi.String("production"),
//				Priority:      pulumi.Int(1000),
//				DefaultConfig: pulumi.Bool(false),
//				DataSourceUid: pulumi.String("grafanacloud-logs"),
//				ErrorLabel:    pulumi.String("error"),
//				Matches: assert.LogConfigMatchArray{
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("asserts_entity_type"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("Service"),
//						},
//					},
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("environment"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("production"),
//							pulumi.String("staging"),
//						},
//					},
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("site"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("us-east-1"),
//							pulumi.String("us-west-2"),
//						},
//					},
//				},
//				EntityPropertyToLogLabelMapping: pulumi.StringMap{
//					"otel_namespace": pulumi.String("service_namespace"),
//					"otel_service":   pulumi.String("service_name"),
//					"environment":    pulumi.String("env"),
//					"site":           pulumi.String("region"),
//				},
//				FilterBySpanId:  pulumi.Bool(true),
//				FilterByTraceId: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = assert.NewLogConfig(ctx, "development", &assert.LogConfigArgs{
//				Name:          pulumi.String("development"),
//				Priority:      pulumi.Int(2000),
//				DefaultConfig: pulumi.Bool(true),
//				DataSourceUid: pulumi.String("elasticsearch-dev"),
//				ErrorLabel:    pulumi.String("error"),
//				Matches: assert.LogConfigMatchArray{
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("asserts_entity_type"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("Service"),
//						},
//					},
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("environment"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("development"),
//							pulumi.String("testing"),
//						},
//					},
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("site"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("us-east-1"),
//						},
//					},
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("service"),
//						Op:       pulumi.String("EQUALS"),
//						Values: pulumi.StringArray{
//							pulumi.String("api"),
//						},
//					},
//				},
//				EntityPropertyToLogLabelMapping: pulumi.StringMap{
//					"otel_namespace": pulumi.String("service_namespace"),
//					"otel_service":   pulumi.String("service_name"),
//					"environment":    pulumi.String("env"),
//					"site":           pulumi.String("region"),
//					"service":        pulumi.String("app"),
//				},
//				FilterBySpanId:  pulumi.Bool(true),
//				FilterByTraceId: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = assert.NewLogConfig(ctx, "minimal", &assert.LogConfigArgs{
//				Name:          pulumi.String("minimal"),
//				Priority:      pulumi.Int(3000),
//				DefaultConfig: pulumi.Bool(false),
//				DataSourceUid: pulumi.String("loki-minimal"),
//				Matches: assert.LogConfigMatchArray{
//					&assert.LogConfigMatchArgs{
//						Property: pulumi.String("asserts_entity_type"),
//						Op:       pulumi.String("IS_NOT_NULL"),
//						Values:   pulumi.StringArray{},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:assert/logConfig:LogConfig name "{{ name }}"
// ```
type LogConfig struct {
	pulumi.CustomResourceState

	// DataSource to be queried (e.g., a Loki instance).
	DataSourceUid pulumi.StringOutput `pulumi:"dataSourceUid"`
	// Is it the default config, therefore undeletable?
	DefaultConfig pulumi.BoolOutput `pulumi:"defaultConfig"`
	// Mapping of entity properties to log labels.
	EntityPropertyToLogLabelMapping pulumi.StringMapOutput `pulumi:"entityPropertyToLogLabelMapping"`
	// Error label to filter logs.
	ErrorLabel pulumi.StringPtrOutput `pulumi:"errorLabel"`
	// Filter logs by span ID.
	FilterBySpanId pulumi.BoolPtrOutput `pulumi:"filterBySpanId"`
	// Filter logs by trace ID.
	FilterByTraceId pulumi.BoolPtrOutput `pulumi:"filterByTraceId"`
	// List of match rules for entity properties.
	Matches LogConfigMatchArrayOutput `pulumi:"matches"`
	// The name of the log configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority of the log configuration. A lower number means a higher priority.
	Priority pulumi.IntOutput `pulumi:"priority"`
}

// NewLogConfig registers a new resource with the given unique name, arguments, and options.
func NewLogConfig(ctx *pulumi.Context,
	name string, args *LogConfigArgs, opts ...pulumi.ResourceOption) (*LogConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataSourceUid == nil {
		return nil, errors.New("invalid value for required argument 'DataSourceUid'")
	}
	if args.DefaultConfig == nil {
		return nil, errors.New("invalid value for required argument 'DefaultConfig'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LogConfig
	err := ctx.RegisterResource("grafana:assert/logConfig:LogConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogConfig gets an existing LogConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogConfigState, opts ...pulumi.ResourceOption) (*LogConfig, error) {
	var resource LogConfig
	err := ctx.ReadResource("grafana:assert/logConfig:LogConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogConfig resources.
type logConfigState struct {
	// DataSource to be queried (e.g., a Loki instance).
	DataSourceUid *string `pulumi:"dataSourceUid"`
	// Is it the default config, therefore undeletable?
	DefaultConfig *bool `pulumi:"defaultConfig"`
	// Mapping of entity properties to log labels.
	EntityPropertyToLogLabelMapping map[string]string `pulumi:"entityPropertyToLogLabelMapping"`
	// Error label to filter logs.
	ErrorLabel *string `pulumi:"errorLabel"`
	// Filter logs by span ID.
	FilterBySpanId *bool `pulumi:"filterBySpanId"`
	// Filter logs by trace ID.
	FilterByTraceId *bool `pulumi:"filterByTraceId"`
	// List of match rules for entity properties.
	Matches []LogConfigMatch `pulumi:"matches"`
	// The name of the log configuration.
	Name *string `pulumi:"name"`
	// Priority of the log configuration. A lower number means a higher priority.
	Priority *int `pulumi:"priority"`
}

type LogConfigState struct {
	// DataSource to be queried (e.g., a Loki instance).
	DataSourceUid pulumi.StringPtrInput
	// Is it the default config, therefore undeletable?
	DefaultConfig pulumi.BoolPtrInput
	// Mapping of entity properties to log labels.
	EntityPropertyToLogLabelMapping pulumi.StringMapInput
	// Error label to filter logs.
	ErrorLabel pulumi.StringPtrInput
	// Filter logs by span ID.
	FilterBySpanId pulumi.BoolPtrInput
	// Filter logs by trace ID.
	FilterByTraceId pulumi.BoolPtrInput
	// List of match rules for entity properties.
	Matches LogConfigMatchArrayInput
	// The name of the log configuration.
	Name pulumi.StringPtrInput
	// Priority of the log configuration. A lower number means a higher priority.
	Priority pulumi.IntPtrInput
}

func (LogConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigState)(nil)).Elem()
}

type logConfigArgs struct {
	// DataSource to be queried (e.g., a Loki instance).
	DataSourceUid string `pulumi:"dataSourceUid"`
	// Is it the default config, therefore undeletable?
	DefaultConfig bool `pulumi:"defaultConfig"`
	// Mapping of entity properties to log labels.
	EntityPropertyToLogLabelMapping map[string]string `pulumi:"entityPropertyToLogLabelMapping"`
	// Error label to filter logs.
	ErrorLabel *string `pulumi:"errorLabel"`
	// Filter logs by span ID.
	FilterBySpanId *bool `pulumi:"filterBySpanId"`
	// Filter logs by trace ID.
	FilterByTraceId *bool `pulumi:"filterByTraceId"`
	// List of match rules for entity properties.
	Matches []LogConfigMatch `pulumi:"matches"`
	// The name of the log configuration.
	Name *string `pulumi:"name"`
	// Priority of the log configuration. A lower number means a higher priority.
	Priority int `pulumi:"priority"`
}

// The set of arguments for constructing a LogConfig resource.
type LogConfigArgs struct {
	// DataSource to be queried (e.g., a Loki instance).
	DataSourceUid pulumi.StringInput
	// Is it the default config, therefore undeletable?
	DefaultConfig pulumi.BoolInput
	// Mapping of entity properties to log labels.
	EntityPropertyToLogLabelMapping pulumi.StringMapInput
	// Error label to filter logs.
	ErrorLabel pulumi.StringPtrInput
	// Filter logs by span ID.
	FilterBySpanId pulumi.BoolPtrInput
	// Filter logs by trace ID.
	FilterByTraceId pulumi.BoolPtrInput
	// List of match rules for entity properties.
	Matches LogConfigMatchArrayInput
	// The name of the log configuration.
	Name pulumi.StringPtrInput
	// Priority of the log configuration. A lower number means a higher priority.
	Priority pulumi.IntInput
}

func (LogConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logConfigArgs)(nil)).Elem()
}

type LogConfigInput interface {
	pulumi.Input

	ToLogConfigOutput() LogConfigOutput
	ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput
}

func (*LogConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfig)(nil)).Elem()
}

func (i *LogConfig) ToLogConfigOutput() LogConfigOutput {
	return i.ToLogConfigOutputWithContext(context.Background())
}

func (i *LogConfig) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigOutput)
}

// LogConfigArrayInput is an input type that accepts LogConfigArray and LogConfigArrayOutput values.
// You can construct a concrete instance of `LogConfigArrayInput` via:
//
//	LogConfigArray{ LogConfigArgs{...} }
type LogConfigArrayInput interface {
	pulumi.Input

	ToLogConfigArrayOutput() LogConfigArrayOutput
	ToLogConfigArrayOutputWithContext(context.Context) LogConfigArrayOutput
}

type LogConfigArray []LogConfigInput

func (LogConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfig)(nil)).Elem()
}

func (i LogConfigArray) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return i.ToLogConfigArrayOutputWithContext(context.Background())
}

func (i LogConfigArray) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigArrayOutput)
}

// LogConfigMapInput is an input type that accepts LogConfigMap and LogConfigMapOutput values.
// You can construct a concrete instance of `LogConfigMapInput` via:
//
//	LogConfigMap{ "key": LogConfigArgs{...} }
type LogConfigMapInput interface {
	pulumi.Input

	ToLogConfigMapOutput() LogConfigMapOutput
	ToLogConfigMapOutputWithContext(context.Context) LogConfigMapOutput
}

type LogConfigMap map[string]LogConfigInput

func (LogConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfig)(nil)).Elem()
}

func (i LogConfigMap) ToLogConfigMapOutput() LogConfigMapOutput {
	return i.ToLogConfigMapOutputWithContext(context.Background())
}

func (i LogConfigMap) ToLogConfigMapOutputWithContext(ctx context.Context) LogConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogConfigMapOutput)
}

type LogConfigOutput struct{ *pulumi.OutputState }

func (LogConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogConfig)(nil)).Elem()
}

func (o LogConfigOutput) ToLogConfigOutput() LogConfigOutput {
	return o
}

func (o LogConfigOutput) ToLogConfigOutputWithContext(ctx context.Context) LogConfigOutput {
	return o
}

// DataSource to be queried (e.g., a Loki instance).
func (o LogConfigOutput) DataSourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringOutput { return v.DataSourceUid }).(pulumi.StringOutput)
}

// Is it the default config, therefore undeletable?
func (o LogConfigOutput) DefaultConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.BoolOutput { return v.DefaultConfig }).(pulumi.BoolOutput)
}

// Mapping of entity properties to log labels.
func (o LogConfigOutput) EntityPropertyToLogLabelMapping() pulumi.StringMapOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringMapOutput { return v.EntityPropertyToLogLabelMapping }).(pulumi.StringMapOutput)
}

// Error label to filter logs.
func (o LogConfigOutput) ErrorLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringPtrOutput { return v.ErrorLabel }).(pulumi.StringPtrOutput)
}

// Filter logs by span ID.
func (o LogConfigOutput) FilterBySpanId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.BoolPtrOutput { return v.FilterBySpanId }).(pulumi.BoolPtrOutput)
}

// Filter logs by trace ID.
func (o LogConfigOutput) FilterByTraceId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.BoolPtrOutput { return v.FilterByTraceId }).(pulumi.BoolPtrOutput)
}

// List of match rules for entity properties.
func (o LogConfigOutput) Matches() LogConfigMatchArrayOutput {
	return o.ApplyT(func(v *LogConfig) LogConfigMatchArrayOutput { return v.Matches }).(LogConfigMatchArrayOutput)
}

// The name of the log configuration.
func (o LogConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Priority of the log configuration. A lower number means a higher priority.
func (o LogConfigOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *LogConfig) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

type LogConfigArrayOutput struct{ *pulumi.OutputState }

func (LogConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogConfig)(nil)).Elem()
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutput() LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) ToLogConfigArrayOutputWithContext(ctx context.Context) LogConfigArrayOutput {
	return o
}

func (o LogConfigArrayOutput) Index(i pulumi.IntInput) LogConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LogConfig {
		return vs[0].([]*LogConfig)[vs[1].(int)]
	}).(LogConfigOutput)
}

type LogConfigMapOutput struct{ *pulumi.OutputState }

func (LogConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogConfig)(nil)).Elem()
}

func (o LogConfigMapOutput) ToLogConfigMapOutput() LogConfigMapOutput {
	return o
}

func (o LogConfigMapOutput) ToLogConfigMapOutputWithContext(ctx context.Context) LogConfigMapOutput {
	return o
}

func (o LogConfigMapOutput) MapIndex(k pulumi.StringInput) LogConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LogConfig {
		return vs[0].(map[string]*LogConfig)[vs[1].(string)]
	}).(LogConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigInput)(nil)).Elem(), &LogConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigArrayInput)(nil)).Elem(), LogConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LogConfigMapInput)(nil)).Elem(), LogConfigMap{})
	pulumi.RegisterOutputType(LogConfigOutput{})
	pulumi.RegisterOutputType(LogConfigArrayOutput{})
	pulumi.RegisterOutputType(LogConfigMapOutput{})
}
