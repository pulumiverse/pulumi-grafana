// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package assert

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages Asserts Disabled Alert Configurations through Grafana API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/assert"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic suppressed alert configuration for maintenance
//			_, err := assert.NewSuppressedAssertionsConfig(ctx, "maintenance_window", &assert.SuppressedAssertionsConfigArgs{
//				Name: pulumi.String("MaintenanceWindow"),
//				MatchLabels: pulumi.StringMap{
//					"service":     pulumi.String("api-service"),
//					"maintenance": pulumi.String("true"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Suppress specific alertname during deployment
//			_, err = assert.NewSuppressedAssertionsConfig(ctx, "deployment_suppression", &assert.SuppressedAssertionsConfigArgs{
//				Name: pulumi.String("DeploymentSuppression"),
//				MatchLabels: pulumi.StringMap{
//					"alertname": pulumi.String("HighLatency"),
//					"job":       pulumi.String("web-service"),
//					"env":       pulumi.String("staging"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Suppress alerts for specific test environment
//			_, err = assert.NewSuppressedAssertionsConfig(ctx, "test_environment_suppression", &assert.SuppressedAssertionsConfigArgs{
//				Name: pulumi.String("TestEnvironmentSuppression"),
//				MatchLabels: pulumi.StringMap{
//					"alertgroup":  pulumi.String("test.alerts"),
//					"environment": pulumi.String("test"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:assert/suppressedAssertionsConfig:SuppressedAssertionsConfig name "{{ name }}"
// ```
type SuppressedAssertionsConfig struct {
	pulumi.CustomResourceState

	// Labels to match for this disabled alert configuration.
	MatchLabels pulumi.StringMapOutput `pulumi:"matchLabels"`
	// The name of the disabled alert configuration.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewSuppressedAssertionsConfig registers a new resource with the given unique name, arguments, and options.
func NewSuppressedAssertionsConfig(ctx *pulumi.Context,
	name string, args *SuppressedAssertionsConfigArgs, opts ...pulumi.ResourceOption) (*SuppressedAssertionsConfig, error) {
	if args == nil {
		args = &SuppressedAssertionsConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SuppressedAssertionsConfig
	err := ctx.RegisterResource("grafana:assert/suppressedAssertionsConfig:SuppressedAssertionsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSuppressedAssertionsConfig gets an existing SuppressedAssertionsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSuppressedAssertionsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SuppressedAssertionsConfigState, opts ...pulumi.ResourceOption) (*SuppressedAssertionsConfig, error) {
	var resource SuppressedAssertionsConfig
	err := ctx.ReadResource("grafana:assert/suppressedAssertionsConfig:SuppressedAssertionsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SuppressedAssertionsConfig resources.
type suppressedAssertionsConfigState struct {
	// Labels to match for this disabled alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the disabled alert configuration.
	Name *string `pulumi:"name"`
}

type SuppressedAssertionsConfigState struct {
	// Labels to match for this disabled alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the disabled alert configuration.
	Name pulumi.StringPtrInput
}

func (SuppressedAssertionsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*suppressedAssertionsConfigState)(nil)).Elem()
}

type suppressedAssertionsConfigArgs struct {
	// Labels to match for this disabled alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the disabled alert configuration.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a SuppressedAssertionsConfig resource.
type SuppressedAssertionsConfigArgs struct {
	// Labels to match for this disabled alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the disabled alert configuration.
	Name pulumi.StringPtrInput
}

func (SuppressedAssertionsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*suppressedAssertionsConfigArgs)(nil)).Elem()
}

type SuppressedAssertionsConfigInput interface {
	pulumi.Input

	ToSuppressedAssertionsConfigOutput() SuppressedAssertionsConfigOutput
	ToSuppressedAssertionsConfigOutputWithContext(ctx context.Context) SuppressedAssertionsConfigOutput
}

func (*SuppressedAssertionsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressedAssertionsConfig)(nil)).Elem()
}

func (i *SuppressedAssertionsConfig) ToSuppressedAssertionsConfigOutput() SuppressedAssertionsConfigOutput {
	return i.ToSuppressedAssertionsConfigOutputWithContext(context.Background())
}

func (i *SuppressedAssertionsConfig) ToSuppressedAssertionsConfigOutputWithContext(ctx context.Context) SuppressedAssertionsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressedAssertionsConfigOutput)
}

// SuppressedAssertionsConfigArrayInput is an input type that accepts SuppressedAssertionsConfigArray and SuppressedAssertionsConfigArrayOutput values.
// You can construct a concrete instance of `SuppressedAssertionsConfigArrayInput` via:
//
//	SuppressedAssertionsConfigArray{ SuppressedAssertionsConfigArgs{...} }
type SuppressedAssertionsConfigArrayInput interface {
	pulumi.Input

	ToSuppressedAssertionsConfigArrayOutput() SuppressedAssertionsConfigArrayOutput
	ToSuppressedAssertionsConfigArrayOutputWithContext(context.Context) SuppressedAssertionsConfigArrayOutput
}

type SuppressedAssertionsConfigArray []SuppressedAssertionsConfigInput

func (SuppressedAssertionsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuppressedAssertionsConfig)(nil)).Elem()
}

func (i SuppressedAssertionsConfigArray) ToSuppressedAssertionsConfigArrayOutput() SuppressedAssertionsConfigArrayOutput {
	return i.ToSuppressedAssertionsConfigArrayOutputWithContext(context.Background())
}

func (i SuppressedAssertionsConfigArray) ToSuppressedAssertionsConfigArrayOutputWithContext(ctx context.Context) SuppressedAssertionsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressedAssertionsConfigArrayOutput)
}

// SuppressedAssertionsConfigMapInput is an input type that accepts SuppressedAssertionsConfigMap and SuppressedAssertionsConfigMapOutput values.
// You can construct a concrete instance of `SuppressedAssertionsConfigMapInput` via:
//
//	SuppressedAssertionsConfigMap{ "key": SuppressedAssertionsConfigArgs{...} }
type SuppressedAssertionsConfigMapInput interface {
	pulumi.Input

	ToSuppressedAssertionsConfigMapOutput() SuppressedAssertionsConfigMapOutput
	ToSuppressedAssertionsConfigMapOutputWithContext(context.Context) SuppressedAssertionsConfigMapOutput
}

type SuppressedAssertionsConfigMap map[string]SuppressedAssertionsConfigInput

func (SuppressedAssertionsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuppressedAssertionsConfig)(nil)).Elem()
}

func (i SuppressedAssertionsConfigMap) ToSuppressedAssertionsConfigMapOutput() SuppressedAssertionsConfigMapOutput {
	return i.ToSuppressedAssertionsConfigMapOutputWithContext(context.Background())
}

func (i SuppressedAssertionsConfigMap) ToSuppressedAssertionsConfigMapOutputWithContext(ctx context.Context) SuppressedAssertionsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SuppressedAssertionsConfigMapOutput)
}

type SuppressedAssertionsConfigOutput struct{ *pulumi.OutputState }

func (SuppressedAssertionsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SuppressedAssertionsConfig)(nil)).Elem()
}

func (o SuppressedAssertionsConfigOutput) ToSuppressedAssertionsConfigOutput() SuppressedAssertionsConfigOutput {
	return o
}

func (o SuppressedAssertionsConfigOutput) ToSuppressedAssertionsConfigOutputWithContext(ctx context.Context) SuppressedAssertionsConfigOutput {
	return o
}

// Labels to match for this disabled alert configuration.
func (o SuppressedAssertionsConfigOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SuppressedAssertionsConfig) pulumi.StringMapOutput { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// The name of the disabled alert configuration.
func (o SuppressedAssertionsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SuppressedAssertionsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type SuppressedAssertionsConfigArrayOutput struct{ *pulumi.OutputState }

func (SuppressedAssertionsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SuppressedAssertionsConfig)(nil)).Elem()
}

func (o SuppressedAssertionsConfigArrayOutput) ToSuppressedAssertionsConfigArrayOutput() SuppressedAssertionsConfigArrayOutput {
	return o
}

func (o SuppressedAssertionsConfigArrayOutput) ToSuppressedAssertionsConfigArrayOutputWithContext(ctx context.Context) SuppressedAssertionsConfigArrayOutput {
	return o
}

func (o SuppressedAssertionsConfigArrayOutput) Index(i pulumi.IntInput) SuppressedAssertionsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SuppressedAssertionsConfig {
		return vs[0].([]*SuppressedAssertionsConfig)[vs[1].(int)]
	}).(SuppressedAssertionsConfigOutput)
}

type SuppressedAssertionsConfigMapOutput struct{ *pulumi.OutputState }

func (SuppressedAssertionsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SuppressedAssertionsConfig)(nil)).Elem()
}

func (o SuppressedAssertionsConfigMapOutput) ToSuppressedAssertionsConfigMapOutput() SuppressedAssertionsConfigMapOutput {
	return o
}

func (o SuppressedAssertionsConfigMapOutput) ToSuppressedAssertionsConfigMapOutputWithContext(ctx context.Context) SuppressedAssertionsConfigMapOutput {
	return o
}

func (o SuppressedAssertionsConfigMapOutput) MapIndex(k pulumi.StringInput) SuppressedAssertionsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SuppressedAssertionsConfig {
		return vs[0].(map[string]*SuppressedAssertionsConfig)[vs[1].(string)]
	}).(SuppressedAssertionsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressedAssertionsConfigInput)(nil)).Elem(), &SuppressedAssertionsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressedAssertionsConfigArrayInput)(nil)).Elem(), SuppressedAssertionsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SuppressedAssertionsConfigMapInput)(nil)).Elem(), SuppressedAssertionsConfigMap{})
	pulumi.RegisterOutputType(SuppressedAssertionsConfigOutput{})
	pulumi.RegisterOutputType(SuppressedAssertionsConfigArrayOutput{})
	pulumi.RegisterOutputType(SuppressedAssertionsConfigMapOutput{})
}
