// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package assert

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages Asserts Alert Configurations through Grafana API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/assert"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic alert configuration with silencing
//			_, err := assert.NewNotificationAlertsConfig(ctx, "prometheus_remote_storage_failures", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("PrometheusRemoteStorageFailures"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":   pulumi.String("PrometheusRemoteStorageFailures"),
//					"alertgroup":  pulumi.String("prometheus.alerts"),
//					"asserts_env": pulumi.String("prod"),
//				},
//				Silenced: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// High severity alert with specific job and context matching
//			_, err = assert.NewNotificationAlertsConfig(ctx, "error_buildup_notify", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("ErrorBuildupNotify"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":               pulumi.String("ErrorBuildup"),
//					"job":                     pulumi.String("acai"),
//					"asserts_request_type":    pulumi.String("inbound"),
//					"asserts_request_context": pulumi.String("/auth"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// Alert with additional labels and custom duration
//			_, err = assert.NewNotificationAlertsConfig(ctx, "payment_test_alert", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("PaymentTestAlert"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":         pulumi.String("PaymentTestAlert"),
//					"additional_labels": pulumi.String("asserts_severity=~\"critical\""),
//					"alertgroup":        pulumi.String("alex-k8s-integration-test.alerts"),
//				},
//				AlertLabels: pulumi.StringMap{
//					"testing": pulumi.String("onetwothree"),
//				},
//				Duration: pulumi.String("5m"),
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// Latency alert for shipping service
//			_, err = assert.NewNotificationAlertsConfig(ctx, "high_shipping_latency", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("high shipping latency"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":            pulumi.String("LatencyP99ErrorBuildup"),
//					"job":                  pulumi.String("shipping"),
//					"asserts_request_type": pulumi.String("inbound"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// CPU throttling alert with warning severity
//			_, err = assert.NewNotificationAlertsConfig(ctx, "cpu_throttling_sustained", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("CPUThrottlingSustained"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":         pulumi.String("CPUThrottlingSustained"),
//					"additional_labels": pulumi.String("asserts_severity=~\"warning\""),
//				},
//				Silenced: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Ingress error rate alert
//			_, err = assert.NewNotificationAlertsConfig(ctx, "ingress_error", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("ingress error"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":            pulumi.String("ErrorRatioBreach"),
//					"job":                  pulumi.String("ingress-nginx-controller-metrics"),
//					"asserts_request_type": pulumi.String("inbound"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// MySQL Galera cluster alert
//			_, err = assert.NewNotificationAlertsConfig(ctx, "mysql_galera_not_ready", &assert.NotificationAlertsConfigArgs{
//				Name: pulumi.String("MySQLGaleraNotReady"),
//				MatchLabels: pulumi.StringMap{
//					"alertname": pulumi.String("MySQLGaleraNotReady"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:assert/notificationAlertsConfig:NotificationAlertsConfig name "{{ name }}"
// ```
type NotificationAlertsConfig struct {
	pulumi.CustomResourceState

	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapOutput `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapOutput `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrOutput `pulumi:"silenced"`
}

// NewNotificationAlertsConfig registers a new resource with the given unique name, arguments, and options.
func NewNotificationAlertsConfig(ctx *pulumi.Context,
	name string, args *NotificationAlertsConfigArgs, opts ...pulumi.ResourceOption) (*NotificationAlertsConfig, error) {
	if args == nil {
		args = &NotificationAlertsConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotificationAlertsConfig
	err := ctx.RegisterResource("grafana:assert/notificationAlertsConfig:NotificationAlertsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotificationAlertsConfig gets an existing NotificationAlertsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotificationAlertsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotificationAlertsConfigState, opts ...pulumi.ResourceOption) (*NotificationAlertsConfig, error) {
	var resource NotificationAlertsConfig
	err := ctx.ReadResource("grafana:assert/notificationAlertsConfig:NotificationAlertsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotificationAlertsConfig resources.
type notificationAlertsConfigState struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels map[string]string `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name *string `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `pulumi:"silenced"`
}

type NotificationAlertsConfigState struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapInput
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrInput
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the alert configuration.
	Name pulumi.StringPtrInput
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrInput
}

func (NotificationAlertsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationAlertsConfigState)(nil)).Elem()
}

type notificationAlertsConfigArgs struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels map[string]string `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name *string `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `pulumi:"silenced"`
}

// The set of arguments for constructing a NotificationAlertsConfig resource.
type NotificationAlertsConfigArgs struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapInput
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrInput
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the alert configuration.
	Name pulumi.StringPtrInput
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrInput
}

func (NotificationAlertsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notificationAlertsConfigArgs)(nil)).Elem()
}

type NotificationAlertsConfigInput interface {
	pulumi.Input

	ToNotificationAlertsConfigOutput() NotificationAlertsConfigOutput
	ToNotificationAlertsConfigOutputWithContext(ctx context.Context) NotificationAlertsConfigOutput
}

func (*NotificationAlertsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationAlertsConfig)(nil)).Elem()
}

func (i *NotificationAlertsConfig) ToNotificationAlertsConfigOutput() NotificationAlertsConfigOutput {
	return i.ToNotificationAlertsConfigOutputWithContext(context.Background())
}

func (i *NotificationAlertsConfig) ToNotificationAlertsConfigOutputWithContext(ctx context.Context) NotificationAlertsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationAlertsConfigOutput)
}

// NotificationAlertsConfigArrayInput is an input type that accepts NotificationAlertsConfigArray and NotificationAlertsConfigArrayOutput values.
// You can construct a concrete instance of `NotificationAlertsConfigArrayInput` via:
//
//	NotificationAlertsConfigArray{ NotificationAlertsConfigArgs{...} }
type NotificationAlertsConfigArrayInput interface {
	pulumi.Input

	ToNotificationAlertsConfigArrayOutput() NotificationAlertsConfigArrayOutput
	ToNotificationAlertsConfigArrayOutputWithContext(context.Context) NotificationAlertsConfigArrayOutput
}

type NotificationAlertsConfigArray []NotificationAlertsConfigInput

func (NotificationAlertsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationAlertsConfig)(nil)).Elem()
}

func (i NotificationAlertsConfigArray) ToNotificationAlertsConfigArrayOutput() NotificationAlertsConfigArrayOutput {
	return i.ToNotificationAlertsConfigArrayOutputWithContext(context.Background())
}

func (i NotificationAlertsConfigArray) ToNotificationAlertsConfigArrayOutputWithContext(ctx context.Context) NotificationAlertsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationAlertsConfigArrayOutput)
}

// NotificationAlertsConfigMapInput is an input type that accepts NotificationAlertsConfigMap and NotificationAlertsConfigMapOutput values.
// You can construct a concrete instance of `NotificationAlertsConfigMapInput` via:
//
//	NotificationAlertsConfigMap{ "key": NotificationAlertsConfigArgs{...} }
type NotificationAlertsConfigMapInput interface {
	pulumi.Input

	ToNotificationAlertsConfigMapOutput() NotificationAlertsConfigMapOutput
	ToNotificationAlertsConfigMapOutputWithContext(context.Context) NotificationAlertsConfigMapOutput
}

type NotificationAlertsConfigMap map[string]NotificationAlertsConfigInput

func (NotificationAlertsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationAlertsConfig)(nil)).Elem()
}

func (i NotificationAlertsConfigMap) ToNotificationAlertsConfigMapOutput() NotificationAlertsConfigMapOutput {
	return i.ToNotificationAlertsConfigMapOutputWithContext(context.Background())
}

func (i NotificationAlertsConfigMap) ToNotificationAlertsConfigMapOutputWithContext(ctx context.Context) NotificationAlertsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationAlertsConfigMapOutput)
}

type NotificationAlertsConfigOutput struct{ *pulumi.OutputState }

func (NotificationAlertsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotificationAlertsConfig)(nil)).Elem()
}

func (o NotificationAlertsConfigOutput) ToNotificationAlertsConfigOutput() NotificationAlertsConfigOutput {
	return o
}

func (o NotificationAlertsConfigOutput) ToNotificationAlertsConfigOutputWithContext(ctx context.Context) NotificationAlertsConfigOutput {
	return o
}

// Labels to add to alerts generated by this configuration.
func (o NotificationAlertsConfigOutput) AlertLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationAlertsConfig) pulumi.StringMapOutput { return v.AlertLabels }).(pulumi.StringMapOutput)
}

// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
func (o NotificationAlertsConfigOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotificationAlertsConfig) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// Labels to match for this alert configuration.
func (o NotificationAlertsConfigOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *NotificationAlertsConfig) pulumi.StringMapOutput { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// The name of the alert configuration.
func (o NotificationAlertsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotificationAlertsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether this alert configuration is silenced. Defaults to `false`.
func (o NotificationAlertsConfigOutput) Silenced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *NotificationAlertsConfig) pulumi.BoolPtrOutput { return v.Silenced }).(pulumi.BoolPtrOutput)
}

type NotificationAlertsConfigArrayOutput struct{ *pulumi.OutputState }

func (NotificationAlertsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotificationAlertsConfig)(nil)).Elem()
}

func (o NotificationAlertsConfigArrayOutput) ToNotificationAlertsConfigArrayOutput() NotificationAlertsConfigArrayOutput {
	return o
}

func (o NotificationAlertsConfigArrayOutput) ToNotificationAlertsConfigArrayOutputWithContext(ctx context.Context) NotificationAlertsConfigArrayOutput {
	return o
}

func (o NotificationAlertsConfigArrayOutput) Index(i pulumi.IntInput) NotificationAlertsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotificationAlertsConfig {
		return vs[0].([]*NotificationAlertsConfig)[vs[1].(int)]
	}).(NotificationAlertsConfigOutput)
}

type NotificationAlertsConfigMapOutput struct{ *pulumi.OutputState }

func (NotificationAlertsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotificationAlertsConfig)(nil)).Elem()
}

func (o NotificationAlertsConfigMapOutput) ToNotificationAlertsConfigMapOutput() NotificationAlertsConfigMapOutput {
	return o
}

func (o NotificationAlertsConfigMapOutput) ToNotificationAlertsConfigMapOutputWithContext(ctx context.Context) NotificationAlertsConfigMapOutput {
	return o
}

func (o NotificationAlertsConfigMapOutput) MapIndex(k pulumi.StringInput) NotificationAlertsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotificationAlertsConfig {
		return vs[0].(map[string]*NotificationAlertsConfig)[vs[1].(string)]
	}).(NotificationAlertsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationAlertsConfigInput)(nil)).Elem(), &NotificationAlertsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationAlertsConfigArrayInput)(nil)).Elem(), NotificationAlertsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationAlertsConfigMapInput)(nil)).Elem(), NotificationAlertsConfigMap{})
	pulumi.RegisterOutputType(NotificationAlertsConfigOutput{})
	pulumi.RegisterOutputType(NotificationAlertsConfigArrayOutput{})
	pulumi.RegisterOutputType(NotificationAlertsConfigMapOutput{})
}
