// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package enterprise

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type DataSourcePermissionPermission struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	BuiltInRole *string `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// DataSourcePermissionPermissionInput is an input type that accepts DataSourcePermissionPermissionArgs and DataSourcePermissionPermissionOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionInput` via:
//
//	DataSourcePermissionPermissionArgs{...}
type DataSourcePermissionPermissionInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput
	ToDataSourcePermissionPermissionOutputWithContext(context.Context) DataSourcePermissionPermissionOutput
}

type DataSourcePermissionPermissionArgs struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	BuiltInRole pulumi.StringPtrInput `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
	Permission pulumi.StringInput `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (DataSourcePermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return i.ToDataSourcePermissionPermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionOutput)
}

// DataSourcePermissionPermissionArrayInput is an input type that accepts DataSourcePermissionPermissionArray and DataSourcePermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionArrayInput` via:
//
//	DataSourcePermissionPermissionArray{ DataSourcePermissionPermissionArgs{...} }
type DataSourcePermissionPermissionArrayInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput
	ToDataSourcePermissionPermissionArrayOutputWithContext(context.Context) DataSourcePermissionPermissionArrayOutput
}

type DataSourcePermissionPermissionArray []DataSourcePermissionPermissionInput

func (DataSourcePermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return i.ToDataSourcePermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionArrayOutput)
}

type DataSourcePermissionPermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return o
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return o
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o DataSourcePermissionPermissionOutput) BuiltInRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.BuiltInRole }).(pulumi.StringPtrOutput)
}

// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
func (o DataSourcePermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type DataSourcePermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) Index(i pulumi.IntInput) DataSourcePermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePermissionPermission {
		return vs[0].([]DataSourcePermissionPermission)[vs[1].(int)]
	}).(DataSourcePermissionPermissionOutput)
}

type ReportDashboard struct {
	// Add report variables to the dashboard. Values should be separated by commas.
	ReportVariables map[string]string `pulumi:"reportVariables"`
	// Time range of the report.
	TimeRange *ReportDashboardTimeRange `pulumi:"timeRange"`
	// Dashboard uid.
	Uid string `pulumi:"uid"`
}

// ReportDashboardInput is an input type that accepts ReportDashboardArgs and ReportDashboardOutput values.
// You can construct a concrete instance of `ReportDashboardInput` via:
//
//	ReportDashboardArgs{...}
type ReportDashboardInput interface {
	pulumi.Input

	ToReportDashboardOutput() ReportDashboardOutput
	ToReportDashboardOutputWithContext(context.Context) ReportDashboardOutput
}

type ReportDashboardArgs struct {
	// Add report variables to the dashboard. Values should be separated by commas.
	ReportVariables pulumi.StringMapInput `pulumi:"reportVariables"`
	// Time range of the report.
	TimeRange ReportDashboardTimeRangePtrInput `pulumi:"timeRange"`
	// Dashboard uid.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (ReportDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboard)(nil)).Elem()
}

func (i ReportDashboardArgs) ToReportDashboardOutput() ReportDashboardOutput {
	return i.ToReportDashboardOutputWithContext(context.Background())
}

func (i ReportDashboardArgs) ToReportDashboardOutputWithContext(ctx context.Context) ReportDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardOutput)
}

// ReportDashboardArrayInput is an input type that accepts ReportDashboardArray and ReportDashboardArrayOutput values.
// You can construct a concrete instance of `ReportDashboardArrayInput` via:
//
//	ReportDashboardArray{ ReportDashboardArgs{...} }
type ReportDashboardArrayInput interface {
	pulumi.Input

	ToReportDashboardArrayOutput() ReportDashboardArrayOutput
	ToReportDashboardArrayOutputWithContext(context.Context) ReportDashboardArrayOutput
}

type ReportDashboardArray []ReportDashboardInput

func (ReportDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportDashboard)(nil)).Elem()
}

func (i ReportDashboardArray) ToReportDashboardArrayOutput() ReportDashboardArrayOutput {
	return i.ToReportDashboardArrayOutputWithContext(context.Background())
}

func (i ReportDashboardArray) ToReportDashboardArrayOutputWithContext(ctx context.Context) ReportDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardArrayOutput)
}

type ReportDashboardOutput struct{ *pulumi.OutputState }

func (ReportDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboard)(nil)).Elem()
}

func (o ReportDashboardOutput) ToReportDashboardOutput() ReportDashboardOutput {
	return o
}

func (o ReportDashboardOutput) ToReportDashboardOutputWithContext(ctx context.Context) ReportDashboardOutput {
	return o
}

// Add report variables to the dashboard. Values should be separated by commas.
func (o ReportDashboardOutput) ReportVariables() pulumi.StringMapOutput {
	return o.ApplyT(func(v ReportDashboard) map[string]string { return v.ReportVariables }).(pulumi.StringMapOutput)
}

// Time range of the report.
func (o ReportDashboardOutput) TimeRange() ReportDashboardTimeRangePtrOutput {
	return o.ApplyT(func(v ReportDashboard) *ReportDashboardTimeRange { return v.TimeRange }).(ReportDashboardTimeRangePtrOutput)
}

// Dashboard uid.
func (o ReportDashboardOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDashboard) string { return v.Uid }).(pulumi.StringOutput)
}

type ReportDashboardArrayOutput struct{ *pulumi.OutputState }

func (ReportDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportDashboard)(nil)).Elem()
}

func (o ReportDashboardArrayOutput) ToReportDashboardArrayOutput() ReportDashboardArrayOutput {
	return o
}

func (o ReportDashboardArrayOutput) ToReportDashboardArrayOutputWithContext(ctx context.Context) ReportDashboardArrayOutput {
	return o
}

func (o ReportDashboardArrayOutput) Index(i pulumi.IntInput) ReportDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportDashboard {
		return vs[0].([]ReportDashboard)[vs[1].(int)]
	}).(ReportDashboardOutput)
}

type ReportDashboardTimeRange struct {
	// Start of the time range.
	From *string `pulumi:"from"`
	// End of the time range.
	To *string `pulumi:"to"`
}

// ReportDashboardTimeRangeInput is an input type that accepts ReportDashboardTimeRangeArgs and ReportDashboardTimeRangeOutput values.
// You can construct a concrete instance of `ReportDashboardTimeRangeInput` via:
//
//	ReportDashboardTimeRangeArgs{...}
type ReportDashboardTimeRangeInput interface {
	pulumi.Input

	ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput
	ToReportDashboardTimeRangeOutputWithContext(context.Context) ReportDashboardTimeRangeOutput
}

type ReportDashboardTimeRangeArgs struct {
	// Start of the time range.
	From pulumi.StringPtrInput `pulumi:"from"`
	// End of the time range.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportDashboardTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboardTimeRange)(nil)).Elem()
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput {
	return i.ToReportDashboardTimeRangeOutputWithContext(context.Background())
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangeOutputWithContext(ctx context.Context) ReportDashboardTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangeOutput)
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return i.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangeOutput).ToReportDashboardTimeRangePtrOutputWithContext(ctx)
}

// ReportDashboardTimeRangePtrInput is an input type that accepts ReportDashboardTimeRangeArgs, ReportDashboardTimeRangePtr and ReportDashboardTimeRangePtrOutput values.
// You can construct a concrete instance of `ReportDashboardTimeRangePtrInput` via:
//
//	        ReportDashboardTimeRangeArgs{...}
//
//	or:
//
//	        nil
type ReportDashboardTimeRangePtrInput interface {
	pulumi.Input

	ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput
	ToReportDashboardTimeRangePtrOutputWithContext(context.Context) ReportDashboardTimeRangePtrOutput
}

type reportDashboardTimeRangePtrType ReportDashboardTimeRangeArgs

func ReportDashboardTimeRangePtr(v *ReportDashboardTimeRangeArgs) ReportDashboardTimeRangePtrInput {
	return (*reportDashboardTimeRangePtrType)(v)
}

func (*reportDashboardTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDashboardTimeRange)(nil)).Elem()
}

func (i *reportDashboardTimeRangePtrType) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return i.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (i *reportDashboardTimeRangePtrType) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangePtrOutput)
}

type ReportDashboardTimeRangeOutput struct{ *pulumi.OutputState }

func (ReportDashboardTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboardTimeRange)(nil)).Elem()
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput {
	return o
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangeOutputWithContext(ctx context.Context) ReportDashboardTimeRangeOutput {
	return o
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return o.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportDashboardTimeRange) *ReportDashboardTimeRange {
		return &v
	}).(ReportDashboardTimeRangePtrOutput)
}

// Start of the time range.
func (o ReportDashboardTimeRangeOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDashboardTimeRange) *string { return v.From }).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportDashboardTimeRangeOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDashboardTimeRange) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportDashboardTimeRangePtrOutput struct{ *pulumi.OutputState }

func (ReportDashboardTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDashboardTimeRange)(nil)).Elem()
}

func (o ReportDashboardTimeRangePtrOutput) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return o
}

func (o ReportDashboardTimeRangePtrOutput) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return o
}

func (o ReportDashboardTimeRangePtrOutput) Elem() ReportDashboardTimeRangeOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) ReportDashboardTimeRange {
		if v != nil {
			return *v
		}
		var ret ReportDashboardTimeRange
		return ret
	}).(ReportDashboardTimeRangeOutput)
}

// Start of the time range.
func (o ReportDashboardTimeRangePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.From
	}).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportDashboardTimeRangePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

type ReportSchedule struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval *string `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	EndTime *string `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency string `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth *bool `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	StartTime *string `pulumi:"startTime"`
	// Set the report time zone. Defaults to `GMT`.
	Timezone *string `pulumi:"timezone"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly *bool `pulumi:"workdaysOnly"`
}

// ReportScheduleInput is an input type that accepts ReportScheduleArgs and ReportScheduleOutput values.
// You can construct a concrete instance of `ReportScheduleInput` via:
//
//	ReportScheduleArgs{...}
type ReportScheduleInput interface {
	pulumi.Input

	ToReportScheduleOutput() ReportScheduleOutput
	ToReportScheduleOutputWithContext(context.Context) ReportScheduleOutput
}

type ReportScheduleArgs struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval pulumi.StringPtrInput `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth pulumi.BoolPtrInput `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Set the report time zone. Defaults to `GMT`.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly pulumi.BoolPtrInput `pulumi:"workdaysOnly"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput).ToReportSchedulePtrOutputWithContext(ctx)
}

// ReportSchedulePtrInput is an input type that accepts ReportScheduleArgs, ReportSchedulePtr and ReportSchedulePtrOutput values.
// You can construct a concrete instance of `ReportSchedulePtrInput` via:
//
//	        ReportScheduleArgs{...}
//
//	or:
//
//	        nil
type ReportSchedulePtrInput interface {
	pulumi.Input

	ToReportSchedulePtrOutput() ReportSchedulePtrOutput
	ToReportSchedulePtrOutputWithContext(context.Context) ReportSchedulePtrOutput
}

type reportSchedulePtrType ReportScheduleArgs

func ReportSchedulePtr(v *ReportScheduleArgs) ReportSchedulePtrInput {
	return (*reportSchedulePtrType)(v)
}

func (*reportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSchedulePtrOutput)
}

type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportSchedule) *ReportSchedule {
		return &v
	}).(ReportSchedulePtrOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportScheduleOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.CustomInterval }).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportScheduleOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.LastDayOfMonth }).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Set the report time zone. Defaults to `GMT`.
func (o ReportScheduleOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportScheduleOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.WorkdaysOnly }).(pulumi.BoolPtrOutput)
}

type ReportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) Elem() ReportScheduleOutput {
	return o.ApplyT(func(v *ReportSchedule) ReportSchedule {
		if v != nil {
			return *v
		}
		var ret ReportSchedule
		return ret
	}).(ReportScheduleOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportSchedulePtrOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.CustomInterval
	}).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportSchedulePtrOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.LastDayOfMonth
	}).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Set the report time zone. Defaults to `GMT`.
func (o ReportSchedulePtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportSchedulePtrOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.WorkdaysOnly
	}).(pulumi.BoolPtrOutput)
}

type RolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope *string `pulumi:"scope"`
}

// RolePermissionInput is an input type that accepts RolePermissionArgs and RolePermissionOutput values.
// You can construct a concrete instance of `RolePermissionInput` via:
//
//	RolePermissionArgs{...}
type RolePermissionInput interface {
	pulumi.Input

	ToRolePermissionOutput() RolePermissionOutput
	ToRolePermissionOutputWithContext(context.Context) RolePermissionOutput
}

type RolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumi.StringInput `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (RolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (i RolePermissionArgs) ToRolePermissionOutput() RolePermissionOutput {
	return i.ToRolePermissionOutputWithContext(context.Background())
}

func (i RolePermissionArgs) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionOutput)
}

// RolePermissionArrayInput is an input type that accepts RolePermissionArray and RolePermissionArrayOutput values.
// You can construct a concrete instance of `RolePermissionArrayInput` via:
//
//	RolePermissionArray{ RolePermissionArgs{...} }
type RolePermissionArrayInput interface {
	pulumi.Input

	ToRolePermissionArrayOutput() RolePermissionArrayOutput
	ToRolePermissionArrayOutputWithContext(context.Context) RolePermissionArrayOutput
}

type RolePermissionArray []RolePermissionInput

func (RolePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (i RolePermissionArray) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return i.ToRolePermissionArrayOutputWithContext(context.Background())
}

func (i RolePermissionArray) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionArrayOutput)
}

type RolePermissionOutput struct{ *pulumi.OutputState }

func (RolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (o RolePermissionOutput) ToRolePermissionOutput() RolePermissionOutput {
	return o
}

func (o RolePermissionOutput) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return o
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o RolePermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RolePermission) string { return v.Action }).(pulumi.StringOutput)
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to “.
func (o RolePermissionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePermission) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type RolePermissionArrayOutput struct{ *pulumi.OutputState }

func (RolePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) Index(i pulumi.IntInput) RolePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePermission {
		return vs[0].([]RolePermission)[vs[1].(int)]
	}).(RolePermissionOutput)
}

type GetRolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope *string `pulumi:"scope"`
}

// GetRolePermissionInput is an input type that accepts GetRolePermissionArgs and GetRolePermissionOutput values.
// You can construct a concrete instance of `GetRolePermissionInput` via:
//
//	GetRolePermissionArgs{...}
type GetRolePermissionInput interface {
	pulumi.Input

	ToGetRolePermissionOutput() GetRolePermissionOutput
	ToGetRolePermissionOutputWithContext(context.Context) GetRolePermissionOutput
}

type GetRolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumi.StringInput `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (GetRolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return i.ToGetRolePermissionOutputWithContext(context.Background())
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePermissionOutput)
}

// GetRolePermissionArrayInput is an input type that accepts GetRolePermissionArray and GetRolePermissionArrayOutput values.
// You can construct a concrete instance of `GetRolePermissionArrayInput` via:
//
//	GetRolePermissionArray{ GetRolePermissionArgs{...} }
type GetRolePermissionArrayInput interface {
	pulumi.Input

	ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput
	ToGetRolePermissionArrayOutputWithContext(context.Context) GetRolePermissionArrayOutput
}

type GetRolePermissionArray []GetRolePermissionInput

func (GetRolePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePermission)(nil)).Elem()
}

func (i GetRolePermissionArray) ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput {
	return i.ToGetRolePermissionArrayOutputWithContext(context.Background())
}

func (i GetRolePermissionArray) ToGetRolePermissionArrayOutputWithContext(ctx context.Context) GetRolePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePermissionArrayOutput)
}

type GetRolePermissionOutput struct{ *pulumi.OutputState }

func (GetRolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return o
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return o
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o GetRolePermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePermission) string { return v.Action }).(pulumi.StringOutput)
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
func (o GetRolePermissionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRolePermission) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type GetRolePermissionArrayOutput struct{ *pulumi.OutputState }

func (GetRolePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePermission)(nil)).Elem()
}

func (o GetRolePermissionArrayOutput) ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput {
	return o
}

func (o GetRolePermissionArrayOutput) ToGetRolePermissionArrayOutputWithContext(ctx context.Context) GetRolePermissionArrayOutput {
	return o
}

func (o GetRolePermissionArrayOutput) Index(i pulumi.IntInput) GetRolePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolePermission {
		return vs[0].([]GetRolePermission)[vs[1].(int)]
	}).(GetRolePermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionInput)(nil)).Elem(), DataSourcePermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionArrayInput)(nil)).Elem(), DataSourcePermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardInput)(nil)).Elem(), ReportDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardArrayInput)(nil)).Elem(), ReportDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardTimeRangeInput)(nil)).Elem(), ReportDashboardTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardTimeRangePtrInput)(nil)).Elem(), ReportDashboardTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportScheduleInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSchedulePtrInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionInput)(nil)).Elem(), RolePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionArrayInput)(nil)).Elem(), RolePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePermissionInput)(nil)).Elem(), GetRolePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePermissionArrayInput)(nil)).Elem(), GetRolePermissionArray{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(ReportDashboardOutput{})
	pulumi.RegisterOutputType(ReportDashboardArrayOutput{})
	pulumi.RegisterOutputType(ReportDashboardTimeRangeOutput{})
	pulumi.RegisterOutputType(ReportDashboardTimeRangePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportSchedulePtrOutput{})
	pulumi.RegisterOutputType(RolePermissionOutput{})
	pulumi.RegisterOutputType(RolePermissionArrayOutput{})
	pulumi.RegisterOutputType(GetRolePermissionOutput{})
	pulumi.RegisterOutputType(GetRolePermissionArrayOutput{})
}
