// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package enterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Manages LBAC rules for a data source.
//
// !> Warning: The resource is experimental and will be subject to change. This resource manages the entire LBAC rules tree, and will overwrite any existing rules.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/data-source-management/teamlbac/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/datasource_lbac_rules/)
//
// This resource requires Grafana >=11.5.0.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"encoding/json"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/enterprise"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := oss.NewTeam(ctx, "team", &oss.TeamArgs{
//				Name: pulumi.String("Team Name"),
//			})
//			if err != nil {
//				return err
//			}
//			tmpJSON0, err := json.Marshal(map[string]interface{}{
//				"authType":          "default",
//				"basicAuthPassword": "password",
//			})
//			if err != nil {
//				return err
//			}
//			json0 := string(tmpJSON0)
//			test, err := oss.NewDataSource(ctx, "test", &oss.DataSourceArgs{
//				Type:              pulumi.String("loki"),
//				Name:              pulumi.String("loki-from-terraform"),
//				Url:               pulumi.String("https://mylokiurl.net"),
//				BasicAuthEnabled:  pulumi.Bool(true),
//				BasicAuthUsername: pulumi.String("username"),
//				JsonDataEncoded:   pulumi.String(json0),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = enterprise.NewDataSourceConfigLbacRules(ctx, "test_rule", &enterprise.DataSourceConfigLbacRulesArgs{
//				DatasourceUid: test.Uid,
//				Rules: team.TeamUid.ApplyT(func(teamUid string) (pulumi.String, error) {
//					var _zero pulumi.String
//					tmpJSON1, err := json.Marshal(map[string][]string{
//						teamUid: []string{
//							"{ cluster = \"dev-us-central-0\", namespace = \"hosted-grafana\" }",
//							"{ foo = \"qux\" }",
//						},
//					})
//					if err != nil {
//						return _zero, err
//					}
//					json1 := string(tmpJSON1)
//					return pulumi.String(json1), nil
//				}).(pulumi.StringOutput),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				team,
//				test,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:enterprise/dataSourceConfigLbacRules:DataSourceConfigLbacRules name "{{ datasource_uid }}"
// ```
type DataSourceConfigLbacRules struct {
	pulumi.CustomResourceState

	// The UID of the datasource.
	DatasourceUid pulumi.StringOutput `pulumi:"datasourceUid"`
	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules pulumi.StringOutput `pulumi:"rules"`
}

// NewDataSourceConfigLbacRules registers a new resource with the given unique name, arguments, and options.
func NewDataSourceConfigLbacRules(ctx *pulumi.Context,
	name string, args *DataSourceConfigLbacRulesArgs, opts ...pulumi.ResourceOption) (*DataSourceConfigLbacRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasourceUid == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceUid'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DataSourceConfigLbacRules
	err := ctx.RegisterResource("grafana:enterprise/dataSourceConfigLbacRules:DataSourceConfigLbacRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDataSourceConfigLbacRules gets an existing DataSourceConfigLbacRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDataSourceConfigLbacRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DataSourceConfigLbacRulesState, opts ...pulumi.ResourceOption) (*DataSourceConfigLbacRules, error) {
	var resource DataSourceConfigLbacRules
	err := ctx.ReadResource("grafana:enterprise/dataSourceConfigLbacRules:DataSourceConfigLbacRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DataSourceConfigLbacRules resources.
type dataSourceConfigLbacRulesState struct {
	// The UID of the datasource.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules *string `pulumi:"rules"`
}

type DataSourceConfigLbacRulesState struct {
	// The UID of the datasource.
	DatasourceUid pulumi.StringPtrInput
	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules pulumi.StringPtrInput
}

func (DataSourceConfigLbacRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceConfigLbacRulesState)(nil)).Elem()
}

type dataSourceConfigLbacRulesArgs struct {
	// The UID of the datasource.
	DatasourceUid string `pulumi:"datasourceUid"`
	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules string `pulumi:"rules"`
}

// The set of arguments for constructing a DataSourceConfigLbacRules resource.
type DataSourceConfigLbacRulesArgs struct {
	// The UID of the datasource.
	DatasourceUid pulumi.StringInput
	// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
	Rules pulumi.StringInput
}

func (DataSourceConfigLbacRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dataSourceConfigLbacRulesArgs)(nil)).Elem()
}

type DataSourceConfigLbacRulesInput interface {
	pulumi.Input

	ToDataSourceConfigLbacRulesOutput() DataSourceConfigLbacRulesOutput
	ToDataSourceConfigLbacRulesOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesOutput
}

func (*DataSourceConfigLbacRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceConfigLbacRules)(nil)).Elem()
}

func (i *DataSourceConfigLbacRules) ToDataSourceConfigLbacRulesOutput() DataSourceConfigLbacRulesOutput {
	return i.ToDataSourceConfigLbacRulesOutputWithContext(context.Background())
}

func (i *DataSourceConfigLbacRules) ToDataSourceConfigLbacRulesOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceConfigLbacRulesOutput)
}

// DataSourceConfigLbacRulesArrayInput is an input type that accepts DataSourceConfigLbacRulesArray and DataSourceConfigLbacRulesArrayOutput values.
// You can construct a concrete instance of `DataSourceConfigLbacRulesArrayInput` via:
//
//	DataSourceConfigLbacRulesArray{ DataSourceConfigLbacRulesArgs{...} }
type DataSourceConfigLbacRulesArrayInput interface {
	pulumi.Input

	ToDataSourceConfigLbacRulesArrayOutput() DataSourceConfigLbacRulesArrayOutput
	ToDataSourceConfigLbacRulesArrayOutputWithContext(context.Context) DataSourceConfigLbacRulesArrayOutput
}

type DataSourceConfigLbacRulesArray []DataSourceConfigLbacRulesInput

func (DataSourceConfigLbacRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSourceConfigLbacRules)(nil)).Elem()
}

func (i DataSourceConfigLbacRulesArray) ToDataSourceConfigLbacRulesArrayOutput() DataSourceConfigLbacRulesArrayOutput {
	return i.ToDataSourceConfigLbacRulesArrayOutputWithContext(context.Background())
}

func (i DataSourceConfigLbacRulesArray) ToDataSourceConfigLbacRulesArrayOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceConfigLbacRulesArrayOutput)
}

// DataSourceConfigLbacRulesMapInput is an input type that accepts DataSourceConfigLbacRulesMap and DataSourceConfigLbacRulesMapOutput values.
// You can construct a concrete instance of `DataSourceConfigLbacRulesMapInput` via:
//
//	DataSourceConfigLbacRulesMap{ "key": DataSourceConfigLbacRulesArgs{...} }
type DataSourceConfigLbacRulesMapInput interface {
	pulumi.Input

	ToDataSourceConfigLbacRulesMapOutput() DataSourceConfigLbacRulesMapOutput
	ToDataSourceConfigLbacRulesMapOutputWithContext(context.Context) DataSourceConfigLbacRulesMapOutput
}

type DataSourceConfigLbacRulesMap map[string]DataSourceConfigLbacRulesInput

func (DataSourceConfigLbacRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSourceConfigLbacRules)(nil)).Elem()
}

func (i DataSourceConfigLbacRulesMap) ToDataSourceConfigLbacRulesMapOutput() DataSourceConfigLbacRulesMapOutput {
	return i.ToDataSourceConfigLbacRulesMapOutputWithContext(context.Background())
}

func (i DataSourceConfigLbacRulesMap) ToDataSourceConfigLbacRulesMapOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourceConfigLbacRulesMapOutput)
}

type DataSourceConfigLbacRulesOutput struct{ *pulumi.OutputState }

func (DataSourceConfigLbacRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DataSourceConfigLbacRules)(nil)).Elem()
}

func (o DataSourceConfigLbacRulesOutput) ToDataSourceConfigLbacRulesOutput() DataSourceConfigLbacRulesOutput {
	return o
}

func (o DataSourceConfigLbacRulesOutput) ToDataSourceConfigLbacRulesOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesOutput {
	return o
}

// The UID of the datasource.
func (o DataSourceConfigLbacRulesOutput) DatasourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSourceConfigLbacRules) pulumi.StringOutput { return v.DatasourceUid }).(pulumi.StringOutput)
}

// JSON-encoded LBAC rules for the data source. Map of team UIDs to lists of rule strings.
func (o DataSourceConfigLbacRulesOutput) Rules() pulumi.StringOutput {
	return o.ApplyT(func(v *DataSourceConfigLbacRules) pulumi.StringOutput { return v.Rules }).(pulumi.StringOutput)
}

type DataSourceConfigLbacRulesArrayOutput struct{ *pulumi.OutputState }

func (DataSourceConfigLbacRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DataSourceConfigLbacRules)(nil)).Elem()
}

func (o DataSourceConfigLbacRulesArrayOutput) ToDataSourceConfigLbacRulesArrayOutput() DataSourceConfigLbacRulesArrayOutput {
	return o
}

func (o DataSourceConfigLbacRulesArrayOutput) ToDataSourceConfigLbacRulesArrayOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesArrayOutput {
	return o
}

func (o DataSourceConfigLbacRulesArrayOutput) Index(i pulumi.IntInput) DataSourceConfigLbacRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DataSourceConfigLbacRules {
		return vs[0].([]*DataSourceConfigLbacRules)[vs[1].(int)]
	}).(DataSourceConfigLbacRulesOutput)
}

type DataSourceConfigLbacRulesMapOutput struct{ *pulumi.OutputState }

func (DataSourceConfigLbacRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DataSourceConfigLbacRules)(nil)).Elem()
}

func (o DataSourceConfigLbacRulesMapOutput) ToDataSourceConfigLbacRulesMapOutput() DataSourceConfigLbacRulesMapOutput {
	return o
}

func (o DataSourceConfigLbacRulesMapOutput) ToDataSourceConfigLbacRulesMapOutputWithContext(ctx context.Context) DataSourceConfigLbacRulesMapOutput {
	return o
}

func (o DataSourceConfigLbacRulesMapOutput) MapIndex(k pulumi.StringInput) DataSourceConfigLbacRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DataSourceConfigLbacRules {
		return vs[0].(map[string]*DataSourceConfigLbacRules)[vs[1].(string)]
	}).(DataSourceConfigLbacRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceConfigLbacRulesInput)(nil)).Elem(), &DataSourceConfigLbacRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceConfigLbacRulesArrayInput)(nil)).Elem(), DataSourceConfigLbacRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourceConfigLbacRulesMapInput)(nil)).Elem(), DataSourceConfigLbacRulesMap{})
	pulumi.RegisterOutputType(DataSourceConfigLbacRulesOutput{})
	pulumi.RegisterOutputType(DataSourceConfigLbacRulesArrayOutput{})
	pulumi.RegisterOutputType(DataSourceConfigLbacRulesMapOutput{})
}
