// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package enterprise

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// **Note:** This resource is available only with Grafana Enterprise.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-scim-provisioning/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/enterprise"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := enterprise.NewScimConfig(ctx, "default", &enterprise.ScimConfigArgs{
//				EnableUserSync:           pulumi.Bool(true),
//				EnableGroupSync:          pulumi.Bool(false),
//				AllowNonProvisionedUsers: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:enterprise/scimConfig:ScimConfig name ""
// ```
//
// ```sh
// $ pulumi import grafana:enterprise/scimConfig:ScimConfig name "{{ orgID }}"
// ```
type ScimConfig struct {
	pulumi.CustomResourceState

	// Whether to allow non-provisioned users to access Grafana.
	AllowNonProvisionedUsers pulumi.BoolOutput `pulumi:"allowNonProvisionedUsers"`
	// Whether group synchronization is enabled.
	EnableGroupSync pulumi.BoolOutput `pulumi:"enableGroupSync"`
	// Whether user synchronization is enabled.
	EnableUserSync pulumi.BoolOutput `pulumi:"enableUserSync"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
}

// NewScimConfig registers a new resource with the given unique name, arguments, and options.
func NewScimConfig(ctx *pulumi.Context,
	name string, args *ScimConfigArgs, opts ...pulumi.ResourceOption) (*ScimConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowNonProvisionedUsers == nil {
		return nil, errors.New("invalid value for required argument 'AllowNonProvisionedUsers'")
	}
	if args.EnableGroupSync == nil {
		return nil, errors.New("invalid value for required argument 'EnableGroupSync'")
	}
	if args.EnableUserSync == nil {
		return nil, errors.New("invalid value for required argument 'EnableUserSync'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScimConfig
	err := ctx.RegisterResource("grafana:enterprise/scimConfig:ScimConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScimConfig gets an existing ScimConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScimConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScimConfigState, opts ...pulumi.ResourceOption) (*ScimConfig, error) {
	var resource ScimConfig
	err := ctx.ReadResource("grafana:enterprise/scimConfig:ScimConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScimConfig resources.
type scimConfigState struct {
	// Whether to allow non-provisioned users to access Grafana.
	AllowNonProvisionedUsers *bool `pulumi:"allowNonProvisionedUsers"`
	// Whether group synchronization is enabled.
	EnableGroupSync *bool `pulumi:"enableGroupSync"`
	// Whether user synchronization is enabled.
	EnableUserSync *bool `pulumi:"enableUserSync"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

type ScimConfigState struct {
	// Whether to allow non-provisioned users to access Grafana.
	AllowNonProvisionedUsers pulumi.BoolPtrInput
	// Whether group synchronization is enabled.
	EnableGroupSync pulumi.BoolPtrInput
	// Whether user synchronization is enabled.
	EnableUserSync pulumi.BoolPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (ScimConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*scimConfigState)(nil)).Elem()
}

type scimConfigArgs struct {
	// Whether to allow non-provisioned users to access Grafana.
	AllowNonProvisionedUsers bool `pulumi:"allowNonProvisionedUsers"`
	// Whether group synchronization is enabled.
	EnableGroupSync bool `pulumi:"enableGroupSync"`
	// Whether user synchronization is enabled.
	EnableUserSync bool `pulumi:"enableUserSync"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

// The set of arguments for constructing a ScimConfig resource.
type ScimConfigArgs struct {
	// Whether to allow non-provisioned users to access Grafana.
	AllowNonProvisionedUsers pulumi.BoolInput
	// Whether group synchronization is enabled.
	EnableGroupSync pulumi.BoolInput
	// Whether user synchronization is enabled.
	EnableUserSync pulumi.BoolInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (ScimConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scimConfigArgs)(nil)).Elem()
}

type ScimConfigInput interface {
	pulumi.Input

	ToScimConfigOutput() ScimConfigOutput
	ToScimConfigOutputWithContext(ctx context.Context) ScimConfigOutput
}

func (*ScimConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimConfig)(nil)).Elem()
}

func (i *ScimConfig) ToScimConfigOutput() ScimConfigOutput {
	return i.ToScimConfigOutputWithContext(context.Background())
}

func (i *ScimConfig) ToScimConfigOutputWithContext(ctx context.Context) ScimConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimConfigOutput)
}

// ScimConfigArrayInput is an input type that accepts ScimConfigArray and ScimConfigArrayOutput values.
// You can construct a concrete instance of `ScimConfigArrayInput` via:
//
//	ScimConfigArray{ ScimConfigArgs{...} }
type ScimConfigArrayInput interface {
	pulumi.Input

	ToScimConfigArrayOutput() ScimConfigArrayOutput
	ToScimConfigArrayOutputWithContext(context.Context) ScimConfigArrayOutput
}

type ScimConfigArray []ScimConfigInput

func (ScimConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimConfig)(nil)).Elem()
}

func (i ScimConfigArray) ToScimConfigArrayOutput() ScimConfigArrayOutput {
	return i.ToScimConfigArrayOutputWithContext(context.Background())
}

func (i ScimConfigArray) ToScimConfigArrayOutputWithContext(ctx context.Context) ScimConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimConfigArrayOutput)
}

// ScimConfigMapInput is an input type that accepts ScimConfigMap and ScimConfigMapOutput values.
// You can construct a concrete instance of `ScimConfigMapInput` via:
//
//	ScimConfigMap{ "key": ScimConfigArgs{...} }
type ScimConfigMapInput interface {
	pulumi.Input

	ToScimConfigMapOutput() ScimConfigMapOutput
	ToScimConfigMapOutputWithContext(context.Context) ScimConfigMapOutput
}

type ScimConfigMap map[string]ScimConfigInput

func (ScimConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimConfig)(nil)).Elem()
}

func (i ScimConfigMap) ToScimConfigMapOutput() ScimConfigMapOutput {
	return i.ToScimConfigMapOutputWithContext(context.Background())
}

func (i ScimConfigMap) ToScimConfigMapOutputWithContext(ctx context.Context) ScimConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScimConfigMapOutput)
}

type ScimConfigOutput struct{ *pulumi.OutputState }

func (ScimConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScimConfig)(nil)).Elem()
}

func (o ScimConfigOutput) ToScimConfigOutput() ScimConfigOutput {
	return o
}

func (o ScimConfigOutput) ToScimConfigOutputWithContext(ctx context.Context) ScimConfigOutput {
	return o
}

// Whether to allow non-provisioned users to access Grafana.
func (o ScimConfigOutput) AllowNonProvisionedUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScimConfig) pulumi.BoolOutput { return v.AllowNonProvisionedUsers }).(pulumi.BoolOutput)
}

// Whether group synchronization is enabled.
func (o ScimConfigOutput) EnableGroupSync() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScimConfig) pulumi.BoolOutput { return v.EnableGroupSync }).(pulumi.BoolOutput)
}

// Whether user synchronization is enabled.
func (o ScimConfigOutput) EnableUserSync() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScimConfig) pulumi.BoolOutput { return v.EnableUserSync }).(pulumi.BoolOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o ScimConfigOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScimConfig) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

type ScimConfigArrayOutput struct{ *pulumi.OutputState }

func (ScimConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScimConfig)(nil)).Elem()
}

func (o ScimConfigArrayOutput) ToScimConfigArrayOutput() ScimConfigArrayOutput {
	return o
}

func (o ScimConfigArrayOutput) ToScimConfigArrayOutputWithContext(ctx context.Context) ScimConfigArrayOutput {
	return o
}

func (o ScimConfigArrayOutput) Index(i pulumi.IntInput) ScimConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScimConfig {
		return vs[0].([]*ScimConfig)[vs[1].(int)]
	}).(ScimConfigOutput)
}

type ScimConfigMapOutput struct{ *pulumi.OutputState }

func (ScimConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScimConfig)(nil)).Elem()
}

func (o ScimConfigMapOutput) ToScimConfigMapOutput() ScimConfigMapOutput {
	return o
}

func (o ScimConfigMapOutput) ToScimConfigMapOutputWithContext(ctx context.Context) ScimConfigMapOutput {
	return o
}

func (o ScimConfigMapOutput) MapIndex(k pulumi.StringInput) ScimConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScimConfig {
		return vs[0].(map[string]*ScimConfig)[vs[1].(string)]
	}).(ScimConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScimConfigInput)(nil)).Elem(), &ScimConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimConfigArrayInput)(nil)).Elem(), ScimConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScimConfigMapInput)(nil)).Elem(), ScimConfigMap{})
	pulumi.RegisterOutputType(ScimConfigOutput{})
	pulumi.RegisterOutputType(ScimConfigArrayOutput{})
	pulumi.RegisterOutputType(ScimConfigMapOutput{})
}
