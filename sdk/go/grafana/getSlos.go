// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Datasource for retrieving all SLOs.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/alerting-and-irm/slo/api/)
// * [Additional Information On Alerting Rule Annotations and Labels](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/#templating/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/slo"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := slo.NewSLO(ctx, "test", &slo.SLOArgs{
//				Name:        pulumi.String("Terraform Testing"),
//				Description: pulumi.String("Terraform Description"),
//				Queries: slo.SLOQueryArray{
//					&slo.SLOQueryArgs{
//						Freeform: &slo.SLOQueryFreeformArgs{
//							Query: pulumi.String("sum(rate(apiserver_request_total{code!=\"500\"}[$__rate_interval])) / sum(rate(apiserver_request_total[$__rate_interval]))"),
//						},
//						Type: pulumi.String("freeform"),
//					},
//				},
//				Objectives: slo.SLOObjectiveArray{
//					&slo.SLOObjectiveArgs{
//						Value:  pulumi.Float64(0.995),
//						Window: pulumi.String("30d"),
//					},
//				},
//				DestinationDatasource: &slo.SLODestinationDatasourceArgs{
//					Uid: pulumi.String("grafanacloud-prom"),
//				},
//				Labels: slo.SLOLabelArray{
//					&slo.SLOLabelArgs{
//						Key:   pulumi.String("custom"),
//						Value: pulumi.String("value"),
//					},
//				},
//				Alertings: slo.SLOAlertingArray{
//					&slo.SLOAlertingArgs{
//						Fastburns: slo.SLOAlertingFastburnArray{
//							&slo.SLOAlertingFastburnArgs{
//								Annotations: slo.SLOAlertingFastburnAnnotationArray{
//									&slo.SLOAlertingFastburnAnnotationArgs{
//										Key:   pulumi.String("name"),
//										Value: pulumi.String("Critical - SLO Burn Rate Alert"),
//									},
//								},
//								Labels: slo.SLOAlertingFastburnLabelArray{
//									&slo.SLOAlertingFastburnLabelArgs{
//										Key:   pulumi.String("type"),
//										Value: pulumi.String("slo"),
//									},
//								},
//							},
//						},
//						Slowburns: slo.SLOAlertingSlowburnArray{
//							&slo.SLOAlertingSlowburnArgs{
//								Annotations: slo.SLOAlertingSlowburnAnnotationArray{
//									&slo.SLOAlertingSlowburnAnnotationArgs{
//										Key:   pulumi.String("name"),
//										Value: pulumi.String("Warning - SLO Burn Rate Alert"),
//									},
//								},
//								Labels: slo.SLOAlertingSlowburnLabelArray{
//									&slo.SLOAlertingSlowburnLabelArgs{
//										Key:   pulumi.String("type"),
//										Value: pulumi.String("slo"),
//									},
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = slo.GetSlos(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: grafana.index/getslos.getSlos has been deprecated in favor of grafana.slo/getslos.getSlos
func GetSlos(ctx *pulumi.Context, opts ...pulumi.InvokeOption) (*GetSlosResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSlosResult
	err := ctx.Invoke("grafana:index/getSlos:getSlos", nil, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of values returned by getSlos.
type GetSlosResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Returns a list of all SLOs"
	Slos []GetSlosSlo `pulumi:"slos"`
}

func GetSlosOutput(ctx *pulumi.Context, opts ...pulumi.InvokeOption) GetSlosResultOutput {
	return pulumi.ToOutput(0).ApplyT(func(int) (GetSlosResultOutput, error) {
		opts = internal.PkgInvokeDefaultOpts(opts)
		var rv GetSlosResult
		secret, err := ctx.InvokePackageRaw("grafana:index/getSlos:getSlos", nil, &rv, "", opts...)
		if err != nil {
			return GetSlosResultOutput{}, err
		}

		output := pulumi.ToOutput(rv).(GetSlosResultOutput)
		if secret {
			return pulumi.ToSecret(output).(GetSlosResultOutput), nil
		}
		return output, nil
	}).(GetSlosResultOutput)
}

// A collection of values returned by getSlos.
type GetSlosResultOutput struct{ *pulumi.OutputState }

func (GetSlosResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosResult)(nil)).Elem()
}

func (o GetSlosResultOutput) ToGetSlosResultOutput() GetSlosResultOutput {
	return o
}

func (o GetSlosResultOutput) ToGetSlosResultOutputWithContext(ctx context.Context) GetSlosResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSlosResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosResult) string { return v.Id }).(pulumi.StringOutput)
}

// Returns a list of all SLOs"
func (o GetSlosResultOutput) Slos() GetSlosSloArrayOutput {
	return o.ApplyT(func(v GetSlosResult) []GetSlosSlo { return v.Slos }).(GetSlosSloArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSlosResultOutput{})
}
