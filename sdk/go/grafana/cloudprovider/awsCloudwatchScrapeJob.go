// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloudprovider

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/cloud"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/cloudprovider"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := cloud.LookupStack(ctx, &cloud.LookupStackArgs{
//				Slug: "gcloudstacktest",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testGetRole, err := iam.LookupRole(ctx, &iam.LookupRoleArgs{
//				Name: "my-role",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			testAwsAccount, err := cloudprovider.NewAwsAccount(ctx, "test", &cloudprovider.AwsAccountArgs{
//				StackId: pulumi.String(test.Id),
//				RoleArn: pulumi.String(testGetRole.Arn),
//				Regions: pulumi.StringArray{
//					pulumi.String("us-east-1"),
//					pulumi.String("us-east-2"),
//					pulumi.String("us-west-1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloudprovider.NewAwsCloudwatchScrapeJob(ctx, "test", &cloudprovider.AwsCloudwatchScrapeJobArgs{
//				StackId:              pulumi.String(test.Id),
//				Name:                 pulumi.String("my-cloudwatch-scrape-job"),
//				AwsAccountResourceId: testAwsAccount.ResourceId,
//				ExportTags:           pulumi.Bool(true),
//				Services: cloudprovider.AwsCloudwatchScrapeJobServiceArray{
//					&cloudprovider.AwsCloudwatchScrapeJobServiceArgs{
//						Name: pulumi.String("AWS/EC2"),
//						Metrics: cloudprovider.AwsCloudwatchScrapeJobServiceMetricArray{
//							&cloudprovider.AwsCloudwatchScrapeJobServiceMetricArgs{
//								Name: pulumi.String("CPUUtilization"),
//								Statistics: pulumi.StringArray{
//									pulumi.String("Average"),
//								},
//							},
//							&cloudprovider.AwsCloudwatchScrapeJobServiceMetricArgs{
//								Name: pulumi.String("StatusCheckFailed"),
//								Statistics: pulumi.StringArray{
//									pulumi.String("Maximum"),
//								},
//							},
//						},
//						ScrapeIntervalSeconds: pulumi.Int(300),
//						ResourceDiscoveryTagFilters: cloudprovider.AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArray{
//							&cloudprovider.AwsCloudwatchScrapeJobServiceResourceDiscoveryTagFilterArgs{
//								Key:   pulumi.String("k8s.io/cluster-autoscaler/enabled"),
//								Value: pulumi.String("true"),
//							},
//						},
//						TagsToAddToMetrics: pulumi.StringArray{
//							pulumi.String("eks:cluster-name"),
//						},
//					},
//				},
//				CustomNamespaces: cloudprovider.AwsCloudwatchScrapeJobCustomNamespaceArray{
//					&cloudprovider.AwsCloudwatchScrapeJobCustomNamespaceArgs{
//						Name: pulumi.String("CoolApp"),
//						Metrics: cloudprovider.AwsCloudwatchScrapeJobCustomNamespaceMetricArray{
//							&cloudprovider.AwsCloudwatchScrapeJobCustomNamespaceMetricArgs{
//								Name: pulumi.String("CoolMetric"),
//								Statistics: pulumi.StringArray{
//									pulumi.String("Maximum"),
//									pulumi.String("Sum"),
//								},
//							},
//						},
//						ScrapeIntervalSeconds: pulumi.Int(300),
//					},
//				},
//				StaticLabels: pulumi.StringMap{
//					"label1": pulumi.String("value1"),
//					"label2": pulumi.String("value2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:cloudProvider/awsCloudwatchScrapeJob:AwsCloudwatchScrapeJob name "{{ stack_id }}:{{ name }}"
// ```
type AwsCloudwatchScrapeJob struct {
	pulumi.CustomResourceState

	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
	AwsAccountResourceId pulumi.StringOutput `pulumi:"awsAccountResourceId"`
	// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespaces AwsCloudwatchScrapeJobCustomNamespaceArrayOutput `pulumi:"customNamespaces"`
	// When the AWS CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
	DisabledReason pulumi.StringOutput `pulumi:"disabledReason"`
	// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
	ExportTags pulumi.BoolOutput   `pulumi:"exportTags"`
	Name       pulumi.StringOutput `pulumi:"name"`
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	RegionsSubsetOverrides pulumi.StringArrayOutput `pulumi:"regionsSubsetOverrides"`
	// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Services AwsCloudwatchScrapeJobServiceArrayOutput `pulumi:"services"`
	StackId  pulumi.StringOutput                      `pulumi:"stackId"`
	// A set of static labels to add to all metrics exported by this scrape job.
	StaticLabels pulumi.StringMapOutput `pulumi:"staticLabels"`
}

// NewAwsCloudwatchScrapeJob registers a new resource with the given unique name, arguments, and options.
func NewAwsCloudwatchScrapeJob(ctx *pulumi.Context,
	name string, args *AwsCloudwatchScrapeJobArgs, opts ...pulumi.ResourceOption) (*AwsCloudwatchScrapeJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AwsAccountResourceId == nil {
		return nil, errors.New("invalid value for required argument 'AwsAccountResourceId'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AwsCloudwatchScrapeJob
	err := ctx.RegisterResource("grafana:cloudProvider/awsCloudwatchScrapeJob:AwsCloudwatchScrapeJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAwsCloudwatchScrapeJob gets an existing AwsCloudwatchScrapeJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAwsCloudwatchScrapeJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AwsCloudwatchScrapeJobState, opts ...pulumi.ResourceOption) (*AwsCloudwatchScrapeJob, error) {
	var resource AwsCloudwatchScrapeJob
	err := ctx.ReadResource("grafana:cloudProvider/awsCloudwatchScrapeJob:AwsCloudwatchScrapeJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AwsCloudwatchScrapeJob resources.
type awsCloudwatchScrapeJobState struct {
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
	AwsAccountResourceId *string `pulumi:"awsAccountResourceId"`
	// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespaces []AwsCloudwatchScrapeJobCustomNamespace `pulumi:"customNamespaces"`
	// When the AWS CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
	DisabledReason *string `pulumi:"disabledReason"`
	// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
	ExportTags *bool   `pulumi:"exportTags"`
	Name       *string `pulumi:"name"`
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	RegionsSubsetOverrides []string `pulumi:"regionsSubsetOverrides"`
	// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Services []AwsCloudwatchScrapeJobService `pulumi:"services"`
	StackId  *string                         `pulumi:"stackId"`
	// A set of static labels to add to all metrics exported by this scrape job.
	StaticLabels map[string]string `pulumi:"staticLabels"`
}

type AwsCloudwatchScrapeJobState struct {
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
	AwsAccountResourceId pulumi.StringPtrInput
	// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespaces AwsCloudwatchScrapeJobCustomNamespaceArrayInput
	// When the AWS CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
	DisabledReason pulumi.StringPtrInput
	// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
	ExportTags pulumi.BoolPtrInput
	Name       pulumi.StringPtrInput
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	RegionsSubsetOverrides pulumi.StringArrayInput
	// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Services AwsCloudwatchScrapeJobServiceArrayInput
	StackId  pulumi.StringPtrInput
	// A set of static labels to add to all metrics exported by this scrape job.
	StaticLabels pulumi.StringMapInput
}

func (AwsCloudwatchScrapeJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchScrapeJobState)(nil)).Elem()
}

type awsCloudwatchScrapeJobArgs struct {
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
	AwsAccountResourceId string `pulumi:"awsAccountResourceId"`
	// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespaces []AwsCloudwatchScrapeJobCustomNamespace `pulumi:"customNamespaces"`
	// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
	ExportTags *bool   `pulumi:"exportTags"`
	Name       *string `pulumi:"name"`
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	RegionsSubsetOverrides []string `pulumi:"regionsSubsetOverrides"`
	// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Services []AwsCloudwatchScrapeJobService `pulumi:"services"`
	StackId  string                          `pulumi:"stackId"`
	// A set of static labels to add to all metrics exported by this scrape job.
	StaticLabels map[string]string `pulumi:"staticLabels"`
}

// The set of arguments for constructing a AwsCloudwatchScrapeJob resource.
type AwsCloudwatchScrapeJobArgs struct {
	// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
	AwsAccountResourceId pulumi.StringInput
	// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	CustomNamespaces AwsCloudwatchScrapeJobCustomNamespaceArrayInput
	// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
	ExportTags pulumi.BoolPtrInput
	Name       pulumi.StringPtrInput
	// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
	RegionsSubsetOverrides pulumi.StringArrayInput
	// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
	Services AwsCloudwatchScrapeJobServiceArrayInput
	StackId  pulumi.StringInput
	// A set of static labels to add to all metrics exported by this scrape job.
	StaticLabels pulumi.StringMapInput
}

func (AwsCloudwatchScrapeJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*awsCloudwatchScrapeJobArgs)(nil)).Elem()
}

type AwsCloudwatchScrapeJobInput interface {
	pulumi.Input

	ToAwsCloudwatchScrapeJobOutput() AwsCloudwatchScrapeJobOutput
	ToAwsCloudwatchScrapeJobOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobOutput
}

func (*AwsCloudwatchScrapeJob) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (i *AwsCloudwatchScrapeJob) ToAwsCloudwatchScrapeJobOutput() AwsCloudwatchScrapeJobOutput {
	return i.ToAwsCloudwatchScrapeJobOutputWithContext(context.Background())
}

func (i *AwsCloudwatchScrapeJob) ToAwsCloudwatchScrapeJobOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchScrapeJobOutput)
}

// AwsCloudwatchScrapeJobArrayInput is an input type that accepts AwsCloudwatchScrapeJobArray and AwsCloudwatchScrapeJobArrayOutput values.
// You can construct a concrete instance of `AwsCloudwatchScrapeJobArrayInput` via:
//
//	AwsCloudwatchScrapeJobArray{ AwsCloudwatchScrapeJobArgs{...} }
type AwsCloudwatchScrapeJobArrayInput interface {
	pulumi.Input

	ToAwsCloudwatchScrapeJobArrayOutput() AwsCloudwatchScrapeJobArrayOutput
	ToAwsCloudwatchScrapeJobArrayOutputWithContext(context.Context) AwsCloudwatchScrapeJobArrayOutput
}

type AwsCloudwatchScrapeJobArray []AwsCloudwatchScrapeJobInput

func (AwsCloudwatchScrapeJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (i AwsCloudwatchScrapeJobArray) ToAwsCloudwatchScrapeJobArrayOutput() AwsCloudwatchScrapeJobArrayOutput {
	return i.ToAwsCloudwatchScrapeJobArrayOutputWithContext(context.Background())
}

func (i AwsCloudwatchScrapeJobArray) ToAwsCloudwatchScrapeJobArrayOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchScrapeJobArrayOutput)
}

// AwsCloudwatchScrapeJobMapInput is an input type that accepts AwsCloudwatchScrapeJobMap and AwsCloudwatchScrapeJobMapOutput values.
// You can construct a concrete instance of `AwsCloudwatchScrapeJobMapInput` via:
//
//	AwsCloudwatchScrapeJobMap{ "key": AwsCloudwatchScrapeJobArgs{...} }
type AwsCloudwatchScrapeJobMapInput interface {
	pulumi.Input

	ToAwsCloudwatchScrapeJobMapOutput() AwsCloudwatchScrapeJobMapOutput
	ToAwsCloudwatchScrapeJobMapOutputWithContext(context.Context) AwsCloudwatchScrapeJobMapOutput
}

type AwsCloudwatchScrapeJobMap map[string]AwsCloudwatchScrapeJobInput

func (AwsCloudwatchScrapeJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (i AwsCloudwatchScrapeJobMap) ToAwsCloudwatchScrapeJobMapOutput() AwsCloudwatchScrapeJobMapOutput {
	return i.ToAwsCloudwatchScrapeJobMapOutputWithContext(context.Background())
}

func (i AwsCloudwatchScrapeJobMap) ToAwsCloudwatchScrapeJobMapOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AwsCloudwatchScrapeJobMapOutput)
}

type AwsCloudwatchScrapeJobOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchScrapeJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (o AwsCloudwatchScrapeJobOutput) ToAwsCloudwatchScrapeJobOutput() AwsCloudwatchScrapeJobOutput {
	return o
}

func (o AwsCloudwatchScrapeJobOutput) ToAwsCloudwatchScrapeJobOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobOutput {
	return o
}

// The ID assigned by the Grafana Cloud Provider API to an AWS Account resource that should be associated with this CloudWatch Scrape Job. This can be provided by the `resourceId` attribute of the `cloudProvider.AwsAccount` resource.
func (o AwsCloudwatchScrapeJobOutput) AwsAccountResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringOutput { return v.AwsAccountResourceId }).(pulumi.StringOutput)
}

// Zero or more configuration blocks to configure custom namespaces for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
func (o AwsCloudwatchScrapeJobOutput) CustomNamespaces() AwsCloudwatchScrapeJobCustomNamespaceArrayOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) AwsCloudwatchScrapeJobCustomNamespaceArrayOutput {
		return v.CustomNamespaces
	}).(AwsCloudwatchScrapeJobCustomNamespaceArrayOutput)
}

// When the AWS CloudWatch Scrape Job is disabled, this will show the reason that it is in that state.
func (o AwsCloudwatchScrapeJobOutput) DisabledReason() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringOutput { return v.DisabledReason }).(pulumi.StringOutput)
}

// Whether the AWS CloudWatch Scrape Job is enabled or not. Defaults to `true`.
func (o AwsCloudwatchScrapeJobOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// When enabled, AWS resource tags are exported as Prometheus labels to metrics formatted as `aws_<service_name>_info`. Defaults to `true`.
func (o AwsCloudwatchScrapeJobOutput) ExportTags() pulumi.BoolOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.BoolOutput { return v.ExportTags }).(pulumi.BoolOutput)
}

func (o AwsCloudwatchScrapeJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A subset of the regions that are configured in the associated AWS Account resource to apply to this scrape job. If not set or empty, all of the Account resource's regions are scraped.
func (o AwsCloudwatchScrapeJobOutput) RegionsSubsetOverrides() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringArrayOutput { return v.RegionsSubsetOverrides }).(pulumi.StringArrayOutput)
}

// One or more configuration blocks to configure AWS services for the AWS CloudWatch Scrape Job to scrape. Each block must have a distinct `name` attribute. When accessing this as an attribute reference, it is a list of objects.
func (o AwsCloudwatchScrapeJobOutput) Services() AwsCloudwatchScrapeJobServiceArrayOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) AwsCloudwatchScrapeJobServiceArrayOutput { return v.Services }).(AwsCloudwatchScrapeJobServiceArrayOutput)
}

func (o AwsCloudwatchScrapeJobOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// A set of static labels to add to all metrics exported by this scrape job.
func (o AwsCloudwatchScrapeJobOutput) StaticLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AwsCloudwatchScrapeJob) pulumi.StringMapOutput { return v.StaticLabels }).(pulumi.StringMapOutput)
}

type AwsCloudwatchScrapeJobArrayOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchScrapeJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (o AwsCloudwatchScrapeJobArrayOutput) ToAwsCloudwatchScrapeJobArrayOutput() AwsCloudwatchScrapeJobArrayOutput {
	return o
}

func (o AwsCloudwatchScrapeJobArrayOutput) ToAwsCloudwatchScrapeJobArrayOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobArrayOutput {
	return o
}

func (o AwsCloudwatchScrapeJobArrayOutput) Index(i pulumi.IntInput) AwsCloudwatchScrapeJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AwsCloudwatchScrapeJob {
		return vs[0].([]*AwsCloudwatchScrapeJob)[vs[1].(int)]
	}).(AwsCloudwatchScrapeJobOutput)
}

type AwsCloudwatchScrapeJobMapOutput struct{ *pulumi.OutputState }

func (AwsCloudwatchScrapeJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AwsCloudwatchScrapeJob)(nil)).Elem()
}

func (o AwsCloudwatchScrapeJobMapOutput) ToAwsCloudwatchScrapeJobMapOutput() AwsCloudwatchScrapeJobMapOutput {
	return o
}

func (o AwsCloudwatchScrapeJobMapOutput) ToAwsCloudwatchScrapeJobMapOutputWithContext(ctx context.Context) AwsCloudwatchScrapeJobMapOutput {
	return o
}

func (o AwsCloudwatchScrapeJobMapOutput) MapIndex(k pulumi.StringInput) AwsCloudwatchScrapeJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AwsCloudwatchScrapeJob {
		return vs[0].(map[string]*AwsCloudwatchScrapeJob)[vs[1].(string)]
	}).(AwsCloudwatchScrapeJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchScrapeJobInput)(nil)).Elem(), &AwsCloudwatchScrapeJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchScrapeJobArrayInput)(nil)).Elem(), AwsCloudwatchScrapeJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AwsCloudwatchScrapeJobMapInput)(nil)).Elem(), AwsCloudwatchScrapeJobMap{})
	pulumi.RegisterOutputType(AwsCloudwatchScrapeJobOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchScrapeJobArrayOutput{})
	pulumi.RegisterOutputType(AwsCloudwatchScrapeJobMapOutput{})
}
