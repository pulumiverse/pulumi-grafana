// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type DashboardPermissionItem struct {
	pulumi.CustomResourceState

	// The UID of the dashboard.
	DashboardUid pulumi.StringOutput `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// the permission to be assigned
	Permission pulumi.StringOutput `pulumi:"permission"`
	// the role onto which the permission is to be assigned
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// the team onto which the permission is to be assigned
	Team pulumi.StringPtrOutput `pulumi:"team"`
	// the user or service account onto which the permission is to be assigned
	User pulumi.StringPtrOutput `pulumi:"user"`
}

// NewDashboardPermissionItem registers a new resource with the given unique name, arguments, and options.
func NewDashboardPermissionItem(ctx *pulumi.Context,
	name string, args *DashboardPermissionItemArgs, opts ...pulumi.ResourceOption) (*DashboardPermissionItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardUid == nil {
		return nil, errors.New("invalid value for required argument 'DashboardUid'")
	}
	if args.Permission == nil {
		return nil, errors.New("invalid value for required argument 'Permission'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardPermissionItem
	err := ctx.RegisterResource("grafana:index/dashboardPermissionItem:DashboardPermissionItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardPermissionItem gets an existing DashboardPermissionItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardPermissionItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardPermissionItemState, opts ...pulumi.ResourceOption) (*DashboardPermissionItem, error) {
	var resource DashboardPermissionItem
	err := ctx.ReadResource("grafana:index/dashboardPermissionItem:DashboardPermissionItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardPermissionItem resources.
type dashboardPermissionItemState struct {
	// The UID of the dashboard.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// the permission to be assigned
	Permission *string `pulumi:"permission"`
	// the role onto which the permission is to be assigned
	Role *string `pulumi:"role"`
	// the team onto which the permission is to be assigned
	Team *string `pulumi:"team"`
	// the user or service account onto which the permission is to be assigned
	User *string `pulumi:"user"`
}

type DashboardPermissionItemState struct {
	// The UID of the dashboard.
	DashboardUid pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// the permission to be assigned
	Permission pulumi.StringPtrInput
	// the role onto which the permission is to be assigned
	Role pulumi.StringPtrInput
	// the team onto which the permission is to be assigned
	Team pulumi.StringPtrInput
	// the user or service account onto which the permission is to be assigned
	User pulumi.StringPtrInput
}

func (DashboardPermissionItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPermissionItemState)(nil)).Elem()
}

type dashboardPermissionItemArgs struct {
	// The UID of the dashboard.
	DashboardUid string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// the permission to be assigned
	Permission string `pulumi:"permission"`
	// the role onto which the permission is to be assigned
	Role *string `pulumi:"role"`
	// the team onto which the permission is to be assigned
	Team *string `pulumi:"team"`
	// the user or service account onto which the permission is to be assigned
	User *string `pulumi:"user"`
}

// The set of arguments for constructing a DashboardPermissionItem resource.
type DashboardPermissionItemArgs struct {
	// The UID of the dashboard.
	DashboardUid pulumi.StringInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// the permission to be assigned
	Permission pulumi.StringInput
	// the role onto which the permission is to be assigned
	Role pulumi.StringPtrInput
	// the team onto which the permission is to be assigned
	Team pulumi.StringPtrInput
	// the user or service account onto which the permission is to be assigned
	User pulumi.StringPtrInput
}

func (DashboardPermissionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPermissionItemArgs)(nil)).Elem()
}

type DashboardPermissionItemInput interface {
	pulumi.Input

	ToDashboardPermissionItemOutput() DashboardPermissionItemOutput
	ToDashboardPermissionItemOutputWithContext(ctx context.Context) DashboardPermissionItemOutput
}

func (*DashboardPermissionItem) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPermissionItem)(nil)).Elem()
}

func (i *DashboardPermissionItem) ToDashboardPermissionItemOutput() DashboardPermissionItemOutput {
	return i.ToDashboardPermissionItemOutputWithContext(context.Background())
}

func (i *DashboardPermissionItem) ToDashboardPermissionItemOutputWithContext(ctx context.Context) DashboardPermissionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionItemOutput)
}

// DashboardPermissionItemArrayInput is an input type that accepts DashboardPermissionItemArray and DashboardPermissionItemArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionItemArrayInput` via:
//
//	DashboardPermissionItemArray{ DashboardPermissionItemArgs{...} }
type DashboardPermissionItemArrayInput interface {
	pulumi.Input

	ToDashboardPermissionItemArrayOutput() DashboardPermissionItemArrayOutput
	ToDashboardPermissionItemArrayOutputWithContext(context.Context) DashboardPermissionItemArrayOutput
}

type DashboardPermissionItemArray []DashboardPermissionItemInput

func (DashboardPermissionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardPermissionItem)(nil)).Elem()
}

func (i DashboardPermissionItemArray) ToDashboardPermissionItemArrayOutput() DashboardPermissionItemArrayOutput {
	return i.ToDashboardPermissionItemArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionItemArray) ToDashboardPermissionItemArrayOutputWithContext(ctx context.Context) DashboardPermissionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionItemArrayOutput)
}

// DashboardPermissionItemMapInput is an input type that accepts DashboardPermissionItemMap and DashboardPermissionItemMapOutput values.
// You can construct a concrete instance of `DashboardPermissionItemMapInput` via:
//
//	DashboardPermissionItemMap{ "key": DashboardPermissionItemArgs{...} }
type DashboardPermissionItemMapInput interface {
	pulumi.Input

	ToDashboardPermissionItemMapOutput() DashboardPermissionItemMapOutput
	ToDashboardPermissionItemMapOutputWithContext(context.Context) DashboardPermissionItemMapOutput
}

type DashboardPermissionItemMap map[string]DashboardPermissionItemInput

func (DashboardPermissionItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardPermissionItem)(nil)).Elem()
}

func (i DashboardPermissionItemMap) ToDashboardPermissionItemMapOutput() DashboardPermissionItemMapOutput {
	return i.ToDashboardPermissionItemMapOutputWithContext(context.Background())
}

func (i DashboardPermissionItemMap) ToDashboardPermissionItemMapOutputWithContext(ctx context.Context) DashboardPermissionItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionItemMapOutput)
}

type DashboardPermissionItemOutput struct{ *pulumi.OutputState }

func (DashboardPermissionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPermissionItem)(nil)).Elem()
}

func (o DashboardPermissionItemOutput) ToDashboardPermissionItemOutput() DashboardPermissionItemOutput {
	return o
}

func (o DashboardPermissionItemOutput) ToDashboardPermissionItemOutputWithContext(ctx context.Context) DashboardPermissionItemOutput {
	return o
}

// The UID of the dashboard.
func (o DashboardPermissionItemOutput) DashboardUid() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringOutput { return v.DashboardUid }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o DashboardPermissionItemOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// the permission to be assigned
func (o DashboardPermissionItemOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringOutput { return v.Permission }).(pulumi.StringOutput)
}

// the role onto which the permission is to be assigned
func (o DashboardPermissionItemOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// the team onto which the permission is to be assigned
func (o DashboardPermissionItemOutput) Team() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringPtrOutput { return v.Team }).(pulumi.StringPtrOutput)
}

// the user or service account onto which the permission is to be assigned
func (o DashboardPermissionItemOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DashboardPermissionItem) pulumi.StringPtrOutput { return v.User }).(pulumi.StringPtrOutput)
}

type DashboardPermissionItemArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardPermissionItem)(nil)).Elem()
}

func (o DashboardPermissionItemArrayOutput) ToDashboardPermissionItemArrayOutput() DashboardPermissionItemArrayOutput {
	return o
}

func (o DashboardPermissionItemArrayOutput) ToDashboardPermissionItemArrayOutputWithContext(ctx context.Context) DashboardPermissionItemArrayOutput {
	return o
}

func (o DashboardPermissionItemArrayOutput) Index(i pulumi.IntInput) DashboardPermissionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardPermissionItem {
		return vs[0].([]*DashboardPermissionItem)[vs[1].(int)]
	}).(DashboardPermissionItemOutput)
}

type DashboardPermissionItemMapOutput struct{ *pulumi.OutputState }

func (DashboardPermissionItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardPermissionItem)(nil)).Elem()
}

func (o DashboardPermissionItemMapOutput) ToDashboardPermissionItemMapOutput() DashboardPermissionItemMapOutput {
	return o
}

func (o DashboardPermissionItemMapOutput) ToDashboardPermissionItemMapOutputWithContext(ctx context.Context) DashboardPermissionItemMapOutput {
	return o
}

func (o DashboardPermissionItemMapOutput) MapIndex(k pulumi.StringInput) DashboardPermissionItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardPermissionItem {
		return vs[0].(map[string]*DashboardPermissionItem)[vs[1].(string)]
	}).(DashboardPermissionItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionItemInput)(nil)).Elem(), &DashboardPermissionItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionItemArrayInput)(nil)).Elem(), DashboardPermissionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionItemMapInput)(nil)).Elem(), DashboardPermissionItemMap{})
	pulumi.RegisterOutputType(DashboardPermissionItemOutput{})
	pulumi.RegisterOutputType(DashboardPermissionItemArrayOutput{})
	pulumi.RegisterOutputType(DashboardPermissionItemMapOutput{})
}
