// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type CloudOrgMember struct {
	pulumi.CustomResourceState

	// The slug or ID of the organization.
	Org pulumi.StringOutput `pulumi:"org"`
	// Whether the user should receive billing emails.
	ReceiveBillingEmails pulumi.BoolOutput `pulumi:"receiveBillingEmails"`
	// The role to assign to the user in the organization.
	Role pulumi.StringOutput `pulumi:"role"`
	// Username or ID of the user to add to the org's members.
	User pulumi.StringOutput `pulumi:"user"`
}

// NewCloudOrgMember registers a new resource with the given unique name, arguments, and options.
func NewCloudOrgMember(ctx *pulumi.Context,
	name string, args *CloudOrgMemberArgs, opts ...pulumi.ResourceOption) (*CloudOrgMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Org == nil {
		return nil, errors.New("invalid value for required argument 'Org'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	if args.User == nil {
		return nil, errors.New("invalid value for required argument 'User'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudOrgMember
	err := ctx.RegisterResource("grafana:index/cloudOrgMember:CloudOrgMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudOrgMember gets an existing CloudOrgMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudOrgMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudOrgMemberState, opts ...pulumi.ResourceOption) (*CloudOrgMember, error) {
	var resource CloudOrgMember
	err := ctx.ReadResource("grafana:index/cloudOrgMember:CloudOrgMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudOrgMember resources.
type cloudOrgMemberState struct {
	// The slug or ID of the organization.
	Org *string `pulumi:"org"`
	// Whether the user should receive billing emails.
	ReceiveBillingEmails *bool `pulumi:"receiveBillingEmails"`
	// The role to assign to the user in the organization.
	Role *string `pulumi:"role"`
	// Username or ID of the user to add to the org's members.
	User *string `pulumi:"user"`
}

type CloudOrgMemberState struct {
	// The slug or ID of the organization.
	Org pulumi.StringPtrInput
	// Whether the user should receive billing emails.
	ReceiveBillingEmails pulumi.BoolPtrInput
	// The role to assign to the user in the organization.
	Role pulumi.StringPtrInput
	// Username or ID of the user to add to the org's members.
	User pulumi.StringPtrInput
}

func (CloudOrgMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudOrgMemberState)(nil)).Elem()
}

type cloudOrgMemberArgs struct {
	// The slug or ID of the organization.
	Org string `pulumi:"org"`
	// Whether the user should receive billing emails.
	ReceiveBillingEmails *bool `pulumi:"receiveBillingEmails"`
	// The role to assign to the user in the organization.
	Role string `pulumi:"role"`
	// Username or ID of the user to add to the org's members.
	User string `pulumi:"user"`
}

// The set of arguments for constructing a CloudOrgMember resource.
type CloudOrgMemberArgs struct {
	// The slug or ID of the organization.
	Org pulumi.StringInput
	// Whether the user should receive billing emails.
	ReceiveBillingEmails pulumi.BoolPtrInput
	// The role to assign to the user in the organization.
	Role pulumi.StringInput
	// Username or ID of the user to add to the org's members.
	User pulumi.StringInput
}

func (CloudOrgMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudOrgMemberArgs)(nil)).Elem()
}

type CloudOrgMemberInput interface {
	pulumi.Input

	ToCloudOrgMemberOutput() CloudOrgMemberOutput
	ToCloudOrgMemberOutputWithContext(ctx context.Context) CloudOrgMemberOutput
}

func (*CloudOrgMember) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudOrgMember)(nil)).Elem()
}

func (i *CloudOrgMember) ToCloudOrgMemberOutput() CloudOrgMemberOutput {
	return i.ToCloudOrgMemberOutputWithContext(context.Background())
}

func (i *CloudOrgMember) ToCloudOrgMemberOutputWithContext(ctx context.Context) CloudOrgMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudOrgMemberOutput)
}

// CloudOrgMemberArrayInput is an input type that accepts CloudOrgMemberArray and CloudOrgMemberArrayOutput values.
// You can construct a concrete instance of `CloudOrgMemberArrayInput` via:
//
//	CloudOrgMemberArray{ CloudOrgMemberArgs{...} }
type CloudOrgMemberArrayInput interface {
	pulumi.Input

	ToCloudOrgMemberArrayOutput() CloudOrgMemberArrayOutput
	ToCloudOrgMemberArrayOutputWithContext(context.Context) CloudOrgMemberArrayOutput
}

type CloudOrgMemberArray []CloudOrgMemberInput

func (CloudOrgMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudOrgMember)(nil)).Elem()
}

func (i CloudOrgMemberArray) ToCloudOrgMemberArrayOutput() CloudOrgMemberArrayOutput {
	return i.ToCloudOrgMemberArrayOutputWithContext(context.Background())
}

func (i CloudOrgMemberArray) ToCloudOrgMemberArrayOutputWithContext(ctx context.Context) CloudOrgMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudOrgMemberArrayOutput)
}

// CloudOrgMemberMapInput is an input type that accepts CloudOrgMemberMap and CloudOrgMemberMapOutput values.
// You can construct a concrete instance of `CloudOrgMemberMapInput` via:
//
//	CloudOrgMemberMap{ "key": CloudOrgMemberArgs{...} }
type CloudOrgMemberMapInput interface {
	pulumi.Input

	ToCloudOrgMemberMapOutput() CloudOrgMemberMapOutput
	ToCloudOrgMemberMapOutputWithContext(context.Context) CloudOrgMemberMapOutput
}

type CloudOrgMemberMap map[string]CloudOrgMemberInput

func (CloudOrgMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudOrgMember)(nil)).Elem()
}

func (i CloudOrgMemberMap) ToCloudOrgMemberMapOutput() CloudOrgMemberMapOutput {
	return i.ToCloudOrgMemberMapOutputWithContext(context.Background())
}

func (i CloudOrgMemberMap) ToCloudOrgMemberMapOutputWithContext(ctx context.Context) CloudOrgMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudOrgMemberMapOutput)
}

type CloudOrgMemberOutput struct{ *pulumi.OutputState }

func (CloudOrgMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudOrgMember)(nil)).Elem()
}

func (o CloudOrgMemberOutput) ToCloudOrgMemberOutput() CloudOrgMemberOutput {
	return o
}

func (o CloudOrgMemberOutput) ToCloudOrgMemberOutputWithContext(ctx context.Context) CloudOrgMemberOutput {
	return o
}

// The slug or ID of the organization.
func (o CloudOrgMemberOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudOrgMember) pulumi.StringOutput { return v.Org }).(pulumi.StringOutput)
}

// Whether the user should receive billing emails.
func (o CloudOrgMemberOutput) ReceiveBillingEmails() pulumi.BoolOutput {
	return o.ApplyT(func(v *CloudOrgMember) pulumi.BoolOutput { return v.ReceiveBillingEmails }).(pulumi.BoolOutput)
}

// The role to assign to the user in the organization.
func (o CloudOrgMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudOrgMember) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

// Username or ID of the user to add to the org's members.
func (o CloudOrgMemberOutput) User() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudOrgMember) pulumi.StringOutput { return v.User }).(pulumi.StringOutput)
}

type CloudOrgMemberArrayOutput struct{ *pulumi.OutputState }

func (CloudOrgMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudOrgMember)(nil)).Elem()
}

func (o CloudOrgMemberArrayOutput) ToCloudOrgMemberArrayOutput() CloudOrgMemberArrayOutput {
	return o
}

func (o CloudOrgMemberArrayOutput) ToCloudOrgMemberArrayOutputWithContext(ctx context.Context) CloudOrgMemberArrayOutput {
	return o
}

func (o CloudOrgMemberArrayOutput) Index(i pulumi.IntInput) CloudOrgMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudOrgMember {
		return vs[0].([]*CloudOrgMember)[vs[1].(int)]
	}).(CloudOrgMemberOutput)
}

type CloudOrgMemberMapOutput struct{ *pulumi.OutputState }

func (CloudOrgMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudOrgMember)(nil)).Elem()
}

func (o CloudOrgMemberMapOutput) ToCloudOrgMemberMapOutput() CloudOrgMemberMapOutput {
	return o
}

func (o CloudOrgMemberMapOutput) ToCloudOrgMemberMapOutputWithContext(ctx context.Context) CloudOrgMemberMapOutput {
	return o
}

func (o CloudOrgMemberMapOutput) MapIndex(k pulumi.StringInput) CloudOrgMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudOrgMember {
		return vs[0].(map[string]*CloudOrgMember)[vs[1].(string)]
	}).(CloudOrgMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudOrgMemberInput)(nil)).Elem(), &CloudOrgMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudOrgMemberArrayInput)(nil)).Elem(), CloudOrgMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudOrgMemberMapInput)(nil)).Elem(), CloudOrgMemberMap{})
	pulumi.RegisterOutputType(CloudOrgMemberOutput{})
	pulumi.RegisterOutputType(CloudOrgMemberArrayOutput{})
	pulumi.RegisterOutputType(CloudOrgMemberMapOutput{})
}
