// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/personal_notification_rules/)
//
// **Note**: you must be running Grafana OnCall >= v1.8.0 to use this resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/onCall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			myUser, err := onCall.GetUser(ctx, &oncall.GetUserArgs{
//				Username: "my_username",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_step_1", &grafana.OncallUserNotificationRuleArgs{
//				UserId:   pulumi.String(myUser.Id),
//				Position: pulumi.Int(0),
//				Type:     pulumi.String("notify_by_mobile_app"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_step_2", &grafana.OncallUserNotificationRuleArgs{
//				UserId:   pulumi.String(myUser.Id),
//				Position: pulumi.Int(1),
//				Duration: pulumi.Int(600),
//				Type:     pulumi.String("wait"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_step_3", &grafana.OncallUserNotificationRuleArgs{
//				UserId:   pulumi.String(myUser.Id),
//				Position: pulumi.Int(2),
//				Type:     pulumi.String("notify_by_phone_call"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_step_4", &grafana.OncallUserNotificationRuleArgs{
//				UserId:   pulumi.String(myUser.Id),
//				Position: pulumi.Int(3),
//				Duration: pulumi.Int(300),
//				Type:     pulumi.String("wait"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_step_5", &grafana.OncallUserNotificationRuleArgs{
//				UserId:   pulumi.String(myUser.Id),
//				Position: pulumi.Int(4),
//				Type:     pulumi.String("notify_by_slack"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_important_step_1", &grafana.OncallUserNotificationRuleArgs{
//				UserId:    pulumi.String(myUser.Id),
//				Important: pulumi.Bool(true),
//				Position:  pulumi.Int(0),
//				Type:      pulumi.String("notify_by_mobile_app_critical"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_important_step_2", &grafana.OncallUserNotificationRuleArgs{
//				UserId:    pulumi.String(myUser.Id),
//				Important: pulumi.Bool(true),
//				Position:  pulumi.Int(1),
//				Duration:  pulumi.Int(300),
//				Type:      pulumi.String("wait"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = grafana.NewOncallUserNotificationRule(ctx, "my_user_important_step_3", &grafana.OncallUserNotificationRuleArgs{
//				UserId:    pulumi.String(myUser.Id),
//				Important: pulumi.Bool(true),
//				Position:  pulumi.Int(2),
//				Type:      pulumi.String("notify_by_mobile_app_critical"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/oncallUserNotificationRule:OncallUserNotificationRule name "{{ id }}"
// ```
type OncallUserNotificationRule struct {
	pulumi.CustomResourceState

	// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
	Duration pulumi.IntPtrOutput `pulumi:"duration"`
	// Boolean value which indicates if a rule is “important”
	Important pulumi.BoolOutput `pulumi:"important"`
	// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
	Position pulumi.IntPtrOutput `pulumi:"position"`
	// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
	Type pulumi.StringOutput `pulumi:"type"`
	// User ID
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewOncallUserNotificationRule registers a new resource with the given unique name, arguments, and options.
func NewOncallUserNotificationRule(ctx *pulumi.Context,
	name string, args *OncallUserNotificationRuleArgs, opts ...pulumi.ResourceOption) (*OncallUserNotificationRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallUserNotificationRule
	err := ctx.RegisterResource("grafana:index/oncallUserNotificationRule:OncallUserNotificationRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallUserNotificationRule gets an existing OncallUserNotificationRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallUserNotificationRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallUserNotificationRuleState, opts ...pulumi.ResourceOption) (*OncallUserNotificationRule, error) {
	var resource OncallUserNotificationRule
	err := ctx.ReadResource("grafana:index/oncallUserNotificationRule:OncallUserNotificationRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallUserNotificationRule resources.
type oncallUserNotificationRuleState struct {
	// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
	Duration *int `pulumi:"duration"`
	// Boolean value which indicates if a rule is “important”
	Important *bool `pulumi:"important"`
	// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
	Position *int `pulumi:"position"`
	// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
	Type *string `pulumi:"type"`
	// User ID
	UserId *string `pulumi:"userId"`
}

type OncallUserNotificationRuleState struct {
	// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
	Duration pulumi.IntPtrInput
	// Boolean value which indicates if a rule is “important”
	Important pulumi.BoolPtrInput
	// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
	Position pulumi.IntPtrInput
	// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
	Type pulumi.StringPtrInput
	// User ID
	UserId pulumi.StringPtrInput
}

func (OncallUserNotificationRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallUserNotificationRuleState)(nil)).Elem()
}

type oncallUserNotificationRuleArgs struct {
	// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
	Duration *int `pulumi:"duration"`
	// Boolean value which indicates if a rule is “important”
	Important *bool `pulumi:"important"`
	// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
	Position *int `pulumi:"position"`
	// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
	Type string `pulumi:"type"`
	// User ID
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a OncallUserNotificationRule resource.
type OncallUserNotificationRuleArgs struct {
	// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
	Duration pulumi.IntPtrInput
	// Boolean value which indicates if a rule is “important”
	Important pulumi.BoolPtrInput
	// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
	Position pulumi.IntPtrInput
	// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
	Type pulumi.StringInput
	// User ID
	UserId pulumi.StringInput
}

func (OncallUserNotificationRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallUserNotificationRuleArgs)(nil)).Elem()
}

type OncallUserNotificationRuleInput interface {
	pulumi.Input

	ToOncallUserNotificationRuleOutput() OncallUserNotificationRuleOutput
	ToOncallUserNotificationRuleOutputWithContext(ctx context.Context) OncallUserNotificationRuleOutput
}

func (*OncallUserNotificationRule) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallUserNotificationRule)(nil)).Elem()
}

func (i *OncallUserNotificationRule) ToOncallUserNotificationRuleOutput() OncallUserNotificationRuleOutput {
	return i.ToOncallUserNotificationRuleOutputWithContext(context.Background())
}

func (i *OncallUserNotificationRule) ToOncallUserNotificationRuleOutputWithContext(ctx context.Context) OncallUserNotificationRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallUserNotificationRuleOutput)
}

// OncallUserNotificationRuleArrayInput is an input type that accepts OncallUserNotificationRuleArray and OncallUserNotificationRuleArrayOutput values.
// You can construct a concrete instance of `OncallUserNotificationRuleArrayInput` via:
//
//	OncallUserNotificationRuleArray{ OncallUserNotificationRuleArgs{...} }
type OncallUserNotificationRuleArrayInput interface {
	pulumi.Input

	ToOncallUserNotificationRuleArrayOutput() OncallUserNotificationRuleArrayOutput
	ToOncallUserNotificationRuleArrayOutputWithContext(context.Context) OncallUserNotificationRuleArrayOutput
}

type OncallUserNotificationRuleArray []OncallUserNotificationRuleInput

func (OncallUserNotificationRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallUserNotificationRule)(nil)).Elem()
}

func (i OncallUserNotificationRuleArray) ToOncallUserNotificationRuleArrayOutput() OncallUserNotificationRuleArrayOutput {
	return i.ToOncallUserNotificationRuleArrayOutputWithContext(context.Background())
}

func (i OncallUserNotificationRuleArray) ToOncallUserNotificationRuleArrayOutputWithContext(ctx context.Context) OncallUserNotificationRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallUserNotificationRuleArrayOutput)
}

// OncallUserNotificationRuleMapInput is an input type that accepts OncallUserNotificationRuleMap and OncallUserNotificationRuleMapOutput values.
// You can construct a concrete instance of `OncallUserNotificationRuleMapInput` via:
//
//	OncallUserNotificationRuleMap{ "key": OncallUserNotificationRuleArgs{...} }
type OncallUserNotificationRuleMapInput interface {
	pulumi.Input

	ToOncallUserNotificationRuleMapOutput() OncallUserNotificationRuleMapOutput
	ToOncallUserNotificationRuleMapOutputWithContext(context.Context) OncallUserNotificationRuleMapOutput
}

type OncallUserNotificationRuleMap map[string]OncallUserNotificationRuleInput

func (OncallUserNotificationRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallUserNotificationRule)(nil)).Elem()
}

func (i OncallUserNotificationRuleMap) ToOncallUserNotificationRuleMapOutput() OncallUserNotificationRuleMapOutput {
	return i.ToOncallUserNotificationRuleMapOutputWithContext(context.Background())
}

func (i OncallUserNotificationRuleMap) ToOncallUserNotificationRuleMapOutputWithContext(ctx context.Context) OncallUserNotificationRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallUserNotificationRuleMapOutput)
}

type OncallUserNotificationRuleOutput struct{ *pulumi.OutputState }

func (OncallUserNotificationRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallUserNotificationRule)(nil)).Elem()
}

func (o OncallUserNotificationRuleOutput) ToOncallUserNotificationRuleOutput() OncallUserNotificationRuleOutput {
	return o
}

func (o OncallUserNotificationRuleOutput) ToOncallUserNotificationRuleOutputWithContext(ctx context.Context) OncallUserNotificationRuleOutput {
	return o
}

// A time in seconds to wait (when `type=wait`). Can be 60, 300, 900, 1800, 3600
func (o OncallUserNotificationRuleOutput) Duration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OncallUserNotificationRule) pulumi.IntPtrOutput { return v.Duration }).(pulumi.IntPtrOutput)
}

// Boolean value which indicates if a rule is “important”
func (o OncallUserNotificationRuleOutput) Important() pulumi.BoolOutput {
	return o.ApplyT(func(v *OncallUserNotificationRule) pulumi.BoolOutput { return v.Important }).(pulumi.BoolOutput)
}

// Personal notification rules execute one after another starting from position=0. A new escalation policy created with a position of an existing escalation policy will move the old one (and all following) down on the list.
func (o OncallUserNotificationRuleOutput) Position() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OncallUserNotificationRule) pulumi.IntPtrOutput { return v.Position }).(pulumi.IntPtrOutput)
}

// The type of notification rule. Can be wait, notify*by*slack, notify*by*msteams, notify*by*sms, notify*by*phone*call, notify*by*telegram, notify*by*email, notify*by*mobile*app, notify*by*mobile*app*critical. NOTE: `notifyByMsteams` is only available for Grafana Cloud customers.
func (o OncallUserNotificationRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallUserNotificationRule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// User ID
func (o OncallUserNotificationRuleOutput) UserId() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallUserNotificationRule) pulumi.StringOutput { return v.UserId }).(pulumi.StringOutput)
}

type OncallUserNotificationRuleArrayOutput struct{ *pulumi.OutputState }

func (OncallUserNotificationRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallUserNotificationRule)(nil)).Elem()
}

func (o OncallUserNotificationRuleArrayOutput) ToOncallUserNotificationRuleArrayOutput() OncallUserNotificationRuleArrayOutput {
	return o
}

func (o OncallUserNotificationRuleArrayOutput) ToOncallUserNotificationRuleArrayOutputWithContext(ctx context.Context) OncallUserNotificationRuleArrayOutput {
	return o
}

func (o OncallUserNotificationRuleArrayOutput) Index(i pulumi.IntInput) OncallUserNotificationRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OncallUserNotificationRule {
		return vs[0].([]*OncallUserNotificationRule)[vs[1].(int)]
	}).(OncallUserNotificationRuleOutput)
}

type OncallUserNotificationRuleMapOutput struct{ *pulumi.OutputState }

func (OncallUserNotificationRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallUserNotificationRule)(nil)).Elem()
}

func (o OncallUserNotificationRuleMapOutput) ToOncallUserNotificationRuleMapOutput() OncallUserNotificationRuleMapOutput {
	return o
}

func (o OncallUserNotificationRuleMapOutput) ToOncallUserNotificationRuleMapOutputWithContext(ctx context.Context) OncallUserNotificationRuleMapOutput {
	return o
}

func (o OncallUserNotificationRuleMapOutput) MapIndex(k pulumi.StringInput) OncallUserNotificationRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OncallUserNotificationRule {
		return vs[0].(map[string]*OncallUserNotificationRule)[vs[1].(string)]
	}).(OncallUserNotificationRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OncallUserNotificationRuleInput)(nil)).Elem(), &OncallUserNotificationRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallUserNotificationRuleArrayInput)(nil)).Elem(), OncallUserNotificationRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallUserNotificationRuleMapInput)(nil)).Elem(), OncallUserNotificationRuleMap{})
	pulumi.RegisterOutputType(OncallUserNotificationRuleOutput{})
	pulumi.RegisterOutputType(OncallUserNotificationRuleArrayOutput{})
	pulumi.RegisterOutputType(OncallUserNotificationRuleMapOutput{})
}
