// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := grafana.NewConnectionsMetricsEndpointScrapeJob(ctx, "test", &grafana.ConnectionsMetricsEndpointScrapeJobArgs{
//				StackId:                     pulumi.String("1"),
//				Name:                        pulumi.String("my-scrape-job"),
//				Enabled:                     pulumi.Bool(true),
//				AuthenticationMethod:        pulumi.String("basic"),
//				AuthenticationBasicUsername: pulumi.String("my-username"),
//				AuthenticationBasicPassword: pulumi.String("my-password"),
//				Url:                         pulumi.String("https://grafana.com/metrics"),
//				ScrapeIntervalSeconds:       pulumi.Int(120),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob name "{{ stack_id }}:{{ name }}"
// ```
type ConnectionsMetricsEndpointScrapeJob struct {
	pulumi.CustomResourceState

	// Password for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicPassword pulumi.StringPtrOutput `pulumi:"authenticationBasicPassword"`
	// Username for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicUsername pulumi.StringPtrOutput `pulumi:"authenticationBasicUsername"`
	// Bearer token used for authentication, use if scrape job is using bearer authentication method
	AuthenticationBearerToken pulumi.StringPtrOutput `pulumi:"authenticationBearerToken"`
	// Method to pass authentication credentials: basic or bearer.
	AuthenticationMethod pulumi.StringOutput `pulumi:"authenticationMethod"`
	// Whether the metrics endpoint scrape job is enabled or not.
	Enabled pulumi.BoolOutput   `pulumi:"enabled"`
	Name    pulumi.StringOutput `pulumi:"name"`
	// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
	ScrapeIntervalSeconds pulumi.IntOutput    `pulumi:"scrapeIntervalSeconds"`
	StackId               pulumi.StringOutput `pulumi:"stackId"`
	// The url to scrape metrics from; a valid HTTPs URL is required.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewConnectionsMetricsEndpointScrapeJob registers a new resource with the given unique name, arguments, and options.
func NewConnectionsMetricsEndpointScrapeJob(ctx *pulumi.Context,
	name string, args *ConnectionsMetricsEndpointScrapeJobArgs, opts ...pulumi.ResourceOption) (*ConnectionsMetricsEndpointScrapeJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationMethod == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationMethod'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	if args.AuthenticationBasicPassword != nil {
		args.AuthenticationBasicPassword = pulumi.ToSecret(args.AuthenticationBasicPassword).(pulumi.StringPtrInput)
	}
	if args.AuthenticationBearerToken != nil {
		args.AuthenticationBearerToken = pulumi.ToSecret(args.AuthenticationBearerToken).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"authenticationBasicPassword",
		"authenticationBearerToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectionsMetricsEndpointScrapeJob
	err := ctx.RegisterResource("grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectionsMetricsEndpointScrapeJob gets an existing ConnectionsMetricsEndpointScrapeJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectionsMetricsEndpointScrapeJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionsMetricsEndpointScrapeJobState, opts ...pulumi.ResourceOption) (*ConnectionsMetricsEndpointScrapeJob, error) {
	var resource ConnectionsMetricsEndpointScrapeJob
	err := ctx.ReadResource("grafana:index/connectionsMetricsEndpointScrapeJob:ConnectionsMetricsEndpointScrapeJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectionsMetricsEndpointScrapeJob resources.
type connectionsMetricsEndpointScrapeJobState struct {
	// Password for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicPassword *string `pulumi:"authenticationBasicPassword"`
	// Username for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicUsername *string `pulumi:"authenticationBasicUsername"`
	// Bearer token used for authentication, use if scrape job is using bearer authentication method
	AuthenticationBearerToken *string `pulumi:"authenticationBearerToken"`
	// Method to pass authentication credentials: basic or bearer.
	AuthenticationMethod *string `pulumi:"authenticationMethod"`
	// Whether the metrics endpoint scrape job is enabled or not.
	Enabled *bool   `pulumi:"enabled"`
	Name    *string `pulumi:"name"`
	// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
	ScrapeIntervalSeconds *int    `pulumi:"scrapeIntervalSeconds"`
	StackId               *string `pulumi:"stackId"`
	// The url to scrape metrics from; a valid HTTPs URL is required.
	Url *string `pulumi:"url"`
}

type ConnectionsMetricsEndpointScrapeJobState struct {
	// Password for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicPassword pulumi.StringPtrInput
	// Username for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicUsername pulumi.StringPtrInput
	// Bearer token used for authentication, use if scrape job is using bearer authentication method
	AuthenticationBearerToken pulumi.StringPtrInput
	// Method to pass authentication credentials: basic or bearer.
	AuthenticationMethod pulumi.StringPtrInput
	// Whether the metrics endpoint scrape job is enabled or not.
	Enabled pulumi.BoolPtrInput
	Name    pulumi.StringPtrInput
	// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
	ScrapeIntervalSeconds pulumi.IntPtrInput
	StackId               pulumi.StringPtrInput
	// The url to scrape metrics from; a valid HTTPs URL is required.
	Url pulumi.StringPtrInput
}

func (ConnectionsMetricsEndpointScrapeJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionsMetricsEndpointScrapeJobState)(nil)).Elem()
}

type connectionsMetricsEndpointScrapeJobArgs struct {
	// Password for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicPassword *string `pulumi:"authenticationBasicPassword"`
	// Username for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicUsername *string `pulumi:"authenticationBasicUsername"`
	// Bearer token used for authentication, use if scrape job is using bearer authentication method
	AuthenticationBearerToken *string `pulumi:"authenticationBearerToken"`
	// Method to pass authentication credentials: basic or bearer.
	AuthenticationMethod string `pulumi:"authenticationMethod"`
	// Whether the metrics endpoint scrape job is enabled or not.
	Enabled *bool   `pulumi:"enabled"`
	Name    *string `pulumi:"name"`
	// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
	ScrapeIntervalSeconds *int   `pulumi:"scrapeIntervalSeconds"`
	StackId               string `pulumi:"stackId"`
	// The url to scrape metrics from; a valid HTTPs URL is required.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a ConnectionsMetricsEndpointScrapeJob resource.
type ConnectionsMetricsEndpointScrapeJobArgs struct {
	// Password for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicPassword pulumi.StringPtrInput
	// Username for basic authentication, use if scrape job is using basic authentication method
	AuthenticationBasicUsername pulumi.StringPtrInput
	// Bearer token used for authentication, use if scrape job is using bearer authentication method
	AuthenticationBearerToken pulumi.StringPtrInput
	// Method to pass authentication credentials: basic or bearer.
	AuthenticationMethod pulumi.StringInput
	// Whether the metrics endpoint scrape job is enabled or not.
	Enabled pulumi.BoolPtrInput
	Name    pulumi.StringPtrInput
	// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
	ScrapeIntervalSeconds pulumi.IntPtrInput
	StackId               pulumi.StringInput
	// The url to scrape metrics from; a valid HTTPs URL is required.
	Url pulumi.StringInput
}

func (ConnectionsMetricsEndpointScrapeJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionsMetricsEndpointScrapeJobArgs)(nil)).Elem()
}

type ConnectionsMetricsEndpointScrapeJobInput interface {
	pulumi.Input

	ToConnectionsMetricsEndpointScrapeJobOutput() ConnectionsMetricsEndpointScrapeJobOutput
	ToConnectionsMetricsEndpointScrapeJobOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobOutput
}

func (*ConnectionsMetricsEndpointScrapeJob) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (i *ConnectionsMetricsEndpointScrapeJob) ToConnectionsMetricsEndpointScrapeJobOutput() ConnectionsMetricsEndpointScrapeJobOutput {
	return i.ToConnectionsMetricsEndpointScrapeJobOutputWithContext(context.Background())
}

func (i *ConnectionsMetricsEndpointScrapeJob) ToConnectionsMetricsEndpointScrapeJobOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionsMetricsEndpointScrapeJobOutput)
}

// ConnectionsMetricsEndpointScrapeJobArrayInput is an input type that accepts ConnectionsMetricsEndpointScrapeJobArray and ConnectionsMetricsEndpointScrapeJobArrayOutput values.
// You can construct a concrete instance of `ConnectionsMetricsEndpointScrapeJobArrayInput` via:
//
//	ConnectionsMetricsEndpointScrapeJobArray{ ConnectionsMetricsEndpointScrapeJobArgs{...} }
type ConnectionsMetricsEndpointScrapeJobArrayInput interface {
	pulumi.Input

	ToConnectionsMetricsEndpointScrapeJobArrayOutput() ConnectionsMetricsEndpointScrapeJobArrayOutput
	ToConnectionsMetricsEndpointScrapeJobArrayOutputWithContext(context.Context) ConnectionsMetricsEndpointScrapeJobArrayOutput
}

type ConnectionsMetricsEndpointScrapeJobArray []ConnectionsMetricsEndpointScrapeJobInput

func (ConnectionsMetricsEndpointScrapeJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (i ConnectionsMetricsEndpointScrapeJobArray) ToConnectionsMetricsEndpointScrapeJobArrayOutput() ConnectionsMetricsEndpointScrapeJobArrayOutput {
	return i.ToConnectionsMetricsEndpointScrapeJobArrayOutputWithContext(context.Background())
}

func (i ConnectionsMetricsEndpointScrapeJobArray) ToConnectionsMetricsEndpointScrapeJobArrayOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionsMetricsEndpointScrapeJobArrayOutput)
}

// ConnectionsMetricsEndpointScrapeJobMapInput is an input type that accepts ConnectionsMetricsEndpointScrapeJobMap and ConnectionsMetricsEndpointScrapeJobMapOutput values.
// You can construct a concrete instance of `ConnectionsMetricsEndpointScrapeJobMapInput` via:
//
//	ConnectionsMetricsEndpointScrapeJobMap{ "key": ConnectionsMetricsEndpointScrapeJobArgs{...} }
type ConnectionsMetricsEndpointScrapeJobMapInput interface {
	pulumi.Input

	ToConnectionsMetricsEndpointScrapeJobMapOutput() ConnectionsMetricsEndpointScrapeJobMapOutput
	ToConnectionsMetricsEndpointScrapeJobMapOutputWithContext(context.Context) ConnectionsMetricsEndpointScrapeJobMapOutput
}

type ConnectionsMetricsEndpointScrapeJobMap map[string]ConnectionsMetricsEndpointScrapeJobInput

func (ConnectionsMetricsEndpointScrapeJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (i ConnectionsMetricsEndpointScrapeJobMap) ToConnectionsMetricsEndpointScrapeJobMapOutput() ConnectionsMetricsEndpointScrapeJobMapOutput {
	return i.ToConnectionsMetricsEndpointScrapeJobMapOutputWithContext(context.Background())
}

func (i ConnectionsMetricsEndpointScrapeJobMap) ToConnectionsMetricsEndpointScrapeJobMapOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionsMetricsEndpointScrapeJobMapOutput)
}

type ConnectionsMetricsEndpointScrapeJobOutput struct{ *pulumi.OutputState }

func (ConnectionsMetricsEndpointScrapeJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (o ConnectionsMetricsEndpointScrapeJobOutput) ToConnectionsMetricsEndpointScrapeJobOutput() ConnectionsMetricsEndpointScrapeJobOutput {
	return o
}

func (o ConnectionsMetricsEndpointScrapeJobOutput) ToConnectionsMetricsEndpointScrapeJobOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobOutput {
	return o
}

// Password for basic authentication, use if scrape job is using basic authentication method
func (o ConnectionsMetricsEndpointScrapeJobOutput) AuthenticationBasicPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringPtrOutput {
		return v.AuthenticationBasicPassword
	}).(pulumi.StringPtrOutput)
}

// Username for basic authentication, use if scrape job is using basic authentication method
func (o ConnectionsMetricsEndpointScrapeJobOutput) AuthenticationBasicUsername() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringPtrOutput {
		return v.AuthenticationBasicUsername
	}).(pulumi.StringPtrOutput)
}

// Bearer token used for authentication, use if scrape job is using bearer authentication method
func (o ConnectionsMetricsEndpointScrapeJobOutput) AuthenticationBearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringPtrOutput {
		return v.AuthenticationBearerToken
	}).(pulumi.StringPtrOutput)
}

// Method to pass authentication credentials: basic or bearer.
func (o ConnectionsMetricsEndpointScrapeJobOutput) AuthenticationMethod() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringOutput { return v.AuthenticationMethod }).(pulumi.StringOutput)
}

// Whether the metrics endpoint scrape job is enabled or not.
func (o ConnectionsMetricsEndpointScrapeJobOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o ConnectionsMetricsEndpointScrapeJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Frequency for scraping the metrics endpoint: 30, 60, or 120 seconds.
func (o ConnectionsMetricsEndpointScrapeJobOutput) ScrapeIntervalSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.IntOutput { return v.ScrapeIntervalSeconds }).(pulumi.IntOutput)
}

func (o ConnectionsMetricsEndpointScrapeJobOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// The url to scrape metrics from; a valid HTTPs URL is required.
func (o ConnectionsMetricsEndpointScrapeJobOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectionsMetricsEndpointScrapeJob) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type ConnectionsMetricsEndpointScrapeJobArrayOutput struct{ *pulumi.OutputState }

func (ConnectionsMetricsEndpointScrapeJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (o ConnectionsMetricsEndpointScrapeJobArrayOutput) ToConnectionsMetricsEndpointScrapeJobArrayOutput() ConnectionsMetricsEndpointScrapeJobArrayOutput {
	return o
}

func (o ConnectionsMetricsEndpointScrapeJobArrayOutput) ToConnectionsMetricsEndpointScrapeJobArrayOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobArrayOutput {
	return o
}

func (o ConnectionsMetricsEndpointScrapeJobArrayOutput) Index(i pulumi.IntInput) ConnectionsMetricsEndpointScrapeJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectionsMetricsEndpointScrapeJob {
		return vs[0].([]*ConnectionsMetricsEndpointScrapeJob)[vs[1].(int)]
	}).(ConnectionsMetricsEndpointScrapeJobOutput)
}

type ConnectionsMetricsEndpointScrapeJobMapOutput struct{ *pulumi.OutputState }

func (ConnectionsMetricsEndpointScrapeJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectionsMetricsEndpointScrapeJob)(nil)).Elem()
}

func (o ConnectionsMetricsEndpointScrapeJobMapOutput) ToConnectionsMetricsEndpointScrapeJobMapOutput() ConnectionsMetricsEndpointScrapeJobMapOutput {
	return o
}

func (o ConnectionsMetricsEndpointScrapeJobMapOutput) ToConnectionsMetricsEndpointScrapeJobMapOutputWithContext(ctx context.Context) ConnectionsMetricsEndpointScrapeJobMapOutput {
	return o
}

func (o ConnectionsMetricsEndpointScrapeJobMapOutput) MapIndex(k pulumi.StringInput) ConnectionsMetricsEndpointScrapeJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectionsMetricsEndpointScrapeJob {
		return vs[0].(map[string]*ConnectionsMetricsEndpointScrapeJob)[vs[1].(string)]
	}).(ConnectionsMetricsEndpointScrapeJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionsMetricsEndpointScrapeJobInput)(nil)).Elem(), &ConnectionsMetricsEndpointScrapeJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionsMetricsEndpointScrapeJobArrayInput)(nil)).Elem(), ConnectionsMetricsEndpointScrapeJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionsMetricsEndpointScrapeJobMapInput)(nil)).Elem(), ConnectionsMetricsEndpointScrapeJobMap{})
	pulumi.RegisterOutputType(ConnectionsMetricsEndpointScrapeJobOutput{})
	pulumi.RegisterOutputType(ConnectionsMetricsEndpointScrapeJobArrayOutput{})
	pulumi.RegisterOutputType(ConnectionsMetricsEndpointScrapeJobMapOutput{})
}
