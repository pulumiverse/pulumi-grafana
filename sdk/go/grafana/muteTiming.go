// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type MuteTiming struct {
	pulumi.CustomResourceState

	// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
	DisableProvenance pulumi.BoolPtrOutput `pulumi:"disableProvenance"`
	// The time intervals at which to mute notifications. Use an empty block to mute all the time.
	Intervals MuteTimingIntervalArrayOutput `pulumi:"intervals"`
	// The name of the mute timing.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
}

// NewMuteTiming registers a new resource with the given unique name, arguments, and options.
func NewMuteTiming(ctx *pulumi.Context,
	name string, args *MuteTimingArgs, opts ...pulumi.ResourceOption) (*MuteTiming, error) {
	if args == nil {
		args = &MuteTimingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MuteTiming
	err := ctx.RegisterResource("grafana:index/muteTiming:MuteTiming", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMuteTiming gets an existing MuteTiming resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMuteTiming(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MuteTimingState, opts ...pulumi.ResourceOption) (*MuteTiming, error) {
	var resource MuteTiming
	err := ctx.ReadResource("grafana:index/muteTiming:MuteTiming", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MuteTiming resources.
type muteTimingState struct {
	// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
	DisableProvenance *bool `pulumi:"disableProvenance"`
	// The time intervals at which to mute notifications. Use an empty block to mute all the time.
	Intervals []MuteTimingInterval `pulumi:"intervals"`
	// The name of the mute timing.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

type MuteTimingState struct {
	// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
	DisableProvenance pulumi.BoolPtrInput
	// The time intervals at which to mute notifications. Use an empty block to mute all the time.
	Intervals MuteTimingIntervalArrayInput
	// The name of the mute timing.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (MuteTimingState) ElementType() reflect.Type {
	return reflect.TypeOf((*muteTimingState)(nil)).Elem()
}

type muteTimingArgs struct {
	// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
	DisableProvenance *bool `pulumi:"disableProvenance"`
	// The time intervals at which to mute notifications. Use an empty block to mute all the time.
	Intervals []MuteTimingInterval `pulumi:"intervals"`
	// The name of the mute timing.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

// The set of arguments for constructing a MuteTiming resource.
type MuteTimingArgs struct {
	// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
	DisableProvenance pulumi.BoolPtrInput
	// The time intervals at which to mute notifications. Use an empty block to mute all the time.
	Intervals MuteTimingIntervalArrayInput
	// The name of the mute timing.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (MuteTimingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*muteTimingArgs)(nil)).Elem()
}

type MuteTimingInput interface {
	pulumi.Input

	ToMuteTimingOutput() MuteTimingOutput
	ToMuteTimingOutputWithContext(ctx context.Context) MuteTimingOutput
}

func (*MuteTiming) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteTiming)(nil)).Elem()
}

func (i *MuteTiming) ToMuteTimingOutput() MuteTimingOutput {
	return i.ToMuteTimingOutputWithContext(context.Background())
}

func (i *MuteTiming) ToMuteTimingOutputWithContext(ctx context.Context) MuteTimingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingOutput)
}

// MuteTimingArrayInput is an input type that accepts MuteTimingArray and MuteTimingArrayOutput values.
// You can construct a concrete instance of `MuteTimingArrayInput` via:
//
//	MuteTimingArray{ MuteTimingArgs{...} }
type MuteTimingArrayInput interface {
	pulumi.Input

	ToMuteTimingArrayOutput() MuteTimingArrayOutput
	ToMuteTimingArrayOutputWithContext(context.Context) MuteTimingArrayOutput
}

type MuteTimingArray []MuteTimingInput

func (MuteTimingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MuteTiming)(nil)).Elem()
}

func (i MuteTimingArray) ToMuteTimingArrayOutput() MuteTimingArrayOutput {
	return i.ToMuteTimingArrayOutputWithContext(context.Background())
}

func (i MuteTimingArray) ToMuteTimingArrayOutputWithContext(ctx context.Context) MuteTimingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingArrayOutput)
}

// MuteTimingMapInput is an input type that accepts MuteTimingMap and MuteTimingMapOutput values.
// You can construct a concrete instance of `MuteTimingMapInput` via:
//
//	MuteTimingMap{ "key": MuteTimingArgs{...} }
type MuteTimingMapInput interface {
	pulumi.Input

	ToMuteTimingMapOutput() MuteTimingMapOutput
	ToMuteTimingMapOutputWithContext(context.Context) MuteTimingMapOutput
}

type MuteTimingMap map[string]MuteTimingInput

func (MuteTimingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MuteTiming)(nil)).Elem()
}

func (i MuteTimingMap) ToMuteTimingMapOutput() MuteTimingMapOutput {
	return i.ToMuteTimingMapOutputWithContext(context.Background())
}

func (i MuteTimingMap) ToMuteTimingMapOutputWithContext(ctx context.Context) MuteTimingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingMapOutput)
}

type MuteTimingOutput struct{ *pulumi.OutputState }

func (MuteTimingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MuteTiming)(nil)).Elem()
}

func (o MuteTimingOutput) ToMuteTimingOutput() MuteTimingOutput {
	return o
}

func (o MuteTimingOutput) ToMuteTimingOutputWithContext(ctx context.Context) MuteTimingOutput {
	return o
}

// Allow modifying the mute timing from other sources than Terraform or the Grafana API.
func (o MuteTimingOutput) DisableProvenance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *MuteTiming) pulumi.BoolPtrOutput { return v.DisableProvenance }).(pulumi.BoolPtrOutput)
}

// The time intervals at which to mute notifications. Use an empty block to mute all the time.
func (o MuteTimingOutput) Intervals() MuteTimingIntervalArrayOutput {
	return o.ApplyT(func(v *MuteTiming) MuteTimingIntervalArrayOutput { return v.Intervals }).(MuteTimingIntervalArrayOutput)
}

// The name of the mute timing.
func (o MuteTimingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MuteTiming) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o MuteTimingOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MuteTiming) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

type MuteTimingArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MuteTiming)(nil)).Elem()
}

func (o MuteTimingArrayOutput) ToMuteTimingArrayOutput() MuteTimingArrayOutput {
	return o
}

func (o MuteTimingArrayOutput) ToMuteTimingArrayOutputWithContext(ctx context.Context) MuteTimingArrayOutput {
	return o
}

func (o MuteTimingArrayOutput) Index(i pulumi.IntInput) MuteTimingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MuteTiming {
		return vs[0].([]*MuteTiming)[vs[1].(int)]
	}).(MuteTimingOutput)
}

type MuteTimingMapOutput struct{ *pulumi.OutputState }

func (MuteTimingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MuteTiming)(nil)).Elem()
}

func (o MuteTimingMapOutput) ToMuteTimingMapOutput() MuteTimingMapOutput {
	return o
}

func (o MuteTimingMapOutput) ToMuteTimingMapOutputWithContext(ctx context.Context) MuteTimingMapOutput {
	return o
}

func (o MuteTimingMapOutput) MapIndex(k pulumi.StringInput) MuteTimingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MuteTiming {
		return vs[0].(map[string]*MuteTiming)[vs[1].(string)]
	}).(MuteTimingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingInput)(nil)).Elem(), &MuteTiming{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingArrayInput)(nil)).Elem(), MuteTimingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingMapInput)(nil)).Elem(), MuteTimingMap{})
	pulumi.RegisterOutputType(MuteTimingOutput{})
	pulumi.RegisterOutputType(MuteTimingArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingMapOutput{})
}
