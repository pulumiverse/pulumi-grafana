// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Manages Grafana Cloud Plugin Installations.
//
// * [Plugin Catalog](https://grafana.com/grafana/plugins/)
//
// Required access policy scopes:
//
// * stack-plugins:read
// * stack-plugins:write
// * stack-plugins:delete
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/cloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud.NewPluginInstallation(ctx, "test", &cloud.PluginInstallationArgs{
//				StackSlug: pulumi.String("stackname"),
//				Slug:      pulumi.String("some-plugin"),
//				Version:   pulumi.String("1.2.3"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/cloudPluginInstallation:CloudPluginInstallation name "{{ stackSlug }}:{{ pluginSlug }}"
// ```
//
// Deprecated: grafana.index/cloudplugininstallation.CloudPluginInstallation has been deprecated in favor of grafana.cloud/plugininstallation.PluginInstallation
type CloudPluginInstallation struct {
	pulumi.CustomResourceState

	// Slug of the plugin to be installed.
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug pulumi.StringOutput `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewCloudPluginInstallation registers a new resource with the given unique name, arguments, and options.
func NewCloudPluginInstallation(ctx *pulumi.Context,
	name string, args *CloudPluginInstallationArgs, opts ...pulumi.ResourceOption) (*CloudPluginInstallation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Slug == nil {
		return nil, errors.New("invalid value for required argument 'Slug'")
	}
	if args.StackSlug == nil {
		return nil, errors.New("invalid value for required argument 'StackSlug'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudPluginInstallation
	err := ctx.RegisterResource("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudPluginInstallation gets an existing CloudPluginInstallation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudPluginInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudPluginInstallationState, opts ...pulumi.ResourceOption) (*CloudPluginInstallation, error) {
	var resource CloudPluginInstallation
	err := ctx.ReadResource("grafana:index/cloudPluginInstallation:CloudPluginInstallation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudPluginInstallation resources.
type cloudPluginInstallationState struct {
	// Slug of the plugin to be installed.
	Slug *string `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug *string `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version *string `pulumi:"version"`
}

type CloudPluginInstallationState struct {
	// Slug of the plugin to be installed.
	Slug pulumi.StringPtrInput
	// The stack id to which the plugin should be installed.
	StackSlug pulumi.StringPtrInput
	// Version of the plugin to be installed.
	Version pulumi.StringPtrInput
}

func (CloudPluginInstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudPluginInstallationState)(nil)).Elem()
}

type cloudPluginInstallationArgs struct {
	// Slug of the plugin to be installed.
	Slug string `pulumi:"slug"`
	// The stack id to which the plugin should be installed.
	StackSlug string `pulumi:"stackSlug"`
	// Version of the plugin to be installed.
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a CloudPluginInstallation resource.
type CloudPluginInstallationArgs struct {
	// Slug of the plugin to be installed.
	Slug pulumi.StringInput
	// The stack id to which the plugin should be installed.
	StackSlug pulumi.StringInput
	// Version of the plugin to be installed.
	Version pulumi.StringInput
}

func (CloudPluginInstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudPluginInstallationArgs)(nil)).Elem()
}

type CloudPluginInstallationInput interface {
	pulumi.Input

	ToCloudPluginInstallationOutput() CloudPluginInstallationOutput
	ToCloudPluginInstallationOutputWithContext(ctx context.Context) CloudPluginInstallationOutput
}

func (*CloudPluginInstallation) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudPluginInstallation)(nil)).Elem()
}

func (i *CloudPluginInstallation) ToCloudPluginInstallationOutput() CloudPluginInstallationOutput {
	return i.ToCloudPluginInstallationOutputWithContext(context.Background())
}

func (i *CloudPluginInstallation) ToCloudPluginInstallationOutputWithContext(ctx context.Context) CloudPluginInstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudPluginInstallationOutput)
}

// CloudPluginInstallationArrayInput is an input type that accepts CloudPluginInstallationArray and CloudPluginInstallationArrayOutput values.
// You can construct a concrete instance of `CloudPluginInstallationArrayInput` via:
//
//	CloudPluginInstallationArray{ CloudPluginInstallationArgs{...} }
type CloudPluginInstallationArrayInput interface {
	pulumi.Input

	ToCloudPluginInstallationArrayOutput() CloudPluginInstallationArrayOutput
	ToCloudPluginInstallationArrayOutputWithContext(context.Context) CloudPluginInstallationArrayOutput
}

type CloudPluginInstallationArray []CloudPluginInstallationInput

func (CloudPluginInstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudPluginInstallation)(nil)).Elem()
}

func (i CloudPluginInstallationArray) ToCloudPluginInstallationArrayOutput() CloudPluginInstallationArrayOutput {
	return i.ToCloudPluginInstallationArrayOutputWithContext(context.Background())
}

func (i CloudPluginInstallationArray) ToCloudPluginInstallationArrayOutputWithContext(ctx context.Context) CloudPluginInstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudPluginInstallationArrayOutput)
}

// CloudPluginInstallationMapInput is an input type that accepts CloudPluginInstallationMap and CloudPluginInstallationMapOutput values.
// You can construct a concrete instance of `CloudPluginInstallationMapInput` via:
//
//	CloudPluginInstallationMap{ "key": CloudPluginInstallationArgs{...} }
type CloudPluginInstallationMapInput interface {
	pulumi.Input

	ToCloudPluginInstallationMapOutput() CloudPluginInstallationMapOutput
	ToCloudPluginInstallationMapOutputWithContext(context.Context) CloudPluginInstallationMapOutput
}

type CloudPluginInstallationMap map[string]CloudPluginInstallationInput

func (CloudPluginInstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudPluginInstallation)(nil)).Elem()
}

func (i CloudPluginInstallationMap) ToCloudPluginInstallationMapOutput() CloudPluginInstallationMapOutput {
	return i.ToCloudPluginInstallationMapOutputWithContext(context.Background())
}

func (i CloudPluginInstallationMap) ToCloudPluginInstallationMapOutputWithContext(ctx context.Context) CloudPluginInstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudPluginInstallationMapOutput)
}

type CloudPluginInstallationOutput struct{ *pulumi.OutputState }

func (CloudPluginInstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudPluginInstallation)(nil)).Elem()
}

func (o CloudPluginInstallationOutput) ToCloudPluginInstallationOutput() CloudPluginInstallationOutput {
	return o
}

func (o CloudPluginInstallationOutput) ToCloudPluginInstallationOutputWithContext(ctx context.Context) CloudPluginInstallationOutput {
	return o
}

// Slug of the plugin to be installed.
func (o CloudPluginInstallationOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudPluginInstallation) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The stack id to which the plugin should be installed.
func (o CloudPluginInstallationOutput) StackSlug() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudPluginInstallation) pulumi.StringOutput { return v.StackSlug }).(pulumi.StringOutput)
}

// Version of the plugin to be installed.
func (o CloudPluginInstallationOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudPluginInstallation) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type CloudPluginInstallationArrayOutput struct{ *pulumi.OutputState }

func (CloudPluginInstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudPluginInstallation)(nil)).Elem()
}

func (o CloudPluginInstallationArrayOutput) ToCloudPluginInstallationArrayOutput() CloudPluginInstallationArrayOutput {
	return o
}

func (o CloudPluginInstallationArrayOutput) ToCloudPluginInstallationArrayOutputWithContext(ctx context.Context) CloudPluginInstallationArrayOutput {
	return o
}

func (o CloudPluginInstallationArrayOutput) Index(i pulumi.IntInput) CloudPluginInstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudPluginInstallation {
		return vs[0].([]*CloudPluginInstallation)[vs[1].(int)]
	}).(CloudPluginInstallationOutput)
}

type CloudPluginInstallationMapOutput struct{ *pulumi.OutputState }

func (CloudPluginInstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudPluginInstallation)(nil)).Elem()
}

func (o CloudPluginInstallationMapOutput) ToCloudPluginInstallationMapOutput() CloudPluginInstallationMapOutput {
	return o
}

func (o CloudPluginInstallationMapOutput) ToCloudPluginInstallationMapOutputWithContext(ctx context.Context) CloudPluginInstallationMapOutput {
	return o
}

func (o CloudPluginInstallationMapOutput) MapIndex(k pulumi.StringInput) CloudPluginInstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudPluginInstallation {
		return vs[0].(map[string]*CloudPluginInstallation)[vs[1].(string)]
	}).(CloudPluginInstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudPluginInstallationInput)(nil)).Elem(), &CloudPluginInstallation{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudPluginInstallationArrayInput)(nil)).Elem(), CloudPluginInstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudPluginInstallationMapInput)(nil)).Elem(), CloudPluginInstallationMap{})
	pulumi.RegisterOutputType(CloudPluginInstallationOutput{})
	pulumi.RegisterOutputType(CloudPluginInstallationArrayOutput{})
	pulumi.RegisterOutputType(CloudPluginInstallationMapOutput{})
}
