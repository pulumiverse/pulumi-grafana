// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// **Note:** This resource is available only with Grafana Enterprise 8.+.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/access_control/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/enterprise"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			test, err := enterprise.NewRole(ctx, "test", &enterprise.RoleArgs{
//				Name:        pulumi.String("test-role"),
//				Description: pulumi.String("test-role description"),
//				Uid:         pulumi.String("test-ds-role-uid"),
//				Version:     pulumi.Int(1),
//				Global:      pulumi.Bool(true),
//				Hidden:      pulumi.Bool(false),
//				Permissions: enterprise.RolePermissionArray{
//					&enterprise.RolePermissionArgs{
//						Action: pulumi.String("org.users:add"),
//						Scope:  pulumi.String("users:*"),
//					},
//					&enterprise.RolePermissionArgs{
//						Action: pulumi.String("org.users:write"),
//						Scope:  pulumi.String("users:*"),
//					},
//					&enterprise.RolePermissionArgs{
//						Action: pulumi.String("org.users:read"),
//						Scope:  pulumi.String("users:*"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = enterprise.LookupRoleOutput(ctx, enterprise.GetRoleOutputArgs{
//				Name: test.Name,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: grafana.index/getrole.getRole has been deprecated in favor of grafana.enterprise/getrole.getRole
func LookupRole(ctx *pulumi.Context, args *LookupRoleArgs, opts ...pulumi.InvokeOption) (*LookupRoleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRoleResult
	err := ctx.Invoke("grafana:index/getRole:getRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRole.
type LookupRoleArgs struct {
	// Name of the role
	Name string `pulumi:"name"`
}

// A collection of values returned by getRole.
type LookupRoleResult struct {
	// Description of the role.
	Description string `pulumi:"description"`
	// Display name of the role. Available with Grafana 8.5+.
	DisplayName string `pulumi:"displayName"`
	// Boolean to state whether the role is available across all organizations or not.
	Global bool `pulumi:"global"`
	// Group of the role. Available with Grafana 8.5+.
	Group string `pulumi:"group"`
	// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.
	Hidden bool `pulumi:"hidden"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Name of the role
	Name string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId string `pulumi:"orgId"`
	// Specific set of actions granted by the role.
	Permissions []GetRolePermission `pulumi:"permissions"`
	// Unique identifier of the role. Used for assignments.
	Uid string `pulumi:"uid"`
	// Version of the role. A role is updated only on version increase. This field or `autoIncrementVersion` should be set.
	Version int `pulumi:"version"`
}

func LookupRoleOutput(ctx *pulumi.Context, args LookupRoleOutputArgs, opts ...pulumi.InvokeOption) LookupRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRoleResultOutput, error) {
			args := v.(LookupRoleArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRoleResult
			secret, err := ctx.InvokePackageRaw("grafana:index/getRole:getRole", args, &rv, "", opts...)
			if err != nil {
				return LookupRoleResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRoleResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRoleResultOutput), nil
			}
			return output, nil
		}).(LookupRoleResultOutput)
}

// A collection of arguments for invoking getRole.
type LookupRoleOutputArgs struct {
	// Name of the role
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleArgs)(nil)).Elem()
}

// A collection of values returned by getRole.
type LookupRoleResultOutput struct{ *pulumi.OutputState }

func (LookupRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleResult)(nil)).Elem()
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutput() LookupRoleResultOutput {
	return o
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutputWithContext(ctx context.Context) LookupRoleResultOutput {
	return o
}

// Description of the role.
func (o LookupRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// Display name of the role. Available with Grafana 8.5+.
func (o LookupRoleResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// Boolean to state whether the role is available across all organizations or not.
func (o LookupRoleResultOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRoleResult) bool { return v.Global }).(pulumi.BoolOutput)
}

// Group of the role. Available with Grafana 8.5+.
func (o LookupRoleResultOutput) Group() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Group }).(pulumi.StringOutput)
}

// Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.
func (o LookupRoleResultOutput) Hidden() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRoleResult) bool { return v.Hidden }).(pulumi.BoolOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the role
func (o LookupRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o LookupRoleResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.OrgId }).(pulumi.StringOutput)
}

// Specific set of actions granted by the role.
func (o LookupRoleResultOutput) Permissions() GetRolePermissionArrayOutput {
	return o.ApplyT(func(v LookupRoleResult) []GetRolePermission { return v.Permissions }).(GetRolePermissionArrayOutput)
}

// Unique identifier of the role. Used for assignments.
func (o LookupRoleResultOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Uid }).(pulumi.StringOutput)
}

// Version of the role. A role is updated only on version increase. This field or `autoIncrementVersion` should be set.
func (o LookupRoleResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRoleResult) int { return v.Version }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleResultOutput{})
}
