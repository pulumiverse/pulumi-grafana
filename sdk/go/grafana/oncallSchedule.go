// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/schedules/)
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/oncallSchedule:OncallSchedule name "{{ id }}"
// ```
//
// Deprecated: grafana.index/oncallschedule.OncallSchedule has been deprecated in favor of grafana.oncall/schedule.Schedule
type OncallSchedule struct {
	pulumi.CustomResourceState

	// Enable overrides via web UI (it will ignore ical*url*overrides).
	EnableWebOverrides pulumi.BoolPtrOutput `pulumi:"enableWebOverrides"`
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumi.StringPtrOutput `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumi.StringPtrOutput `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts pulumi.StringArrayOutput `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack OncallScheduleSlackPtrOutput `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrOutput `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone pulumi.StringPtrOutput `pulumi:"timeZone"`
	// The schedule's type. Valid values are `ical`, `calendar`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewOncallSchedule registers a new resource with the given unique name, arguments, and options.
func NewOncallSchedule(ctx *pulumi.Context,
	name string, args *OncallScheduleArgs, opts ...pulumi.ResourceOption) (*OncallSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallSchedule
	err := ctx.RegisterResource("grafana:index/oncallSchedule:OncallSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallSchedule gets an existing OncallSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallScheduleState, opts ...pulumi.ResourceOption) (*OncallSchedule, error) {
	var resource OncallSchedule
	err := ctx.ReadResource("grafana:index/oncallSchedule:OncallSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallSchedule resources.
type oncallScheduleState struct {
	// Enable overrides via web UI (it will ignore ical*url*overrides).
	EnableWebOverrides *bool `pulumi:"enableWebOverrides"`
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides *string `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary *string `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name *string `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts []string `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack *OncallScheduleSlack `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The schedule's type. Valid values are `ical`, `calendar`.
	Type *string `pulumi:"type"`
}

type OncallScheduleState struct {
	// Enable overrides via web UI (it will ignore ical*url*overrides).
	EnableWebOverrides pulumi.BoolPtrInput
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumi.StringPtrInput
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumi.StringPtrInput
	// The schedule's name.
	Name pulumi.StringPtrInput
	// The list of ID's of on-call shifts.
	Shifts pulumi.StringArrayInput
	// The Slack-specific settings for a schedule.
	Slack OncallScheduleSlackPtrInput
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrInput
	// The schedule's time zone.
	TimeZone pulumi.StringPtrInput
	// The schedule's type. Valid values are `ical`, `calendar`.
	Type pulumi.StringPtrInput
}

func (OncallScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallScheduleState)(nil)).Elem()
}

type oncallScheduleArgs struct {
	// Enable overrides via web UI (it will ignore ical*url*overrides).
	EnableWebOverrides *bool `pulumi:"enableWebOverrides"`
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides *string `pulumi:"icalUrlOverrides"`
	// The URL of the external calendar iCal file.
	IcalUrlPrimary *string `pulumi:"icalUrlPrimary"`
	// The schedule's name.
	Name *string `pulumi:"name"`
	// The list of ID's of on-call shifts.
	Shifts []string `pulumi:"shifts"`
	// The Slack-specific settings for a schedule.
	Slack *OncallScheduleSlack `pulumi:"slack"`
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId *string `pulumi:"teamId"`
	// The schedule's time zone.
	TimeZone *string `pulumi:"timeZone"`
	// The schedule's type. Valid values are `ical`, `calendar`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a OncallSchedule resource.
type OncallScheduleArgs struct {
	// Enable overrides via web UI (it will ignore ical*url*overrides).
	EnableWebOverrides pulumi.BoolPtrInput
	// The URL of external iCal calendar which override primary events.
	IcalUrlOverrides pulumi.StringPtrInput
	// The URL of the external calendar iCal file.
	IcalUrlPrimary pulumi.StringPtrInput
	// The schedule's name.
	Name pulumi.StringPtrInput
	// The list of ID's of on-call shifts.
	Shifts pulumi.StringArrayInput
	// The Slack-specific settings for a schedule.
	Slack OncallScheduleSlackPtrInput
	// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
	TeamId pulumi.StringPtrInput
	// The schedule's time zone.
	TimeZone pulumi.StringPtrInput
	// The schedule's type. Valid values are `ical`, `calendar`.
	Type pulumi.StringInput
}

func (OncallScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallScheduleArgs)(nil)).Elem()
}

type OncallScheduleInput interface {
	pulumi.Input

	ToOncallScheduleOutput() OncallScheduleOutput
	ToOncallScheduleOutputWithContext(ctx context.Context) OncallScheduleOutput
}

func (*OncallSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallSchedule)(nil)).Elem()
}

func (i *OncallSchedule) ToOncallScheduleOutput() OncallScheduleOutput {
	return i.ToOncallScheduleOutputWithContext(context.Background())
}

func (i *OncallSchedule) ToOncallScheduleOutputWithContext(ctx context.Context) OncallScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleOutput)
}

// OncallScheduleArrayInput is an input type that accepts OncallScheduleArray and OncallScheduleArrayOutput values.
// You can construct a concrete instance of `OncallScheduleArrayInput` via:
//
//	OncallScheduleArray{ OncallScheduleArgs{...} }
type OncallScheduleArrayInput interface {
	pulumi.Input

	ToOncallScheduleArrayOutput() OncallScheduleArrayOutput
	ToOncallScheduleArrayOutputWithContext(context.Context) OncallScheduleArrayOutput
}

type OncallScheduleArray []OncallScheduleInput

func (OncallScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallSchedule)(nil)).Elem()
}

func (i OncallScheduleArray) ToOncallScheduleArrayOutput() OncallScheduleArrayOutput {
	return i.ToOncallScheduleArrayOutputWithContext(context.Background())
}

func (i OncallScheduleArray) ToOncallScheduleArrayOutputWithContext(ctx context.Context) OncallScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleArrayOutput)
}

// OncallScheduleMapInput is an input type that accepts OncallScheduleMap and OncallScheduleMapOutput values.
// You can construct a concrete instance of `OncallScheduleMapInput` via:
//
//	OncallScheduleMap{ "key": OncallScheduleArgs{...} }
type OncallScheduleMapInput interface {
	pulumi.Input

	ToOncallScheduleMapOutput() OncallScheduleMapOutput
	ToOncallScheduleMapOutputWithContext(context.Context) OncallScheduleMapOutput
}

type OncallScheduleMap map[string]OncallScheduleInput

func (OncallScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallSchedule)(nil)).Elem()
}

func (i OncallScheduleMap) ToOncallScheduleMapOutput() OncallScheduleMapOutput {
	return i.ToOncallScheduleMapOutputWithContext(context.Background())
}

func (i OncallScheduleMap) ToOncallScheduleMapOutputWithContext(ctx context.Context) OncallScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleMapOutput)
}

type OncallScheduleOutput struct{ *pulumi.OutputState }

func (OncallScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallSchedule)(nil)).Elem()
}

func (o OncallScheduleOutput) ToOncallScheduleOutput() OncallScheduleOutput {
	return o
}

func (o OncallScheduleOutput) ToOncallScheduleOutputWithContext(ctx context.Context) OncallScheduleOutput {
	return o
}

// Enable overrides via web UI (it will ignore ical*url*overrides).
func (o OncallScheduleOutput) EnableWebOverrides() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.BoolPtrOutput { return v.EnableWebOverrides }).(pulumi.BoolPtrOutput)
}

// The URL of external iCal calendar which override primary events.
func (o OncallScheduleOutput) IcalUrlOverrides() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringPtrOutput { return v.IcalUrlOverrides }).(pulumi.StringPtrOutput)
}

// The URL of the external calendar iCal file.
func (o OncallScheduleOutput) IcalUrlPrimary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringPtrOutput { return v.IcalUrlPrimary }).(pulumi.StringPtrOutput)
}

// The schedule's name.
func (o OncallScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of ID's of on-call shifts.
func (o OncallScheduleOutput) Shifts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringArrayOutput { return v.Shifts }).(pulumi.StringArrayOutput)
}

// The Slack-specific settings for a schedule.
func (o OncallScheduleOutput) Slack() OncallScheduleSlackPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) OncallScheduleSlackPtrOutput { return v.Slack }).(OncallScheduleSlackPtrOutput)
}

// The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team with OnCall). You can then get the ID using the `onCall.getTeam` datasource.
func (o OncallScheduleOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

// The schedule's time zone.
func (o OncallScheduleOutput) TimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringPtrOutput { return v.TimeZone }).(pulumi.StringPtrOutput)
}

// The schedule's type. Valid values are `ical`, `calendar`.
func (o OncallScheduleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallSchedule) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type OncallScheduleArrayOutput struct{ *pulumi.OutputState }

func (OncallScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallSchedule)(nil)).Elem()
}

func (o OncallScheduleArrayOutput) ToOncallScheduleArrayOutput() OncallScheduleArrayOutput {
	return o
}

func (o OncallScheduleArrayOutput) ToOncallScheduleArrayOutputWithContext(ctx context.Context) OncallScheduleArrayOutput {
	return o
}

func (o OncallScheduleArrayOutput) Index(i pulumi.IntInput) OncallScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OncallSchedule {
		return vs[0].([]*OncallSchedule)[vs[1].(int)]
	}).(OncallScheduleOutput)
}

type OncallScheduleMapOutput struct{ *pulumi.OutputState }

func (OncallScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallSchedule)(nil)).Elem()
}

func (o OncallScheduleMapOutput) ToOncallScheduleMapOutput() OncallScheduleMapOutput {
	return o
}

func (o OncallScheduleMapOutput) ToOncallScheduleMapOutputWithContext(ctx context.Context) OncallScheduleMapOutput {
	return o
}

func (o OncallScheduleMapOutput) MapIndex(k pulumi.StringInput) OncallScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OncallSchedule {
		return vs[0].(map[string]*OncallSchedule)[vs[1].(string)]
	}).(OncallScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleInput)(nil)).Elem(), &OncallSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleArrayInput)(nil)).Elem(), OncallScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleMapInput)(nil)).Elem(), OncallScheduleMap{})
	pulumi.RegisterOutputType(OncallScheduleOutput{})
	pulumi.RegisterOutputType(OncallScheduleArrayOutput{})
	pulumi.RegisterOutputType(OncallScheduleMapOutput{})
}
