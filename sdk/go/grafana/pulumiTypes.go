// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type CloudAccessPolicyRealm struct {
	// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
	Identifier    string                              `pulumi:"identifier"`
	LabelPolicies []CloudAccessPolicyRealmLabelPolicy `pulumi:"labelPolicies"`
	// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
	Type string `pulumi:"type"`
}

// CloudAccessPolicyRealmInput is an input type that accepts CloudAccessPolicyRealmArgs and CloudAccessPolicyRealmOutput values.
// You can construct a concrete instance of `CloudAccessPolicyRealmInput` via:
//
//	CloudAccessPolicyRealmArgs{...}
type CloudAccessPolicyRealmInput interface {
	pulumi.Input

	ToCloudAccessPolicyRealmOutput() CloudAccessPolicyRealmOutput
	ToCloudAccessPolicyRealmOutputWithContext(context.Context) CloudAccessPolicyRealmOutput
}

type CloudAccessPolicyRealmArgs struct {
	// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
	Identifier    pulumi.StringInput                          `pulumi:"identifier"`
	LabelPolicies CloudAccessPolicyRealmLabelPolicyArrayInput `pulumi:"labelPolicies"`
	// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CloudAccessPolicyRealmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealm)(nil)).Elem()
}

func (i CloudAccessPolicyRealmArgs) ToCloudAccessPolicyRealmOutput() CloudAccessPolicyRealmOutput {
	return i.ToCloudAccessPolicyRealmOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmArgs) ToCloudAccessPolicyRealmOutputWithContext(ctx context.Context) CloudAccessPolicyRealmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmOutput)
}

// CloudAccessPolicyRealmArrayInput is an input type that accepts CloudAccessPolicyRealmArray and CloudAccessPolicyRealmArrayOutput values.
// You can construct a concrete instance of `CloudAccessPolicyRealmArrayInput` via:
//
//	CloudAccessPolicyRealmArray{ CloudAccessPolicyRealmArgs{...} }
type CloudAccessPolicyRealmArrayInput interface {
	pulumi.Input

	ToCloudAccessPolicyRealmArrayOutput() CloudAccessPolicyRealmArrayOutput
	ToCloudAccessPolicyRealmArrayOutputWithContext(context.Context) CloudAccessPolicyRealmArrayOutput
}

type CloudAccessPolicyRealmArray []CloudAccessPolicyRealmInput

func (CloudAccessPolicyRealmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudAccessPolicyRealm)(nil)).Elem()
}

func (i CloudAccessPolicyRealmArray) ToCloudAccessPolicyRealmArrayOutput() CloudAccessPolicyRealmArrayOutput {
	return i.ToCloudAccessPolicyRealmArrayOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmArray) ToCloudAccessPolicyRealmArrayOutputWithContext(ctx context.Context) CloudAccessPolicyRealmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmArrayOutput)
}

type CloudAccessPolicyRealmOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealm)(nil)).Elem()
}

func (o CloudAccessPolicyRealmOutput) ToCloudAccessPolicyRealmOutput() CloudAccessPolicyRealmOutput {
	return o
}

func (o CloudAccessPolicyRealmOutput) ToCloudAccessPolicyRealmOutputWithContext(ctx context.Context) CloudAccessPolicyRealmOutput {
	return o
}

// The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.
func (o CloudAccessPolicyRealmOutput) Identifier() pulumi.StringOutput {
	return o.ApplyT(func(v CloudAccessPolicyRealm) string { return v.Identifier }).(pulumi.StringOutput)
}

func (o CloudAccessPolicyRealmOutput) LabelPolicies() CloudAccessPolicyRealmLabelPolicyArrayOutput {
	return o.ApplyT(func(v CloudAccessPolicyRealm) []CloudAccessPolicyRealmLabelPolicy { return v.LabelPolicies }).(CloudAccessPolicyRealmLabelPolicyArrayOutput)
}

// Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.
func (o CloudAccessPolicyRealmOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CloudAccessPolicyRealm) string { return v.Type }).(pulumi.StringOutput)
}

type CloudAccessPolicyRealmArrayOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudAccessPolicyRealm)(nil)).Elem()
}

func (o CloudAccessPolicyRealmArrayOutput) ToCloudAccessPolicyRealmArrayOutput() CloudAccessPolicyRealmArrayOutput {
	return o
}

func (o CloudAccessPolicyRealmArrayOutput) ToCloudAccessPolicyRealmArrayOutputWithContext(ctx context.Context) CloudAccessPolicyRealmArrayOutput {
	return o
}

func (o CloudAccessPolicyRealmArrayOutput) Index(i pulumi.IntInput) CloudAccessPolicyRealmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudAccessPolicyRealm {
		return vs[0].([]CloudAccessPolicyRealm)[vs[1].(int)]
	}).(CloudAccessPolicyRealmOutput)
}

type CloudAccessPolicyRealmLabelPolicy struct {
	// The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
	Selector string `pulumi:"selector"`
}

// CloudAccessPolicyRealmLabelPolicyInput is an input type that accepts CloudAccessPolicyRealmLabelPolicyArgs and CloudAccessPolicyRealmLabelPolicyOutput values.
// You can construct a concrete instance of `CloudAccessPolicyRealmLabelPolicyInput` via:
//
//	CloudAccessPolicyRealmLabelPolicyArgs{...}
type CloudAccessPolicyRealmLabelPolicyInput interface {
	pulumi.Input

	ToCloudAccessPolicyRealmLabelPolicyOutput() CloudAccessPolicyRealmLabelPolicyOutput
	ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(context.Context) CloudAccessPolicyRealmLabelPolicyOutput
}

type CloudAccessPolicyRealmLabelPolicyArgs struct {
	// The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
	Selector pulumi.StringInput `pulumi:"selector"`
}

func (CloudAccessPolicyRealmLabelPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (i CloudAccessPolicyRealmLabelPolicyArgs) ToCloudAccessPolicyRealmLabelPolicyOutput() CloudAccessPolicyRealmLabelPolicyOutput {
	return i.ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmLabelPolicyArgs) ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmLabelPolicyOutput)
}

// CloudAccessPolicyRealmLabelPolicyArrayInput is an input type that accepts CloudAccessPolicyRealmLabelPolicyArray and CloudAccessPolicyRealmLabelPolicyArrayOutput values.
// You can construct a concrete instance of `CloudAccessPolicyRealmLabelPolicyArrayInput` via:
//
//	CloudAccessPolicyRealmLabelPolicyArray{ CloudAccessPolicyRealmLabelPolicyArgs{...} }
type CloudAccessPolicyRealmLabelPolicyArrayInput interface {
	pulumi.Input

	ToCloudAccessPolicyRealmLabelPolicyArrayOutput() CloudAccessPolicyRealmLabelPolicyArrayOutput
	ToCloudAccessPolicyRealmLabelPolicyArrayOutputWithContext(context.Context) CloudAccessPolicyRealmLabelPolicyArrayOutput
}

type CloudAccessPolicyRealmLabelPolicyArray []CloudAccessPolicyRealmLabelPolicyInput

func (CloudAccessPolicyRealmLabelPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (i CloudAccessPolicyRealmLabelPolicyArray) ToCloudAccessPolicyRealmLabelPolicyArrayOutput() CloudAccessPolicyRealmLabelPolicyArrayOutput {
	return i.ToCloudAccessPolicyRealmLabelPolicyArrayOutputWithContext(context.Background())
}

func (i CloudAccessPolicyRealmLabelPolicyArray) ToCloudAccessPolicyRealmLabelPolicyArrayOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudAccessPolicyRealmLabelPolicyArrayOutput)
}

type CloudAccessPolicyRealmLabelPolicyOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmLabelPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) ToCloudAccessPolicyRealmLabelPolicyOutput() CloudAccessPolicyRealmLabelPolicyOutput {
	return o
}

func (o CloudAccessPolicyRealmLabelPolicyOutput) ToCloudAccessPolicyRealmLabelPolicyOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyOutput {
	return o
}

// The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.
func (o CloudAccessPolicyRealmLabelPolicyOutput) Selector() pulumi.StringOutput {
	return o.ApplyT(func(v CloudAccessPolicyRealmLabelPolicy) string { return v.Selector }).(pulumi.StringOutput)
}

type CloudAccessPolicyRealmLabelPolicyArrayOutput struct{ *pulumi.OutputState }

func (CloudAccessPolicyRealmLabelPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CloudAccessPolicyRealmLabelPolicy)(nil)).Elem()
}

func (o CloudAccessPolicyRealmLabelPolicyArrayOutput) ToCloudAccessPolicyRealmLabelPolicyArrayOutput() CloudAccessPolicyRealmLabelPolicyArrayOutput {
	return o
}

func (o CloudAccessPolicyRealmLabelPolicyArrayOutput) ToCloudAccessPolicyRealmLabelPolicyArrayOutputWithContext(ctx context.Context) CloudAccessPolicyRealmLabelPolicyArrayOutput {
	return o
}

func (o CloudAccessPolicyRealmLabelPolicyArrayOutput) Index(i pulumi.IntInput) CloudAccessPolicyRealmLabelPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CloudAccessPolicyRealmLabelPolicy {
		return vs[0].([]CloudAccessPolicyRealmLabelPolicy)[vs[1].(int)]
	}).(CloudAccessPolicyRealmLabelPolicyOutput)
}

type ContactPointAlertmanager struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url string `pulumi:"url"`
}

// ContactPointAlertmanagerInput is an input type that accepts ContactPointAlertmanagerArgs and ContactPointAlertmanagerOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerInput` via:
//
//	ContactPointAlertmanagerArgs{...}
type ContactPointAlertmanagerInput interface {
	pulumi.Input

	ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput
	ToContactPointAlertmanagerOutputWithContext(context.Context) ContactPointAlertmanagerOutput
}

type ContactPointAlertmanagerArgs struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointAlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return i.ToContactPointAlertmanagerOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerOutput)
}

// ContactPointAlertmanagerArrayInput is an input type that accepts ContactPointAlertmanagerArray and ContactPointAlertmanagerArrayOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerArrayInput` via:
//
//	ContactPointAlertmanagerArray{ ContactPointAlertmanagerArgs{...} }
type ContactPointAlertmanagerArrayInput interface {
	pulumi.Input

	ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput
	ToContactPointAlertmanagerArrayOutputWithContext(context.Context) ContactPointAlertmanagerArrayOutput
}

type ContactPointAlertmanagerArray []ContactPointAlertmanagerInput

func (ContactPointAlertmanagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return i.ToContactPointAlertmanagerArrayOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerArrayOutput)
}

type ContactPointAlertmanagerOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return o
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return o
}

// The password component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointAlertmanagerOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointAlertmanagerOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointAlertmanagerOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL of the Alertmanager instance.
func (o ContactPointAlertmanagerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointAlertmanagerArrayOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) Index(i pulumi.IntInput) ContactPointAlertmanagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointAlertmanager {
		return vs[0].([]ContactPointAlertmanager)[vs[1].(int)]
	}).(ContactPointAlertmanagerOutput)
}

type ContactPointDingding struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The DingDing webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointDingdingInput is an input type that accepts ContactPointDingdingArgs and ContactPointDingdingOutput values.
// You can construct a concrete instance of `ContactPointDingdingInput` via:
//
//	ContactPointDingdingArgs{...}
type ContactPointDingdingInput interface {
	pulumi.Input

	ToContactPointDingdingOutput() ContactPointDingdingOutput
	ToContactPointDingdingOutputWithContext(context.Context) ContactPointDingdingOutput
}

type ContactPointDingdingArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The DingDing webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointDingdingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return i.ToContactPointDingdingOutputWithContext(context.Background())
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingOutput)
}

// ContactPointDingdingArrayInput is an input type that accepts ContactPointDingdingArray and ContactPointDingdingArrayOutput values.
// You can construct a concrete instance of `ContactPointDingdingArrayInput` via:
//
//	ContactPointDingdingArray{ ContactPointDingdingArgs{...} }
type ContactPointDingdingArrayInput interface {
	pulumi.Input

	ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput
	ToContactPointDingdingArrayOutputWithContext(context.Context) ContactPointDingdingArrayOutput
}

type ContactPointDingdingArray []ContactPointDingdingInput

func (ContactPointDingdingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return i.ToContactPointDingdingArrayOutputWithContext(context.Background())
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingArrayOutput)
}

type ContactPointDingdingOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return o
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDingdingOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointDingdingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The format of message to send - either 'link' or 'actionCard'
func (o ContactPointDingdingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDingdingOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDingding) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointDingdingOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointDingdingOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The DingDing webhook URL.
func (o ContactPointDingdingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDingding) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointDingdingArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) Index(i pulumi.IntInput) ContactPointDingdingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDingding {
		return vs[0].([]ContactPointDingding)[vs[1].(int)]
	}).(ContactPointDingdingOutput)
}

type ContactPointDiscord struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl *string `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated content of the title.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The discord webhook URL.
	Url string `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername *bool `pulumi:"useDiscordUsername"`
}

// ContactPointDiscordInput is an input type that accepts ContactPointDiscordArgs and ContactPointDiscordOutput values.
// You can construct a concrete instance of `ContactPointDiscordInput` via:
//
//	ContactPointDiscordArgs{...}
type ContactPointDiscordInput interface {
	pulumi.Input

	ToContactPointDiscordOutput() ContactPointDiscordOutput
	ToContactPointDiscordOutputWithContext(context.Context) ContactPointDiscordOutput
}

type ContactPointDiscordArgs struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated content of the title.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The discord webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername pulumi.BoolPtrInput `pulumi:"useDiscordUsername"`
}

func (ContactPointDiscordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return i.ToContactPointDiscordOutputWithContext(context.Background())
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordOutput)
}

// ContactPointDiscordArrayInput is an input type that accepts ContactPointDiscordArray and ContactPointDiscordArrayOutput values.
// You can construct a concrete instance of `ContactPointDiscordArrayInput` via:
//
//	ContactPointDiscordArray{ ContactPointDiscordArgs{...} }
type ContactPointDiscordArrayInput interface {
	pulumi.Input

	ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput
	ToContactPointDiscordArrayOutputWithContext(context.Context) ContactPointDiscordArrayOutput
}

type ContactPointDiscordArray []ContactPointDiscordInput

func (ContactPointDiscordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return i.ToContactPointDiscordArrayOutputWithContext(context.Background())
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordArrayOutput)
}

type ContactPointDiscordOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return o
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return o
}

// The URL of a custom avatar image to use. Defaults to “.
func (o ContactPointDiscordOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDiscordOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message. Defaults to “.
func (o ContactPointDiscordOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDiscordOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDiscord) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated content of the title.
func (o ContactPointDiscordOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointDiscordOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The discord webhook URL.
func (o ContactPointDiscordOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDiscord) string { return v.Url }).(pulumi.StringOutput)
}

// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
func (o ContactPointDiscordOutput) UseDiscordUsername() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.UseDiscordUsername }).(pulumi.BoolPtrOutput)
}

type ContactPointDiscordArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) Index(i pulumi.IntInput) ContactPointDiscordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDiscord {
		return vs[0].([]ContactPointDiscord)[vs[1].(int)]
	}).(ContactPointDiscordOutput)
}

type ContactPointEmail struct {
	// The addresses to send emails to.
	Addresses []string `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail *bool `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject *string `pulumi:"subject"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointEmailInput is an input type that accepts ContactPointEmailArgs and ContactPointEmailOutput values.
// You can construct a concrete instance of `ContactPointEmailInput` via:
//
//	ContactPointEmailArgs{...}
type ContactPointEmailInput interface {
	pulumi.Input

	ToContactPointEmailOutput() ContactPointEmailOutput
	ToContactPointEmailOutputWithContext(context.Context) ContactPointEmailOutput
}

type ContactPointEmailArgs struct {
	// The addresses to send emails to.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail pulumi.BoolPtrInput `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArgs) ToContactPointEmailOutput() ContactPointEmailOutput {
	return i.ToContactPointEmailOutputWithContext(context.Background())
}

func (i ContactPointEmailArgs) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailOutput)
}

// ContactPointEmailArrayInput is an input type that accepts ContactPointEmailArray and ContactPointEmailArrayOutput values.
// You can construct a concrete instance of `ContactPointEmailArrayInput` via:
//
//	ContactPointEmailArray{ ContactPointEmailArgs{...} }
type ContactPointEmailArrayInput interface {
	pulumi.Input

	ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput
	ToContactPointEmailArrayOutputWithContext(context.Context) ContactPointEmailArrayOutput
}

type ContactPointEmailArray []ContactPointEmailInput

func (ContactPointEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return i.ToContactPointEmailArrayOutputWithContext(context.Background())
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailArrayOutput)
}

type ContactPointEmailOutput struct{ *pulumi.OutputState }

func (ContactPointEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailOutput) ToContactPointEmailOutput() ContactPointEmailOutput {
	return o
}

func (o ContactPointEmailOutput) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return o
}

// The addresses to send emails to.
func (o ContactPointEmailOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactPointEmail) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointEmailOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the email. Defaults to “.
func (o ContactPointEmailOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointEmailOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointEmail) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
func (o ContactPointEmailOutput) SingleEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.SingleEmail }).(pulumi.BoolPtrOutput)
}

// The templated subject line of the email. Defaults to “.
func (o ContactPointEmailOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointEmailOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointEmailArrayOutput struct{ *pulumi.OutputState }

func (ContactPointEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) Index(i pulumi.IntInput) ContactPointEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointEmail {
		return vs[0].([]ContactPointEmail)[vs[1].(int)]
	}).(ContactPointEmailOutput)
}

type ContactPointGooglechat struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated content of the title.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointGooglechatInput is an input type that accepts ContactPointGooglechatArgs and ContactPointGooglechatOutput values.
// You can construct a concrete instance of `ContactPointGooglechatInput` via:
//
//	ContactPointGooglechatArgs{...}
type ContactPointGooglechatInput interface {
	pulumi.Input

	ToContactPointGooglechatOutput() ContactPointGooglechatOutput
	ToContactPointGooglechatOutputWithContext(context.Context) ContactPointGooglechatOutput
}

type ContactPointGooglechatArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated content of the title.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointGooglechatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return i.ToContactPointGooglechatOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatOutput)
}

// ContactPointGooglechatArrayInput is an input type that accepts ContactPointGooglechatArray and ContactPointGooglechatArrayOutput values.
// You can construct a concrete instance of `ContactPointGooglechatArrayInput` via:
//
//	ContactPointGooglechatArray{ ContactPointGooglechatArgs{...} }
type ContactPointGooglechatArrayInput interface {
	pulumi.Input

	ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput
	ToContactPointGooglechatArrayOutputWithContext(context.Context) ContactPointGooglechatArrayOutput
}

type ContactPointGooglechatArray []ContactPointGooglechatInput

func (ContactPointGooglechatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return i.ToContactPointGooglechatArrayOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatArrayOutput)
}

type ContactPointGooglechatOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return o
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointGooglechatOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointGooglechatOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointGooglechatOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointGooglechat) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated content of the title.
func (o ContactPointGooglechatOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointGooglechatOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The Google Chat webhook URL.
func (o ContactPointGooglechatOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointGooglechat) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointGooglechatArrayOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) Index(i pulumi.IntInput) ContactPointGooglechatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointGooglechat {
		return vs[0].([]ContactPointGooglechat)[vs[1].(int)]
	}).(ContactPointGooglechatOutput)
}

type ContactPointKafka struct {
	// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
	ApiVersion *string `pulumi:"apiVersion"`
	// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
	ClusterId *string `pulumi:"clusterId"`
	// The templated description of the Kafka message.
	Description *string `pulumi:"description"`
	// The templated details to include with the message.
	Details *string `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The password to use when making a call to the Kafka REST Proxy
	Password *string `pulumi:"password"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl string `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The user name to use when making a call to the Kafka REST Proxy
	Username *string `pulumi:"username"`
}

// ContactPointKafkaInput is an input type that accepts ContactPointKafkaArgs and ContactPointKafkaOutput values.
// You can construct a concrete instance of `ContactPointKafkaInput` via:
//
//	ContactPointKafkaArgs{...}
type ContactPointKafkaInput interface {
	pulumi.Input

	ToContactPointKafkaOutput() ContactPointKafkaOutput
	ToContactPointKafkaOutputWithContext(context.Context) ContactPointKafkaOutput
}

type ContactPointKafkaArgs struct {
	// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The templated description of the Kafka message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The templated details to include with the message.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The password to use when making a call to the Kafka REST Proxy
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl pulumi.StringInput `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The user name to use when making a call to the Kafka REST Proxy
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return i.ToContactPointKafkaOutputWithContext(context.Background())
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaOutput)
}

// ContactPointKafkaArrayInput is an input type that accepts ContactPointKafkaArray and ContactPointKafkaArrayOutput values.
// You can construct a concrete instance of `ContactPointKafkaArrayInput` via:
//
//	ContactPointKafkaArray{ ContactPointKafkaArgs{...} }
type ContactPointKafkaArrayInput interface {
	pulumi.Input

	ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput
	ToContactPointKafkaArrayOutputWithContext(context.Context) ContactPointKafkaArrayOutput
}

type ContactPointKafkaArray []ContactPointKafkaInput

func (ContactPointKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return i.ToContactPointKafkaArrayOutputWithContext(context.Background())
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaArrayOutput)
}

type ContactPointKafkaOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return o
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return o
}

// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
func (o ContactPointKafkaOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
func (o ContactPointKafkaOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The templated description of the Kafka message.
func (o ContactPointKafkaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The templated details to include with the message.
func (o ContactPointKafkaOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointKafkaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The password to use when making a call to the Kafka REST Proxy
func (o ContactPointKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The URL of the Kafka REST proxy to send requests to.
func (o ContactPointKafkaOutput) RestProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.RestProxyUrl }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointKafkaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointKafka) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The name of the Kafka topic to publish to.
func (o ContactPointKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointKafkaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The user name to use when making a call to the Kafka REST Proxy
func (o ContactPointKafkaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointKafkaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) Index(i pulumi.IntInput) ContactPointKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointKafka {
		return vs[0].([]ContactPointKafka)[vs[1].(int)]
	}).(ContactPointKafkaOutput)
}

type ContactPointLine struct {
	// The templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The bearer token used to authorize the client.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointLineInput is an input type that accepts ContactPointLineArgs and ContactPointLineOutput values.
// You can construct a concrete instance of `ContactPointLineInput` via:
//
//	ContactPointLineArgs{...}
type ContactPointLineInput interface {
	pulumi.Input

	ToContactPointLineOutput() ContactPointLineOutput
	ToContactPointLineOutputWithContext(context.Context) ContactPointLineOutput
}

type ContactPointLineArgs struct {
	// The templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The bearer token used to authorize the client.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointLine)(nil)).Elem()
}

func (i ContactPointLineArgs) ToContactPointLineOutput() ContactPointLineOutput {
	return i.ToContactPointLineOutputWithContext(context.Background())
}

func (i ContactPointLineArgs) ToContactPointLineOutputWithContext(ctx context.Context) ContactPointLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointLineOutput)
}

// ContactPointLineArrayInput is an input type that accepts ContactPointLineArray and ContactPointLineArrayOutput values.
// You can construct a concrete instance of `ContactPointLineArrayInput` via:
//
//	ContactPointLineArray{ ContactPointLineArgs{...} }
type ContactPointLineArrayInput interface {
	pulumi.Input

	ToContactPointLineArrayOutput() ContactPointLineArrayOutput
	ToContactPointLineArrayOutputWithContext(context.Context) ContactPointLineArrayOutput
}

type ContactPointLineArray []ContactPointLineInput

func (ContactPointLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointLine)(nil)).Elem()
}

func (i ContactPointLineArray) ToContactPointLineArrayOutput() ContactPointLineArrayOutput {
	return i.ToContactPointLineArrayOutputWithContext(context.Background())
}

func (i ContactPointLineArray) ToContactPointLineArrayOutputWithContext(ctx context.Context) ContactPointLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointLineArrayOutput)
}

type ContactPointLineOutput struct{ *pulumi.OutputState }

func (ContactPointLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointLine)(nil)).Elem()
}

func (o ContactPointLineOutput) ToContactPointLineOutput() ContactPointLineOutput {
	return o
}

func (o ContactPointLineOutput) ToContactPointLineOutputWithContext(ctx context.Context) ContactPointLineOutput {
	return o
}

// The templated description of the message.
func (o ContactPointLineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointLineOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointLineOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointLine) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointLineOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The bearer token used to authorize the client.
func (o ContactPointLineOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointLine) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointLineOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointLineArrayOutput struct{ *pulumi.OutputState }

func (ContactPointLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointLine)(nil)).Elem()
}

func (o ContactPointLineArrayOutput) ToContactPointLineArrayOutput() ContactPointLineArrayOutput {
	return o
}

func (o ContactPointLineArrayOutput) ToContactPointLineArrayOutputWithContext(ctx context.Context) ContactPointLineArrayOutput {
	return o
}

func (o ContactPointLineArrayOutput) Index(i pulumi.IntInput) ContactPointLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointLine {
		return vs[0].([]ContactPointLine)[vs[1].(int)]
	}).(ContactPointLineOutput)
}

type ContactPointOncall struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

// ContactPointOncallInput is an input type that accepts ContactPointOncallArgs and ContactPointOncallOutput values.
// You can construct a concrete instance of `ContactPointOncallInput` via:
//
//	ContactPointOncallArgs{...}
type ContactPointOncallInput interface {
	pulumi.Input

	ToContactPointOncallOutput() ContactPointOncallOutput
	ToContactPointOncallOutputWithContext(context.Context) ContactPointOncallOutput
}

type ContactPointOncallArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumi.StringPtrInput `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumi.StringPtrInput `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumi.IntPtrInput `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointOncallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOncall)(nil)).Elem()
}

func (i ContactPointOncallArgs) ToContactPointOncallOutput() ContactPointOncallOutput {
	return i.ToContactPointOncallOutputWithContext(context.Background())
}

func (i ContactPointOncallArgs) ToContactPointOncallOutputWithContext(ctx context.Context) ContactPointOncallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOncallOutput)
}

// ContactPointOncallArrayInput is an input type that accepts ContactPointOncallArray and ContactPointOncallArrayOutput values.
// You can construct a concrete instance of `ContactPointOncallArrayInput` via:
//
//	ContactPointOncallArray{ ContactPointOncallArgs{...} }
type ContactPointOncallArrayInput interface {
	pulumi.Input

	ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput
	ToContactPointOncallArrayOutputWithContext(context.Context) ContactPointOncallArrayOutput
}

type ContactPointOncallArray []ContactPointOncallInput

func (ContactPointOncallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOncall)(nil)).Elem()
}

func (i ContactPointOncallArray) ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput {
	return i.ToContactPointOncallArrayOutputWithContext(context.Background())
}

func (i ContactPointOncallArray) ToContactPointOncallArrayOutputWithContext(ctx context.Context) ContactPointOncallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOncallArrayOutput)
}

type ContactPointOncallOutput struct{ *pulumi.OutputState }

func (ContactPointOncallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOncall)(nil)).Elem()
}

func (o ContactPointOncallOutput) ToContactPointOncallOutput() ContactPointOncallOutput {
	return o
}

func (o ContactPointOncallOutput) ToContactPointOncallOutputWithContext(ctx context.Context) ContactPointOncallOutput {
	return o
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointOncallOutput) AuthorizationCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.AuthorizationCredentials }).(pulumi.StringPtrOutput)
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointOncallOutput) AuthorizationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.AuthorizationScheme }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointOncallOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointOncallOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOncallOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointOncallOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointOncallOutput) MaxAlerts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *int { return v.MaxAlerts }).(pulumi.IntPtrOutput)
}

// Custom message. You can use template variables.
func (o ContactPointOncallOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOncallOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointOncall) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title of the message.
func (o ContactPointOncallOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointOncallOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send webhook requests to.
func (o ContactPointOncallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOncall) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointOncallArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOncallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOncall)(nil)).Elem()
}

func (o ContactPointOncallArrayOutput) ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput {
	return o
}

func (o ContactPointOncallArrayOutput) ToContactPointOncallArrayOutputWithContext(ctx context.Context) ContactPointOncallArrayOutput {
	return o
}

func (o ContactPointOncallArrayOutput) Index(i pulumi.IntInput) ContactPointOncallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOncall {
		return vs[0].([]ContactPointOncall)[vs[1].(int)]
	}).(ContactPointOncallOutput)
}

type ContactPointOpsgeny struct {
	// The OpsGenie API key to use.
	ApiKey string `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose *bool `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority *bool `pulumi:"overridePriority"`
	// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
	Responders []ContactPointOpsgenyResponder `pulumi:"responders"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs *string `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url *string `pulumi:"url"`
}

// ContactPointOpsgenyInput is an input type that accepts ContactPointOpsgenyArgs and ContactPointOpsgenyOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyInput` via:
//
//	ContactPointOpsgenyArgs{...}
type ContactPointOpsgenyInput interface {
	pulumi.Input

	ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput
	ToContactPointOpsgenyOutputWithContext(context.Context) ContactPointOpsgenyOutput
}

type ContactPointOpsgenyArgs struct {
	// The OpsGenie API key to use.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose pulumi.BoolPtrInput `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority pulumi.BoolPtrInput `pulumi:"overridePriority"`
	// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
	Responders ContactPointOpsgenyResponderArrayInput `pulumi:"responders"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs pulumi.StringPtrInput `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointOpsgenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return i.ToContactPointOpsgenyOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyOutput)
}

// ContactPointOpsgenyArrayInput is an input type that accepts ContactPointOpsgenyArray and ContactPointOpsgenyArrayOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyArrayInput` via:
//
//	ContactPointOpsgenyArray{ ContactPointOpsgenyArgs{...} }
type ContactPointOpsgenyArrayInput interface {
	pulumi.Input

	ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput
	ToContactPointOpsgenyArrayOutputWithContext(context.Context) ContactPointOpsgenyArrayOutput
}

type ContactPointOpsgenyArray []ContactPointOpsgenyInput

func (ContactPointOpsgenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return i.ToContactPointOpsgenyArrayOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyArrayOutput)
}

type ContactPointOpsgenyOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return o
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return o
}

// The OpsGenie API key to use.
func (o ContactPointOpsgenyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
func (o ContactPointOpsgenyOutput) AutoClose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.AutoClose }).(pulumi.BoolPtrOutput)
}

// A templated high-level description to use for the alert.
func (o ContactPointOpsgenyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOpsgenyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointOpsgenyOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
func (o ContactPointOpsgenyOutput) OverridePriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.OverridePriority }).(pulumi.BoolPtrOutput)
}

// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
func (o ContactPointOpsgenyOutput) Responders() ContactPointOpsgenyResponderArrayOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) []ContactPointOpsgenyResponder { return v.Responders }).(ContactPointOpsgenyResponderArrayOutput)
}

// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
func (o ContactPointOpsgenyOutput) SendTagsAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.SendTagsAs }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOpsgenyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointOpsgenyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Allows customization of the OpsGenie API URL.
func (o ContactPointOpsgenyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointOpsgenyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) Index(i pulumi.IntInput) ContactPointOpsgenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOpsgeny {
		return vs[0].([]ContactPointOpsgeny)[vs[1].(int)]
	}).(ContactPointOpsgenyOutput)
}

type ContactPointOpsgenyResponder struct {
	// ID of the responder. Must be specified if name and username are empty.
	Id *string `pulumi:"id"`
	// Name of the responder. Must be specified if username and id are empty.
	Name *string `pulumi:"name"`
	// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
	Type string `pulumi:"type"`
	// User name of the responder. Must be specified if name and id are empty.
	Username *string `pulumi:"username"`
}

// ContactPointOpsgenyResponderInput is an input type that accepts ContactPointOpsgenyResponderArgs and ContactPointOpsgenyResponderOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyResponderInput` via:
//
//	ContactPointOpsgenyResponderArgs{...}
type ContactPointOpsgenyResponderInput interface {
	pulumi.Input

	ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput
	ToContactPointOpsgenyResponderOutputWithContext(context.Context) ContactPointOpsgenyResponderOutput
}

type ContactPointOpsgenyResponderArgs struct {
	// ID of the responder. Must be specified if name and username are empty.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the responder. Must be specified if username and id are empty.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
	Type pulumi.StringInput `pulumi:"type"`
	// User name of the responder. Must be specified if name and id are empty.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointOpsgenyResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgenyResponder)(nil)).Elem()
}

func (i ContactPointOpsgenyResponderArgs) ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput {
	return i.ToContactPointOpsgenyResponderOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyResponderArgs) ToContactPointOpsgenyResponderOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyResponderOutput)
}

// ContactPointOpsgenyResponderArrayInput is an input type that accepts ContactPointOpsgenyResponderArray and ContactPointOpsgenyResponderArrayOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyResponderArrayInput` via:
//
//	ContactPointOpsgenyResponderArray{ ContactPointOpsgenyResponderArgs{...} }
type ContactPointOpsgenyResponderArrayInput interface {
	pulumi.Input

	ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput
	ToContactPointOpsgenyResponderArrayOutputWithContext(context.Context) ContactPointOpsgenyResponderArrayOutput
}

type ContactPointOpsgenyResponderArray []ContactPointOpsgenyResponderInput

func (ContactPointOpsgenyResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgenyResponder)(nil)).Elem()
}

func (i ContactPointOpsgenyResponderArray) ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput {
	return i.ToContactPointOpsgenyResponderArrayOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyResponderArray) ToContactPointOpsgenyResponderArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyResponderArrayOutput)
}

type ContactPointOpsgenyResponderOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgenyResponder)(nil)).Elem()
}

func (o ContactPointOpsgenyResponderOutput) ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput {
	return o
}

func (o ContactPointOpsgenyResponderOutput) ToContactPointOpsgenyResponderOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderOutput {
	return o
}

// ID of the responder. Must be specified if name and username are empty.
func (o ContactPointOpsgenyResponderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the responder. Must be specified if username and id are empty.
func (o ContactPointOpsgenyResponderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
func (o ContactPointOpsgenyResponderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) string { return v.Type }).(pulumi.StringOutput)
}

// User name of the responder. Must be specified if name and id are empty.
func (o ContactPointOpsgenyResponderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointOpsgenyResponderArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgenyResponder)(nil)).Elem()
}

func (o ContactPointOpsgenyResponderArrayOutput) ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput {
	return o
}

func (o ContactPointOpsgenyResponderArrayOutput) ToContactPointOpsgenyResponderArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderArrayOutput {
	return o
}

func (o ContactPointOpsgenyResponderArrayOutput) Index(i pulumi.IntInput) ContactPointOpsgenyResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOpsgenyResponder {
		return vs[0].([]ContactPointOpsgenyResponder)[vs[1].(int)]
	}).(ContactPointOpsgenyResponderOutput)
}

type ContactPointPagerduty struct {
	// The class or type of event, for example `ping failure`.
	Class *string `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client *string `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl *string `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component *string `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details map[string]string `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group *string `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey string `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity *string `pulumi:"severity"`
	// The unique location of the affected system.
	Source *string `pulumi:"source"`
	// The templated summary message of the event.
	Summary *string `pulumi:"summary"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send API requests to
	Url *string `pulumi:"url"`
}

// ContactPointPagerdutyInput is an input type that accepts ContactPointPagerdutyArgs and ContactPointPagerdutyOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyInput` via:
//
//	ContactPointPagerdutyArgs{...}
type ContactPointPagerdutyInput interface {
	pulumi.Input

	ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput
	ToContactPointPagerdutyOutputWithContext(context.Context) ContactPointPagerdutyOutput
}

type ContactPointPagerdutyArgs struct {
	// The class or type of event, for example `ping failure`.
	Class pulumi.StringPtrInput `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client pulumi.StringPtrInput `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl pulumi.StringPtrInput `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component pulumi.StringPtrInput `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details pulumi.StringMapInput `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey pulumi.StringInput `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The unique location of the affected system.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The templated summary message of the event.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send API requests to
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return i.ToContactPointPagerdutyOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyOutput)
}

// ContactPointPagerdutyArrayInput is an input type that accepts ContactPointPagerdutyArray and ContactPointPagerdutyArrayOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyArrayInput` via:
//
//	ContactPointPagerdutyArray{ ContactPointPagerdutyArgs{...} }
type ContactPointPagerdutyArrayInput interface {
	pulumi.Input

	ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput
	ToContactPointPagerdutyArrayOutputWithContext(context.Context) ContactPointPagerdutyArrayOutput
}

type ContactPointPagerdutyArray []ContactPointPagerdutyInput

func (ContactPointPagerdutyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return i.ToContactPointPagerdutyArrayOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyArrayOutput)
}

type ContactPointPagerdutyOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return o
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return o
}

// The class or type of event, for example `ping failure`.
func (o ContactPointPagerdutyOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Class }).(pulumi.StringPtrOutput)
}

// The name of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) Client() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Client }).(pulumi.StringPtrOutput)
}

// The URL of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) ClientUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.ClientUrl }).(pulumi.StringPtrOutput)
}

// The component being affected by the event.
func (o ContactPointPagerdutyOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Component }).(pulumi.StringPtrOutput)
}

// A set of arbitrary key/value pairs that provide further detail about the incident.
func (o ContactPointPagerdutyOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPagerduty) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPagerdutyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The group to which the provided component belongs to.
func (o ContactPointPagerdutyOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The PagerDuty API key.
func (o ContactPointPagerdutyOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPagerduty) string { return v.IntegrationKey }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPagerdutyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPagerduty) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The PagerDuty event severity level. Default is `critical`.
func (o ContactPointPagerdutyOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The unique location of the affected system.
func (o ContactPointPagerdutyOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The templated summary message of the event.
func (o ContactPointPagerdutyOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPagerdutyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send API requests to
func (o ContactPointPagerdutyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointPagerdutyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) Index(i pulumi.IntInput) ContactPointPagerdutyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPagerduty {
		return vs[0].([]ContactPointPagerduty)[vs[1].(int)]
	}).(ContactPointPagerdutyOutput)
}

type ContactPointPushover struct {
	// The Pushover API token.
	ApiToken string `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device *string `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire *int `pulumi:"expire"`
	// The templated notification message content.
	Message *string `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority *int `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound *string `pulumi:"okSound"`
	// The priority level of the event.
	Priority *int `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry *int `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The sound associated with the notification.
	Sound *string `pulumi:"sound"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
	UploadImage *bool `pulumi:"uploadImage"`
	// The Pushover user key.
	UserKey string `pulumi:"userKey"`
}

// ContactPointPushoverInput is an input type that accepts ContactPointPushoverArgs and ContactPointPushoverOutput values.
// You can construct a concrete instance of `ContactPointPushoverInput` via:
//
//	ContactPointPushoverArgs{...}
type ContactPointPushoverInput interface {
	pulumi.Input

	ToContactPointPushoverOutput() ContactPointPushoverOutput
	ToContactPointPushoverOutputWithContext(context.Context) ContactPointPushoverOutput
}

type ContactPointPushoverArgs struct {
	// The Pushover API token.
	ApiToken pulumi.StringInput `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire pulumi.IntPtrInput `pulumi:"expire"`
	// The templated notification message content.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority pulumi.IntPtrInput `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound pulumi.StringPtrInput `pulumi:"okSound"`
	// The priority level of the event.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry pulumi.IntPtrInput `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The sound associated with the notification.
	Sound pulumi.StringPtrInput `pulumi:"sound"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
	UploadImage pulumi.BoolPtrInput `pulumi:"uploadImage"`
	// The Pushover user key.
	UserKey pulumi.StringInput `pulumi:"userKey"`
}

func (ContactPointPushoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return i.ToContactPointPushoverOutputWithContext(context.Background())
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverOutput)
}

// ContactPointPushoverArrayInput is an input type that accepts ContactPointPushoverArray and ContactPointPushoverArrayOutput values.
// You can construct a concrete instance of `ContactPointPushoverArrayInput` via:
//
//	ContactPointPushoverArray{ ContactPointPushoverArgs{...} }
type ContactPointPushoverArrayInput interface {
	pulumi.Input

	ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput
	ToContactPointPushoverArrayOutputWithContext(context.Context) ContactPointPushoverArrayOutput
}

type ContactPointPushoverArray []ContactPointPushoverInput

func (ContactPointPushoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return i.ToContactPointPushoverArrayOutputWithContext(context.Background())
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverArrayOutput)
}

type ContactPointPushoverOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return o
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return o
}

// The Pushover API token.
func (o ContactPointPushoverOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.ApiToken }).(pulumi.StringOutput)
}

// Comma-separated list of devices to which the event is associated.
func (o ContactPointPushoverOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPushoverOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// How many seconds for which the notification will continue to be retried by Pushover.
func (o ContactPointPushoverOutput) Expire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Expire }).(pulumi.IntPtrOutput)
}

// The templated notification message content.
func (o ContactPointPushoverOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The priority level of the resolved event.
func (o ContactPointPushoverOutput) OkPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.OkPriority }).(pulumi.IntPtrOutput)
}

// The sound associated with the resolved notification.
func (o ContactPointPushoverOutput) OkSound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.OkSound }).(pulumi.StringPtrOutput)
}

// The priority level of the event.
func (o ContactPointPushoverOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// How often, in seconds, the Pushover servers will send the same notification to the user.
func (o ContactPointPushoverOutput) Retry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Retry }).(pulumi.IntPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPushoverOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPushover) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The sound associated with the notification.
func (o ContactPointPushoverOutput) Sound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Sound }).(pulumi.StringPtrOutput)
}

// The templated title of the message.
func (o ContactPointPushoverOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPushoverOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
func (o ContactPointPushoverOutput) UploadImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *bool { return v.UploadImage }).(pulumi.BoolPtrOutput)
}

// The Pushover user key.
func (o ContactPointPushoverOutput) UserKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.UserKey }).(pulumi.StringOutput)
}

type ContactPointPushoverArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) Index(i pulumi.IntInput) ContactPointPushoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPushover {
		return vs[0].([]ContactPointPushover)[vs[1].(int)]
	}).(ContactPointPushoverOutput)
}

type ContactPointSensugo struct {
	// The SensuGo API key.
	ApiKey string `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check *string `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity *string `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler *string `pulumi:"handler"`
	// Templated message content describing the alert.
	Message *string `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace *string `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url string `pulumi:"url"`
}

// ContactPointSensugoInput is an input type that accepts ContactPointSensugoArgs and ContactPointSensugoOutput values.
// You can construct a concrete instance of `ContactPointSensugoInput` via:
//
//	ContactPointSensugoArgs{...}
type ContactPointSensugoInput interface {
	pulumi.Input

	ToContactPointSensugoOutput() ContactPointSensugoOutput
	ToContactPointSensugoOutputWithContext(context.Context) ContactPointSensugoOutput
}

type ContactPointSensugoArgs struct {
	// The SensuGo API key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check pulumi.StringPtrInput `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity pulumi.StringPtrInput `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler pulumi.StringPtrInput `pulumi:"handler"`
	// Templated message content describing the alert.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointSensugoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return i.ToContactPointSensugoOutputWithContext(context.Background())
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoOutput)
}

// ContactPointSensugoArrayInput is an input type that accepts ContactPointSensugoArray and ContactPointSensugoArrayOutput values.
// You can construct a concrete instance of `ContactPointSensugoArrayInput` via:
//
//	ContactPointSensugoArray{ ContactPointSensugoArgs{...} }
type ContactPointSensugoArrayInput interface {
	pulumi.Input

	ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput
	ToContactPointSensugoArrayOutputWithContext(context.Context) ContactPointSensugoArrayOutput
}

type ContactPointSensugoArray []ContactPointSensugoInput

func (ContactPointSensugoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return i.ToContactPointSensugoArrayOutputWithContext(context.Background())
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoArrayOutput)
}

type ContactPointSensugoOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return o
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return o
}

// The SensuGo API key.
func (o ContactPointSensugoOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The SensuGo check to which the event should be routed.
func (o ContactPointSensugoOutput) Check() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Check }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSensugoOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The entity being monitored.
func (o ContactPointSensugoOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// A custom handler to execute in addition to the check.
func (o ContactPointSensugoOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Handler }).(pulumi.StringPtrOutput)
}

// Templated message content describing the alert.
func (o ContactPointSensugoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The namespace in which the check resides.
func (o ContactPointSensugoOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSensugoOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSensugo) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointSensugoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The SensuGo URL to send requests to.
func (o ContactPointSensugoOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointSensugoArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) Index(i pulumi.IntInput) ContactPointSensugoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSensugo {
		return vs[0].([]ContactPointSensugo)[vs[1].(int)]
	}).(ContactPointSensugoOutput)
}

type ContactPointSlack struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji *string `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl *string `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel *string `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups *string `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers *string `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient *string `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated content of the message.
	Text *string `pulumi:"text"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token *string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url *string `pulumi:"url"`
	// Username for the bot to use.
	Username *string `pulumi:"username"`
}

// ContactPointSlackInput is an input type that accepts ContactPointSlackArgs and ContactPointSlackOutput values.
// You can construct a concrete instance of `ContactPointSlackInput` via:
//
//	ContactPointSlackArgs{...}
type ContactPointSlackInput interface {
	pulumi.Input

	ToContactPointSlackOutput() ContactPointSlackOutput
	ToContactPointSlackOutputWithContext(context.Context) ContactPointSlackOutput
}

type ContactPointSlackArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji pulumi.StringPtrInput `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl pulumi.StringPtrInput `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel pulumi.StringPtrInput `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups pulumi.StringPtrInput `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers pulumi.StringPtrInput `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient pulumi.StringPtrInput `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated content of the message.
	Text pulumi.StringPtrInput `pulumi:"text"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username for the bot to use.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArgs) ToContactPointSlackOutput() ContactPointSlackOutput {
	return i.ToContactPointSlackOutputWithContext(context.Background())
}

func (i ContactPointSlackArgs) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackOutput)
}

// ContactPointSlackArrayInput is an input type that accepts ContactPointSlackArray and ContactPointSlackArrayOutput values.
// You can construct a concrete instance of `ContactPointSlackArrayInput` via:
//
//	ContactPointSlackArray{ ContactPointSlackArgs{...} }
type ContactPointSlackArrayInput interface {
	pulumi.Input

	ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput
	ToContactPointSlackArrayOutputWithContext(context.Context) ContactPointSlackArrayOutput
}

type ContactPointSlackArray []ContactPointSlackInput

func (ContactPointSlackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return i.ToContactPointSlackArrayOutputWithContext(context.Background())
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackArrayOutput)
}

type ContactPointSlackOutput struct{ *pulumi.OutputState }

func (ContactPointSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackOutput) ToContactPointSlackOutput() ContactPointSlackOutput {
	return o
}

func (o ContactPointSlackOutput) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSlackOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Use this to override the Slack API endpoint URL to send requests to.
func (o ContactPointSlackOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// The name of a Slack workspace emoji to use as the bot icon.
func (o ContactPointSlackOutput) IconEmoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconEmoji }).(pulumi.StringPtrOutput)
}

// A URL of an image to use as the bot icon.
func (o ContactPointSlackOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
func (o ContactPointSlackOutput) MentionChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionChannel }).(pulumi.StringPtrOutput)
}

// Comma-separated list of groups to mention in the message.
func (o ContactPointSlackOutput) MentionGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionGroups }).(pulumi.StringPtrOutput)
}

// Comma-separated list of users to mention in the message.
func (o ContactPointSlackOutput) MentionUsers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionUsers }).(pulumi.StringPtrOutput)
}

// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
func (o ContactPointSlackOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Recipient }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSlackOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSlack) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated content of the message.
func (o ContactPointSlackOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// Templated title of the message.
func (o ContactPointSlackOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// A Slack API token,for sending messages directly without the webhook method.
func (o ContactPointSlackOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointSlackOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Slack webhook URL,for sending messages via the webhook method.
func (o ContactPointSlackOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username for the bot to use.
func (o ContactPointSlackOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointSlackArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSlackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) Index(i pulumi.IntInput) ContactPointSlackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSlack {
		return vs[0].([]ContactPointSlack)[vs[1].(int)]
	}).(ContactPointSlackOutput)
}

type ContactPointSn struct {
	// AWS access key ID used to authenticate with Amazon SNS.
	AccessKey *string `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
	AuthProvider *string `pulumi:"authProvider"`
	Body         *string `pulumi:"body"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The external ID to use when assuming the role.
	ExternalId *string `pulumi:"externalId"`
	// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
	MessageFormat *string `pulumi:"messageFormat"`
	// AWS secret access key used to authenticate with Amazon SNS.
	SecretKey *string `pulumi:"secretKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	Subject  *string           `pulumi:"subject"`
	// The Amazon SNS topic to send notifications to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointSnInput is an input type that accepts ContactPointSnArgs and ContactPointSnOutput values.
// You can construct a concrete instance of `ContactPointSnInput` via:
//
//	ContactPointSnArgs{...}
type ContactPointSnInput interface {
	pulumi.Input

	ToContactPointSnOutput() ContactPointSnOutput
	ToContactPointSnOutputWithContext(context.Context) ContactPointSnOutput
}

type ContactPointSnArgs struct {
	// AWS access key ID used to authenticate with Amazon SNS.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
	AssumeRoleArn pulumi.StringPtrInput `pulumi:"assumeRoleArn"`
	// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
	AuthProvider pulumi.StringPtrInput `pulumi:"authProvider"`
	Body         pulumi.StringPtrInput `pulumi:"body"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The external ID to use when assuming the role.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
	MessageFormat pulumi.StringPtrInput `pulumi:"messageFormat"`
	// AWS secret access key used to authenticate with Amazon SNS.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	Subject  pulumi.StringPtrInput `pulumi:"subject"`
	// The Amazon SNS topic to send notifications to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointSnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSn)(nil)).Elem()
}

func (i ContactPointSnArgs) ToContactPointSnOutput() ContactPointSnOutput {
	return i.ToContactPointSnOutputWithContext(context.Background())
}

func (i ContactPointSnArgs) ToContactPointSnOutputWithContext(ctx context.Context) ContactPointSnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSnOutput)
}

// ContactPointSnArrayInput is an input type that accepts ContactPointSnArray and ContactPointSnArrayOutput values.
// You can construct a concrete instance of `ContactPointSnArrayInput` via:
//
//	ContactPointSnArray{ ContactPointSnArgs{...} }
type ContactPointSnArrayInput interface {
	pulumi.Input

	ToContactPointSnArrayOutput() ContactPointSnArrayOutput
	ToContactPointSnArrayOutputWithContext(context.Context) ContactPointSnArrayOutput
}

type ContactPointSnArray []ContactPointSnInput

func (ContactPointSnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSn)(nil)).Elem()
}

func (i ContactPointSnArray) ToContactPointSnArrayOutput() ContactPointSnArrayOutput {
	return i.ToContactPointSnArrayOutputWithContext(context.Background())
}

func (i ContactPointSnArray) ToContactPointSnArrayOutputWithContext(ctx context.Context) ContactPointSnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSnArrayOutput)
}

type ContactPointSnOutput struct{ *pulumi.OutputState }

func (ContactPointSnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSn)(nil)).Elem()
}

func (o ContactPointSnOutput) ToContactPointSnOutput() ContactPointSnOutput {
	return o
}

func (o ContactPointSnOutput) ToContactPointSnOutputWithContext(ctx context.Context) ContactPointSnOutput {
	return o
}

// AWS access key ID used to authenticate with Amazon SNS.
func (o ContactPointSnOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
func (o ContactPointSnOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
func (o ContactPointSnOutput) AuthProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AuthProvider }).(pulumi.StringPtrOutput)
}

func (o ContactPointSnOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSnOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The external ID to use when assuming the role.
func (o ContactPointSnOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
func (o ContactPointSnOutput) MessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.MessageFormat }).(pulumi.StringPtrOutput)
}

// AWS secret access key used to authenticate with Amazon SNS.
func (o ContactPointSnOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSnOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSn) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o ContactPointSnOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The Amazon SNS topic to send notifications to.
func (o ContactPointSnOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSn) string { return v.Topic }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointSnOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointSnArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSn)(nil)).Elem()
}

func (o ContactPointSnArrayOutput) ToContactPointSnArrayOutput() ContactPointSnArrayOutput {
	return o
}

func (o ContactPointSnArrayOutput) ToContactPointSnArrayOutputWithContext(ctx context.Context) ContactPointSnArrayOutput {
	return o
}

func (o ContactPointSnArrayOutput) Index(i pulumi.IntInput) ContactPointSnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSn {
		return vs[0].([]ContactPointSn)[vs[1].(int)]
	}).(ContactPointSnOutput)
}

type ContactPointTeam struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message *string `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle *string `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Teams webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointTeamInput is an input type that accepts ContactPointTeamArgs and ContactPointTeamOutput values.
// You can construct a concrete instance of `ContactPointTeamInput` via:
//
//	ContactPointTeamArgs{...}
type ContactPointTeamInput interface {
	pulumi.Input

	ToContactPointTeamOutput() ContactPointTeamOutput
	ToContactPointTeamOutputWithContext(context.Context) ContactPointTeamOutput
}

type ContactPointTeamArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle pulumi.StringPtrInput `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Teams webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArgs) ToContactPointTeamOutput() ContactPointTeamOutput {
	return i.ToContactPointTeamOutputWithContext(context.Background())
}

func (i ContactPointTeamArgs) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamOutput)
}

// ContactPointTeamArrayInput is an input type that accepts ContactPointTeamArray and ContactPointTeamArrayOutput values.
// You can construct a concrete instance of `ContactPointTeamArrayInput` via:
//
//	ContactPointTeamArray{ ContactPointTeamArgs{...} }
type ContactPointTeamArrayInput interface {
	pulumi.Input

	ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput
	ToContactPointTeamArrayOutputWithContext(context.Context) ContactPointTeamArrayOutput
}

type ContactPointTeamArray []ContactPointTeamInput

func (ContactPointTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return i.ToContactPointTeamArrayOutputWithContext(context.Background())
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamArrayOutput)
}

type ContactPointTeamOutput struct{ *pulumi.OutputState }

func (ContactPointTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamOutput) ToContactPointTeamOutput() ContactPointTeamOutput {
	return o
}

func (o ContactPointTeamOutput) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTeamOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated message content to send.
func (o ContactPointTeamOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The templated subtitle for each message section.
func (o ContactPointTeamOutput) SectionTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.SectionTitle }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTeamOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTeam) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointTeamOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointTeamOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Teams webhook URL.
func (o ContactPointTeamOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTeam) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointTeamArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) Index(i pulumi.IntInput) ContactPointTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTeam {
		return vs[0].([]ContactPointTeam)[vs[1].(int)]
	}).(ContactPointTeamOutput)
}

type ContactPointTelegram struct {
	// The chat ID to send messages to.
	ChatId string `pulumi:"chatId"`
	// When set users will receive a notification with no sound.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// When set it disables link previews for links in the message.
	DisableWebPagePreview *bool `pulumi:"disableWebPagePreview"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The ID of the message thread to send the message to.
	MessageThreadId *string `pulumi:"messageThreadId"`
	// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
	ParseMode *string `pulumi:"parseMode"`
	// When set it protects the contents of the message from forwarding and saving.
	ProtectContent *bool `pulumi:"protectContent"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The Telegram bot token.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointTelegramInput is an input type that accepts ContactPointTelegramArgs and ContactPointTelegramOutput values.
// You can construct a concrete instance of `ContactPointTelegramInput` via:
//
//	ContactPointTelegramArgs{...}
type ContactPointTelegramInput interface {
	pulumi.Input

	ToContactPointTelegramOutput() ContactPointTelegramOutput
	ToContactPointTelegramOutputWithContext(context.Context) ContactPointTelegramOutput
}

type ContactPointTelegramArgs struct {
	// The chat ID to send messages to.
	ChatId pulumi.StringInput `pulumi:"chatId"`
	// When set users will receive a notification with no sound.
	DisableNotifications pulumi.BoolPtrInput `pulumi:"disableNotifications"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// When set it disables link previews for links in the message.
	DisableWebPagePreview pulumi.BoolPtrInput `pulumi:"disableWebPagePreview"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The ID of the message thread to send the message to.
	MessageThreadId pulumi.StringPtrInput `pulumi:"messageThreadId"`
	// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
	ParseMode pulumi.StringPtrInput `pulumi:"parseMode"`
	// When set it protects the contents of the message from forwarding and saving.
	ProtectContent pulumi.BoolPtrInput `pulumi:"protectContent"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The Telegram bot token.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return i.ToContactPointTelegramOutputWithContext(context.Background())
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramOutput)
}

// ContactPointTelegramArrayInput is an input type that accepts ContactPointTelegramArray and ContactPointTelegramArrayOutput values.
// You can construct a concrete instance of `ContactPointTelegramArrayInput` via:
//
//	ContactPointTelegramArray{ ContactPointTelegramArgs{...} }
type ContactPointTelegramArrayInput interface {
	pulumi.Input

	ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput
	ToContactPointTelegramArrayOutputWithContext(context.Context) ContactPointTelegramArrayOutput
}

type ContactPointTelegramArray []ContactPointTelegramInput

func (ContactPointTelegramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return i.ToContactPointTelegramArrayOutputWithContext(context.Background())
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramArrayOutput)
}

type ContactPointTelegramOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return o
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return o
}

// The chat ID to send messages to.
func (o ContactPointTelegramOutput) ChatId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.ChatId }).(pulumi.StringOutput)
}

// When set users will receive a notification with no sound.
func (o ContactPointTelegramOutput) DisableNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableNotifications }).(pulumi.BoolPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTelegramOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// When set it disables link previews for links in the message.
func (o ContactPointTelegramOutput) DisableWebPagePreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableWebPagePreview }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointTelegramOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The ID of the message thread to send the message to.
func (o ContactPointTelegramOutput) MessageThreadId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.MessageThreadId }).(pulumi.StringPtrOutput)
}

// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
func (o ContactPointTelegramOutput) ParseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.ParseMode }).(pulumi.StringPtrOutput)
}

// When set it protects the contents of the message from forwarding and saving.
func (o ContactPointTelegramOutput) ProtectContent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.ProtectContent }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTelegramOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTelegram) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The Telegram bot token.
func (o ContactPointTelegramOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointTelegramOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointTelegramArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) Index(i pulumi.IntInput) ContactPointTelegramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTelegram {
		return vs[0].([]ContactPointTelegram)[vs[1].(int)]
	}).(ContactPointTelegramOutput)
}

type ContactPointThreema struct {
	// The Threema API key.
	ApiSecret string `pulumi:"apiSecret"`
	// The templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId string `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointThreemaInput is an input type that accepts ContactPointThreemaArgs and ContactPointThreemaOutput values.
// You can construct a concrete instance of `ContactPointThreemaInput` via:
//
//	ContactPointThreemaArgs{...}
type ContactPointThreemaInput interface {
	pulumi.Input

	ToContactPointThreemaOutput() ContactPointThreemaOutput
	ToContactPointThreemaOutputWithContext(context.Context) ContactPointThreemaOutput
}

type ContactPointThreemaArgs struct {
	// The Threema API key.
	ApiSecret pulumi.StringInput `pulumi:"apiSecret"`
	// The templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId pulumi.StringInput `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointThreemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return i.ToContactPointThreemaOutputWithContext(context.Background())
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaOutput)
}

// ContactPointThreemaArrayInput is an input type that accepts ContactPointThreemaArray and ContactPointThreemaArrayOutput values.
// You can construct a concrete instance of `ContactPointThreemaArrayInput` via:
//
//	ContactPointThreemaArray{ ContactPointThreemaArgs{...} }
type ContactPointThreemaArrayInput interface {
	pulumi.Input

	ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput
	ToContactPointThreemaArrayOutputWithContext(context.Context) ContactPointThreemaArrayOutput
}

type ContactPointThreemaArray []ContactPointThreemaInput

func (ContactPointThreemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return i.ToContactPointThreemaArrayOutputWithContext(context.Background())
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaArrayOutput)
}

type ContactPointThreemaOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return o
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return o
}

// The Threema API key.
func (o ContactPointThreemaOutput) ApiSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.ApiSecret }).(pulumi.StringOutput)
}

// The templated description of the message.
func (o ContactPointThreemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointThreemaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The Threema gateway ID.
func (o ContactPointThreemaOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.GatewayId }).(pulumi.StringOutput)
}

// The ID of the recipient of the message.
func (o ContactPointThreemaOutput) RecipientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.RecipientId }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointThreemaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointThreema) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointThreemaOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointThreemaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointThreemaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) Index(i pulumi.IntInput) ContactPointThreemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointThreema {
		return vs[0].([]ContactPointThreema)[vs[1].(int)]
	}).(ContactPointThreemaOutput)
}

type ContactPointVictorop struct {
	// Templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title to display.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointVictoropInput is an input type that accepts ContactPointVictoropArgs and ContactPointVictoropOutput values.
// You can construct a concrete instance of `ContactPointVictoropInput` via:
//
//	ContactPointVictoropArgs{...}
type ContactPointVictoropInput interface {
	pulumi.Input

	ToContactPointVictoropOutput() ContactPointVictoropOutput
	ToContactPointVictoropOutputWithContext(context.Context) ContactPointVictoropOutput
}

type ContactPointVictoropArgs struct {
	// Templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title to display.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointVictoropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return i.ToContactPointVictoropOutputWithContext(context.Background())
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropOutput)
}

// ContactPointVictoropArrayInput is an input type that accepts ContactPointVictoropArray and ContactPointVictoropArrayOutput values.
// You can construct a concrete instance of `ContactPointVictoropArrayInput` via:
//
//	ContactPointVictoropArray{ ContactPointVictoropArgs{...} }
type ContactPointVictoropArrayInput interface {
	pulumi.Input

	ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput
	ToContactPointVictoropArrayOutputWithContext(context.Context) ContactPointVictoropArrayOutput
}

type ContactPointVictoropArray []ContactPointVictoropInput

func (ContactPointVictoropArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return i.ToContactPointVictoropArrayOutputWithContext(context.Background())
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropArrayOutput)
}

type ContactPointVictoropOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return o
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return o
}

// Templated description of the message.
func (o ContactPointVictoropOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointVictoropOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
func (o ContactPointVictoropOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointVictoropOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointVictorop) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title to display.
func (o ContactPointVictoropOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointVictoropOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The VictorOps webhook URL.
func (o ContactPointVictoropOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointVictorop) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointVictoropArrayOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) Index(i pulumi.IntInput) ContactPointVictoropOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointVictorop {
		return vs[0].([]ContactPointVictorop)[vs[1].(int)]
	}).(ContactPointVictoropOutput)
}

type ContactPointWebex struct {
	// The URL to send webhook requests to.
	ApiUrl *string `pulumi:"apiUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated title of the message to send.
	Message *string `pulumi:"message"`
	// ID of the Webex Teams room where to send the messages.
	RoomId *string `pulumi:"roomId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The bearer token used to authorize the client.
	Token *string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointWebexInput is an input type that accepts ContactPointWebexArgs and ContactPointWebexOutput values.
// You can construct a concrete instance of `ContactPointWebexInput` via:
//
//	ContactPointWebexArgs{...}
type ContactPointWebexInput interface {
	pulumi.Input

	ToContactPointWebexOutput() ContactPointWebexOutput
	ToContactPointWebexOutputWithContext(context.Context) ContactPointWebexOutput
}

type ContactPointWebexArgs struct {
	// The URL to send webhook requests to.
	ApiUrl pulumi.StringPtrInput `pulumi:"apiUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated title of the message to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// ID of the Webex Teams room where to send the messages.
	RoomId pulumi.StringPtrInput `pulumi:"roomId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The bearer token used to authorize the client.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointWebexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebex)(nil)).Elem()
}

func (i ContactPointWebexArgs) ToContactPointWebexOutput() ContactPointWebexOutput {
	return i.ToContactPointWebexOutputWithContext(context.Background())
}

func (i ContactPointWebexArgs) ToContactPointWebexOutputWithContext(ctx context.Context) ContactPointWebexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebexOutput)
}

// ContactPointWebexArrayInput is an input type that accepts ContactPointWebexArray and ContactPointWebexArrayOutput values.
// You can construct a concrete instance of `ContactPointWebexArrayInput` via:
//
//	ContactPointWebexArray{ ContactPointWebexArgs{...} }
type ContactPointWebexArrayInput interface {
	pulumi.Input

	ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput
	ToContactPointWebexArrayOutputWithContext(context.Context) ContactPointWebexArrayOutput
}

type ContactPointWebexArray []ContactPointWebexInput

func (ContactPointWebexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebex)(nil)).Elem()
}

func (i ContactPointWebexArray) ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput {
	return i.ToContactPointWebexArrayOutputWithContext(context.Background())
}

func (i ContactPointWebexArray) ToContactPointWebexArrayOutputWithContext(ctx context.Context) ContactPointWebexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebexArrayOutput)
}

type ContactPointWebexOutput struct{ *pulumi.OutputState }

func (ContactPointWebexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebex)(nil)).Elem()
}

func (o ContactPointWebexOutput) ToContactPointWebexOutput() ContactPointWebexOutput {
	return o
}

func (o ContactPointWebexOutput) ToContactPointWebexOutputWithContext(ctx context.Context) ContactPointWebexOutput {
	return o
}

// The URL to send webhook requests to.
func (o ContactPointWebexOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebexOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated title of the message to send.
func (o ContactPointWebexOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ID of the Webex Teams room where to send the messages.
func (o ContactPointWebexOutput) RoomId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.RoomId }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebexOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebex) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The bearer token used to authorize the client.
func (o ContactPointWebexOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointWebexOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointWebexArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWebexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebex)(nil)).Elem()
}

func (o ContactPointWebexArrayOutput) ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput {
	return o
}

func (o ContactPointWebexArrayOutput) ToContactPointWebexArrayOutputWithContext(ctx context.Context) ContactPointWebexArrayOutput {
	return o
}

func (o ContactPointWebexArrayOutput) Index(i pulumi.IntInput) ContactPointWebexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWebex {
		return vs[0].([]ContactPointWebex)[vs[1].(int)]
	}).(ContactPointWebexOutput)
}

type ContactPointWebhook struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

// ContactPointWebhookInput is an input type that accepts ContactPointWebhookArgs and ContactPointWebhookOutput values.
// You can construct a concrete instance of `ContactPointWebhookInput` via:
//
//	ContactPointWebhookArgs{...}
type ContactPointWebhookInput interface {
	pulumi.Input

	ToContactPointWebhookOutput() ContactPointWebhookOutput
	ToContactPointWebhookOutputWithContext(context.Context) ContactPointWebhookOutput
}

type ContactPointWebhookArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumi.StringPtrInput `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumi.StringPtrInput `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumi.IntPtrInput `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return i.ToContactPointWebhookOutputWithContext(context.Background())
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookOutput)
}

// ContactPointWebhookArrayInput is an input type that accepts ContactPointWebhookArray and ContactPointWebhookArrayOutput values.
// You can construct a concrete instance of `ContactPointWebhookArrayInput` via:
//
//	ContactPointWebhookArray{ ContactPointWebhookArgs{...} }
type ContactPointWebhookArrayInput interface {
	pulumi.Input

	ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput
	ToContactPointWebhookArrayOutputWithContext(context.Context) ContactPointWebhookArrayOutput
}

type ContactPointWebhookArray []ContactPointWebhookInput

func (ContactPointWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return i.ToContactPointWebhookArrayOutputWithContext(context.Background())
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookArrayOutput)
}

type ContactPointWebhookOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return o
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return o
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationCredentials }).(pulumi.StringPtrOutput)
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationScheme }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebhookOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointWebhookOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointWebhookOutput) MaxAlerts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *int { return v.MaxAlerts }).(pulumi.IntPtrOutput)
}

// Custom message. You can use template variables.
func (o ContactPointWebhookOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebhookOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhook) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title of the message.
func (o ContactPointWebhookOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointWebhookOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send webhook requests to.
func (o ContactPointWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointWebhookArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) Index(i pulumi.IntInput) ContactPointWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWebhook {
		return vs[0].([]ContactPointWebhook)[vs[1].(int)]
	}).(ContactPointWebhookOutput)
}

type ContactPointWecom struct {
	// Agent ID added to the request payload when using APIAPP.
	AgentId *string `pulumi:"agentId"`
	// Corp ID used to get token when using APIAPP.
	CorpId *string `pulumi:"corpId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message *string `pulumi:"message"`
	// The type of them message. Supported: markdown, text. Default: text.
	MsgType *string `pulumi:"msgType"`
	// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
	Secret *string `pulumi:"secret"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message to send.
	Title *string `pulumi:"title"`
	// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
	ToUser *string `pulumi:"toUser"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The WeCom webhook URL. Required if using GroupRobot.
	Url *string `pulumi:"url"`
}

// ContactPointWecomInput is an input type that accepts ContactPointWecomArgs and ContactPointWecomOutput values.
// You can construct a concrete instance of `ContactPointWecomInput` via:
//
//	ContactPointWecomArgs{...}
type ContactPointWecomInput interface {
	pulumi.Input

	ToContactPointWecomOutput() ContactPointWecomOutput
	ToContactPointWecomOutputWithContext(context.Context) ContactPointWecomOutput
}

type ContactPointWecomArgs struct {
	// Agent ID added to the request payload when using APIAPP.
	AgentId pulumi.StringPtrInput `pulumi:"agentId"`
	// Corp ID used to get token when using APIAPP.
	CorpId pulumi.StringPtrInput `pulumi:"corpId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The type of them message. Supported: markdown, text. Default: text.
	MsgType pulumi.StringPtrInput `pulumi:"msgType"`
	// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message to send.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
	ToUser pulumi.StringPtrInput `pulumi:"toUser"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The WeCom webhook URL. Required if using GroupRobot.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointWecomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArgs) ToContactPointWecomOutput() ContactPointWecomOutput {
	return i.ToContactPointWecomOutputWithContext(context.Background())
}

func (i ContactPointWecomArgs) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomOutput)
}

// ContactPointWecomArrayInput is an input type that accepts ContactPointWecomArray and ContactPointWecomArrayOutput values.
// You can construct a concrete instance of `ContactPointWecomArrayInput` via:
//
//	ContactPointWecomArray{ ContactPointWecomArgs{...} }
type ContactPointWecomArrayInput interface {
	pulumi.Input

	ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput
	ToContactPointWecomArrayOutputWithContext(context.Context) ContactPointWecomArrayOutput
}

type ContactPointWecomArray []ContactPointWecomInput

func (ContactPointWecomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return i.ToContactPointWecomArrayOutputWithContext(context.Background())
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomArrayOutput)
}

type ContactPointWecomOutput struct{ *pulumi.OutputState }

func (ContactPointWecomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomOutput) ToContactPointWecomOutput() ContactPointWecomOutput {
	return o
}

func (o ContactPointWecomOutput) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return o
}

// Agent ID added to the request payload when using APIAPP.
func (o ContactPointWecomOutput) AgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.AgentId }).(pulumi.StringPtrOutput)
}

// Corp ID used to get token when using APIAPP.
func (o ContactPointWecomOutput) CorpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.CorpId }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWecomOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message to send.
func (o ContactPointWecomOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of them message. Supported: markdown, text. Default: text.
func (o ContactPointWecomOutput) MsgType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.MsgType }).(pulumi.StringPtrOutput)
}

// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
func (o ContactPointWecomOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWecomOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWecom) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message to send.
func (o ContactPointWecomOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
func (o ContactPointWecomOutput) ToUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.ToUser }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointWecomOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The WeCom webhook URL. Required if using GroupRobot.
func (o ContactPointWecomOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointWecomArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWecomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) Index(i pulumi.IntInput) ContactPointWecomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWecom {
		return vs[0].([]ContactPointWecom)[vs[1].(int)]
	}).(ContactPointWecomOutput)
}

type DashboardPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// DashboardPermissionPermissionInput is an input type that accepts DashboardPermissionPermissionArgs and DashboardPermissionPermissionOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionInput` via:
//
//	DashboardPermissionPermissionArgs{...}
type DashboardPermissionPermissionInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput
	ToDashboardPermissionPermissionOutputWithContext(context.Context) DashboardPermissionPermissionOutput
}

type DashboardPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (DashboardPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return i.ToDashboardPermissionPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionOutput)
}

// DashboardPermissionPermissionArrayInput is an input type that accepts DashboardPermissionPermissionArray and DashboardPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionArrayInput` via:
//
//	DashboardPermissionPermissionArray{ DashboardPermissionPermissionArgs{...} }
type DashboardPermissionPermissionArrayInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput
	ToDashboardPermissionPermissionArrayOutputWithContext(context.Context) DashboardPermissionPermissionArrayOutput
}

type DashboardPermissionPermissionArray []DashboardPermissionPermissionInput

func (DashboardPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return i.ToDashboardPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionArrayOutput)
}

type DashboardPermissionPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return o
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o DashboardPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o DashboardPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type DashboardPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) Index(i pulumi.IntInput) DashboardPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPermissionPermission {
		return vs[0].([]DashboardPermissionPermission)[vs[1].(int)]
	}).(DashboardPermissionPermissionOutput)
}

type DataSourcePermissionPermission struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	BuiltInRole *string `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// DataSourcePermissionPermissionInput is an input type that accepts DataSourcePermissionPermissionArgs and DataSourcePermissionPermissionOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionInput` via:
//
//	DataSourcePermissionPermissionArgs{...}
type DataSourcePermissionPermissionInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput
	ToDataSourcePermissionPermissionOutputWithContext(context.Context) DataSourcePermissionPermissionOutput
}

type DataSourcePermissionPermissionArgs struct {
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	BuiltInRole pulumi.StringPtrInput `pulumi:"builtInRole"`
	// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
	Permission pulumi.StringInput `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (DataSourcePermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return i.ToDataSourcePermissionPermissionOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArgs) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionOutput)
}

// DataSourcePermissionPermissionArrayInput is an input type that accepts DataSourcePermissionPermissionArray and DataSourcePermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DataSourcePermissionPermissionArrayInput` via:
//
//	DataSourcePermissionPermissionArray{ DataSourcePermissionPermissionArgs{...} }
type DataSourcePermissionPermissionArrayInput interface {
	pulumi.Input

	ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput
	ToDataSourcePermissionPermissionArrayOutputWithContext(context.Context) DataSourcePermissionPermissionArrayOutput
}

type DataSourcePermissionPermissionArray []DataSourcePermissionPermissionInput

func (DataSourcePermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return i.ToDataSourcePermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DataSourcePermissionPermissionArray) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DataSourcePermissionPermissionArrayOutput)
}

type DataSourcePermissionPermissionOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutput() DataSourcePermissionPermissionOutput {
	return o
}

func (o DataSourcePermissionPermissionOutput) ToDataSourcePermissionPermissionOutputWithContext(ctx context.Context) DataSourcePermissionPermissionOutput {
	return o
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o DataSourcePermissionPermissionOutput) BuiltInRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.BuiltInRole }).(pulumi.StringPtrOutput)
}

// Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).
func (o DataSourcePermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o DataSourcePermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DataSourcePermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type DataSourcePermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DataSourcePermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DataSourcePermissionPermission)(nil)).Elem()
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutput() DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) ToDataSourcePermissionPermissionArrayOutputWithContext(ctx context.Context) DataSourcePermissionPermissionArrayOutput {
	return o
}

func (o DataSourcePermissionPermissionArrayOutput) Index(i pulumi.IntInput) DataSourcePermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DataSourcePermissionPermission {
		return vs[0].([]DataSourcePermissionPermission)[vs[1].(int)]
	}).(DataSourcePermissionPermissionOutput)
}

type FolderPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// FolderPermissionPermissionInput is an input type that accepts FolderPermissionPermissionArgs and FolderPermissionPermissionOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionInput` via:
//
//	FolderPermissionPermissionArgs{...}
type FolderPermissionPermissionInput interface {
	pulumi.Input

	ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput
	ToFolderPermissionPermissionOutputWithContext(context.Context) FolderPermissionPermissionOutput
}

type FolderPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (FolderPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return i.ToFolderPermissionPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionOutput)
}

// FolderPermissionPermissionArrayInput is an input type that accepts FolderPermissionPermissionArray and FolderPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionArrayInput` via:
//
//	FolderPermissionPermissionArray{ FolderPermissionPermissionArgs{...} }
type FolderPermissionPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput
	ToFolderPermissionPermissionArrayOutputWithContext(context.Context) FolderPermissionPermissionArrayOutput
}

type FolderPermissionPermissionArray []FolderPermissionPermissionInput

func (FolderPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return i.ToFolderPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionArrayOutput)
}

type FolderPermissionPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return o
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o FolderPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v FolderPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o FolderPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type FolderPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermissionPermission {
		return vs[0].([]FolderPermissionPermission)[vs[1].(int)]
	}).(FolderPermissionPermissionOutput)
}

type MachineLearningHolidayCustomPeriod struct {
	EndTime string `pulumi:"endTime"`
	// The name of the custom period.
	Name      *string `pulumi:"name"`
	StartTime string  `pulumi:"startTime"`
}

// MachineLearningHolidayCustomPeriodInput is an input type that accepts MachineLearningHolidayCustomPeriodArgs and MachineLearningHolidayCustomPeriodOutput values.
// You can construct a concrete instance of `MachineLearningHolidayCustomPeriodInput` via:
//
//	MachineLearningHolidayCustomPeriodArgs{...}
type MachineLearningHolidayCustomPeriodInput interface {
	pulumi.Input

	ToMachineLearningHolidayCustomPeriodOutput() MachineLearningHolidayCustomPeriodOutput
	ToMachineLearningHolidayCustomPeriodOutputWithContext(context.Context) MachineLearningHolidayCustomPeriodOutput
}

type MachineLearningHolidayCustomPeriodArgs struct {
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The name of the custom period.
	Name      pulumi.StringPtrInput `pulumi:"name"`
	StartTime pulumi.StringInput    `pulumi:"startTime"`
}

func (MachineLearningHolidayCustomPeriodArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (i MachineLearningHolidayCustomPeriodArgs) ToMachineLearningHolidayCustomPeriodOutput() MachineLearningHolidayCustomPeriodOutput {
	return i.ToMachineLearningHolidayCustomPeriodOutputWithContext(context.Background())
}

func (i MachineLearningHolidayCustomPeriodArgs) ToMachineLearningHolidayCustomPeriodOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningHolidayCustomPeriodOutput)
}

// MachineLearningHolidayCustomPeriodArrayInput is an input type that accepts MachineLearningHolidayCustomPeriodArray and MachineLearningHolidayCustomPeriodArrayOutput values.
// You can construct a concrete instance of `MachineLearningHolidayCustomPeriodArrayInput` via:
//
//	MachineLearningHolidayCustomPeriodArray{ MachineLearningHolidayCustomPeriodArgs{...} }
type MachineLearningHolidayCustomPeriodArrayInput interface {
	pulumi.Input

	ToMachineLearningHolidayCustomPeriodArrayOutput() MachineLearningHolidayCustomPeriodArrayOutput
	ToMachineLearningHolidayCustomPeriodArrayOutputWithContext(context.Context) MachineLearningHolidayCustomPeriodArrayOutput
}

type MachineLearningHolidayCustomPeriodArray []MachineLearningHolidayCustomPeriodInput

func (MachineLearningHolidayCustomPeriodArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (i MachineLearningHolidayCustomPeriodArray) ToMachineLearningHolidayCustomPeriodArrayOutput() MachineLearningHolidayCustomPeriodArrayOutput {
	return i.ToMachineLearningHolidayCustomPeriodArrayOutputWithContext(context.Background())
}

func (i MachineLearningHolidayCustomPeriodArray) ToMachineLearningHolidayCustomPeriodArrayOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningHolidayCustomPeriodArrayOutput)
}

type MachineLearningHolidayCustomPeriodOutput struct{ *pulumi.OutputState }

func (MachineLearningHolidayCustomPeriodOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (o MachineLearningHolidayCustomPeriodOutput) ToMachineLearningHolidayCustomPeriodOutput() MachineLearningHolidayCustomPeriodOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodOutput) ToMachineLearningHolidayCustomPeriodOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v MachineLearningHolidayCustomPeriod) string { return v.EndTime }).(pulumi.StringOutput)
}

// The name of the custom period.
func (o MachineLearningHolidayCustomPeriodOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MachineLearningHolidayCustomPeriod) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o MachineLearningHolidayCustomPeriodOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v MachineLearningHolidayCustomPeriod) string { return v.StartTime }).(pulumi.StringOutput)
}

type MachineLearningHolidayCustomPeriodArrayOutput struct{ *pulumi.OutputState }

func (MachineLearningHolidayCustomPeriodArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MachineLearningHolidayCustomPeriod)(nil)).Elem()
}

func (o MachineLearningHolidayCustomPeriodArrayOutput) ToMachineLearningHolidayCustomPeriodArrayOutput() MachineLearningHolidayCustomPeriodArrayOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodArrayOutput) ToMachineLearningHolidayCustomPeriodArrayOutputWithContext(ctx context.Context) MachineLearningHolidayCustomPeriodArrayOutput {
	return o
}

func (o MachineLearningHolidayCustomPeriodArrayOutput) Index(i pulumi.IntInput) MachineLearningHolidayCustomPeriodOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MachineLearningHolidayCustomPeriod {
		return vs[0].([]MachineLearningHolidayCustomPeriod)[vs[1].(int)]
	}).(MachineLearningHolidayCustomPeriodOutput)
}

type MachineLearningOutlierDetectorAlgorithm struct {
	// For DBSCAN only, specify the configuration map
	Config *MachineLearningOutlierDetectorAlgorithmConfig `pulumi:"config"`
	// The name of the algorithm to use ('mad' or 'dbscan').
	Name string `pulumi:"name"`
	// Specify the sensitivity of the detector (in range [0,1]).
	Sensitivity float64 `pulumi:"sensitivity"`
}

// MachineLearningOutlierDetectorAlgorithmInput is an input type that accepts MachineLearningOutlierDetectorAlgorithmArgs and MachineLearningOutlierDetectorAlgorithmOutput values.
// You can construct a concrete instance of `MachineLearningOutlierDetectorAlgorithmInput` via:
//
//	MachineLearningOutlierDetectorAlgorithmArgs{...}
type MachineLearningOutlierDetectorAlgorithmInput interface {
	pulumi.Input

	ToMachineLearningOutlierDetectorAlgorithmOutput() MachineLearningOutlierDetectorAlgorithmOutput
	ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(context.Context) MachineLearningOutlierDetectorAlgorithmOutput
}

type MachineLearningOutlierDetectorAlgorithmArgs struct {
	// For DBSCAN only, specify the configuration map
	Config MachineLearningOutlierDetectorAlgorithmConfigPtrInput `pulumi:"config"`
	// The name of the algorithm to use ('mad' or 'dbscan').
	Name pulumi.StringInput `pulumi:"name"`
	// Specify the sensitivity of the detector (in range [0,1]).
	Sensitivity pulumi.Float64Input `pulumi:"sensitivity"`
}

func (MachineLearningOutlierDetectorAlgorithmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmOutput() MachineLearningOutlierDetectorAlgorithmOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmOutput)
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmPtrOutput() MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmArgs) ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmOutput).ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(ctx)
}

// MachineLearningOutlierDetectorAlgorithmPtrInput is an input type that accepts MachineLearningOutlierDetectorAlgorithmArgs, MachineLearningOutlierDetectorAlgorithmPtr and MachineLearningOutlierDetectorAlgorithmPtrOutput values.
// You can construct a concrete instance of `MachineLearningOutlierDetectorAlgorithmPtrInput` via:
//
//	        MachineLearningOutlierDetectorAlgorithmArgs{...}
//
//	or:
//
//	        nil
type MachineLearningOutlierDetectorAlgorithmPtrInput interface {
	pulumi.Input

	ToMachineLearningOutlierDetectorAlgorithmPtrOutput() MachineLearningOutlierDetectorAlgorithmPtrOutput
	ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(context.Context) MachineLearningOutlierDetectorAlgorithmPtrOutput
}

type machineLearningOutlierDetectorAlgorithmPtrType MachineLearningOutlierDetectorAlgorithmArgs

func MachineLearningOutlierDetectorAlgorithmPtr(v *MachineLearningOutlierDetectorAlgorithmArgs) MachineLearningOutlierDetectorAlgorithmPtrInput {
	return (*machineLearningOutlierDetectorAlgorithmPtrType)(v)
}

func (*machineLearningOutlierDetectorAlgorithmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (i *machineLearningOutlierDetectorAlgorithmPtrType) ToMachineLearningOutlierDetectorAlgorithmPtrOutput() MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(context.Background())
}

func (i *machineLearningOutlierDetectorAlgorithmPtrType) ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmPtrOutput)
}

type MachineLearningOutlierDetectorAlgorithmOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmOutput() MachineLearningOutlierDetectorAlgorithmOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmPtrOutput() MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return o.ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(context.Background())
}

func (o MachineLearningOutlierDetectorAlgorithmOutput) ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineLearningOutlierDetectorAlgorithm) *MachineLearningOutlierDetectorAlgorithm {
		return &v
	}).(MachineLearningOutlierDetectorAlgorithmPtrOutput)
}

// For DBSCAN only, specify the configuration map
func (o MachineLearningOutlierDetectorAlgorithmOutput) Config() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o.ApplyT(func(v MachineLearningOutlierDetectorAlgorithm) *MachineLearningOutlierDetectorAlgorithmConfig {
		return v.Config
	}).(MachineLearningOutlierDetectorAlgorithmConfigPtrOutput)
}

// The name of the algorithm to use ('mad' or 'dbscan').
func (o MachineLearningOutlierDetectorAlgorithmOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v MachineLearningOutlierDetectorAlgorithm) string { return v.Name }).(pulumi.StringOutput)
}

// Specify the sensitivity of the detector (in range [0,1]).
func (o MachineLearningOutlierDetectorAlgorithmOutput) Sensitivity() pulumi.Float64Output {
	return o.ApplyT(func(v MachineLearningOutlierDetectorAlgorithm) float64 { return v.Sensitivity }).(pulumi.Float64Output)
}

type MachineLearningOutlierDetectorAlgorithmPtrOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningOutlierDetectorAlgorithm)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) ToMachineLearningOutlierDetectorAlgorithmPtrOutput() MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) ToMachineLearningOutlierDetectorAlgorithmPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmPtrOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) Elem() MachineLearningOutlierDetectorAlgorithmOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithm) MachineLearningOutlierDetectorAlgorithm {
		if v != nil {
			return *v
		}
		var ret MachineLearningOutlierDetectorAlgorithm
		return ret
	}).(MachineLearningOutlierDetectorAlgorithmOutput)
}

// For DBSCAN only, specify the configuration map
func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) Config() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithm) *MachineLearningOutlierDetectorAlgorithmConfig {
		if v == nil {
			return nil
		}
		return v.Config
	}).(MachineLearningOutlierDetectorAlgorithmConfigPtrOutput)
}

// The name of the algorithm to use ('mad' or 'dbscan').
func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithm) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify the sensitivity of the detector (in range [0,1]).
func (o MachineLearningOutlierDetectorAlgorithmPtrOutput) Sensitivity() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithm) *float64 {
		if v == nil {
			return nil
		}
		return &v.Sensitivity
	}).(pulumi.Float64PtrOutput)
}

type MachineLearningOutlierDetectorAlgorithmConfig struct {
	// Specify the epsilon parameter (positive float)
	Epsilon float64 `pulumi:"epsilon"`
}

// MachineLearningOutlierDetectorAlgorithmConfigInput is an input type that accepts MachineLearningOutlierDetectorAlgorithmConfigArgs and MachineLearningOutlierDetectorAlgorithmConfigOutput values.
// You can construct a concrete instance of `MachineLearningOutlierDetectorAlgorithmConfigInput` via:
//
//	MachineLearningOutlierDetectorAlgorithmConfigArgs{...}
type MachineLearningOutlierDetectorAlgorithmConfigInput interface {
	pulumi.Input

	ToMachineLearningOutlierDetectorAlgorithmConfigOutput() MachineLearningOutlierDetectorAlgorithmConfigOutput
	ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(context.Context) MachineLearningOutlierDetectorAlgorithmConfigOutput
}

type MachineLearningOutlierDetectorAlgorithmConfigArgs struct {
	// Specify the epsilon parameter (positive float)
	Epsilon pulumi.Float64Input `pulumi:"epsilon"`
}

func (MachineLearningOutlierDetectorAlgorithmConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigOutput() MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmConfigOutput)
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutput() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(context.Background())
}

func (i MachineLearningOutlierDetectorAlgorithmConfigArgs) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmConfigOutput).ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(ctx)
}

// MachineLearningOutlierDetectorAlgorithmConfigPtrInput is an input type that accepts MachineLearningOutlierDetectorAlgorithmConfigArgs, MachineLearningOutlierDetectorAlgorithmConfigPtr and MachineLearningOutlierDetectorAlgorithmConfigPtrOutput values.
// You can construct a concrete instance of `MachineLearningOutlierDetectorAlgorithmConfigPtrInput` via:
//
//	        MachineLearningOutlierDetectorAlgorithmConfigArgs{...}
//
//	or:
//
//	        nil
type MachineLearningOutlierDetectorAlgorithmConfigPtrInput interface {
	pulumi.Input

	ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutput() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput
	ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(context.Context) MachineLearningOutlierDetectorAlgorithmConfigPtrOutput
}

type machineLearningOutlierDetectorAlgorithmConfigPtrType MachineLearningOutlierDetectorAlgorithmConfigArgs

func MachineLearningOutlierDetectorAlgorithmConfigPtr(v *MachineLearningOutlierDetectorAlgorithmConfigArgs) MachineLearningOutlierDetectorAlgorithmConfigPtrInput {
	return (*machineLearningOutlierDetectorAlgorithmConfigPtrType)(v)
}

func (*machineLearningOutlierDetectorAlgorithmConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (i *machineLearningOutlierDetectorAlgorithmConfigPtrType) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutput() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return i.ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(context.Background())
}

func (i *machineLearningOutlierDetectorAlgorithmConfigPtrType) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningOutlierDetectorAlgorithmConfigPtrOutput)
}

type MachineLearningOutlierDetectorAlgorithmConfigOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigOutput() MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutput() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o.ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(context.Background())
}

func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v MachineLearningOutlierDetectorAlgorithmConfig) *MachineLearningOutlierDetectorAlgorithmConfig {
		return &v
	}).(MachineLearningOutlierDetectorAlgorithmConfigPtrOutput)
}

// Specify the epsilon parameter (positive float)
func (o MachineLearningOutlierDetectorAlgorithmConfigOutput) Epsilon() pulumi.Float64Output {
	return o.ApplyT(func(v MachineLearningOutlierDetectorAlgorithmConfig) float64 { return v.Epsilon }).(pulumi.Float64Output)
}

type MachineLearningOutlierDetectorAlgorithmConfigPtrOutput struct{ *pulumi.OutputState }

func (MachineLearningOutlierDetectorAlgorithmConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningOutlierDetectorAlgorithmConfig)(nil)).Elem()
}

func (o MachineLearningOutlierDetectorAlgorithmConfigPtrOutput) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutput() MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigPtrOutput) ToMachineLearningOutlierDetectorAlgorithmConfigPtrOutputWithContext(ctx context.Context) MachineLearningOutlierDetectorAlgorithmConfigPtrOutput {
	return o
}

func (o MachineLearningOutlierDetectorAlgorithmConfigPtrOutput) Elem() MachineLearningOutlierDetectorAlgorithmConfigOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithmConfig) MachineLearningOutlierDetectorAlgorithmConfig {
		if v != nil {
			return *v
		}
		var ret MachineLearningOutlierDetectorAlgorithmConfig
		return ret
	}).(MachineLearningOutlierDetectorAlgorithmConfigOutput)
}

// Specify the epsilon parameter (positive float)
func (o MachineLearningOutlierDetectorAlgorithmConfigPtrOutput) Epsilon() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *MachineLearningOutlierDetectorAlgorithmConfig) *float64 {
		if v == nil {
			return nil
		}
		return &v.Epsilon
	}).(pulumi.Float64PtrOutput)
}

type MuteTimingInterval struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths []string `pulumi:"daysOfMonths"`
	// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
	Location *string `pulumi:"location"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months []string `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times []MuteTimingIntervalTime `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays []string `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years []string `pulumi:"years"`
}

// MuteTimingIntervalInput is an input type that accepts MuteTimingIntervalArgs and MuteTimingIntervalOutput values.
// You can construct a concrete instance of `MuteTimingIntervalInput` via:
//
//	MuteTimingIntervalArgs{...}
type MuteTimingIntervalInput interface {
	pulumi.Input

	ToMuteTimingIntervalOutput() MuteTimingIntervalOutput
	ToMuteTimingIntervalOutputWithContext(context.Context) MuteTimingIntervalOutput
}

type MuteTimingIntervalArgs struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths pulumi.StringArrayInput `pulumi:"daysOfMonths"`
	// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
	Location pulumi.StringPtrInput `pulumi:"location"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times MuteTimingIntervalTimeArrayInput `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years pulumi.StringArrayInput `pulumi:"years"`
}

func (MuteTimingIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return i.ToMuteTimingIntervalOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalOutput)
}

// MuteTimingIntervalArrayInput is an input type that accepts MuteTimingIntervalArray and MuteTimingIntervalArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalArrayInput` via:
//
//	MuteTimingIntervalArray{ MuteTimingIntervalArgs{...} }
type MuteTimingIntervalArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput
	ToMuteTimingIntervalArrayOutputWithContext(context.Context) MuteTimingIntervalArrayOutput
}

type MuteTimingIntervalArray []MuteTimingIntervalInput

func (MuteTimingIntervalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return i.ToMuteTimingIntervalArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalArrayOutput)
}

type MuteTimingIntervalOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return o
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return o
}

// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
func (o MuteTimingIntervalOutput) DaysOfMonths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.DaysOfMonths }).(pulumi.StringArrayOutput)
}

// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
func (o MuteTimingIntervalOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuteTimingInterval) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
func (o MuteTimingIntervalOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The time ranges, represented in minutes, during which to mute in a given day.
func (o MuteTimingIntervalOutput) Times() MuteTimingIntervalTimeArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []MuteTimingIntervalTime { return v.Times }).(MuteTimingIntervalTimeArrayOutput)
}

// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
func (o MuteTimingIntervalOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// A positive inclusive range of years, e.g. "2030" or "2025:2026".
func (o MuteTimingIntervalOutput) Years() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Years }).(pulumi.StringArrayOutput)
}

type MuteTimingIntervalArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingInterval {
		return vs[0].([]MuteTimingInterval)[vs[1].(int)]
	}).(MuteTimingIntervalOutput)
}

type MuteTimingIntervalTime struct {
	// The time, in hh:mm format, of when the interval should end exclusively.
	End string `pulumi:"end"`
	// The time, in hh:mm format, of when the interval should begin inclusively.
	Start string `pulumi:"start"`
}

// MuteTimingIntervalTimeInput is an input type that accepts MuteTimingIntervalTimeArgs and MuteTimingIntervalTimeOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeInput` via:
//
//	MuteTimingIntervalTimeArgs{...}
type MuteTimingIntervalTimeInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput
	ToMuteTimingIntervalTimeOutputWithContext(context.Context) MuteTimingIntervalTimeOutput
}

type MuteTimingIntervalTimeArgs struct {
	// The time, in hh:mm format, of when the interval should end exclusively.
	End pulumi.StringInput `pulumi:"end"`
	// The time, in hh:mm format, of when the interval should begin inclusively.
	Start pulumi.StringInput `pulumi:"start"`
}

func (MuteTimingIntervalTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return i.ToMuteTimingIntervalTimeOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeOutput)
}

// MuteTimingIntervalTimeArrayInput is an input type that accepts MuteTimingIntervalTimeArray and MuteTimingIntervalTimeArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeArrayInput` via:
//
//	MuteTimingIntervalTimeArray{ MuteTimingIntervalTimeArgs{...} }
type MuteTimingIntervalTimeArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput
	ToMuteTimingIntervalTimeArrayOutputWithContext(context.Context) MuteTimingIntervalTimeArrayOutput
}

type MuteTimingIntervalTimeArray []MuteTimingIntervalTimeInput

func (MuteTimingIntervalTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return i.ToMuteTimingIntervalTimeArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeArrayOutput)
}

type MuteTimingIntervalTimeOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return o
}

// The time, in hh:mm format, of when the interval should end exclusively.
func (o MuteTimingIntervalTimeOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.End }).(pulumi.StringOutput)
}

// The time, in hh:mm format, of when the interval should begin inclusively.
func (o MuteTimingIntervalTimeOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.Start }).(pulumi.StringOutput)
}

type MuteTimingIntervalTimeArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingIntervalTime {
		return vs[0].([]MuteTimingIntervalTime)[vs[1].(int)]
	}).(MuteTimingIntervalTimeOutput)
}

type NotificationPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyArgs and NotificationPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyArgs{...}
type NotificationPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput
	ToNotificationPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyOutput
}

type NotificationPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyOutput)
}

// NotificationPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyArray and NotificationPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyArray{ NotificationPolicyPolicyArgs{...} }
type NotificationPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyArray []NotificationPolicyPolicyInput

func (NotificationPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyOutput) Matchers() NotificationPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyOutput)
}

type NotificationPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyMatcherArgs and NotificationPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyMatcherArray and NotificationPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyMatcherArray{ NotificationPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyMatcherArray []NotificationPolicyPolicyMatcherInput

func (NotificationPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicy {
		return v.Policies
	}).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicy struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

type OncallIntegrationDefaultRoute struct {
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	Id                *string `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams *OncallIntegrationDefaultRouteMsteams `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack *OncallIntegrationDefaultRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallIntegrationDefaultRouteTelegram `pulumi:"telegram"`
}

// OncallIntegrationDefaultRouteInput is an input type that accepts OncallIntegrationDefaultRouteArgs and OncallIntegrationDefaultRouteOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteInput` via:
//
//	OncallIntegrationDefaultRouteArgs{...}
type OncallIntegrationDefaultRouteInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput
	ToOncallIntegrationDefaultRouteOutputWithContext(context.Context) OncallIntegrationDefaultRouteOutput
}

type OncallIntegrationDefaultRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringPtrInput `pulumi:"escalationChainId"`
	Id                pulumi.StringPtrInput `pulumi:"id"`
	// MS teams-specific settings for a route.
	Msteams OncallIntegrationDefaultRouteMsteamsPtrInput `pulumi:"msteams"`
	// Slack-specific settings for a route.
	Slack OncallIntegrationDefaultRouteSlackPtrInput `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram OncallIntegrationDefaultRouteTelegramPtrInput `pulumi:"telegram"`
}

func (OncallIntegrationDefaultRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return i.ToOncallIntegrationDefaultRouteOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteOutput)
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return i.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteArgs) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteOutput).ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRoutePtrInput is an input type that accepts OncallIntegrationDefaultRouteArgs, OncallIntegrationDefaultRoutePtr and OncallIntegrationDefaultRoutePtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRoutePtrInput` via:
//
//	        OncallIntegrationDefaultRouteArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRoutePtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput
	ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Context) OncallIntegrationDefaultRoutePtrOutput
}

type oncallIntegrationDefaultRoutePtrType OncallIntegrationDefaultRouteArgs

func OncallIntegrationDefaultRoutePtr(v *OncallIntegrationDefaultRouteArgs) OncallIntegrationDefaultRoutePtrInput {
	return (*oncallIntegrationDefaultRoutePtrType)(v)
}

func (*oncallIntegrationDefaultRoutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRoutePtrType) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return i.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRoutePtrType) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRoutePtrOutput)
}

type OncallIntegrationDefaultRouteOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutput() OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRouteOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteOutput {
	return o
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return o.ToOncallIntegrationDefaultRoutePtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteOutput) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRoute {
		return &v
	}).(OncallIntegrationDefaultRoutePtrOutput)
}

// The ID of the escalation chain.
func (o OncallIntegrationDefaultRouteOutput) EscalationChainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *string { return v.EscalationChainId }).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationDefaultRouteOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// MS teams-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Msteams() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteMsteams { return v.Msteams }).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

// Slack-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Slack() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteSlack { return v.Slack }).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

// Telegram-specific settings for a route.
func (o OncallIntegrationDefaultRouteOutput) Telegram() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteTelegram { return v.Telegram }).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRoutePtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRoutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRoute)(nil)).Elem()
}

func (o OncallIntegrationDefaultRoutePtrOutput) ToOncallIntegrationDefaultRoutePtrOutput() OncallIntegrationDefaultRoutePtrOutput {
	return o
}

func (o OncallIntegrationDefaultRoutePtrOutput) ToOncallIntegrationDefaultRoutePtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRoutePtrOutput {
	return o
}

func (o OncallIntegrationDefaultRoutePtrOutput) Elem() OncallIntegrationDefaultRouteOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) OncallIntegrationDefaultRoute {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRoute
		return ret
	}).(OncallIntegrationDefaultRouteOutput)
}

// The ID of the escalation chain.
func (o OncallIntegrationDefaultRoutePtrOutput) EscalationChainId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *string {
		if v == nil {
			return nil
		}
		return v.EscalationChainId
	}).(pulumi.StringPtrOutput)
}

func (o OncallIntegrationDefaultRoutePtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

// MS teams-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Msteams() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteMsteams {
		if v == nil {
			return nil
		}
		return v.Msteams
	}).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

// Slack-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Slack() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteSlack {
		if v == nil {
			return nil
		}
		return v.Slack
	}).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

// Telegram-specific settings for a route.
func (o OncallIntegrationDefaultRoutePtrOutput) Telegram() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRoute) *OncallIntegrationDefaultRouteTelegram {
		if v == nil {
			return nil
		}
		return v.Telegram
	}).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRouteMsteams struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id *string `pulumi:"id"`
}

// OncallIntegrationDefaultRouteMsteamsInput is an input type that accepts OncallIntegrationDefaultRouteMsteamsArgs and OncallIntegrationDefaultRouteMsteamsOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteMsteamsInput` via:
//
//	OncallIntegrationDefaultRouteMsteamsArgs{...}
type OncallIntegrationDefaultRouteMsteamsInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput
	ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(context.Context) OncallIntegrationDefaultRouteMsteamsOutput
}

type OncallIntegrationDefaultRouteMsteamsArgs struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsOutput)
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteMsteamsArgs) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsOutput).ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteMsteamsPtrInput is an input type that accepts OncallIntegrationDefaultRouteMsteamsArgs, OncallIntegrationDefaultRouteMsteamsPtr and OncallIntegrationDefaultRouteMsteamsPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteMsteamsPtrInput` via:
//
//	        OncallIntegrationDefaultRouteMsteamsArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteMsteamsPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput
	ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput
}

type oncallIntegrationDefaultRouteMsteamsPtrType OncallIntegrationDefaultRouteMsteamsArgs

func OncallIntegrationDefaultRouteMsteamsPtr(v *OncallIntegrationDefaultRouteMsteamsArgs) OncallIntegrationDefaultRouteMsteamsPtrInput {
	return (*oncallIntegrationDefaultRouteMsteamsPtrType)(v)
}

func (*oncallIntegrationDefaultRouteMsteamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteMsteamsPtrType) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return i.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteMsteamsPtrType) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

type OncallIntegrationDefaultRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutput() OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteMsteamsOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteMsteams) *OncallIntegrationDefaultRouteMsteams {
		return &v
	}).(OncallIntegrationDefaultRouteMsteamsPtrOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallIntegrationDefaultRouteMsteamsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteMsteams) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallIntegrationDefaultRouteMsteamsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteMsteams) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteMsteamsPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteMsteamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteMsteams)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutput() OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) ToOncallIntegrationDefaultRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteMsteamsPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Elem() OncallIntegrationDefaultRouteMsteamsOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) OncallIntegrationDefaultRouteMsteams {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteMsteams
		return ret
	}).(OncallIntegrationDefaultRouteMsteamsOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallIntegrationDefaultRouteMsteamsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteMsteams) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteSlack struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// OncallIntegrationDefaultRouteSlackInput is an input type that accepts OncallIntegrationDefaultRouteSlackArgs and OncallIntegrationDefaultRouteSlackOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteSlackInput` via:
//
//	OncallIntegrationDefaultRouteSlackArgs{...}
type OncallIntegrationDefaultRouteSlackInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput
	ToOncallIntegrationDefaultRouteSlackOutputWithContext(context.Context) OncallIntegrationDefaultRouteSlackOutput
}

type OncallIntegrationDefaultRouteSlackArgs struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (OncallIntegrationDefaultRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return i.ToOncallIntegrationDefaultRouteSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackOutput)
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return i.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteSlackArgs) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackOutput).ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteSlackPtrInput is an input type that accepts OncallIntegrationDefaultRouteSlackArgs, OncallIntegrationDefaultRouteSlackPtr and OncallIntegrationDefaultRouteSlackPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteSlackPtrInput` via:
//
//	        OncallIntegrationDefaultRouteSlackArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteSlackPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput
	ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteSlackPtrOutput
}

type oncallIntegrationDefaultRouteSlackPtrType OncallIntegrationDefaultRouteSlackArgs

func OncallIntegrationDefaultRouteSlackPtr(v *OncallIntegrationDefaultRouteSlackArgs) OncallIntegrationDefaultRouteSlackPtrInput {
	return (*oncallIntegrationDefaultRouteSlackPtrType)(v)
}

func (*oncallIntegrationDefaultRouteSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteSlackPtrType) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return i.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteSlackPtrType) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

type OncallIntegrationDefaultRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutput() OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteSlackOutput) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteSlack) *OncallIntegrationDefaultRouteSlack {
		return &v
	}).(OncallIntegrationDefaultRouteSlackPtrOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallIntegrationDefaultRouteSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallIntegrationDefaultRouteSlackOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteSlack) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type OncallIntegrationDefaultRouteSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteSlack)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) ToOncallIntegrationDefaultRouteSlackPtrOutput() OncallIntegrationDefaultRouteSlackPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) ToOncallIntegrationDefaultRouteSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteSlackPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteSlackPtrOutput) Elem() OncallIntegrationDefaultRouteSlackOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) OncallIntegrationDefaultRouteSlack {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteSlack
		return ret
	}).(OncallIntegrationDefaultRouteSlackOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallIntegrationDefaultRouteSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallIntegrationDefaultRouteSlackPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteSlack) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type OncallIntegrationDefaultRouteTelegram struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id *string `pulumi:"id"`
}

// OncallIntegrationDefaultRouteTelegramInput is an input type that accepts OncallIntegrationDefaultRouteTelegramArgs and OncallIntegrationDefaultRouteTelegramOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteTelegramInput` via:
//
//	OncallIntegrationDefaultRouteTelegramArgs{...}
type OncallIntegrationDefaultRouteTelegramInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput
	ToOncallIntegrationDefaultRouteTelegramOutputWithContext(context.Context) OncallIntegrationDefaultRouteTelegramOutput
}

type OncallIntegrationDefaultRouteTelegramArgs struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallIntegrationDefaultRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramOutput)
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationDefaultRouteTelegramArgs) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramOutput).ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx)
}

// OncallIntegrationDefaultRouteTelegramPtrInput is an input type that accepts OncallIntegrationDefaultRouteTelegramArgs, OncallIntegrationDefaultRouteTelegramPtr and OncallIntegrationDefaultRouteTelegramPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationDefaultRouteTelegramPtrInput` via:
//
//	        OncallIntegrationDefaultRouteTelegramArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationDefaultRouteTelegramPtrInput interface {
	pulumi.Input

	ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput
	ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput
}

type oncallIntegrationDefaultRouteTelegramPtrType OncallIntegrationDefaultRouteTelegramArgs

func OncallIntegrationDefaultRouteTelegramPtr(v *OncallIntegrationDefaultRouteTelegramArgs) OncallIntegrationDefaultRouteTelegramPtrInput {
	return (*oncallIntegrationDefaultRouteTelegramPtrType)(v)
}

func (*oncallIntegrationDefaultRouteTelegramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (i *oncallIntegrationDefaultRouteTelegramPtrType) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return i.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationDefaultRouteTelegramPtrType) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

type OncallIntegrationDefaultRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutput() OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationDefaultRouteTelegramOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationDefaultRouteTelegram) *OncallIntegrationDefaultRouteTelegram {
		return &v
	}).(OncallIntegrationDefaultRouteTelegramPtrOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallIntegrationDefaultRouteTelegramOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteTelegram) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallIntegrationDefaultRouteTelegramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationDefaultRouteTelegram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallIntegrationDefaultRouteTelegramPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationDefaultRouteTelegramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationDefaultRouteTelegram)(nil)).Elem()
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutput() OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) ToOncallIntegrationDefaultRouteTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationDefaultRouteTelegramPtrOutput {
	return o
}

func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Elem() OncallIntegrationDefaultRouteTelegramOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) OncallIntegrationDefaultRouteTelegram {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationDefaultRouteTelegram
		return ret
	}).(OncallIntegrationDefaultRouteTelegramOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallIntegrationDefaultRouteTelegramPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationDefaultRouteTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplates struct {
	// Template for sending a signal to acknowledge the Incident.
	AcknowledgeSignal *string `pulumi:"acknowledgeSignal"`
	// Templates for Email.
	Email *OncallIntegrationTemplatesEmail `pulumi:"email"`
	// Template for the key by which alerts are grouped.
	GroupingKey *string `pulumi:"groupingKey"`
	// Templates for Microsoft Teams.
	MicrosoftTeams *OncallIntegrationTemplatesMicrosoftTeams `pulumi:"microsoftTeams"`
	// Templates for Phone Call.
	PhoneCall *OncallIntegrationTemplatesPhoneCall `pulumi:"phoneCall"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal *string `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack *OncallIntegrationTemplatesSlack `pulumi:"slack"`
	// Templates for SMS.
	Sms *OncallIntegrationTemplatesSms `pulumi:"sms"`
	// Template for a source link.
	SourceLink *string `pulumi:"sourceLink"`
	// Templates for Telegram.
	Telegram *OncallIntegrationTemplatesTelegram `pulumi:"telegram"`
	// Templates for Web.
	Web *OncallIntegrationTemplatesWeb `pulumi:"web"`
}

// OncallIntegrationTemplatesInput is an input type that accepts OncallIntegrationTemplatesArgs and OncallIntegrationTemplatesOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesInput` via:
//
//	OncallIntegrationTemplatesArgs{...}
type OncallIntegrationTemplatesInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput
	ToOncallIntegrationTemplatesOutputWithContext(context.Context) OncallIntegrationTemplatesOutput
}

type OncallIntegrationTemplatesArgs struct {
	// Template for sending a signal to acknowledge the Incident.
	AcknowledgeSignal pulumi.StringPtrInput `pulumi:"acknowledgeSignal"`
	// Templates for Email.
	Email OncallIntegrationTemplatesEmailPtrInput `pulumi:"email"`
	// Template for the key by which alerts are grouped.
	GroupingKey pulumi.StringPtrInput `pulumi:"groupingKey"`
	// Templates for Microsoft Teams.
	MicrosoftTeams OncallIntegrationTemplatesMicrosoftTeamsPtrInput `pulumi:"microsoftTeams"`
	// Templates for Phone Call.
	PhoneCall OncallIntegrationTemplatesPhoneCallPtrInput `pulumi:"phoneCall"`
	// Template for sending a signal to resolve the Incident.
	ResolveSignal pulumi.StringPtrInput `pulumi:"resolveSignal"`
	// Templates for Slack.
	Slack OncallIntegrationTemplatesSlackPtrInput `pulumi:"slack"`
	// Templates for SMS.
	Sms OncallIntegrationTemplatesSmsPtrInput `pulumi:"sms"`
	// Template for a source link.
	SourceLink pulumi.StringPtrInput `pulumi:"sourceLink"`
	// Templates for Telegram.
	Telegram OncallIntegrationTemplatesTelegramPtrInput `pulumi:"telegram"`
	// Templates for Web.
	Web OncallIntegrationTemplatesWebPtrInput `pulumi:"web"`
}

func (OncallIntegrationTemplatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return i.ToOncallIntegrationTemplatesOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesOutput)
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return i.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesArgs) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesOutput).ToOncallIntegrationTemplatesPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesPtrInput is an input type that accepts OncallIntegrationTemplatesArgs, OncallIntegrationTemplatesPtr and OncallIntegrationTemplatesPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesPtrInput` via:
//
//	        OncallIntegrationTemplatesArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput
	ToOncallIntegrationTemplatesPtrOutputWithContext(context.Context) OncallIntegrationTemplatesPtrOutput
}

type oncallIntegrationTemplatesPtrType OncallIntegrationTemplatesArgs

func OncallIntegrationTemplatesPtr(v *OncallIntegrationTemplatesArgs) OncallIntegrationTemplatesPtrInput {
	return (*oncallIntegrationTemplatesPtrType)(v)
}

func (*oncallIntegrationTemplatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplates)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesPtrType) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return i.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesPtrType) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPtrOutput)
}

type OncallIntegrationTemplatesOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplates)(nil)).Elem()
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutput() OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesOutputWithContext(ctx context.Context) OncallIntegrationTemplatesOutput {
	return o
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return o.ToOncallIntegrationTemplatesPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesOutput) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplates) *OncallIntegrationTemplates {
		return &v
	}).(OncallIntegrationTemplatesPtrOutput)
}

// Template for sending a signal to acknowledge the Incident.
func (o OncallIntegrationTemplatesOutput) AcknowledgeSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.AcknowledgeSignal }).(pulumi.StringPtrOutput)
}

// Templates for Email.
func (o OncallIntegrationTemplatesOutput) Email() OncallIntegrationTemplatesEmailPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesEmail { return v.Email }).(OncallIntegrationTemplatesEmailPtrOutput)
}

// Template for the key by which alerts are grouped.
func (o OncallIntegrationTemplatesOutput) GroupingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.GroupingKey }).(pulumi.StringPtrOutput)
}

// Templates for Microsoft Teams.
func (o OncallIntegrationTemplatesOutput) MicrosoftTeams() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesMicrosoftTeams { return v.MicrosoftTeams }).(OncallIntegrationTemplatesMicrosoftTeamsPtrOutput)
}

// Templates for Phone Call.
func (o OncallIntegrationTemplatesOutput) PhoneCall() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesPhoneCall { return v.PhoneCall }).(OncallIntegrationTemplatesPhoneCallPtrOutput)
}

// Template for sending a signal to resolve the Incident.
func (o OncallIntegrationTemplatesOutput) ResolveSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.ResolveSignal }).(pulumi.StringPtrOutput)
}

// Templates for Slack.
func (o OncallIntegrationTemplatesOutput) Slack() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesSlack { return v.Slack }).(OncallIntegrationTemplatesSlackPtrOutput)
}

// Templates for SMS.
func (o OncallIntegrationTemplatesOutput) Sms() OncallIntegrationTemplatesSmsPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesSms { return v.Sms }).(OncallIntegrationTemplatesSmsPtrOutput)
}

// Template for a source link.
func (o OncallIntegrationTemplatesOutput) SourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *string { return v.SourceLink }).(pulumi.StringPtrOutput)
}

// Templates for Telegram.
func (o OncallIntegrationTemplatesOutput) Telegram() OncallIntegrationTemplatesTelegramPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesTelegram { return v.Telegram }).(OncallIntegrationTemplatesTelegramPtrOutput)
}

// Templates for Web.
func (o OncallIntegrationTemplatesOutput) Web() OncallIntegrationTemplatesWebPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplates) *OncallIntegrationTemplatesWeb { return v.Web }).(OncallIntegrationTemplatesWebPtrOutput)
}

type OncallIntegrationTemplatesPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplates)(nil)).Elem()
}

func (o OncallIntegrationTemplatesPtrOutput) ToOncallIntegrationTemplatesPtrOutput() OncallIntegrationTemplatesPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPtrOutput) ToOncallIntegrationTemplatesPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPtrOutput) Elem() OncallIntegrationTemplatesOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) OncallIntegrationTemplates {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplates
		return ret
	}).(OncallIntegrationTemplatesOutput)
}

// Template for sending a signal to acknowledge the Incident.
func (o OncallIntegrationTemplatesPtrOutput) AcknowledgeSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.AcknowledgeSignal
	}).(pulumi.StringPtrOutput)
}

// Templates for Email.
func (o OncallIntegrationTemplatesPtrOutput) Email() OncallIntegrationTemplatesEmailPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesEmail {
		if v == nil {
			return nil
		}
		return v.Email
	}).(OncallIntegrationTemplatesEmailPtrOutput)
}

// Template for the key by which alerts are grouped.
func (o OncallIntegrationTemplatesPtrOutput) GroupingKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.GroupingKey
	}).(pulumi.StringPtrOutput)
}

// Templates for Microsoft Teams.
func (o OncallIntegrationTemplatesPtrOutput) MicrosoftTeams() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesMicrosoftTeams {
		if v == nil {
			return nil
		}
		return v.MicrosoftTeams
	}).(OncallIntegrationTemplatesMicrosoftTeamsPtrOutput)
}

// Templates for Phone Call.
func (o OncallIntegrationTemplatesPtrOutput) PhoneCall() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesPhoneCall {
		if v == nil {
			return nil
		}
		return v.PhoneCall
	}).(OncallIntegrationTemplatesPhoneCallPtrOutput)
}

// Template for sending a signal to resolve the Incident.
func (o OncallIntegrationTemplatesPtrOutput) ResolveSignal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.ResolveSignal
	}).(pulumi.StringPtrOutput)
}

// Templates for Slack.
func (o OncallIntegrationTemplatesPtrOutput) Slack() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesSlack {
		if v == nil {
			return nil
		}
		return v.Slack
	}).(OncallIntegrationTemplatesSlackPtrOutput)
}

// Templates for SMS.
func (o OncallIntegrationTemplatesPtrOutput) Sms() OncallIntegrationTemplatesSmsPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesSms {
		if v == nil {
			return nil
		}
		return v.Sms
	}).(OncallIntegrationTemplatesSmsPtrOutput)
}

// Template for a source link.
func (o OncallIntegrationTemplatesPtrOutput) SourceLink() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *string {
		if v == nil {
			return nil
		}
		return v.SourceLink
	}).(pulumi.StringPtrOutput)
}

// Templates for Telegram.
func (o OncallIntegrationTemplatesPtrOutput) Telegram() OncallIntegrationTemplatesTelegramPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesTelegram {
		if v == nil {
			return nil
		}
		return v.Telegram
	}).(OncallIntegrationTemplatesTelegramPtrOutput)
}

// Templates for Web.
func (o OncallIntegrationTemplatesPtrOutput) Web() OncallIntegrationTemplatesWebPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplates) *OncallIntegrationTemplatesWeb {
		if v == nil {
			return nil
		}
		return v.Web
	}).(OncallIntegrationTemplatesWebPtrOutput)
}

type OncallIntegrationTemplatesEmail struct {
	// Template for Alert message.
	Message *string `pulumi:"message"`
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesEmailInput is an input type that accepts OncallIntegrationTemplatesEmailArgs and OncallIntegrationTemplatesEmailOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesEmailInput` via:
//
//	OncallIntegrationTemplatesEmailArgs{...}
type OncallIntegrationTemplatesEmailInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesEmailOutput() OncallIntegrationTemplatesEmailOutput
	ToOncallIntegrationTemplatesEmailOutputWithContext(context.Context) OncallIntegrationTemplatesEmailOutput
}

type OncallIntegrationTemplatesEmailArgs struct {
	// Template for Alert message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailOutput() OncallIntegrationTemplatesEmailOutput {
	return i.ToOncallIntegrationTemplatesEmailOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesEmailOutput)
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailPtrOutput() OncallIntegrationTemplatesEmailPtrOutput {
	return i.ToOncallIntegrationTemplatesEmailPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesEmailArgs) ToOncallIntegrationTemplatesEmailPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesEmailOutput).ToOncallIntegrationTemplatesEmailPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesEmailPtrInput is an input type that accepts OncallIntegrationTemplatesEmailArgs, OncallIntegrationTemplatesEmailPtr and OncallIntegrationTemplatesEmailPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesEmailPtrInput` via:
//
//	        OncallIntegrationTemplatesEmailArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesEmailPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesEmailPtrOutput() OncallIntegrationTemplatesEmailPtrOutput
	ToOncallIntegrationTemplatesEmailPtrOutputWithContext(context.Context) OncallIntegrationTemplatesEmailPtrOutput
}

type oncallIntegrationTemplatesEmailPtrType OncallIntegrationTemplatesEmailArgs

func OncallIntegrationTemplatesEmailPtr(v *OncallIntegrationTemplatesEmailArgs) OncallIntegrationTemplatesEmailPtrInput {
	return (*oncallIntegrationTemplatesEmailPtrType)(v)
}

func (*oncallIntegrationTemplatesEmailPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesEmailPtrType) ToOncallIntegrationTemplatesEmailPtrOutput() OncallIntegrationTemplatesEmailPtrOutput {
	return i.ToOncallIntegrationTemplatesEmailPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesEmailPtrType) ToOncallIntegrationTemplatesEmailPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesEmailPtrOutput)
}

type OncallIntegrationTemplatesEmailOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailOutput() OncallIntegrationTemplatesEmailOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailPtrOutput() OncallIntegrationTemplatesEmailPtrOutput {
	return o.ToOncallIntegrationTemplatesEmailPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesEmailOutput) ToOncallIntegrationTemplatesEmailPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesEmail) *OncallIntegrationTemplatesEmail {
		return &v
	}).(OncallIntegrationTemplatesEmailPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesEmailOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesEmail) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesEmailOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesEmail) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesEmailPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesEmailPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesEmail)(nil)).Elem()
}

func (o OncallIntegrationTemplatesEmailPtrOutput) ToOncallIntegrationTemplatesEmailPtrOutput() OncallIntegrationTemplatesEmailPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailPtrOutput) ToOncallIntegrationTemplatesEmailPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesEmailPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesEmailPtrOutput) Elem() OncallIntegrationTemplatesEmailOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesEmail) OncallIntegrationTemplatesEmail {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesEmail
		return ret
	}).(OncallIntegrationTemplatesEmailOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesEmailPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesEmail) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesEmailPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesEmail) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesMicrosoftTeams struct {
	// Template for Alert image url.
	ImageUrl *string `pulumi:"imageUrl"`
	// Template for Alert message.
	Message *string `pulumi:"message"`
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesMicrosoftTeamsInput is an input type that accepts OncallIntegrationTemplatesMicrosoftTeamsArgs and OncallIntegrationTemplatesMicrosoftTeamsOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesMicrosoftTeamsInput` via:
//
//	OncallIntegrationTemplatesMicrosoftTeamsArgs{...}
type OncallIntegrationTemplatesMicrosoftTeamsInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesMicrosoftTeamsOutput() OncallIntegrationTemplatesMicrosoftTeamsOutput
	ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(context.Context) OncallIntegrationTemplatesMicrosoftTeamsOutput
}

type OncallIntegrationTemplatesMicrosoftTeamsArgs struct {
	// Template for Alert image url.
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
	// Template for Alert message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesMicrosoftTeamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsOutput() OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return i.ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesMicrosoftTeamsOutput)
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutput() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return i.ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesMicrosoftTeamsArgs) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesMicrosoftTeamsOutput).ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesMicrosoftTeamsPtrInput is an input type that accepts OncallIntegrationTemplatesMicrosoftTeamsArgs, OncallIntegrationTemplatesMicrosoftTeamsPtr and OncallIntegrationTemplatesMicrosoftTeamsPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesMicrosoftTeamsPtrInput` via:
//
//	        OncallIntegrationTemplatesMicrosoftTeamsArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesMicrosoftTeamsPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutput() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput
	ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(context.Context) OncallIntegrationTemplatesMicrosoftTeamsPtrOutput
}

type oncallIntegrationTemplatesMicrosoftTeamsPtrType OncallIntegrationTemplatesMicrosoftTeamsArgs

func OncallIntegrationTemplatesMicrosoftTeamsPtr(v *OncallIntegrationTemplatesMicrosoftTeamsArgs) OncallIntegrationTemplatesMicrosoftTeamsPtrInput {
	return (*oncallIntegrationTemplatesMicrosoftTeamsPtrType)(v)
}

func (*oncallIntegrationTemplatesMicrosoftTeamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesMicrosoftTeamsPtrType) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutput() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return i.ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesMicrosoftTeamsPtrType) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesMicrosoftTeamsPtrOutput)
}

type OncallIntegrationTemplatesMicrosoftTeamsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesMicrosoftTeamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsOutput() OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutput() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o.ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesMicrosoftTeams) *OncallIntegrationTemplatesMicrosoftTeams {
		return &v
	}).(OncallIntegrationTemplatesMicrosoftTeamsPtrOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesMicrosoftTeamsOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesMicrosoftTeams) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesMicrosoftTeamsPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesMicrosoftTeams)(nil)).Elem()
}

func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutput() OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) ToOncallIntegrationTemplatesMicrosoftTeamsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesMicrosoftTeamsPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) Elem() OncallIntegrationTemplatesMicrosoftTeamsOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesMicrosoftTeams) OncallIntegrationTemplatesMicrosoftTeams {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesMicrosoftTeams
		return ret
	}).(OncallIntegrationTemplatesMicrosoftTeamsOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesMicrosoftTeams) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesMicrosoftTeams) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesMicrosoftTeamsPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesMicrosoftTeams) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesPhoneCall struct {
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesPhoneCallInput is an input type that accepts OncallIntegrationTemplatesPhoneCallArgs and OncallIntegrationTemplatesPhoneCallOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesPhoneCallInput` via:
//
//	OncallIntegrationTemplatesPhoneCallArgs{...}
type OncallIntegrationTemplatesPhoneCallInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesPhoneCallOutput() OncallIntegrationTemplatesPhoneCallOutput
	ToOncallIntegrationTemplatesPhoneCallOutputWithContext(context.Context) OncallIntegrationTemplatesPhoneCallOutput
}

type OncallIntegrationTemplatesPhoneCallArgs struct {
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesPhoneCallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallOutput() OncallIntegrationTemplatesPhoneCallOutput {
	return i.ToOncallIntegrationTemplatesPhoneCallOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPhoneCallOutput)
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallPtrOutput() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return i.ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesPhoneCallArgs) ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPhoneCallOutput).ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesPhoneCallPtrInput is an input type that accepts OncallIntegrationTemplatesPhoneCallArgs, OncallIntegrationTemplatesPhoneCallPtr and OncallIntegrationTemplatesPhoneCallPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesPhoneCallPtrInput` via:
//
//	        OncallIntegrationTemplatesPhoneCallArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesPhoneCallPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesPhoneCallPtrOutput() OncallIntegrationTemplatesPhoneCallPtrOutput
	ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(context.Context) OncallIntegrationTemplatesPhoneCallPtrOutput
}

type oncallIntegrationTemplatesPhoneCallPtrType OncallIntegrationTemplatesPhoneCallArgs

func OncallIntegrationTemplatesPhoneCallPtr(v *OncallIntegrationTemplatesPhoneCallArgs) OncallIntegrationTemplatesPhoneCallPtrInput {
	return (*oncallIntegrationTemplatesPhoneCallPtrType)(v)
}

func (*oncallIntegrationTemplatesPhoneCallPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesPhoneCallPtrType) ToOncallIntegrationTemplatesPhoneCallPtrOutput() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return i.ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesPhoneCallPtrType) ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesPhoneCallPtrOutput)
}

type OncallIntegrationTemplatesPhoneCallOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesPhoneCallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallOutput() OncallIntegrationTemplatesPhoneCallOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallPtrOutput() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o.ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesPhoneCallOutput) ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesPhoneCall) *OncallIntegrationTemplatesPhoneCall {
		return &v
	}).(OncallIntegrationTemplatesPhoneCallPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesPhoneCallOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesPhoneCall) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesPhoneCallPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesPhoneCallPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesPhoneCall)(nil)).Elem()
}

func (o OncallIntegrationTemplatesPhoneCallPtrOutput) ToOncallIntegrationTemplatesPhoneCallPtrOutput() OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallPtrOutput) ToOncallIntegrationTemplatesPhoneCallPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesPhoneCallPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesPhoneCallPtrOutput) Elem() OncallIntegrationTemplatesPhoneCallOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesPhoneCall) OncallIntegrationTemplatesPhoneCall {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesPhoneCall
		return ret
	}).(OncallIntegrationTemplatesPhoneCallOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesPhoneCallPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesPhoneCall) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesSlack struct {
	// Template for Alert image url.
	ImageUrl *string `pulumi:"imageUrl"`
	// Template for Alert message.
	Message *string `pulumi:"message"`
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesSlackInput is an input type that accepts OncallIntegrationTemplatesSlackArgs and OncallIntegrationTemplatesSlackOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSlackInput` via:
//
//	OncallIntegrationTemplatesSlackArgs{...}
type OncallIntegrationTemplatesSlackInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput
	ToOncallIntegrationTemplatesSlackOutputWithContext(context.Context) OncallIntegrationTemplatesSlackOutput
}

type OncallIntegrationTemplatesSlackArgs struct {
	// Template for Alert image url.
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
	// Template for Alert message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return i.ToOncallIntegrationTemplatesSlackOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackOutput)
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return i.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSlackArgs) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackOutput).ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesSlackPtrInput is an input type that accepts OncallIntegrationTemplatesSlackArgs, OncallIntegrationTemplatesSlackPtr and OncallIntegrationTemplatesSlackPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSlackPtrInput` via:
//
//	        OncallIntegrationTemplatesSlackArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesSlackPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput
	ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Context) OncallIntegrationTemplatesSlackPtrOutput
}

type oncallIntegrationTemplatesSlackPtrType OncallIntegrationTemplatesSlackArgs

func OncallIntegrationTemplatesSlackPtr(v *OncallIntegrationTemplatesSlackArgs) OncallIntegrationTemplatesSlackPtrInput {
	return (*oncallIntegrationTemplatesSlackPtrType)(v)
}

func (*oncallIntegrationTemplatesSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesSlackPtrType) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return i.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesSlackPtrType) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSlackPtrOutput)
}

type OncallIntegrationTemplatesSlackOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutput() OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return o.ToOncallIntegrationTemplatesSlackPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesSlackOutput) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesSlack) *OncallIntegrationTemplatesSlack {
		return &v
	}).(OncallIntegrationTemplatesSlackPtrOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesSlackOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesSlackOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesSlackOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSlack) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSlack)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSlackPtrOutput) ToOncallIntegrationTemplatesSlackPtrOutput() OncallIntegrationTemplatesSlackPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackPtrOutput) ToOncallIntegrationTemplatesSlackPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSlackPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSlackPtrOutput) Elem() OncallIntegrationTemplatesSlackOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) OncallIntegrationTemplatesSlack {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesSlack
		return ret
	}).(OncallIntegrationTemplatesSlackOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesSlackPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesSlackPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesSlackPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSlack) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesSms struct {
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesSmsInput is an input type that accepts OncallIntegrationTemplatesSmsArgs and OncallIntegrationTemplatesSmsOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSmsInput` via:
//
//	OncallIntegrationTemplatesSmsArgs{...}
type OncallIntegrationTemplatesSmsInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSmsOutput() OncallIntegrationTemplatesSmsOutput
	ToOncallIntegrationTemplatesSmsOutputWithContext(context.Context) OncallIntegrationTemplatesSmsOutput
}

type OncallIntegrationTemplatesSmsArgs struct {
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsOutput() OncallIntegrationTemplatesSmsOutput {
	return i.ToOncallIntegrationTemplatesSmsOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSmsOutput)
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsPtrOutput() OncallIntegrationTemplatesSmsPtrOutput {
	return i.ToOncallIntegrationTemplatesSmsPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesSmsArgs) ToOncallIntegrationTemplatesSmsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSmsOutput).ToOncallIntegrationTemplatesSmsPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesSmsPtrInput is an input type that accepts OncallIntegrationTemplatesSmsArgs, OncallIntegrationTemplatesSmsPtr and OncallIntegrationTemplatesSmsPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesSmsPtrInput` via:
//
//	        OncallIntegrationTemplatesSmsArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesSmsPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesSmsPtrOutput() OncallIntegrationTemplatesSmsPtrOutput
	ToOncallIntegrationTemplatesSmsPtrOutputWithContext(context.Context) OncallIntegrationTemplatesSmsPtrOutput
}

type oncallIntegrationTemplatesSmsPtrType OncallIntegrationTemplatesSmsArgs

func OncallIntegrationTemplatesSmsPtr(v *OncallIntegrationTemplatesSmsArgs) OncallIntegrationTemplatesSmsPtrInput {
	return (*oncallIntegrationTemplatesSmsPtrType)(v)
}

func (*oncallIntegrationTemplatesSmsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesSmsPtrType) ToOncallIntegrationTemplatesSmsPtrOutput() OncallIntegrationTemplatesSmsPtrOutput {
	return i.ToOncallIntegrationTemplatesSmsPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesSmsPtrType) ToOncallIntegrationTemplatesSmsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesSmsPtrOutput)
}

type OncallIntegrationTemplatesSmsOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsOutput() OncallIntegrationTemplatesSmsOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsPtrOutput() OncallIntegrationTemplatesSmsPtrOutput {
	return o.ToOncallIntegrationTemplatesSmsPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesSmsOutput) ToOncallIntegrationTemplatesSmsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesSms) *OncallIntegrationTemplatesSms {
		return &v
	}).(OncallIntegrationTemplatesSmsPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesSmsOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesSms) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesSmsPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesSmsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesSms)(nil)).Elem()
}

func (o OncallIntegrationTemplatesSmsPtrOutput) ToOncallIntegrationTemplatesSmsPtrOutput() OncallIntegrationTemplatesSmsPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsPtrOutput) ToOncallIntegrationTemplatesSmsPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesSmsPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesSmsPtrOutput) Elem() OncallIntegrationTemplatesSmsOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSms) OncallIntegrationTemplatesSms {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesSms
		return ret
	}).(OncallIntegrationTemplatesSmsOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesSmsPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesSms) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesTelegram struct {
	// Template for Alert image url.
	ImageUrl *string `pulumi:"imageUrl"`
	// Template for Alert message.
	Message *string `pulumi:"message"`
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesTelegramInput is an input type that accepts OncallIntegrationTemplatesTelegramArgs and OncallIntegrationTemplatesTelegramOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesTelegramInput` via:
//
//	OncallIntegrationTemplatesTelegramArgs{...}
type OncallIntegrationTemplatesTelegramInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesTelegramOutput() OncallIntegrationTemplatesTelegramOutput
	ToOncallIntegrationTemplatesTelegramOutputWithContext(context.Context) OncallIntegrationTemplatesTelegramOutput
}

type OncallIntegrationTemplatesTelegramArgs struct {
	// Template for Alert image url.
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
	// Template for Alert message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramOutput() OncallIntegrationTemplatesTelegramOutput {
	return i.ToOncallIntegrationTemplatesTelegramOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesTelegramOutput)
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramPtrOutput() OncallIntegrationTemplatesTelegramPtrOutput {
	return i.ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesTelegramArgs) ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesTelegramOutput).ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesTelegramPtrInput is an input type that accepts OncallIntegrationTemplatesTelegramArgs, OncallIntegrationTemplatesTelegramPtr and OncallIntegrationTemplatesTelegramPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesTelegramPtrInput` via:
//
//	        OncallIntegrationTemplatesTelegramArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesTelegramPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesTelegramPtrOutput() OncallIntegrationTemplatesTelegramPtrOutput
	ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(context.Context) OncallIntegrationTemplatesTelegramPtrOutput
}

type oncallIntegrationTemplatesTelegramPtrType OncallIntegrationTemplatesTelegramArgs

func OncallIntegrationTemplatesTelegramPtr(v *OncallIntegrationTemplatesTelegramArgs) OncallIntegrationTemplatesTelegramPtrInput {
	return (*oncallIntegrationTemplatesTelegramPtrType)(v)
}

func (*oncallIntegrationTemplatesTelegramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesTelegramPtrType) ToOncallIntegrationTemplatesTelegramPtrOutput() OncallIntegrationTemplatesTelegramPtrOutput {
	return i.ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesTelegramPtrType) ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesTelegramPtrOutput)
}

type OncallIntegrationTemplatesTelegramOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramOutput() OncallIntegrationTemplatesTelegramOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramPtrOutput() OncallIntegrationTemplatesTelegramPtrOutput {
	return o.ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesTelegramOutput) ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesTelegram) *OncallIntegrationTemplatesTelegram {
		return &v
	}).(OncallIntegrationTemplatesTelegramPtrOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesTelegramOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesTelegram) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesTelegramOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesTelegram) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesTelegramOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesTelegram) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesTelegramPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesTelegramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesTelegram)(nil)).Elem()
}

func (o OncallIntegrationTemplatesTelegramPtrOutput) ToOncallIntegrationTemplatesTelegramPtrOutput() OncallIntegrationTemplatesTelegramPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramPtrOutput) ToOncallIntegrationTemplatesTelegramPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesTelegramPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesTelegramPtrOutput) Elem() OncallIntegrationTemplatesTelegramOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesTelegram) OncallIntegrationTemplatesTelegram {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesTelegram
		return ret
	}).(OncallIntegrationTemplatesTelegramOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesTelegramPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesTelegram) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesTelegramPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesTelegramPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesWeb struct {
	// Template for Alert image url.
	ImageUrl *string `pulumi:"imageUrl"`
	// Template for Alert message.
	Message *string `pulumi:"message"`
	// Template for Alert title.
	Title *string `pulumi:"title"`
}

// OncallIntegrationTemplatesWebInput is an input type that accepts OncallIntegrationTemplatesWebArgs and OncallIntegrationTemplatesWebOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesWebInput` via:
//
//	OncallIntegrationTemplatesWebArgs{...}
type OncallIntegrationTemplatesWebInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesWebOutput() OncallIntegrationTemplatesWebOutput
	ToOncallIntegrationTemplatesWebOutputWithContext(context.Context) OncallIntegrationTemplatesWebOutput
}

type OncallIntegrationTemplatesWebArgs struct {
	// Template for Alert image url.
	ImageUrl pulumi.StringPtrInput `pulumi:"imageUrl"`
	// Template for Alert message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Template for Alert title.
	Title pulumi.StringPtrInput `pulumi:"title"`
}

func (OncallIntegrationTemplatesWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebOutput() OncallIntegrationTemplatesWebOutput {
	return i.ToOncallIntegrationTemplatesWebOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesWebOutput)
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebPtrOutput() OncallIntegrationTemplatesWebPtrOutput {
	return i.ToOncallIntegrationTemplatesWebPtrOutputWithContext(context.Background())
}

func (i OncallIntegrationTemplatesWebArgs) ToOncallIntegrationTemplatesWebPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesWebOutput).ToOncallIntegrationTemplatesWebPtrOutputWithContext(ctx)
}

// OncallIntegrationTemplatesWebPtrInput is an input type that accepts OncallIntegrationTemplatesWebArgs, OncallIntegrationTemplatesWebPtr and OncallIntegrationTemplatesWebPtrOutput values.
// You can construct a concrete instance of `OncallIntegrationTemplatesWebPtrInput` via:
//
//	        OncallIntegrationTemplatesWebArgs{...}
//
//	or:
//
//	        nil
type OncallIntegrationTemplatesWebPtrInput interface {
	pulumi.Input

	ToOncallIntegrationTemplatesWebPtrOutput() OncallIntegrationTemplatesWebPtrOutput
	ToOncallIntegrationTemplatesWebPtrOutputWithContext(context.Context) OncallIntegrationTemplatesWebPtrOutput
}

type oncallIntegrationTemplatesWebPtrType OncallIntegrationTemplatesWebArgs

func OncallIntegrationTemplatesWebPtr(v *OncallIntegrationTemplatesWebArgs) OncallIntegrationTemplatesWebPtrInput {
	return (*oncallIntegrationTemplatesWebPtrType)(v)
}

func (*oncallIntegrationTemplatesWebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (i *oncallIntegrationTemplatesWebPtrType) ToOncallIntegrationTemplatesWebPtrOutput() OncallIntegrationTemplatesWebPtrOutput {
	return i.ToOncallIntegrationTemplatesWebPtrOutputWithContext(context.Background())
}

func (i *oncallIntegrationTemplatesWebPtrType) ToOncallIntegrationTemplatesWebPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallIntegrationTemplatesWebPtrOutput)
}

type OncallIntegrationTemplatesWebOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebOutput() OncallIntegrationTemplatesWebOutput {
	return o
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebOutput {
	return o
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebPtrOutput() OncallIntegrationTemplatesWebPtrOutput {
	return o.ToOncallIntegrationTemplatesWebPtrOutputWithContext(context.Background())
}

func (o OncallIntegrationTemplatesWebOutput) ToOncallIntegrationTemplatesWebPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallIntegrationTemplatesWeb) *OncallIntegrationTemplatesWeb {
		return &v
	}).(OncallIntegrationTemplatesWebPtrOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesWebOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesWeb) *string { return v.ImageUrl }).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesWebOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesWeb) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesWebOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallIntegrationTemplatesWeb) *string { return v.Title }).(pulumi.StringPtrOutput)
}

type OncallIntegrationTemplatesWebPtrOutput struct{ *pulumi.OutputState }

func (OncallIntegrationTemplatesWebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallIntegrationTemplatesWeb)(nil)).Elem()
}

func (o OncallIntegrationTemplatesWebPtrOutput) ToOncallIntegrationTemplatesWebPtrOutput() OncallIntegrationTemplatesWebPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesWebPtrOutput) ToOncallIntegrationTemplatesWebPtrOutputWithContext(ctx context.Context) OncallIntegrationTemplatesWebPtrOutput {
	return o
}

func (o OncallIntegrationTemplatesWebPtrOutput) Elem() OncallIntegrationTemplatesWebOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesWeb) OncallIntegrationTemplatesWeb {
		if v != nil {
			return *v
		}
		var ret OncallIntegrationTemplatesWeb
		return ret
	}).(OncallIntegrationTemplatesWebOutput)
}

// Template for Alert image url.
func (o OncallIntegrationTemplatesWebPtrOutput) ImageUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesWeb) *string {
		if v == nil {
			return nil
		}
		return v.ImageUrl
	}).(pulumi.StringPtrOutput)
}

// Template for Alert message.
func (o OncallIntegrationTemplatesWebPtrOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesWeb) *string {
		if v == nil {
			return nil
		}
		return v.Message
	}).(pulumi.StringPtrOutput)
}

// Template for Alert title.
func (o OncallIntegrationTemplatesWebPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallIntegrationTemplatesWeb) *string {
		if v == nil {
			return nil
		}
		return v.Title
	}).(pulumi.StringPtrOutput)
}

type OncallRouteMsteams struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id *string `pulumi:"id"`
}

// OncallRouteMsteamsInput is an input type that accepts OncallRouteMsteamsArgs and OncallRouteMsteamsOutput values.
// You can construct a concrete instance of `OncallRouteMsteamsInput` via:
//
//	OncallRouteMsteamsArgs{...}
type OncallRouteMsteamsInput interface {
	pulumi.Input

	ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput
	ToOncallRouteMsteamsOutputWithContext(context.Context) OncallRouteMsteamsOutput
}

type OncallRouteMsteamsArgs struct {
	// Enable notification in MS teams. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallRouteMsteamsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return i.ToOncallRouteMsteamsOutputWithContext(context.Background())
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsOutput)
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return i.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i OncallRouteMsteamsArgs) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsOutput).ToOncallRouteMsteamsPtrOutputWithContext(ctx)
}

// OncallRouteMsteamsPtrInput is an input type that accepts OncallRouteMsteamsArgs, OncallRouteMsteamsPtr and OncallRouteMsteamsPtrOutput values.
// You can construct a concrete instance of `OncallRouteMsteamsPtrInput` via:
//
//	        OncallRouteMsteamsArgs{...}
//
//	or:
//
//	        nil
type OncallRouteMsteamsPtrInput interface {
	pulumi.Input

	ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput
	ToOncallRouteMsteamsPtrOutputWithContext(context.Context) OncallRouteMsteamsPtrOutput
}

type oncallRouteMsteamsPtrType OncallRouteMsteamsArgs

func OncallRouteMsteamsPtr(v *OncallRouteMsteamsArgs) OncallRouteMsteamsPtrInput {
	return (*oncallRouteMsteamsPtrType)(v)
}

func (*oncallRouteMsteamsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteMsteams)(nil)).Elem()
}

func (i *oncallRouteMsteamsPtrType) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return i.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (i *oncallRouteMsteamsPtrType) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMsteamsPtrOutput)
}

type OncallRouteMsteamsOutput struct{ *pulumi.OutputState }

func (OncallRouteMsteamsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteMsteams)(nil)).Elem()
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutput() OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsOutputWithContext(ctx context.Context) OncallRouteMsteamsOutput {
	return o
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return o.ToOncallRouteMsteamsPtrOutputWithContext(context.Background())
}

func (o OncallRouteMsteamsOutput) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteMsteams) *OncallRouteMsteams {
		return &v
	}).(OncallRouteMsteamsPtrOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallRouteMsteamsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteMsteams) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallRouteMsteamsOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteMsteams) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallRouteMsteamsPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteMsteamsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteMsteams)(nil)).Elem()
}

func (o OncallRouteMsteamsPtrOutput) ToOncallRouteMsteamsPtrOutput() OncallRouteMsteamsPtrOutput {
	return o
}

func (o OncallRouteMsteamsPtrOutput) ToOncallRouteMsteamsPtrOutputWithContext(ctx context.Context) OncallRouteMsteamsPtrOutput {
	return o
}

func (o OncallRouteMsteamsPtrOutput) Elem() OncallRouteMsteamsOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) OncallRouteMsteams {
		if v != nil {
			return *v
		}
		var ret OncallRouteMsteams
		return ret
	}).(OncallRouteMsteamsOutput)
}

// Enable notification in MS teams. Defaults to `true`.
func (o OncallRouteMsteamsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// MS teams channel id. Alerts will be directed to this channel in Microsoft teams.
func (o OncallRouteMsteamsPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteMsteams) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallRouteSlack struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
}

// OncallRouteSlackInput is an input type that accepts OncallRouteSlackArgs and OncallRouteSlackOutput values.
// You can construct a concrete instance of `OncallRouteSlackInput` via:
//
//	OncallRouteSlackArgs{...}
type OncallRouteSlackInput interface {
	pulumi.Input

	ToOncallRouteSlackOutput() OncallRouteSlackOutput
	ToOncallRouteSlackOutputWithContext(context.Context) OncallRouteSlackOutput
}

type OncallRouteSlackArgs struct {
	// Slack channel id. Alerts will be directed to this channel in Slack.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// Enable notification in Slack. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
}

func (OncallRouteSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return i.ToOncallRouteSlackOutputWithContext(context.Background())
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackOutput)
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return i.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (i OncallRouteSlackArgs) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackOutput).ToOncallRouteSlackPtrOutputWithContext(ctx)
}

// OncallRouteSlackPtrInput is an input type that accepts OncallRouteSlackArgs, OncallRouteSlackPtr and OncallRouteSlackPtrOutput values.
// You can construct a concrete instance of `OncallRouteSlackPtrInput` via:
//
//	        OncallRouteSlackArgs{...}
//
//	or:
//
//	        nil
type OncallRouteSlackPtrInput interface {
	pulumi.Input

	ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput
	ToOncallRouteSlackPtrOutputWithContext(context.Context) OncallRouteSlackPtrOutput
}

type oncallRouteSlackPtrType OncallRouteSlackArgs

func OncallRouteSlackPtr(v *OncallRouteSlackArgs) OncallRouteSlackPtrInput {
	return (*oncallRouteSlackPtrType)(v)
}

func (*oncallRouteSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteSlack)(nil)).Elem()
}

func (i *oncallRouteSlackPtrType) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return i.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (i *oncallRouteSlackPtrType) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteSlackPtrOutput)
}

type OncallRouteSlackOutput struct{ *pulumi.OutputState }

func (OncallRouteSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteSlack)(nil)).Elem()
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutput() OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackOutputWithContext(ctx context.Context) OncallRouteSlackOutput {
	return o
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return o.ToOncallRouteSlackPtrOutputWithContext(context.Background())
}

func (o OncallRouteSlackOutput) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteSlack) *OncallRouteSlack {
		return &v
	}).(OncallRouteSlackPtrOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallRouteSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallRouteSlackOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteSlack) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

type OncallRouteSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteSlack)(nil)).Elem()
}

func (o OncallRouteSlackPtrOutput) ToOncallRouteSlackPtrOutput() OncallRouteSlackPtrOutput {
	return o
}

func (o OncallRouteSlackPtrOutput) ToOncallRouteSlackPtrOutputWithContext(ctx context.Context) OncallRouteSlackPtrOutput {
	return o
}

func (o OncallRouteSlackPtrOutput) Elem() OncallRouteSlackOutput {
	return o.ApplyT(func(v *OncallRouteSlack) OncallRouteSlack {
		if v != nil {
			return *v
		}
		var ret OncallRouteSlack
		return ret
	}).(OncallRouteSlackOutput)
}

// Slack channel id. Alerts will be directed to this channel in Slack.
func (o OncallRouteSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Enable notification in Slack. Defaults to `true`.
func (o OncallRouteSlackPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteSlack) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

type OncallRouteTelegram struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id *string `pulumi:"id"`
}

// OncallRouteTelegramInput is an input type that accepts OncallRouteTelegramArgs and OncallRouteTelegramOutput values.
// You can construct a concrete instance of `OncallRouteTelegramInput` via:
//
//	OncallRouteTelegramArgs{...}
type OncallRouteTelegramInput interface {
	pulumi.Input

	ToOncallRouteTelegramOutput() OncallRouteTelegramOutput
	ToOncallRouteTelegramOutputWithContext(context.Context) OncallRouteTelegramOutput
}

type OncallRouteTelegramArgs struct {
	// Enable notification in Telegram. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Telegram channel id. Alerts will be directed to this channel in Telegram.
	Id pulumi.StringPtrInput `pulumi:"id"`
}

func (OncallRouteTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return i.ToOncallRouteTelegramOutputWithContext(context.Background())
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramOutput)
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return i.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (i OncallRouteTelegramArgs) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramOutput).ToOncallRouteTelegramPtrOutputWithContext(ctx)
}

// OncallRouteTelegramPtrInput is an input type that accepts OncallRouteTelegramArgs, OncallRouteTelegramPtr and OncallRouteTelegramPtrOutput values.
// You can construct a concrete instance of `OncallRouteTelegramPtrInput` via:
//
//	        OncallRouteTelegramArgs{...}
//
//	or:
//
//	        nil
type OncallRouteTelegramPtrInput interface {
	pulumi.Input

	ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput
	ToOncallRouteTelegramPtrOutputWithContext(context.Context) OncallRouteTelegramPtrOutput
}

type oncallRouteTelegramPtrType OncallRouteTelegramArgs

func OncallRouteTelegramPtr(v *OncallRouteTelegramArgs) OncallRouteTelegramPtrInput {
	return (*oncallRouteTelegramPtrType)(v)
}

func (*oncallRouteTelegramPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteTelegram)(nil)).Elem()
}

func (i *oncallRouteTelegramPtrType) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return i.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (i *oncallRouteTelegramPtrType) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteTelegramPtrOutput)
}

type OncallRouteTelegramOutput struct{ *pulumi.OutputState }

func (OncallRouteTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallRouteTelegram)(nil)).Elem()
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutput() OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramOutputWithContext(ctx context.Context) OncallRouteTelegramOutput {
	return o
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return o.ToOncallRouteTelegramPtrOutputWithContext(context.Background())
}

func (o OncallRouteTelegramOutput) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallRouteTelegram) *OncallRouteTelegram {
		return &v
	}).(OncallRouteTelegramPtrOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallRouteTelegramOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OncallRouteTelegram) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallRouteTelegramOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallRouteTelegram) *string { return v.Id }).(pulumi.StringPtrOutput)
}

type OncallRouteTelegramPtrOutput struct{ *pulumi.OutputState }

func (OncallRouteTelegramPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRouteTelegram)(nil)).Elem()
}

func (o OncallRouteTelegramPtrOutput) ToOncallRouteTelegramPtrOutput() OncallRouteTelegramPtrOutput {
	return o
}

func (o OncallRouteTelegramPtrOutput) ToOncallRouteTelegramPtrOutputWithContext(ctx context.Context) OncallRouteTelegramPtrOutput {
	return o
}

func (o OncallRouteTelegramPtrOutput) Elem() OncallRouteTelegramOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) OncallRouteTelegram {
		if v != nil {
			return *v
		}
		var ret OncallRouteTelegram
		return ret
	}).(OncallRouteTelegramOutput)
}

// Enable notification in Telegram. Defaults to `true`.
func (o OncallRouteTelegramPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Telegram channel id. Alerts will be directed to this channel in Telegram.
func (o OncallRouteTelegramPtrOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRouteTelegram) *string {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.StringPtrOutput)
}

type OncallScheduleSlack struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId *string `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId *string `pulumi:"userGroupId"`
}

// OncallScheduleSlackInput is an input type that accepts OncallScheduleSlackArgs and OncallScheduleSlackOutput values.
// You can construct a concrete instance of `OncallScheduleSlackInput` via:
//
//	OncallScheduleSlackArgs{...}
type OncallScheduleSlackInput interface {
	pulumi.Input

	ToOncallScheduleSlackOutput() OncallScheduleSlackOutput
	ToOncallScheduleSlackOutputWithContext(context.Context) OncallScheduleSlackOutput
}

type OncallScheduleSlackArgs struct {
	// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
	ChannelId pulumi.StringPtrInput `pulumi:"channelId"`
	// Slack user group id. Members of user group will be updated when on-call users change.
	UserGroupId pulumi.StringPtrInput `pulumi:"userGroupId"`
}

func (OncallScheduleSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return i.ToOncallScheduleSlackOutputWithContext(context.Background())
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackOutput)
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return i.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (i OncallScheduleSlackArgs) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackOutput).ToOncallScheduleSlackPtrOutputWithContext(ctx)
}

// OncallScheduleSlackPtrInput is an input type that accepts OncallScheduleSlackArgs, OncallScheduleSlackPtr and OncallScheduleSlackPtrOutput values.
// You can construct a concrete instance of `OncallScheduleSlackPtrInput` via:
//
//	        OncallScheduleSlackArgs{...}
//
//	or:
//
//	        nil
type OncallScheduleSlackPtrInput interface {
	pulumi.Input

	ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput
	ToOncallScheduleSlackPtrOutputWithContext(context.Context) OncallScheduleSlackPtrOutput
}

type oncallScheduleSlackPtrType OncallScheduleSlackArgs

func OncallScheduleSlackPtr(v *OncallScheduleSlackArgs) OncallScheduleSlackPtrInput {
	return (*oncallScheduleSlackPtrType)(v)
}

func (*oncallScheduleSlackPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallScheduleSlack)(nil)).Elem()
}

func (i *oncallScheduleSlackPtrType) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return i.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (i *oncallScheduleSlackPtrType) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallScheduleSlackPtrOutput)
}

type OncallScheduleSlackOutput struct{ *pulumi.OutputState }

func (OncallScheduleSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OncallScheduleSlack)(nil)).Elem()
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutput() OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackOutputWithContext(ctx context.Context) OncallScheduleSlackOutput {
	return o
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return o.ToOncallScheduleSlackPtrOutputWithContext(context.Background())
}

func (o OncallScheduleSlackOutput) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OncallScheduleSlack) *OncallScheduleSlack {
		return &v
	}).(OncallScheduleSlackPtrOutput)
}

// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
func (o OncallScheduleSlackOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallScheduleSlack) *string { return v.ChannelId }).(pulumi.StringPtrOutput)
}

// Slack user group id. Members of user group will be updated when on-call users change.
func (o OncallScheduleSlackOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OncallScheduleSlack) *string { return v.UserGroupId }).(pulumi.StringPtrOutput)
}

type OncallScheduleSlackPtrOutput struct{ *pulumi.OutputState }

func (OncallScheduleSlackPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallScheduleSlack)(nil)).Elem()
}

func (o OncallScheduleSlackPtrOutput) ToOncallScheduleSlackPtrOutput() OncallScheduleSlackPtrOutput {
	return o
}

func (o OncallScheduleSlackPtrOutput) ToOncallScheduleSlackPtrOutputWithContext(ctx context.Context) OncallScheduleSlackPtrOutput {
	return o
}

func (o OncallScheduleSlackPtrOutput) Elem() OncallScheduleSlackOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) OncallScheduleSlack {
		if v != nil {
			return *v
		}
		var ret OncallScheduleSlack
		return ret
	}).(OncallScheduleSlackOutput)
}

// Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.
func (o OncallScheduleSlackPtrOutput) ChannelId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) *string {
		if v == nil {
			return nil
		}
		return v.ChannelId
	}).(pulumi.StringPtrOutput)
}

// Slack user group id. Members of user group will be updated when on-call users change.
func (o OncallScheduleSlackPtrOutput) UserGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallScheduleSlack) *string {
		if v == nil {
			return nil
		}
		return v.UserGroupId
	}).(pulumi.StringPtrOutput)
}

type PlaylistItem struct {
	Id    *string `pulumi:"id"`
	Order int     `pulumi:"order"`
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// PlaylistItemInput is an input type that accepts PlaylistItemArgs and PlaylistItemOutput values.
// You can construct a concrete instance of `PlaylistItemInput` via:
//
//	PlaylistItemArgs{...}
type PlaylistItemInput interface {
	pulumi.Input

	ToPlaylistItemOutput() PlaylistItemOutput
	ToPlaylistItemOutputWithContext(context.Context) PlaylistItemOutput
}

type PlaylistItemArgs struct {
	Id    pulumi.StringPtrInput `pulumi:"id"`
	Order pulumi.IntInput       `pulumi:"order"`
	Title pulumi.StringInput    `pulumi:"title"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PlaylistItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArgs) ToPlaylistItemOutput() PlaylistItemOutput {
	return i.ToPlaylistItemOutputWithContext(context.Background())
}

func (i PlaylistItemArgs) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemOutput)
}

// PlaylistItemArrayInput is an input type that accepts PlaylistItemArray and PlaylistItemArrayOutput values.
// You can construct a concrete instance of `PlaylistItemArrayInput` via:
//
//	PlaylistItemArray{ PlaylistItemArgs{...} }
type PlaylistItemArrayInput interface {
	pulumi.Input

	ToPlaylistItemArrayOutput() PlaylistItemArrayOutput
	ToPlaylistItemArrayOutputWithContext(context.Context) PlaylistItemArrayOutput
}

type PlaylistItemArray []PlaylistItemInput

func (PlaylistItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return i.ToPlaylistItemArrayOutputWithContext(context.Background())
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemArrayOutput)
}

type PlaylistItemOutput struct{ *pulumi.OutputState }

func (PlaylistItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemOutput) ToPlaylistItemOutput() PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v PlaylistItem) int { return v.Order }).(pulumi.IntOutput)
}

func (o PlaylistItemOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PlaylistItem) string { return v.Title }).(pulumi.StringOutput)
}

func (o PlaylistItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlaylistItemArrayOutput struct{ *pulumi.OutputState }

func (PlaylistItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) Index(i pulumi.IntInput) PlaylistItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaylistItem {
		return vs[0].([]PlaylistItem)[vs[1].(int)]
	}).(PlaylistItemOutput)
}

type ReportDashboard struct {
	// Add report variables to the dashboard. Values should be separated by commas.
	ReportVariables map[string]interface{} `pulumi:"reportVariables"`
	// Time range of the report.
	TimeRange *ReportDashboardTimeRange `pulumi:"timeRange"`
	// Dashboard uid.
	Uid string `pulumi:"uid"`
}

// ReportDashboardInput is an input type that accepts ReportDashboardArgs and ReportDashboardOutput values.
// You can construct a concrete instance of `ReportDashboardInput` via:
//
//	ReportDashboardArgs{...}
type ReportDashboardInput interface {
	pulumi.Input

	ToReportDashboardOutput() ReportDashboardOutput
	ToReportDashboardOutputWithContext(context.Context) ReportDashboardOutput
}

type ReportDashboardArgs struct {
	// Add report variables to the dashboard. Values should be separated by commas.
	ReportVariables pulumi.MapInput `pulumi:"reportVariables"`
	// Time range of the report.
	TimeRange ReportDashboardTimeRangePtrInput `pulumi:"timeRange"`
	// Dashboard uid.
	Uid pulumi.StringInput `pulumi:"uid"`
}

func (ReportDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboard)(nil)).Elem()
}

func (i ReportDashboardArgs) ToReportDashboardOutput() ReportDashboardOutput {
	return i.ToReportDashboardOutputWithContext(context.Background())
}

func (i ReportDashboardArgs) ToReportDashboardOutputWithContext(ctx context.Context) ReportDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardOutput)
}

// ReportDashboardArrayInput is an input type that accepts ReportDashboardArray and ReportDashboardArrayOutput values.
// You can construct a concrete instance of `ReportDashboardArrayInput` via:
//
//	ReportDashboardArray{ ReportDashboardArgs{...} }
type ReportDashboardArrayInput interface {
	pulumi.Input

	ToReportDashboardArrayOutput() ReportDashboardArrayOutput
	ToReportDashboardArrayOutputWithContext(context.Context) ReportDashboardArrayOutput
}

type ReportDashboardArray []ReportDashboardInput

func (ReportDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportDashboard)(nil)).Elem()
}

func (i ReportDashboardArray) ToReportDashboardArrayOutput() ReportDashboardArrayOutput {
	return i.ToReportDashboardArrayOutputWithContext(context.Background())
}

func (i ReportDashboardArray) ToReportDashboardArrayOutputWithContext(ctx context.Context) ReportDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardArrayOutput)
}

type ReportDashboardOutput struct{ *pulumi.OutputState }

func (ReportDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboard)(nil)).Elem()
}

func (o ReportDashboardOutput) ToReportDashboardOutput() ReportDashboardOutput {
	return o
}

func (o ReportDashboardOutput) ToReportDashboardOutputWithContext(ctx context.Context) ReportDashboardOutput {
	return o
}

// Add report variables to the dashboard. Values should be separated by commas.
func (o ReportDashboardOutput) ReportVariables() pulumi.MapOutput {
	return o.ApplyT(func(v ReportDashboard) map[string]interface{} { return v.ReportVariables }).(pulumi.MapOutput)
}

// Time range of the report.
func (o ReportDashboardOutput) TimeRange() ReportDashboardTimeRangePtrOutput {
	return o.ApplyT(func(v ReportDashboard) *ReportDashboardTimeRange { return v.TimeRange }).(ReportDashboardTimeRangePtrOutput)
}

// Dashboard uid.
func (o ReportDashboardOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v ReportDashboard) string { return v.Uid }).(pulumi.StringOutput)
}

type ReportDashboardArrayOutput struct{ *pulumi.OutputState }

func (ReportDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReportDashboard)(nil)).Elem()
}

func (o ReportDashboardArrayOutput) ToReportDashboardArrayOutput() ReportDashboardArrayOutput {
	return o
}

func (o ReportDashboardArrayOutput) ToReportDashboardArrayOutputWithContext(ctx context.Context) ReportDashboardArrayOutput {
	return o
}

func (o ReportDashboardArrayOutput) Index(i pulumi.IntInput) ReportDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReportDashboard {
		return vs[0].([]ReportDashboard)[vs[1].(int)]
	}).(ReportDashboardOutput)
}

type ReportDashboardTimeRange struct {
	// Start of the time range.
	From *string `pulumi:"from"`
	// End of the time range.
	To *string `pulumi:"to"`
}

// ReportDashboardTimeRangeInput is an input type that accepts ReportDashboardTimeRangeArgs and ReportDashboardTimeRangeOutput values.
// You can construct a concrete instance of `ReportDashboardTimeRangeInput` via:
//
//	ReportDashboardTimeRangeArgs{...}
type ReportDashboardTimeRangeInput interface {
	pulumi.Input

	ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput
	ToReportDashboardTimeRangeOutputWithContext(context.Context) ReportDashboardTimeRangeOutput
}

type ReportDashboardTimeRangeArgs struct {
	// Start of the time range.
	From pulumi.StringPtrInput `pulumi:"from"`
	// End of the time range.
	To pulumi.StringPtrInput `pulumi:"to"`
}

func (ReportDashboardTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboardTimeRange)(nil)).Elem()
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput {
	return i.ToReportDashboardTimeRangeOutputWithContext(context.Background())
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangeOutputWithContext(ctx context.Context) ReportDashboardTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangeOutput)
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return i.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (i ReportDashboardTimeRangeArgs) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangeOutput).ToReportDashboardTimeRangePtrOutputWithContext(ctx)
}

// ReportDashboardTimeRangePtrInput is an input type that accepts ReportDashboardTimeRangeArgs, ReportDashboardTimeRangePtr and ReportDashboardTimeRangePtrOutput values.
// You can construct a concrete instance of `ReportDashboardTimeRangePtrInput` via:
//
//	        ReportDashboardTimeRangeArgs{...}
//
//	or:
//
//	        nil
type ReportDashboardTimeRangePtrInput interface {
	pulumi.Input

	ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput
	ToReportDashboardTimeRangePtrOutputWithContext(context.Context) ReportDashboardTimeRangePtrOutput
}

type reportDashboardTimeRangePtrType ReportDashboardTimeRangeArgs

func ReportDashboardTimeRangePtr(v *ReportDashboardTimeRangeArgs) ReportDashboardTimeRangePtrInput {
	return (*reportDashboardTimeRangePtrType)(v)
}

func (*reportDashboardTimeRangePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDashboardTimeRange)(nil)).Elem()
}

func (i *reportDashboardTimeRangePtrType) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return i.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (i *reportDashboardTimeRangePtrType) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportDashboardTimeRangePtrOutput)
}

type ReportDashboardTimeRangeOutput struct{ *pulumi.OutputState }

func (ReportDashboardTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportDashboardTimeRange)(nil)).Elem()
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangeOutput() ReportDashboardTimeRangeOutput {
	return o
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangeOutputWithContext(ctx context.Context) ReportDashboardTimeRangeOutput {
	return o
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return o.ToReportDashboardTimeRangePtrOutputWithContext(context.Background())
}

func (o ReportDashboardTimeRangeOutput) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportDashboardTimeRange) *ReportDashboardTimeRange {
		return &v
	}).(ReportDashboardTimeRangePtrOutput)
}

// Start of the time range.
func (o ReportDashboardTimeRangeOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDashboardTimeRange) *string { return v.From }).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportDashboardTimeRangeOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportDashboardTimeRange) *string { return v.To }).(pulumi.StringPtrOutput)
}

type ReportDashboardTimeRangePtrOutput struct{ *pulumi.OutputState }

func (ReportDashboardTimeRangePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportDashboardTimeRange)(nil)).Elem()
}

func (o ReportDashboardTimeRangePtrOutput) ToReportDashboardTimeRangePtrOutput() ReportDashboardTimeRangePtrOutput {
	return o
}

func (o ReportDashboardTimeRangePtrOutput) ToReportDashboardTimeRangePtrOutputWithContext(ctx context.Context) ReportDashboardTimeRangePtrOutput {
	return o
}

func (o ReportDashboardTimeRangePtrOutput) Elem() ReportDashboardTimeRangeOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) ReportDashboardTimeRange {
		if v != nil {
			return *v
		}
		var ret ReportDashboardTimeRange
		return ret
	}).(ReportDashboardTimeRangeOutput)
}

// Start of the time range.
func (o ReportDashboardTimeRangePtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.From
	}).(pulumi.StringPtrOutput)
}

// End of the time range.
func (o ReportDashboardTimeRangePtrOutput) To() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportDashboardTimeRange) *string {
		if v == nil {
			return nil
		}
		return v.To
	}).(pulumi.StringPtrOutput)
}

type ReportSchedule struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval *string `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	EndTime *string `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency string `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth *bool `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	StartTime *string `pulumi:"startTime"`
	// Set the report time zone. Defaults to `GMT`.
	Timezone *string `pulumi:"timezone"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly *bool `pulumi:"workdaysOnly"`
}

// ReportScheduleInput is an input type that accepts ReportScheduleArgs and ReportScheduleOutput values.
// You can construct a concrete instance of `ReportScheduleInput` via:
//
//	ReportScheduleArgs{...}
type ReportScheduleInput interface {
	pulumi.Input

	ToReportScheduleOutput() ReportScheduleOutput
	ToReportScheduleOutputWithContext(context.Context) ReportScheduleOutput
}

type ReportScheduleArgs struct {
	// Custom interval of the report.
	// **Note:** This field is only available when frequency is set to `custom`.
	CustomInterval pulumi.StringPtrInput `pulumi:"customInterval"`
	// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	EndTime pulumi.StringPtrInput `pulumi:"endTime"`
	// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// Send the report on the last day of the month Defaults to `false`.
	LastDayOfMonth pulumi.BoolPtrInput `pulumi:"lastDayOfMonth"`
	// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
	StartTime pulumi.StringPtrInput `pulumi:"startTime"`
	// Set the report time zone. Defaults to `GMT`.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// Whether to send the report only on work days. Defaults to `false`.
	WorkdaysOnly pulumi.BoolPtrInput `pulumi:"workdaysOnly"`
}

func (ReportScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (i ReportScheduleArgs) ToReportScheduleOutput() ReportScheduleOutput {
	return i.ToReportScheduleOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput)
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i ReportScheduleArgs) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportScheduleOutput).ToReportSchedulePtrOutputWithContext(ctx)
}

// ReportSchedulePtrInput is an input type that accepts ReportScheduleArgs, ReportSchedulePtr and ReportSchedulePtrOutput values.
// You can construct a concrete instance of `ReportSchedulePtrInput` via:
//
//	        ReportScheduleArgs{...}
//
//	or:
//
//	        nil
type ReportSchedulePtrInput interface {
	pulumi.Input

	ToReportSchedulePtrOutput() ReportSchedulePtrOutput
	ToReportSchedulePtrOutputWithContext(context.Context) ReportSchedulePtrOutput
}

type reportSchedulePtrType ReportScheduleArgs

func ReportSchedulePtr(v *ReportScheduleArgs) ReportSchedulePtrInput {
	return (*reportSchedulePtrType)(v)
}

func (*reportSchedulePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return i.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (i *reportSchedulePtrType) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReportSchedulePtrOutput)
}

type ReportScheduleOutput struct{ *pulumi.OutputState }

func (ReportScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReportSchedule)(nil)).Elem()
}

func (o ReportScheduleOutput) ToReportScheduleOutput() ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportScheduleOutputWithContext(ctx context.Context) ReportScheduleOutput {
	return o
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o.ToReportSchedulePtrOutputWithContext(context.Background())
}

func (o ReportScheduleOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReportSchedule) *ReportSchedule {
		return &v
	}).(ReportSchedulePtrOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportScheduleOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.CustomInterval }).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportScheduleOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.EndTime }).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportScheduleOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v ReportSchedule) string { return v.Frequency }).(pulumi.StringOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportScheduleOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.LastDayOfMonth }).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportScheduleOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.StartTime }).(pulumi.StringPtrOutput)
}

// Set the report time zone. Defaults to `GMT`.
func (o ReportScheduleOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportScheduleOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ReportSchedule) *bool { return v.WorkdaysOnly }).(pulumi.BoolPtrOutput)
}

type ReportSchedulePtrOutput struct{ *pulumi.OutputState }

func (ReportSchedulePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReportSchedule)(nil)).Elem()
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutput() ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) ToReportSchedulePtrOutputWithContext(ctx context.Context) ReportSchedulePtrOutput {
	return o
}

func (o ReportSchedulePtrOutput) Elem() ReportScheduleOutput {
	return o.ApplyT(func(v *ReportSchedule) ReportSchedule {
		if v != nil {
			return *v
		}
		var ret ReportSchedule
		return ret
	}).(ReportScheduleOutput)
}

// Custom interval of the report.
// **Note:** This field is only available when frequency is set to `custom`.
func (o ReportSchedulePtrOutput) CustomInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.CustomInterval
	}).(pulumi.StringPtrOutput)
}

// End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportSchedulePtrOutput) EndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.EndTime
	}).(pulumi.StringPtrOutput)
}

// Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.
func (o ReportSchedulePtrOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return &v.Frequency
	}).(pulumi.StringPtrOutput)
}

// Send the report on the last day of the month Defaults to `false`.
func (o ReportSchedulePtrOutput) LastDayOfMonth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.LastDayOfMonth
	}).(pulumi.BoolPtrOutput)
}

// Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone
func (o ReportSchedulePtrOutput) StartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.StartTime
	}).(pulumi.StringPtrOutput)
}

// Set the report time zone. Defaults to `GMT`.
func (o ReportSchedulePtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// Whether to send the report only on work days. Defaults to `false`.
func (o ReportSchedulePtrOutput) WorkdaysOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ReportSchedule) *bool {
		if v == nil {
			return nil
		}
		return v.WorkdaysOnly
	}).(pulumi.BoolPtrOutput)
}

type RolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope *string `pulumi:"scope"`
}

// RolePermissionInput is an input type that accepts RolePermissionArgs and RolePermissionOutput values.
// You can construct a concrete instance of `RolePermissionInput` via:
//
//	RolePermissionArgs{...}
type RolePermissionInput interface {
	pulumi.Input

	ToRolePermissionOutput() RolePermissionOutput
	ToRolePermissionOutputWithContext(context.Context) RolePermissionOutput
}

type RolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumi.StringInput `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to ``.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (RolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (i RolePermissionArgs) ToRolePermissionOutput() RolePermissionOutput {
	return i.ToRolePermissionOutputWithContext(context.Background())
}

func (i RolePermissionArgs) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionOutput)
}

// RolePermissionArrayInput is an input type that accepts RolePermissionArray and RolePermissionArrayOutput values.
// You can construct a concrete instance of `RolePermissionArrayInput` via:
//
//	RolePermissionArray{ RolePermissionArgs{...} }
type RolePermissionArrayInput interface {
	pulumi.Input

	ToRolePermissionArrayOutput() RolePermissionArrayOutput
	ToRolePermissionArrayOutputWithContext(context.Context) RolePermissionArrayOutput
}

type RolePermissionArray []RolePermissionInput

func (RolePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (i RolePermissionArray) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return i.ToRolePermissionArrayOutputWithContext(context.Background())
}

func (i RolePermissionArray) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePermissionArrayOutput)
}

type RolePermissionOutput struct{ *pulumi.OutputState }

func (RolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePermission)(nil)).Elem()
}

func (o RolePermissionOutput) ToRolePermissionOutput() RolePermissionOutput {
	return o
}

func (o RolePermissionOutput) ToRolePermissionOutputWithContext(ctx context.Context) RolePermissionOutput {
	return o
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o RolePermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v RolePermission) string { return v.Action }).(pulumi.StringOutput)
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`) Defaults to “.
func (o RolePermissionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolePermission) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type RolePermissionArrayOutput struct{ *pulumi.OutputState }

func (RolePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePermission)(nil)).Elem()
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutput() RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) ToRolePermissionArrayOutputWithContext(ctx context.Context) RolePermissionArrayOutput {
	return o
}

func (o RolePermissionArrayOutput) Index(i pulumi.IntInput) RolePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePermission {
		return vs[0].([]RolePermission)[vs[1].(int)]
	}).(RolePermissionOutput)
}

type RuleGroupRule struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations map[string]string `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition string `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas []RuleGroupRuleData `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting. Defaults to `Alerting`.
	ExecErrState *string `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For *string `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused *bool `pulumi:"isPaused"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels map[string]string `pulumi:"labels"`
	// The name of the alert rule.
	Name string `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to `NoData`.
	NoDataState *string `pulumi:"noDataState"`
	// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' enabled.
	NotificationSettings *RuleGroupRuleNotificationSettings `pulumi:"notificationSettings"`
	// The unique identifier of the alert rule.
	Uid *string `pulumi:"uid"`
}

// RuleGroupRuleInput is an input type that accepts RuleGroupRuleArgs and RuleGroupRuleOutput values.
// You can construct a concrete instance of `RuleGroupRuleInput` via:
//
//	RuleGroupRuleArgs{...}
type RuleGroupRuleInput interface {
	pulumi.Input

	ToRuleGroupRuleOutput() RuleGroupRuleOutput
	ToRuleGroupRuleOutputWithContext(context.Context) RuleGroupRuleOutput
}

type RuleGroupRuleArgs struct {
	// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition pulumi.StringInput `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas RuleGroupRuleDataArrayInput `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting. Defaults to `Alerting`.
	ExecErrState pulumi.StringPtrInput `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For pulumi.StringPtrInput `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused pulumi.BoolPtrInput `pulumi:"isPaused"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The name of the alert rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to `NoData`.
	NoDataState pulumi.StringPtrInput `pulumi:"noDataState"`
	// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' enabled.
	NotificationSettings RuleGroupRuleNotificationSettingsPtrInput `pulumi:"notificationSettings"`
	// The unique identifier of the alert rule.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return i.ToRuleGroupRuleOutputWithContext(context.Background())
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleOutput)
}

// RuleGroupRuleArrayInput is an input type that accepts RuleGroupRuleArray and RuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleArrayInput` via:
//
//	RuleGroupRuleArray{ RuleGroupRuleArgs{...} }
type RuleGroupRuleArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput
	ToRuleGroupRuleArrayOutputWithContext(context.Context) RuleGroupRuleArrayOutput
}

type RuleGroupRuleArray []RuleGroupRuleInput

func (RuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return i.ToRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleArrayOutput)
}

type RuleGroupRuleOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return o
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return o
}

// Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The `refId` of the query node in the `data` field to use as the alert condition.
func (o RuleGroupRuleOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRule) string { return v.Condition }).(pulumi.StringOutput)
}

// A sequence of stages that describe the contents of the rule.
func (o RuleGroupRuleOutput) Datas() RuleGroupRuleDataArrayOutput {
	return o.ApplyT(func(v RuleGroupRule) []RuleGroupRuleData { return v.Datas }).(RuleGroupRuleDataArrayOutput)
}

// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting. Defaults to `Alerting`.
func (o RuleGroupRuleOutput) ExecErrState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.ExecErrState }).(pulumi.StringPtrOutput)
}

// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
func (o RuleGroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// Sets whether the alert should be paused or not. Defaults to `false`.
func (o RuleGroupRuleOutput) IsPaused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *bool { return v.IsPaused }).(pulumi.BoolPtrOutput)
}

// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The name of the alert rule.
func (o RuleGroupRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRule) string { return v.Name }).(pulumi.StringOutput)
}

// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to `NoData`.
func (o RuleGroupRuleOutput) NoDataState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.NoDataState }).(pulumi.StringPtrOutput)
}

// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' enabled.
func (o RuleGroupRuleOutput) NotificationSettings() RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *RuleGroupRuleNotificationSettings { return v.NotificationSettings }).(RuleGroupRuleNotificationSettingsPtrOutput)
}

// The unique identifier of the alert rule.
func (o RuleGroupRuleOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRule {
		return vs[0].([]RuleGroupRule)[vs[1].(int)]
	}).(RuleGroupRuleOutput)
}

type RuleGroupRuleData struct {
	// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
	DatasourceUid string `pulumi:"datasourceUid"`
	// Custom JSON data to send to the specified datasource when querying.
	Model string `pulumi:"model"`
	// An optional identifier for the type of query being executed. Defaults to ``.
	QueryType *string `pulumi:"queryType"`
	// A unique string to identify this query stage within a rule.
	RefId string `pulumi:"refId"`
	// The time range, relative to when the query is executed, across which to query.
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRange `pulumi:"relativeTimeRange"`
}

// RuleGroupRuleDataInput is an input type that accepts RuleGroupRuleDataArgs and RuleGroupRuleDataOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataInput` via:
//
//	RuleGroupRuleDataArgs{...}
type RuleGroupRuleDataInput interface {
	pulumi.Input

	ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput
	ToRuleGroupRuleDataOutputWithContext(context.Context) RuleGroupRuleDataOutput
}

type RuleGroupRuleDataArgs struct {
	// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
	DatasourceUid pulumi.StringInput `pulumi:"datasourceUid"`
	// Custom JSON data to send to the specified datasource when querying.
	Model pulumi.StringInput `pulumi:"model"`
	// An optional identifier for the type of query being executed. Defaults to ``.
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
	// A unique string to identify this query stage within a rule.
	RefId pulumi.StringInput `pulumi:"refId"`
	// The time range, relative to when the query is executed, across which to query.
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRangeInput `pulumi:"relativeTimeRange"`
}

func (RuleGroupRuleDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return i.ToRuleGroupRuleDataOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataOutput)
}

// RuleGroupRuleDataArrayInput is an input type that accepts RuleGroupRuleDataArray and RuleGroupRuleDataArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataArrayInput` via:
//
//	RuleGroupRuleDataArray{ RuleGroupRuleDataArgs{...} }
type RuleGroupRuleDataArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput
	ToRuleGroupRuleDataArrayOutputWithContext(context.Context) RuleGroupRuleDataArrayOutput
}

type RuleGroupRuleDataArray []RuleGroupRuleDataInput

func (RuleGroupRuleDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return i.ToRuleGroupRuleDataArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataArrayOutput)
}

type RuleGroupRuleDataOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return o
}

// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
func (o RuleGroupRuleDataOutput) DatasourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.DatasourceUid }).(pulumi.StringOutput)
}

// Custom JSON data to send to the specified datasource when querying.
func (o RuleGroupRuleDataOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.Model }).(pulumi.StringOutput)
}

// An optional identifier for the type of query being executed. Defaults to “.
func (o RuleGroupRuleDataOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleData) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

// A unique string to identify this query stage within a rule.
func (o RuleGroupRuleDataOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.RefId }).(pulumi.StringOutput)
}

// The time range, relative to when the query is executed, across which to query.
func (o RuleGroupRuleDataOutput) RelativeTimeRange() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o.ApplyT(func(v RuleGroupRuleData) RuleGroupRuleDataRelativeTimeRange { return v.RelativeTimeRange }).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRuleData {
		return vs[0].([]RuleGroupRuleData)[vs[1].(int)]
	}).(RuleGroupRuleDataOutput)
}

type RuleGroupRuleDataRelativeTimeRange struct {
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
	From int `pulumi:"from"`
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
	To int `pulumi:"to"`
}

// RuleGroupRuleDataRelativeTimeRangeInput is an input type that accepts RuleGroupRuleDataRelativeTimeRangeArgs and RuleGroupRuleDataRelativeTimeRangeOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataRelativeTimeRangeInput` via:
//
//	RuleGroupRuleDataRelativeTimeRangeArgs{...}
type RuleGroupRuleDataRelativeTimeRangeInput interface {
	pulumi.Input

	ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput
	ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Context) RuleGroupRuleDataRelativeTimeRangeOutput
}

type RuleGroupRuleDataRelativeTimeRangeArgs struct {
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
	From pulumi.IntInput `pulumi:"from"`
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
	To pulumi.IntInput `pulumi:"to"`
}

func (RuleGroupRuleDataRelativeTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return i.ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataRelativeTimeRangeOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataRelativeTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
func (o RuleGroupRuleDataRelativeTimeRangeOutput) From() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.From }).(pulumi.IntOutput)
}

// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
func (o RuleGroupRuleDataRelativeTimeRangeOutput) To() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.To }).(pulumi.IntOutput)
}

type RuleGroupRuleNotificationSettings struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// RuleGroupRuleNotificationSettingsInput is an input type that accepts RuleGroupRuleNotificationSettingsArgs and RuleGroupRuleNotificationSettingsOutput values.
// You can construct a concrete instance of `RuleGroupRuleNotificationSettingsInput` via:
//
//	RuleGroupRuleNotificationSettingsArgs{...}
type RuleGroupRuleNotificationSettingsInput interface {
	pulumi.Input

	ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput
	ToRuleGroupRuleNotificationSettingsOutputWithContext(context.Context) RuleGroupRuleNotificationSettingsOutput
}

type RuleGroupRuleNotificationSettingsArgs struct {
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (RuleGroupRuleNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput {
	return i.ToRuleGroupRuleNotificationSettingsOutputWithContext(context.Background())
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsOutput)
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return i.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsOutput).ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx)
}

// RuleGroupRuleNotificationSettingsPtrInput is an input type that accepts RuleGroupRuleNotificationSettingsArgs, RuleGroupRuleNotificationSettingsPtr and RuleGroupRuleNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `RuleGroupRuleNotificationSettingsPtrInput` via:
//
//	        RuleGroupRuleNotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type RuleGroupRuleNotificationSettingsPtrInput interface {
	pulumi.Input

	ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput
	ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Context) RuleGroupRuleNotificationSettingsPtrOutput
}

type ruleGroupRuleNotificationSettingsPtrType RuleGroupRuleNotificationSettingsArgs

func RuleGroupRuleNotificationSettingsPtr(v *RuleGroupRuleNotificationSettingsArgs) RuleGroupRuleNotificationSettingsPtrInput {
	return (*ruleGroupRuleNotificationSettingsPtrType)(v)
}

func (*ruleGroupRuleNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (i *ruleGroupRuleNotificationSettingsPtrType) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return i.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *ruleGroupRuleNotificationSettingsPtrType) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsPtrOutput)
}

type RuleGroupRuleNotificationSettingsOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleGroupRuleNotificationSettings) *RuleGroupRuleNotificationSettings {
		return &v
	}).(RuleGroupRuleNotificationSettingsPtrOutput)
}

// The contact point to route notifications that match this rule to.
func (o RuleGroupRuleNotificationSettingsOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
func (o RuleGroupRuleNotificationSettingsOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o RuleGroupRuleNotificationSettingsOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o RuleGroupRuleNotificationSettingsOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o RuleGroupRuleNotificationSettingsOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o RuleGroupRuleNotificationSettingsOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) Elem() RuleGroupRuleNotificationSettingsOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) RuleGroupRuleNotificationSettings {
		if v != nil {
			return *v
		}
		var ret RuleGroupRuleNotificationSettings
		return ret
	}).(RuleGroupRuleNotificationSettingsOutput)
}

// The contact point to route notifications that match this rule to.
func (o RuleGroupRuleNotificationSettingsPtrOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ContactPoint
	}).(pulumi.StringPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.GroupBies
	}).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupInterval
	}).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupWait
	}).(pulumi.StringPtrOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o RuleGroupRuleNotificationSettingsPtrOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.MuteTimings
	}).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o RuleGroupRuleNotificationSettingsPtrOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.RepeatInterval
	}).(pulumi.StringPtrOutput)
}

type SLOAlerting struct {
	// Advanced Options for Alert Rules
	AdvancedOptions *SLOAlertingAdvancedOptions `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []SLOAlertingAnnotation `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns []SLOAlertingFastburn `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels []SLOAlertingLabel `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns []SLOAlertingSlowburn `pulumi:"slowburns"`
}

// SLOAlertingInput is an input type that accepts SLOAlertingArgs and SLOAlertingOutput values.
// You can construct a concrete instance of `SLOAlertingInput` via:
//
//	SLOAlertingArgs{...}
type SLOAlertingInput interface {
	pulumi.Input

	ToSLOAlertingOutput() SLOAlertingOutput
	ToSLOAlertingOutputWithContext(context.Context) SLOAlertingOutput
}

type SLOAlertingArgs struct {
	// Advanced Options for Alert Rules
	AdvancedOptions SLOAlertingAdvancedOptionsPtrInput `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations SLOAlertingAnnotationArrayInput `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns SLOAlertingFastburnArrayInput `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels SLOAlertingLabelArrayInput `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns SLOAlertingSlowburnArrayInput `pulumi:"slowburns"`
}

func (SLOAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (i SLOAlertingArgs) ToSLOAlertingOutput() SLOAlertingOutput {
	return i.ToSLOAlertingOutputWithContext(context.Background())
}

func (i SLOAlertingArgs) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingOutput)
}

// SLOAlertingArrayInput is an input type that accepts SLOAlertingArray and SLOAlertingArrayOutput values.
// You can construct a concrete instance of `SLOAlertingArrayInput` via:
//
//	SLOAlertingArray{ SLOAlertingArgs{...} }
type SLOAlertingArrayInput interface {
	pulumi.Input

	ToSLOAlertingArrayOutput() SLOAlertingArrayOutput
	ToSLOAlertingArrayOutputWithContext(context.Context) SLOAlertingArrayOutput
}

type SLOAlertingArray []SLOAlertingInput

func (SLOAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlerting)(nil)).Elem()
}

func (i SLOAlertingArray) ToSLOAlertingArrayOutput() SLOAlertingArrayOutput {
	return i.ToSLOAlertingArrayOutputWithContext(context.Background())
}

func (i SLOAlertingArray) ToSLOAlertingArrayOutputWithContext(ctx context.Context) SLOAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingArrayOutput)
}

type SLOAlertingOutput struct{ *pulumi.OutputState }

func (SLOAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (o SLOAlertingOutput) ToSLOAlertingOutput() SLOAlertingOutput {
	return o
}

func (o SLOAlertingOutput) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return o
}

// Advanced Options for Alert Rules
func (o SLOAlertingOutput) AdvancedOptions() SLOAlertingAdvancedOptionsPtrOutput {
	return o.ApplyT(func(v SLOAlerting) *SLOAlertingAdvancedOptions { return v.AdvancedOptions }).(SLOAlertingAdvancedOptionsPtrOutput)
}

// Annotations will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Annotations() SLOAlertingAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingAnnotation { return v.Annotations }).(SLOAlertingAnnotationArrayOutput)
}

// Alerting Rules generated for Fast Burn alerts
func (o SLOAlertingOutput) Fastburns() SLOAlertingFastburnArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingFastburn { return v.Fastburns }).(SLOAlertingFastburnArrayOutput)
}

// Labels will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Labels() SLOAlertingLabelArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingLabel { return v.Labels }).(SLOAlertingLabelArrayOutput)
}

// Alerting Rules generated for Slow Burn alerts
func (o SLOAlertingOutput) Slowburns() SLOAlertingSlowburnArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingSlowburn { return v.Slowburns }).(SLOAlertingSlowburnArrayOutput)
}

type SLOAlertingArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlerting)(nil)).Elem()
}

func (o SLOAlertingArrayOutput) ToSLOAlertingArrayOutput() SLOAlertingArrayOutput {
	return o
}

func (o SLOAlertingArrayOutput) ToSLOAlertingArrayOutputWithContext(ctx context.Context) SLOAlertingArrayOutput {
	return o
}

func (o SLOAlertingArrayOutput) Index(i pulumi.IntInput) SLOAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlerting {
		return vs[0].([]SLOAlerting)[vs[1].(int)]
	}).(SLOAlertingOutput)
}

type SLOAlertingAdvancedOptions struct {
	// Minimum number of failed events to trigger an alert
	MinFailures *int `pulumi:"minFailures"`
}

// SLOAlertingAdvancedOptionsInput is an input type that accepts SLOAlertingAdvancedOptionsArgs and SLOAlertingAdvancedOptionsOutput values.
// You can construct a concrete instance of `SLOAlertingAdvancedOptionsInput` via:
//
//	SLOAlertingAdvancedOptionsArgs{...}
type SLOAlertingAdvancedOptionsInput interface {
	pulumi.Input

	ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput
	ToSLOAlertingAdvancedOptionsOutputWithContext(context.Context) SLOAlertingAdvancedOptionsOutput
}

type SLOAlertingAdvancedOptionsArgs struct {
	// Minimum number of failed events to trigger an alert
	MinFailures pulumi.IntPtrInput `pulumi:"minFailures"`
}

func (SLOAlertingAdvancedOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput {
	return i.ToSLOAlertingAdvancedOptionsOutputWithContext(context.Background())
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsOutput)
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return i.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsOutput).ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx)
}

// SLOAlertingAdvancedOptionsPtrInput is an input type that accepts SLOAlertingAdvancedOptionsArgs, SLOAlertingAdvancedOptionsPtr and SLOAlertingAdvancedOptionsPtrOutput values.
// You can construct a concrete instance of `SLOAlertingAdvancedOptionsPtrInput` via:
//
//	        SLOAlertingAdvancedOptionsArgs{...}
//
//	or:
//
//	        nil
type SLOAlertingAdvancedOptionsPtrInput interface {
	pulumi.Input

	ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput
	ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Context) SLOAlertingAdvancedOptionsPtrOutput
}

type sloalertingAdvancedOptionsPtrType SLOAlertingAdvancedOptionsArgs

func SLOAlertingAdvancedOptionsPtr(v *SLOAlertingAdvancedOptionsArgs) SLOAlertingAdvancedOptionsPtrInput {
	return (*sloalertingAdvancedOptionsPtrType)(v)
}

func (*sloalertingAdvancedOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (i *sloalertingAdvancedOptionsPtrType) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return i.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i *sloalertingAdvancedOptionsPtrType) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsPtrOutput)
}

type SLOAlertingAdvancedOptionsOutput struct{ *pulumi.OutputState }

func (SLOAlertingAdvancedOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return o.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOAlertingAdvancedOptions) *SLOAlertingAdvancedOptions {
		return &v
	}).(SLOAlertingAdvancedOptionsPtrOutput)
}

// Minimum number of failed events to trigger an alert
func (o SLOAlertingAdvancedOptionsOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLOAlertingAdvancedOptions) *int { return v.MinFailures }).(pulumi.IntPtrOutput)
}

type SLOAlertingAdvancedOptionsPtrOutput struct{ *pulumi.OutputState }

func (SLOAlertingAdvancedOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (o SLOAlertingAdvancedOptionsPtrOutput) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsPtrOutput) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsPtrOutput) Elem() SLOAlertingAdvancedOptionsOutput {
	return o.ApplyT(func(v *SLOAlertingAdvancedOptions) SLOAlertingAdvancedOptions {
		if v != nil {
			return *v
		}
		var ret SLOAlertingAdvancedOptions
		return ret
	}).(SLOAlertingAdvancedOptionsOutput)
}

// Minimum number of failed events to trigger an alert
func (o SLOAlertingAdvancedOptionsPtrOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SLOAlertingAdvancedOptions) *int {
		if v == nil {
			return nil
		}
		return v.MinFailures
	}).(pulumi.IntPtrOutput)
}

type SLOAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingAnnotationInput is an input type that accepts SLOAlertingAnnotationArgs and SLOAlertingAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingAnnotationInput` via:
//
//	SLOAlertingAnnotationArgs{...}
type SLOAlertingAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput
	ToSLOAlertingAnnotationOutputWithContext(context.Context) SLOAlertingAnnotationOutput
}

type SLOAlertingAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return i.ToSLOAlertingAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAnnotationOutput)
}

// SLOAlertingAnnotationArrayInput is an input type that accepts SLOAlertingAnnotationArray and SLOAlertingAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingAnnotationArrayInput` via:
//
//	SLOAlertingAnnotationArray{ SLOAlertingAnnotationArgs{...} }
type SLOAlertingAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput
	ToSLOAlertingAnnotationArrayOutputWithContext(context.Context) SLOAlertingAnnotationArrayOutput
}

type SLOAlertingAnnotationArray []SLOAlertingAnnotationInput

func (SLOAlertingAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingAnnotation)(nil)).Elem()
}

func (i SLOAlertingAnnotationArray) ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput {
	return i.ToSLOAlertingAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingAnnotationArray) ToSLOAlertingAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAnnotationArrayOutput)
}

type SLOAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingAnnotation)(nil)).Elem()
}

func (o SLOAlertingAnnotationArrayOutput) ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput {
	return o
}

func (o SLOAlertingAnnotationArrayOutput) ToSLOAlertingAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingAnnotationArrayOutput {
	return o
}

func (o SLOAlertingAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingAnnotation {
		return vs[0].([]SLOAlertingAnnotation)[vs[1].(int)]
	}).(SLOAlertingAnnotationOutput)
}

type SLOAlertingFastburn struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations []SLOAlertingFastburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels []SLOAlertingFastburnLabel `pulumi:"labels"`
}

// SLOAlertingFastburnInput is an input type that accepts SLOAlertingFastburnArgs and SLOAlertingFastburnOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnInput` via:
//
//	SLOAlertingFastburnArgs{...}
type SLOAlertingFastburnInput interface {
	pulumi.Input

	ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput
	ToSLOAlertingFastburnOutputWithContext(context.Context) SLOAlertingFastburnOutput
}

type SLOAlertingFastburnArgs struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations SLOAlertingFastburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels SLOAlertingFastburnLabelArrayInput `pulumi:"labels"`
}

func (SLOAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return i.ToSLOAlertingFastburnOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnOutput)
}

// SLOAlertingFastburnArrayInput is an input type that accepts SLOAlertingFastburnArray and SLOAlertingFastburnArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnArrayInput` via:
//
//	SLOAlertingFastburnArray{ SLOAlertingFastburnArgs{...} }
type SLOAlertingFastburnArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput
	ToSLOAlertingFastburnArrayOutputWithContext(context.Context) SLOAlertingFastburnArrayOutput
}

type SLOAlertingFastburnArray []SLOAlertingFastburnInput

func (SLOAlertingFastburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburn)(nil)).Elem()
}

func (i SLOAlertingFastburnArray) ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput {
	return i.ToSLOAlertingFastburnArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnArray) ToSLOAlertingFastburnArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnArrayOutput)
}

type SLOAlertingFastburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return o
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return o
}

// Annotations to attach only to Fast Burn alerts.
func (o SLOAlertingFastburnOutput) Annotations() SLOAlertingFastburnAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlertingFastburn) []SLOAlertingFastburnAnnotation { return v.Annotations }).(SLOAlertingFastburnAnnotationArrayOutput)
}

// Labels to attach only to Fast Burn alerts.
func (o SLOAlertingFastburnOutput) Labels() SLOAlertingFastburnLabelArrayOutput {
	return o.ApplyT(func(v SLOAlertingFastburn) []SLOAlertingFastburnLabel { return v.Labels }).(SLOAlertingFastburnLabelArrayOutput)
}

type SLOAlertingFastburnArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburn)(nil)).Elem()
}

func (o SLOAlertingFastburnArrayOutput) ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput {
	return o
}

func (o SLOAlertingFastburnArrayOutput) ToSLOAlertingFastburnArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnArrayOutput {
	return o
}

func (o SLOAlertingFastburnArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburn {
		return vs[0].([]SLOAlertingFastburn)[vs[1].(int)]
	}).(SLOAlertingFastburnOutput)
}

type SLOAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingFastburnAnnotationInput is an input type that accepts SLOAlertingFastburnAnnotationArgs and SLOAlertingFastburnAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnAnnotationInput` via:
//
//	SLOAlertingFastburnAnnotationArgs{...}
type SLOAlertingFastburnAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput
	ToSLOAlertingFastburnAnnotationOutputWithContext(context.Context) SLOAlertingFastburnAnnotationOutput
}

type SLOAlertingFastburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return i.ToSLOAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnAnnotationOutput)
}

// SLOAlertingFastburnAnnotationArrayInput is an input type that accepts SLOAlertingFastburnAnnotationArray and SLOAlertingFastburnAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnAnnotationArrayInput` via:
//
//	SLOAlertingFastburnAnnotationArray{ SLOAlertingFastburnAnnotationArgs{...} }
type SLOAlertingFastburnAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput
	ToSLOAlertingFastburnAnnotationArrayOutputWithContext(context.Context) SLOAlertingFastburnAnnotationArrayOutput
}

type SLOAlertingFastburnAnnotationArray []SLOAlertingFastburnAnnotationInput

func (SLOAlertingFastburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingFastburnAnnotationArray) ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput {
	return i.ToSLOAlertingFastburnAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnAnnotationArray) ToSLOAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnAnnotationArrayOutput)
}

type SLOAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingFastburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingFastburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingFastburnAnnotationArrayOutput) ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationArrayOutput) ToSLOAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburnAnnotation {
		return vs[0].([]SLOAlertingFastburnAnnotation)[vs[1].(int)]
	}).(SLOAlertingFastburnAnnotationOutput)
}

type SLOAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingFastburnLabelInput is an input type that accepts SLOAlertingFastburnLabelArgs and SLOAlertingFastburnLabelOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnLabelInput` via:
//
//	SLOAlertingFastburnLabelArgs{...}
type SLOAlertingFastburnLabelInput interface {
	pulumi.Input

	ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput
	ToSLOAlertingFastburnLabelOutputWithContext(context.Context) SLOAlertingFastburnLabelOutput
}

type SLOAlertingFastburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return i.ToSLOAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnLabelOutput)
}

// SLOAlertingFastburnLabelArrayInput is an input type that accepts SLOAlertingFastburnLabelArray and SLOAlertingFastburnLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnLabelArrayInput` via:
//
//	SLOAlertingFastburnLabelArray{ SLOAlertingFastburnLabelArgs{...} }
type SLOAlertingFastburnLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput
	ToSLOAlertingFastburnLabelArrayOutputWithContext(context.Context) SLOAlertingFastburnLabelArrayOutput
}

type SLOAlertingFastburnLabelArray []SLOAlertingFastburnLabelInput

func (SLOAlertingFastburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnLabel)(nil)).Elem()
}

func (i SLOAlertingFastburnLabelArray) ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput {
	return i.ToSLOAlertingFastburnLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnLabelArray) ToSLOAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnLabelArrayOutput)
}

type SLOAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingFastburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingFastburnLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnLabel)(nil)).Elem()
}

func (o SLOAlertingFastburnLabelArrayOutput) ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput {
	return o
}

func (o SLOAlertingFastburnLabelArrayOutput) ToSLOAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelArrayOutput {
	return o
}

func (o SLOAlertingFastburnLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburnLabel {
		return vs[0].([]SLOAlertingFastburnLabel)[vs[1].(int)]
	}).(SLOAlertingFastburnLabelOutput)
}

type SLOAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingLabelInput is an input type that accepts SLOAlertingLabelArgs and SLOAlertingLabelOutput values.
// You can construct a concrete instance of `SLOAlertingLabelInput` via:
//
//	SLOAlertingLabelArgs{...}
type SLOAlertingLabelInput interface {
	pulumi.Input

	ToSLOAlertingLabelOutput() SLOAlertingLabelOutput
	ToSLOAlertingLabelOutputWithContext(context.Context) SLOAlertingLabelOutput
}

type SLOAlertingLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return i.ToSLOAlertingLabelOutputWithContext(context.Background())
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingLabelOutput)
}

// SLOAlertingLabelArrayInput is an input type that accepts SLOAlertingLabelArray and SLOAlertingLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingLabelArrayInput` via:
//
//	SLOAlertingLabelArray{ SLOAlertingLabelArgs{...} }
type SLOAlertingLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput
	ToSLOAlertingLabelArrayOutputWithContext(context.Context) SLOAlertingLabelArrayOutput
}

type SLOAlertingLabelArray []SLOAlertingLabelInput

func (SLOAlertingLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingLabel)(nil)).Elem()
}

func (i SLOAlertingLabelArray) ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput {
	return i.ToSLOAlertingLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingLabelArray) ToSLOAlertingLabelArrayOutputWithContext(ctx context.Context) SLOAlertingLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingLabelArrayOutput)
}

type SLOAlertingLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingLabel)(nil)).Elem()
}

func (o SLOAlertingLabelArrayOutput) ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput {
	return o
}

func (o SLOAlertingLabelArrayOutput) ToSLOAlertingLabelArrayOutputWithContext(ctx context.Context) SLOAlertingLabelArrayOutput {
	return o
}

func (o SLOAlertingLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingLabel {
		return vs[0].([]SLOAlertingLabel)[vs[1].(int)]
	}).(SLOAlertingLabelOutput)
}

type SLOAlertingSlowburn struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations []SLOAlertingSlowburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels []SLOAlertingSlowburnLabel `pulumi:"labels"`
}

// SLOAlertingSlowburnInput is an input type that accepts SLOAlertingSlowburnArgs and SLOAlertingSlowburnOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnInput` via:
//
//	SLOAlertingSlowburnArgs{...}
type SLOAlertingSlowburnInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput
	ToSLOAlertingSlowburnOutputWithContext(context.Context) SLOAlertingSlowburnOutput
}

type SLOAlertingSlowburnArgs struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations SLOAlertingSlowburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels SLOAlertingSlowburnLabelArrayInput `pulumi:"labels"`
}

func (SLOAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return i.ToSLOAlertingSlowburnOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnOutput)
}

// SLOAlertingSlowburnArrayInput is an input type that accepts SLOAlertingSlowburnArray and SLOAlertingSlowburnArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnArrayInput` via:
//
//	SLOAlertingSlowburnArray{ SLOAlertingSlowburnArgs{...} }
type SLOAlertingSlowburnArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput
	ToSLOAlertingSlowburnArrayOutputWithContext(context.Context) SLOAlertingSlowburnArrayOutput
}

type SLOAlertingSlowburnArray []SLOAlertingSlowburnInput

func (SLOAlertingSlowburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburn)(nil)).Elem()
}

func (i SLOAlertingSlowburnArray) ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput {
	return i.ToSLOAlertingSlowburnArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnArray) ToSLOAlertingSlowburnArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnArrayOutput)
}

type SLOAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return o
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return o
}

// Annotations to attach only to Slow Burn alerts.
func (o SLOAlertingSlowburnOutput) Annotations() SLOAlertingSlowburnAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlertingSlowburn) []SLOAlertingSlowburnAnnotation { return v.Annotations }).(SLOAlertingSlowburnAnnotationArrayOutput)
}

// Labels to attach only to Slow Burn alerts.
func (o SLOAlertingSlowburnOutput) Labels() SLOAlertingSlowburnLabelArrayOutput {
	return o.ApplyT(func(v SLOAlertingSlowburn) []SLOAlertingSlowburnLabel { return v.Labels }).(SLOAlertingSlowburnLabelArrayOutput)
}

type SLOAlertingSlowburnArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburn)(nil)).Elem()
}

func (o SLOAlertingSlowburnArrayOutput) ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput {
	return o
}

func (o SLOAlertingSlowburnArrayOutput) ToSLOAlertingSlowburnArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnArrayOutput {
	return o
}

func (o SLOAlertingSlowburnArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburn {
		return vs[0].([]SLOAlertingSlowburn)[vs[1].(int)]
	}).(SLOAlertingSlowburnOutput)
}

type SLOAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingSlowburnAnnotationInput is an input type that accepts SLOAlertingSlowburnAnnotationArgs and SLOAlertingSlowburnAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnAnnotationInput` via:
//
//	SLOAlertingSlowburnAnnotationArgs{...}
type SLOAlertingSlowburnAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput
	ToSLOAlertingSlowburnAnnotationOutputWithContext(context.Context) SLOAlertingSlowburnAnnotationOutput
}

type SLOAlertingSlowburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return i.ToSLOAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnAnnotationOutput)
}

// SLOAlertingSlowburnAnnotationArrayInput is an input type that accepts SLOAlertingSlowburnAnnotationArray and SLOAlertingSlowburnAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnAnnotationArrayInput` via:
//
//	SLOAlertingSlowburnAnnotationArray{ SLOAlertingSlowburnAnnotationArgs{...} }
type SLOAlertingSlowburnAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput
	ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(context.Context) SLOAlertingSlowburnAnnotationArrayOutput
}

type SLOAlertingSlowburnAnnotationArray []SLOAlertingSlowburnAnnotationInput

func (SLOAlertingSlowburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingSlowburnAnnotationArray) ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput {
	return i.ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnAnnotationArray) ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnAnnotationArrayOutput)
}

type SLOAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingSlowburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingSlowburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburnAnnotation {
		return vs[0].([]SLOAlertingSlowburnAnnotation)[vs[1].(int)]
	}).(SLOAlertingSlowburnAnnotationOutput)
}

type SLOAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingSlowburnLabelInput is an input type that accepts SLOAlertingSlowburnLabelArgs and SLOAlertingSlowburnLabelOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnLabelInput` via:
//
//	SLOAlertingSlowburnLabelArgs{...}
type SLOAlertingSlowburnLabelInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput
	ToSLOAlertingSlowburnLabelOutputWithContext(context.Context) SLOAlertingSlowburnLabelOutput
}

type SLOAlertingSlowburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return i.ToSLOAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnLabelOutput)
}

// SLOAlertingSlowburnLabelArrayInput is an input type that accepts SLOAlertingSlowburnLabelArray and SLOAlertingSlowburnLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnLabelArrayInput` via:
//
//	SLOAlertingSlowburnLabelArray{ SLOAlertingSlowburnLabelArgs{...} }
type SLOAlertingSlowburnLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput
	ToSLOAlertingSlowburnLabelArrayOutputWithContext(context.Context) SLOAlertingSlowburnLabelArrayOutput
}

type SLOAlertingSlowburnLabelArray []SLOAlertingSlowburnLabelInput

func (SLOAlertingSlowburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (i SLOAlertingSlowburnLabelArray) ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput {
	return i.ToSLOAlertingSlowburnLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnLabelArray) ToSLOAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnLabelArrayOutput)
}

type SLOAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingSlowburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingSlowburnLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (o SLOAlertingSlowburnLabelArrayOutput) ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput {
	return o
}

func (o SLOAlertingSlowburnLabelArrayOutput) ToSLOAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelArrayOutput {
	return o
}

func (o SLOAlertingSlowburnLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburnLabel {
		return vs[0].([]SLOAlertingSlowburnLabel)[vs[1].(int)]
	}).(SLOAlertingSlowburnLabelOutput)
}

type SLODestinationDatasource struct {
	// UID for the Mimir Datasource
	Uid *string `pulumi:"uid"`
}

// SLODestinationDatasourceInput is an input type that accepts SLODestinationDatasourceArgs and SLODestinationDatasourceOutput values.
// You can construct a concrete instance of `SLODestinationDatasourceInput` via:
//
//	SLODestinationDatasourceArgs{...}
type SLODestinationDatasourceInput interface {
	pulumi.Input

	ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput
	ToSLODestinationDatasourceOutputWithContext(context.Context) SLODestinationDatasourceOutput
}

type SLODestinationDatasourceArgs struct {
	// UID for the Mimir Datasource
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (SLODestinationDatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLODestinationDatasource)(nil)).Elem()
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput {
	return i.ToSLODestinationDatasourceOutputWithContext(context.Background())
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourceOutputWithContext(ctx context.Context) SLODestinationDatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourceOutput)
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return i.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourceOutput).ToSLODestinationDatasourcePtrOutputWithContext(ctx)
}

// SLODestinationDatasourcePtrInput is an input type that accepts SLODestinationDatasourceArgs, SLODestinationDatasourcePtr and SLODestinationDatasourcePtrOutput values.
// You can construct a concrete instance of `SLODestinationDatasourcePtrInput` via:
//
//	        SLODestinationDatasourceArgs{...}
//
//	or:
//
//	        nil
type SLODestinationDatasourcePtrInput interface {
	pulumi.Input

	ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput
	ToSLODestinationDatasourcePtrOutputWithContext(context.Context) SLODestinationDatasourcePtrOutput
}

type slodestinationDatasourcePtrType SLODestinationDatasourceArgs

func SLODestinationDatasourcePtr(v *SLODestinationDatasourceArgs) SLODestinationDatasourcePtrInput {
	return (*slodestinationDatasourcePtrType)(v)
}

func (*slodestinationDatasourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLODestinationDatasource)(nil)).Elem()
}

func (i *slodestinationDatasourcePtrType) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return i.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (i *slodestinationDatasourcePtrType) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourcePtrOutput)
}

type SLODestinationDatasourceOutput struct{ *pulumi.OutputState }

func (SLODestinationDatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLODestinationDatasource)(nil)).Elem()
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput {
	return o
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourceOutputWithContext(ctx context.Context) SLODestinationDatasourceOutput {
	return o
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return o.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLODestinationDatasource) *SLODestinationDatasource {
		return &v
	}).(SLODestinationDatasourcePtrOutput)
}

// UID for the Mimir Datasource
func (o SLODestinationDatasourceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SLODestinationDatasource) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type SLODestinationDatasourcePtrOutput struct{ *pulumi.OutputState }

func (SLODestinationDatasourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLODestinationDatasource)(nil)).Elem()
}

func (o SLODestinationDatasourcePtrOutput) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return o
}

func (o SLODestinationDatasourcePtrOutput) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return o
}

func (o SLODestinationDatasourcePtrOutput) Elem() SLODestinationDatasourceOutput {
	return o.ApplyT(func(v *SLODestinationDatasource) SLODestinationDatasource {
		if v != nil {
			return *v
		}
		var ret SLODestinationDatasource
		return ret
	}).(SLODestinationDatasourceOutput)
}

// UID for the Mimir Datasource
func (o SLODestinationDatasourcePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLODestinationDatasource) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type SLOLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOLabelInput is an input type that accepts SLOLabelArgs and SLOLabelOutput values.
// You can construct a concrete instance of `SLOLabelInput` via:
//
//	SLOLabelArgs{...}
type SLOLabelInput interface {
	pulumi.Input

	ToSLOLabelOutput() SLOLabelOutput
	ToSLOLabelOutputWithContext(context.Context) SLOLabelOutput
}

type SLOLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (i SLOLabelArgs) ToSLOLabelOutput() SLOLabelOutput {
	return i.ToSLOLabelOutputWithContext(context.Background())
}

func (i SLOLabelArgs) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOLabelOutput)
}

// SLOLabelArrayInput is an input type that accepts SLOLabelArray and SLOLabelArrayOutput values.
// You can construct a concrete instance of `SLOLabelArrayInput` via:
//
//	SLOLabelArray{ SLOLabelArgs{...} }
type SLOLabelArrayInput interface {
	pulumi.Input

	ToSLOLabelArrayOutput() SLOLabelArrayOutput
	ToSLOLabelArrayOutputWithContext(context.Context) SLOLabelArrayOutput
}

type SLOLabelArray []SLOLabelInput

func (SLOLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOLabel)(nil)).Elem()
}

func (i SLOLabelArray) ToSLOLabelArrayOutput() SLOLabelArrayOutput {
	return i.ToSLOLabelArrayOutputWithContext(context.Background())
}

func (i SLOLabelArray) ToSLOLabelArrayOutputWithContext(ctx context.Context) SLOLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOLabelArrayOutput)
}

type SLOLabelOutput struct{ *pulumi.OutputState }

func (SLOLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (o SLOLabelOutput) ToSLOLabelOutput() SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOLabel)(nil)).Elem()
}

func (o SLOLabelArrayOutput) ToSLOLabelArrayOutput() SLOLabelArrayOutput {
	return o
}

func (o SLOLabelArrayOutput) ToSLOLabelArrayOutputWithContext(ctx context.Context) SLOLabelArrayOutput {
	return o
}

func (o SLOLabelArrayOutput) Index(i pulumi.IntInput) SLOLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOLabel {
		return vs[0].([]SLOLabel)[vs[1].(int)]
	}).(SLOLabelOutput)
}

type SLOObjective struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value float64 `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window string `pulumi:"window"`
}

// SLOObjectiveInput is an input type that accepts SLOObjectiveArgs and SLOObjectiveOutput values.
// You can construct a concrete instance of `SLOObjectiveInput` via:
//
//	SLOObjectiveArgs{...}
type SLOObjectiveInput interface {
	pulumi.Input

	ToSLOObjectiveOutput() SLOObjectiveOutput
	ToSLOObjectiveOutputWithContext(context.Context) SLOObjectiveOutput
}

type SLOObjectiveArgs struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value pulumi.Float64Input `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window pulumi.StringInput `pulumi:"window"`
}

func (SLOObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return i.ToSLOObjectiveOutputWithContext(context.Background())
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOObjectiveOutput)
}

// SLOObjectiveArrayInput is an input type that accepts SLOObjectiveArray and SLOObjectiveArrayOutput values.
// You can construct a concrete instance of `SLOObjectiveArrayInput` via:
//
//	SLOObjectiveArray{ SLOObjectiveArgs{...} }
type SLOObjectiveArrayInput interface {
	pulumi.Input

	ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput
	ToSLOObjectiveArrayOutputWithContext(context.Context) SLOObjectiveArrayOutput
}

type SLOObjectiveArray []SLOObjectiveInput

func (SLOObjectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOObjective)(nil)).Elem()
}

func (i SLOObjectiveArray) ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput {
	return i.ToSLOObjectiveArrayOutputWithContext(context.Background())
}

func (i SLOObjectiveArray) ToSLOObjectiveArrayOutputWithContext(ctx context.Context) SLOObjectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOObjectiveArrayOutput)
}

type SLOObjectiveOutput struct{ *pulumi.OutputState }

func (SLOObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return o
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return o
}

// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
func (o SLOObjectiveOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SLOObjective) float64 { return v.Value }).(pulumi.Float64Output)
}

// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
func (o SLOObjectiveOutput) Window() pulumi.StringOutput {
	return o.ApplyT(func(v SLOObjective) string { return v.Window }).(pulumi.StringOutput)
}

type SLOObjectiveArrayOutput struct{ *pulumi.OutputState }

func (SLOObjectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOObjective)(nil)).Elem()
}

func (o SLOObjectiveArrayOutput) ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput {
	return o
}

func (o SLOObjectiveArrayOutput) ToSLOObjectiveArrayOutputWithContext(ctx context.Context) SLOObjectiveArrayOutput {
	return o
}

func (o SLOObjectiveArrayOutput) Index(i pulumi.IntInput) SLOObjectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOObjective {
		return vs[0].([]SLOObjective)[vs[1].(int)]
	}).(SLOObjectiveOutput)
}

type SLOQuery struct {
	Freeform *SLOQueryFreeform `pulumi:"freeform"`
	Ratio    *SLOQueryRatio    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type string `pulumi:"type"`
}

// SLOQueryInput is an input type that accepts SLOQueryArgs and SLOQueryOutput values.
// You can construct a concrete instance of `SLOQueryInput` via:
//
//	SLOQueryArgs{...}
type SLOQueryInput interface {
	pulumi.Input

	ToSLOQueryOutput() SLOQueryOutput
	ToSLOQueryOutputWithContext(context.Context) SLOQueryOutput
}

type SLOQueryArgs struct {
	Freeform SLOQueryFreeformPtrInput `pulumi:"freeform"`
	Ratio    SLOQueryRatioPtrInput    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type pulumi.StringInput `pulumi:"type"`
}

func (SLOQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (i SLOQueryArgs) ToSLOQueryOutput() SLOQueryOutput {
	return i.ToSLOQueryOutputWithContext(context.Background())
}

func (i SLOQueryArgs) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryOutput)
}

// SLOQueryArrayInput is an input type that accepts SLOQueryArray and SLOQueryArrayOutput values.
// You can construct a concrete instance of `SLOQueryArrayInput` via:
//
//	SLOQueryArray{ SLOQueryArgs{...} }
type SLOQueryArrayInput interface {
	pulumi.Input

	ToSLOQueryArrayOutput() SLOQueryArrayOutput
	ToSLOQueryArrayOutputWithContext(context.Context) SLOQueryArrayOutput
}

type SLOQueryArray []SLOQueryInput

func (SLOQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOQuery)(nil)).Elem()
}

func (i SLOQueryArray) ToSLOQueryArrayOutput() SLOQueryArrayOutput {
	return i.ToSLOQueryArrayOutputWithContext(context.Background())
}

func (i SLOQueryArray) ToSLOQueryArrayOutputWithContext(ctx context.Context) SLOQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryArrayOutput)
}

type SLOQueryOutput struct{ *pulumi.OutputState }

func (SLOQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (o SLOQueryOutput) ToSLOQueryOutput() SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) Freeform() SLOQueryFreeformPtrOutput {
	return o.ApplyT(func(v SLOQuery) *SLOQueryFreeform { return v.Freeform }).(SLOQueryFreeformPtrOutput)
}

func (o SLOQueryOutput) Ratio() SLOQueryRatioPtrOutput {
	return o.ApplyT(func(v SLOQuery) *SLOQueryRatio { return v.Ratio }).(SLOQueryRatioPtrOutput)
}

// Query type must be one of: "freeform", "query", "ratio", or "threshold"
func (o SLOQueryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQuery) string { return v.Type }).(pulumi.StringOutput)
}

type SLOQueryArrayOutput struct{ *pulumi.OutputState }

func (SLOQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOQuery)(nil)).Elem()
}

func (o SLOQueryArrayOutput) ToSLOQueryArrayOutput() SLOQueryArrayOutput {
	return o
}

func (o SLOQueryArrayOutput) ToSLOQueryArrayOutputWithContext(ctx context.Context) SLOQueryArrayOutput {
	return o
}

func (o SLOQueryArrayOutput) Index(i pulumi.IntInput) SLOQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOQuery {
		return vs[0].([]SLOQuery)[vs[1].(int)]
	}).(SLOQueryOutput)
}

type SLOQueryFreeform struct {
	// Freeform Query Field
	Query string `pulumi:"query"`
}

// SLOQueryFreeformInput is an input type that accepts SLOQueryFreeformArgs and SLOQueryFreeformOutput values.
// You can construct a concrete instance of `SLOQueryFreeformInput` via:
//
//	SLOQueryFreeformArgs{...}
type SLOQueryFreeformInput interface {
	pulumi.Input

	ToSLOQueryFreeformOutput() SLOQueryFreeformOutput
	ToSLOQueryFreeformOutputWithContext(context.Context) SLOQueryFreeformOutput
}

type SLOQueryFreeformArgs struct {
	// Freeform Query Field
	Query pulumi.StringInput `pulumi:"query"`
}

func (SLOQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return i.ToSLOQueryFreeformOutputWithContext(context.Background())
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformOutput)
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return i.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformOutput).ToSLOQueryFreeformPtrOutputWithContext(ctx)
}

// SLOQueryFreeformPtrInput is an input type that accepts SLOQueryFreeformArgs, SLOQueryFreeformPtr and SLOQueryFreeformPtrOutput values.
// You can construct a concrete instance of `SLOQueryFreeformPtrInput` via:
//
//	        SLOQueryFreeformArgs{...}
//
//	or:
//
//	        nil
type SLOQueryFreeformPtrInput interface {
	pulumi.Input

	ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput
	ToSLOQueryFreeformPtrOutputWithContext(context.Context) SLOQueryFreeformPtrOutput
}

type sloqueryFreeformPtrType SLOQueryFreeformArgs

func SLOQueryFreeformPtr(v *SLOQueryFreeformArgs) SLOQueryFreeformPtrInput {
	return (*sloqueryFreeformPtrType)(v)
}

func (*sloqueryFreeformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryFreeform)(nil)).Elem()
}

func (i *sloqueryFreeformPtrType) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return i.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (i *sloqueryFreeformPtrType) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformPtrOutput)
}

type SLOQueryFreeformOutput struct{ *pulumi.OutputState }

func (SLOQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return o.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOQueryFreeform) *SLOQueryFreeform {
		return &v
	}).(SLOQueryFreeformPtrOutput)
}

// Freeform Query Field
func (o SLOQueryFreeformOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryFreeform) string { return v.Query }).(pulumi.StringOutput)
}

type SLOQueryFreeformPtrOutput struct{ *pulumi.OutputState }

func (SLOQueryFreeformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryFreeform)(nil)).Elem()
}

func (o SLOQueryFreeformPtrOutput) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return o
}

func (o SLOQueryFreeformPtrOutput) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return o
}

func (o SLOQueryFreeformPtrOutput) Elem() SLOQueryFreeformOutput {
	return o.ApplyT(func(v *SLOQueryFreeform) SLOQueryFreeform {
		if v != nil {
			return *v
		}
		var ret SLOQueryFreeform
		return ret
	}).(SLOQueryFreeformOutput)
}

// Freeform Query Field
func (o SLOQueryFreeformPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryFreeform) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type SLOQueryRatio struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	GroupByLabels []string `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric string `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric string `pulumi:"totalMetric"`
}

// SLOQueryRatioInput is an input type that accepts SLOQueryRatioArgs and SLOQueryRatioOutput values.
// You can construct a concrete instance of `SLOQueryRatioInput` via:
//
//	SLOQueryRatioArgs{...}
type SLOQueryRatioInput interface {
	pulumi.Input

	ToSLOQueryRatioOutput() SLOQueryRatioOutput
	ToSLOQueryRatioOutputWithContext(context.Context) SLOQueryRatioOutput
}

type SLOQueryRatioArgs struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	GroupByLabels pulumi.StringArrayInput `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric pulumi.StringInput `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric pulumi.StringInput `pulumi:"totalMetric"`
}

func (SLOQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return i.ToSLOQueryRatioOutputWithContext(context.Background())
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioOutput)
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return i.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioOutput).ToSLOQueryRatioPtrOutputWithContext(ctx)
}

// SLOQueryRatioPtrInput is an input type that accepts SLOQueryRatioArgs, SLOQueryRatioPtr and SLOQueryRatioPtrOutput values.
// You can construct a concrete instance of `SLOQueryRatioPtrInput` via:
//
//	        SLOQueryRatioArgs{...}
//
//	or:
//
//	        nil
type SLOQueryRatioPtrInput interface {
	pulumi.Input

	ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput
	ToSLOQueryRatioPtrOutputWithContext(context.Context) SLOQueryRatioPtrOutput
}

type sloqueryRatioPtrType SLOQueryRatioArgs

func SLOQueryRatioPtr(v *SLOQueryRatioArgs) SLOQueryRatioPtrInput {
	return (*sloqueryRatioPtrType)(v)
}

func (*sloqueryRatioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryRatio)(nil)).Elem()
}

func (i *sloqueryRatioPtrType) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return i.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (i *sloqueryRatioPtrType) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioPtrOutput)
}

type SLOQueryRatioOutput struct{ *pulumi.OutputState }

func (SLOQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return o.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOQueryRatio) *SLOQueryRatio {
		return &v
	}).(SLOQueryRatioPtrOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOQueryRatioOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SLOQueryRatio) []string { return v.GroupByLabels }).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o SLOQueryRatioOutput) SuccessMetric() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryRatio) string { return v.SuccessMetric }).(pulumi.StringOutput)
}

// Metric for total events (denominator)
func (o SLOQueryRatioOutput) TotalMetric() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryRatio) string { return v.TotalMetric }).(pulumi.StringOutput)
}

type SLOQueryRatioPtrOutput struct{ *pulumi.OutputState }

func (SLOQueryRatioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryRatio)(nil)).Elem()
}

func (o SLOQueryRatioPtrOutput) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return o
}

func (o SLOQueryRatioPtrOutput) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return o
}

func (o SLOQueryRatioPtrOutput) Elem() SLOQueryRatioOutput {
	return o.ApplyT(func(v *SLOQueryRatio) SLOQueryRatio {
		if v != nil {
			return *v
		}
		var ret SLOQueryRatio
		return ret
	}).(SLOQueryRatioOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOQueryRatioPtrOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SLOQueryRatio) []string {
		if v == nil {
			return nil
		}
		return v.GroupByLabels
	}).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o SLOQueryRatioPtrOutput) SuccessMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.SuccessMetric
	}).(pulumi.StringPtrOutput)
}

// Metric for total events (denominator)
func (o SLOQueryRatioPtrOutput) TotalMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.TotalMetric
	}).(pulumi.StringPtrOutput)
}

type ServiceAccountPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// ServiceAccountPermissionPermissionInput is an input type that accepts ServiceAccountPermissionPermissionArgs and ServiceAccountPermissionPermissionOutput values.
// You can construct a concrete instance of `ServiceAccountPermissionPermissionInput` via:
//
//	ServiceAccountPermissionPermissionArgs{...}
type ServiceAccountPermissionPermissionInput interface {
	pulumi.Input

	ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput
	ToServiceAccountPermissionPermissionOutputWithContext(context.Context) ServiceAccountPermissionPermissionOutput
}

type ServiceAccountPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (ServiceAccountPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return i.ToServiceAccountPermissionPermissionOutputWithContext(context.Background())
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPermissionPermissionOutput)
}

// ServiceAccountPermissionPermissionArrayInput is an input type that accepts ServiceAccountPermissionPermissionArray and ServiceAccountPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `ServiceAccountPermissionPermissionArrayInput` via:
//
//	ServiceAccountPermissionPermissionArray{ ServiceAccountPermissionPermissionArgs{...} }
type ServiceAccountPermissionPermissionArrayInput interface {
	pulumi.Input

	ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput
	ToServiceAccountPermissionPermissionArrayOutputWithContext(context.Context) ServiceAccountPermissionPermissionArrayOutput
}

type ServiceAccountPermissionPermissionArray []ServiceAccountPermissionPermissionInput

func (ServiceAccountPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountPermissionPermission)(nil)).Elem()
}

func (i ServiceAccountPermissionPermissionArray) ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput {
	return i.ToServiceAccountPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i ServiceAccountPermissionPermissionArray) ToServiceAccountPermissionPermissionArrayOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPermissionPermissionArrayOutput)
}

type ServiceAccountPermissionPermissionOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return o
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o ServiceAccountPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type ServiceAccountPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountPermissionPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionPermissionArrayOutput) ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput {
	return o
}

func (o ServiceAccountPermissionPermissionArrayOutput) ToServiceAccountPermissionPermissionArrayOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionArrayOutput {
	return o
}

func (o ServiceAccountPermissionPermissionArrayOutput) Index(i pulumi.IntInput) ServiceAccountPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountPermissionPermission {
		return vs[0].([]ServiceAccountPermissionPermission)[vs[1].(int)]
	}).(ServiceAccountPermissionPermissionOutput)
}

type SsoSettingsOauth2Settings struct {
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `pulumi:"allowAssignGrafanaAdmin"`
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `pulumi:"allowSignUp"`
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `pulumi:"allowedDomains"`
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
	AllowedGroups *string `pulumi:"allowedGroups"`
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `pulumi:"allowedOrganizations"`
	// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
	ApiUrl *string `pulumi:"apiUrl"`
	// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `pulumi:"authStyle"`
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	AuthUrl *string `pulumi:"authUrl"`
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `pulumi:"autoLogin"`
	// The client Id of your OAuth2 app.
	ClientId string `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret *string `pulumi:"clientSecret"`
	// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	Custom map[string]string `pulumi:"custom"`
	// Define allowed groups.
	DefineAllowedGroups *bool `pulumi:"defineAllowedGroups"`
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `pulumi:"defineAllowedTeamsIds"`
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `pulumi:"emailAttributeName"`
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `pulumi:"emailAttributePath"`
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `pulumi:"emptyScopes"`
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
	GroupsAttributePath *string `pulumi:"groupsAttributePath"`
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IdTokenAttributeName *string `pulumi:"idTokenAttributeName"`
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `pulumi:"loginAttributePath"`
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `pulumi:"name"`
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `pulumi:"nameAttributePath"`
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `pulumi:"roleAttributePath"`
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `pulumi:"roleAttributeStrict"`
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `pulumi:"scopes"`
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectUrl *string `pulumi:"signoutRedirectUrl"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `pulumi:"skipOrgRoleSync"`
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
	TeamIds *string `pulumi:"teamIds"`
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `pulumi:"teamIdsAttributePath"`
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
	TeamsUrl *string `pulumi:"teamsUrl"`
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TlsClientCa *string `pulumi:"tlsClientCa"`
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The path to the key. Is not applicable on Grafana Cloud.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TlsSkipVerifyInsecure *bool `pulumi:"tlsSkipVerifyInsecure"`
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	TokenUrl *string `pulumi:"tokenUrl"`
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `pulumi:"usePkce"`
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `pulumi:"useRefreshToken"`
}

// SsoSettingsOauth2SettingsInput is an input type that accepts SsoSettingsOauth2SettingsArgs and SsoSettingsOauth2SettingsOutput values.
// You can construct a concrete instance of `SsoSettingsOauth2SettingsInput` via:
//
//	SsoSettingsOauth2SettingsArgs{...}
type SsoSettingsOauth2SettingsInput interface {
	pulumi.Input

	ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput
	ToSsoSettingsOauth2SettingsOutputWithContext(context.Context) SsoSettingsOauth2SettingsOutput
}

type SsoSettingsOauth2SettingsArgs struct {
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin pulumi.BoolPtrInput `pulumi:"allowAssignGrafanaAdmin"`
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp pulumi.BoolPtrInput `pulumi:"allowSignUp"`
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains pulumi.StringPtrInput `pulumi:"allowedDomains"`
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
	AllowedGroups pulumi.StringPtrInput `pulumi:"allowedGroups"`
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations pulumi.StringPtrInput `pulumi:"allowedOrganizations"`
	// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
	ApiUrl pulumi.StringPtrInput `pulumi:"apiUrl"`
	// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle pulumi.StringPtrInput `pulumi:"authStyle"`
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	AuthUrl pulumi.StringPtrInput `pulumi:"authUrl"`
	// Log in automatically, skipping the login screen.
	AutoLogin pulumi.BoolPtrInput `pulumi:"autoLogin"`
	// The client Id of your OAuth2 app.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	Custom pulumi.StringMapInput `pulumi:"custom"`
	// Define allowed groups.
	DefineAllowedGroups pulumi.BoolPtrInput `pulumi:"defineAllowedGroups"`
	// Define allowed teams ids.
	DefineAllowedTeamsIds pulumi.BoolPtrInput `pulumi:"defineAllowedTeamsIds"`
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName pulumi.StringPtrInput `pulumi:"emailAttributeName"`
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath pulumi.StringPtrInput `pulumi:"emailAttributePath"`
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes pulumi.BoolPtrInput `pulumi:"emptyScopes"`
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
	GroupsAttributePath pulumi.StringPtrInput `pulumi:"groupsAttributePath"`
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IdTokenAttributeName pulumi.StringPtrInput `pulumi:"idTokenAttributeName"`
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath pulumi.StringPtrInput `pulumi:"loginAttributePath"`
	// Helpful if you use more than one identity providers or SSO protocols.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath pulumi.StringPtrInput `pulumi:"nameAttributePath"`
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath pulumi.StringPtrInput `pulumi:"roleAttributePath"`
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict pulumi.BoolPtrInput `pulumi:"roleAttributeStrict"`
	// List of comma- or space-separated OAuth2 scopes.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectUrl pulumi.StringPtrInput `pulumi:"signoutRedirectUrl"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync pulumi.BoolPtrInput `pulumi:"skipOrgRoleSync"`
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
	TeamIds pulumi.StringPtrInput `pulumi:"teamIds"`
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath pulumi.StringPtrInput `pulumi:"teamIdsAttributePath"`
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
	TeamsUrl pulumi.StringPtrInput `pulumi:"teamsUrl"`
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TlsClientCa pulumi.StringPtrInput `pulumi:"tlsClientCa"`
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The path to the key. Is not applicable on Grafana Cloud.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TlsSkipVerifyInsecure pulumi.BoolPtrInput `pulumi:"tlsSkipVerifyInsecure"`
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	TokenUrl pulumi.StringPtrInput `pulumi:"tokenUrl"`
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce pulumi.BoolPtrInput `pulumi:"usePkce"`
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken pulumi.BoolPtrInput `pulumi:"useRefreshToken"`
}

func (SsoSettingsOauth2SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsOauth2Settings)(nil)).Elem()
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput {
	return i.ToSsoSettingsOauth2SettingsOutputWithContext(context.Background())
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsOutput)
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return i.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsOutput).ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx)
}

// SsoSettingsOauth2SettingsPtrInput is an input type that accepts SsoSettingsOauth2SettingsArgs, SsoSettingsOauth2SettingsPtr and SsoSettingsOauth2SettingsPtrOutput values.
// You can construct a concrete instance of `SsoSettingsOauth2SettingsPtrInput` via:
//
//	        SsoSettingsOauth2SettingsArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsOauth2SettingsPtrInput interface {
	pulumi.Input

	ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput
	ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Context) SsoSettingsOauth2SettingsPtrOutput
}

type ssoSettingsOauth2SettingsPtrType SsoSettingsOauth2SettingsArgs

func SsoSettingsOauth2SettingsPtr(v *SsoSettingsOauth2SettingsArgs) SsoSettingsOauth2SettingsPtrInput {
	return (*ssoSettingsOauth2SettingsPtrType)(v)
}

func (*ssoSettingsOauth2SettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsOauth2Settings)(nil)).Elem()
}

func (i *ssoSettingsOauth2SettingsPtrType) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return i.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsOauth2SettingsPtrType) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsPtrOutput)
}

type SsoSettingsOauth2SettingsOutput struct{ *pulumi.OutputState }

func (SsoSettingsOauth2SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsOauth2Settings)(nil)).Elem()
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput {
	return o
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsOutput {
	return o
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return o.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsOauth2Settings) *SsoSettingsOauth2Settings {
		return &v
	}).(SsoSettingsOauth2SettingsPtrOutput)
}

// If enabled, it will automatically sync the Grafana server administrator role.
func (o SsoSettingsOauth2SettingsOutput) AllowAssignGrafanaAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AllowAssignGrafanaAdmin }).(pulumi.BoolPtrOutput)
}

// If not enabled, only existing Grafana users can log in using OAuth.
func (o SsoSettingsOauth2SettingsOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AllowSignUp }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
func (o SsoSettingsOauth2SettingsOutput) AllowedDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedDomains }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) AllowedGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedGroups }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
func (o SsoSettingsOauth2SettingsOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedOrganizations }).(pulumi.StringPtrOutput)
}

// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
func (o SsoSettingsOauth2SettingsOutput) AuthStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AuthStyle }).(pulumi.StringPtrOutput)
}

// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

// Log in automatically, skipping the login screen.
func (o SsoSettingsOauth2SettingsOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AutoLogin }).(pulumi.BoolPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsOauth2SettingsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsOauth2SettingsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
func (o SsoSettingsOauth2SettingsOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) map[string]string { return v.Custom }).(pulumi.StringMapOutput)
}

// Define allowed groups.
func (o SsoSettingsOauth2SettingsOutput) DefineAllowedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.DefineAllowedGroups }).(pulumi.BoolPtrOutput)
}

// Define allowed teams ids.
func (o SsoSettingsOauth2SettingsOutput) DefineAllowedTeamsIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.DefineAllowedTeamsIds }).(pulumi.BoolPtrOutput)
}

// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) EmailAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.EmailAttributeName }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) EmailAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.EmailAttributePath }).(pulumi.StringPtrOutput)
}

// If enabled, no scopes will be sent to the OAuth2 provider.
func (o SsoSettingsOauth2SettingsOutput) EmptyScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.EmptyScopes }).(pulumi.BoolPtrOutput)
}

// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
func (o SsoSettingsOauth2SettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) GroupsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.GroupsAttributePath }).(pulumi.StringPtrOutput)
}

// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) IdTokenAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.IdTokenAttributeName }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) LoginAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.LoginAttributePath }).(pulumi.StringPtrOutput)
}

// Helpful if you use more than one identity providers or SSO protocols.
func (o SsoSettingsOauth2SettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) NameAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.NameAttributePath }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for Grafana role lookup.
func (o SsoSettingsOauth2SettingsOutput) RoleAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.RoleAttributePath }).(pulumi.StringPtrOutput)
}

// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
func (o SsoSettingsOauth2SettingsOutput) RoleAttributeStrict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.RoleAttributeStrict }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated OAuth2 scopes.
func (o SsoSettingsOauth2SettingsOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// The URL to redirect the user to after signing out from Grafana.
func (o SsoSettingsOauth2SettingsOutput) SignoutRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.SignoutRedirectUrl }).(pulumi.StringPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsOauth2SettingsOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.SkipOrgRoleSync }).(pulumi.BoolPtrOutput)
}

// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) TeamIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamIds }).(pulumi.StringPtrOutput)
}

// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) TeamIdsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamIdsAttributePath }).(pulumi.StringPtrOutput)
}

// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) TeamsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamsUrl }).(pulumi.StringPtrOutput)
}

// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientCa }).(pulumi.StringPtrOutput)
}

// The path to the certificate. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The path to the key. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
func (o SsoSettingsOauth2SettingsOutput) TlsSkipVerifyInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.TlsSkipVerifyInsecure }).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TokenUrl }).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
func (o SsoSettingsOauth2SettingsOutput) UsePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.UsePkce }).(pulumi.BoolPtrOutput)
}

// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
func (o SsoSettingsOauth2SettingsOutput) UseRefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.UseRefreshToken }).(pulumi.BoolPtrOutput)
}

type SsoSettingsOauth2SettingsPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsOauth2SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsOauth2Settings)(nil)).Elem()
}

func (o SsoSettingsOauth2SettingsPtrOutput) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return o
}

func (o SsoSettingsOauth2SettingsPtrOutput) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return o
}

func (o SsoSettingsOauth2SettingsPtrOutput) Elem() SsoSettingsOauth2SettingsOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) SsoSettingsOauth2Settings {
		if v != nil {
			return *v
		}
		var ret SsoSettingsOauth2Settings
		return ret
	}).(SsoSettingsOauth2SettingsOutput)
}

// If enabled, it will automatically sync the Grafana server administrator role.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowAssignGrafanaAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAssignGrafanaAdmin
	}).(pulumi.BoolPtrOutput)
}

// If not enabled, only existing Grafana users can log in using OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSignUp
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedDomains
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedOrganizations
	}).(pulumi.StringPtrOutput)
}

// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.ApiUrl
	}).(pulumi.StringPtrOutput)
}

// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
func (o SsoSettingsOauth2SettingsPtrOutput) AuthStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AuthStyle
	}).(pulumi.StringPtrOutput)
}

// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AuthUrl
	}).(pulumi.StringPtrOutput)
}

// Log in automatically, skipping the login screen.
func (o SsoSettingsOauth2SettingsPtrOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoLogin
	}).(pulumi.BoolPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsOauth2SettingsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsOauth2SettingsPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
func (o SsoSettingsOauth2SettingsPtrOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Custom
	}).(pulumi.StringMapOutput)
}

// Define allowed groups.
func (o SsoSettingsOauth2SettingsPtrOutput) DefineAllowedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DefineAllowedGroups
	}).(pulumi.BoolPtrOutput)
}

// Define allowed teams ids.
func (o SsoSettingsOauth2SettingsPtrOutput) DefineAllowedTeamsIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DefineAllowedTeamsIds
	}).(pulumi.BoolPtrOutput)
}

// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) EmailAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.EmailAttributeName
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) EmailAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.EmailAttributePath
	}).(pulumi.StringPtrOutput)
}

// If enabled, no scopes will be sent to the OAuth2 provider.
func (o SsoSettingsOauth2SettingsPtrOutput) EmptyScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.EmptyScopes
	}).(pulumi.BoolPtrOutput)
}

// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
func (o SsoSettingsOauth2SettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) GroupsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.GroupsAttributePath
	}).(pulumi.StringPtrOutput)
}

// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) IdTokenAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.IdTokenAttributeName
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) LoginAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.LoginAttributePath
	}).(pulumi.StringPtrOutput)
}

// Helpful if you use more than one identity providers or SSO protocols.
func (o SsoSettingsOauth2SettingsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) NameAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.NameAttributePath
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for Grafana role lookup.
func (o SsoSettingsOauth2SettingsPtrOutput) RoleAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.RoleAttributePath
	}).(pulumi.StringPtrOutput)
}

// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
func (o SsoSettingsOauth2SettingsPtrOutput) RoleAttributeStrict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.RoleAttributeStrict
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated OAuth2 scopes.
func (o SsoSettingsOauth2SettingsPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringPtrOutput)
}

// The URL to redirect the user to after signing out from Grafana.
func (o SsoSettingsOauth2SettingsPtrOutput) SignoutRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.SignoutRedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsOauth2SettingsPtrOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOrgRoleSync
	}).(pulumi.BoolPtrOutput)
}

// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamIds
	}).(pulumi.StringPtrOutput)
}

// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamIdsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamIdsAttributePath
	}).(pulumi.StringPtrOutput)
}

// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamsUrl
	}).(pulumi.StringPtrOutput)
}

// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientCa
	}).(pulumi.StringPtrOutput)
}

// The path to the certificate. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientCert
	}).(pulumi.StringPtrOutput)
}

// The path to the key. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientKey
	}).(pulumi.StringPtrOutput)
}

// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsSkipVerifyInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSkipVerifyInsecure
	}).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TokenUrl
	}).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
func (o SsoSettingsOauth2SettingsPtrOutput) UsePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.UsePkce
	}).(pulumi.BoolPtrOutput)
}

// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
func (o SsoSettingsOauth2SettingsPtrOutput) UseRefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.UseRefreshToken
	}).(pulumi.BoolPtrOutput)
}

type SsoSettingsSamlSettings struct {
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated *bool `pulumi:"allowIdpInitiated"`
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp *bool `pulumi:"allowSignUp"`
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations *string `pulumi:"allowedOrganizations"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail *string `pulumi:"assertionAttributeEmail"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups *string `pulumi:"assertionAttributeGroups"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin *string `pulumi:"assertionAttributeLogin"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName *string `pulumi:"assertionAttributeName"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg *string `pulumi:"assertionAttributeOrg"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole *string `pulumi:"assertionAttributeRole"`
	// Whether SAML auto login is enabled.
	AutoLogin *bool `pulumi:"autoLogin"`
	// Base64-encoded string for the SP X.509 certificate.
	Certificate *string `pulumi:"certificate"`
	// Path for the SP X.509 certificate.
	CertificatePath *string `pulumi:"certificatePath"`
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata *string `pulumi:"idpMetadata"`
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath *string `pulumi:"idpMetadataPath"`
	// URL for the IdP SAML metadata XML.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay *string `pulumi:"maxIssueDelay"`
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration *string `pulumi:"metadataValidDuration"`
	// Name used to refer to the SAML authentication.
	Name *string `pulumi:"name"`
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIdFormat *string `pulumi:"nameIdFormat"`
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping *string `pulumi:"orgMapping"`
	// Base64-encoded string for the SP private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Path for the SP private key.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState *string `pulumi:"relayState"`
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin *string `pulumi:"roleValuesAdmin"`
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor *string `pulumi:"roleValuesEditor"`
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin *string `pulumi:"roleValuesGrafanaAdmin"`
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone *string `pulumi:"roleValuesNone"`
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer *string `pulumi:"roleValuesViewer"`
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Whether SAML Single Logout is enabled.
	SingleLogout *bool `pulumi:"singleLogout"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `pulumi:"skipOrgRoleSync"`
}

// SsoSettingsSamlSettingsInput is an input type that accepts SsoSettingsSamlSettingsArgs and SsoSettingsSamlSettingsOutput values.
// You can construct a concrete instance of `SsoSettingsSamlSettingsInput` via:
//
//	SsoSettingsSamlSettingsArgs{...}
type SsoSettingsSamlSettingsInput interface {
	pulumi.Input

	ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput
	ToSsoSettingsSamlSettingsOutputWithContext(context.Context) SsoSettingsSamlSettingsOutput
}

type SsoSettingsSamlSettingsArgs struct {
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated pulumi.BoolPtrInput `pulumi:"allowIdpInitiated"`
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp pulumi.BoolPtrInput `pulumi:"allowSignUp"`
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations pulumi.StringPtrInput `pulumi:"allowedOrganizations"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail pulumi.StringPtrInput `pulumi:"assertionAttributeEmail"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups pulumi.StringPtrInput `pulumi:"assertionAttributeGroups"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin pulumi.StringPtrInput `pulumi:"assertionAttributeLogin"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName pulumi.StringPtrInput `pulumi:"assertionAttributeName"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg pulumi.StringPtrInput `pulumi:"assertionAttributeOrg"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole pulumi.StringPtrInput `pulumi:"assertionAttributeRole"`
	// Whether SAML auto login is enabled.
	AutoLogin pulumi.BoolPtrInput `pulumi:"autoLogin"`
	// Base64-encoded string for the SP X.509 certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Path for the SP X.509 certificate.
	CertificatePath pulumi.StringPtrInput `pulumi:"certificatePath"`
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata pulumi.StringPtrInput `pulumi:"idpMetadata"`
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath pulumi.StringPtrInput `pulumi:"idpMetadataPath"`
	// URL for the IdP SAML metadata XML.
	IdpMetadataUrl pulumi.StringPtrInput `pulumi:"idpMetadataUrl"`
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay pulumi.StringPtrInput `pulumi:"maxIssueDelay"`
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration pulumi.StringPtrInput `pulumi:"metadataValidDuration"`
	// Name used to refer to the SAML authentication.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIdFormat pulumi.StringPtrInput `pulumi:"nameIdFormat"`
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping pulumi.StringPtrInput `pulumi:"orgMapping"`
	// Base64-encoded string for the SP private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Path for the SP private key.
	PrivateKeyPath pulumi.StringPtrInput `pulumi:"privateKeyPath"`
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState pulumi.StringPtrInput `pulumi:"relayState"`
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin pulumi.StringPtrInput `pulumi:"roleValuesAdmin"`
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor pulumi.StringPtrInput `pulumi:"roleValuesEditor"`
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin pulumi.StringPtrInput `pulumi:"roleValuesGrafanaAdmin"`
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone pulumi.StringPtrInput `pulumi:"roleValuesNone"`
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer pulumi.StringPtrInput `pulumi:"roleValuesViewer"`
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm pulumi.StringPtrInput `pulumi:"signatureAlgorithm"`
	// Whether SAML Single Logout is enabled.
	SingleLogout pulumi.BoolPtrInput `pulumi:"singleLogout"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync pulumi.BoolPtrInput `pulumi:"skipOrgRoleSync"`
}

func (SsoSettingsSamlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsSamlSettings)(nil)).Elem()
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput {
	return i.ToSsoSettingsSamlSettingsOutputWithContext(context.Background())
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsOutput)
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return i.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsOutput).ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx)
}

// SsoSettingsSamlSettingsPtrInput is an input type that accepts SsoSettingsSamlSettingsArgs, SsoSettingsSamlSettingsPtr and SsoSettingsSamlSettingsPtrOutput values.
// You can construct a concrete instance of `SsoSettingsSamlSettingsPtrInput` via:
//
//	        SsoSettingsSamlSettingsArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsSamlSettingsPtrInput interface {
	pulumi.Input

	ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput
	ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Context) SsoSettingsSamlSettingsPtrOutput
}

type ssoSettingsSamlSettingsPtrType SsoSettingsSamlSettingsArgs

func SsoSettingsSamlSettingsPtr(v *SsoSettingsSamlSettingsArgs) SsoSettingsSamlSettingsPtrInput {
	return (*ssoSettingsSamlSettingsPtrType)(v)
}

func (*ssoSettingsSamlSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsSamlSettings)(nil)).Elem()
}

func (i *ssoSettingsSamlSettingsPtrType) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return i.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsSamlSettingsPtrType) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsPtrOutput)
}

type SsoSettingsSamlSettingsOutput struct{ *pulumi.OutputState }

func (SsoSettingsSamlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsSamlSettings)(nil)).Elem()
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput {
	return o
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsOutput {
	return o
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return o.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsSamlSettings) *SsoSettingsSamlSettings {
		return &v
	}).(SsoSettingsSamlSettingsPtrOutput)
}

// Whether SAML IdP-initiated login is allowed.
func (o SsoSettingsSamlSettingsOutput) AllowIdpInitiated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AllowIdpInitiated }).(pulumi.BoolPtrOutput)
}

// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
func (o SsoSettingsSamlSettingsOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AllowSignUp }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
func (o SsoSettingsSamlSettingsOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AllowedOrganizations }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user email.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeEmail }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeGroups }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeLogin }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeName }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeOrg }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeRole }).(pulumi.StringPtrOutput)
}

// Whether SAML auto login is enabled.
func (o SsoSettingsSamlSettingsOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AutoLogin }).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Path for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.CertificatePath }).(pulumi.StringPtrOutput)
}

// Define whether this configuration is enabled for SAML. Defaults to `true`.
func (o SsoSettingsSamlSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadata }).(pulumi.StringPtrOutput)
}

// Path for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadataPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadataPath }).(pulumi.StringPtrOutput)
}

// URL for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadataUrl }).(pulumi.StringPtrOutput)
}

// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
func (o SsoSettingsSamlSettingsOutput) MaxIssueDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.MaxIssueDelay }).(pulumi.StringPtrOutput)
}

// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
func (o SsoSettingsSamlSettingsOutput) MetadataValidDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.MetadataValidDuration }).(pulumi.StringPtrOutput)
}

// Name used to refer to the SAML authentication.
func (o SsoSettingsSamlSettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
func (o SsoSettingsSamlSettingsOutput) NameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.NameIdFormat }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
func (o SsoSettingsSamlSettingsOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.OrgMapping }).(pulumi.StringPtrOutput)
}

// Base64-encoded string for the SP private key.
func (o SsoSettingsSamlSettingsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Path for the SP private key.
func (o SsoSettingsSamlSettingsOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.PrivateKeyPath }).(pulumi.StringPtrOutput)
}

// Relay state for IdP-initiated login. Should match relay state configured in IdP.
func (o SsoSettingsSamlSettingsOutput) RelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RelayState }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Admin role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesAdmin }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Editor role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesEditor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesEditor }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesGrafanaAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesGrafanaAdmin }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the None role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesNone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesNone }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Viewer role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesViewer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesViewer }).(pulumi.StringPtrOutput)
}

// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
func (o SsoSettingsSamlSettingsOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Whether SAML Single Logout is enabled.
func (o SsoSettingsSamlSettingsOutput) SingleLogout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.SingleLogout }).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsSamlSettingsOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.SkipOrgRoleSync }).(pulumi.BoolPtrOutput)
}

type SsoSettingsSamlSettingsPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsSamlSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsSamlSettings)(nil)).Elem()
}

func (o SsoSettingsSamlSettingsPtrOutput) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return o
}

func (o SsoSettingsSamlSettingsPtrOutput) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return o
}

func (o SsoSettingsSamlSettingsPtrOutput) Elem() SsoSettingsSamlSettingsOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) SsoSettingsSamlSettings {
		if v != nil {
			return *v
		}
		var ret SsoSettingsSamlSettings
		return ret
	}).(SsoSettingsSamlSettingsOutput)
}

// Whether SAML IdP-initiated login is allowed.
func (o SsoSettingsSamlSettingsPtrOutput) AllowIdpInitiated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowIdpInitiated
	}).(pulumi.BoolPtrOutput)
}

// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
func (o SsoSettingsSamlSettingsPtrOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSignUp
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
func (o SsoSettingsSamlSettingsPtrOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedOrganizations
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user email.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeEmail
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeGroups
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeLogin
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeName
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeOrg
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeRole
	}).(pulumi.StringPtrOutput)
}

// Whether SAML auto login is enabled.
func (o SsoSettingsSamlSettingsPtrOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoLogin
	}).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Path for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsPtrOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePath
	}).(pulumi.StringPtrOutput)
}

// Define whether this configuration is enabled for SAML. Defaults to `true`.
func (o SsoSettingsSamlSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadata
	}).(pulumi.StringPtrOutput)
}

// Path for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadataPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadataPath
	}).(pulumi.StringPtrOutput)
}

// URL for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadataUrl
	}).(pulumi.StringPtrOutput)
}

// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
func (o SsoSettingsSamlSettingsPtrOutput) MaxIssueDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxIssueDelay
	}).(pulumi.StringPtrOutput)
}

// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
func (o SsoSettingsSamlSettingsPtrOutput) MetadataValidDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.MetadataValidDuration
	}).(pulumi.StringPtrOutput)
}

// Name used to refer to the SAML authentication.
func (o SsoSettingsSamlSettingsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
func (o SsoSettingsSamlSettingsPtrOutput) NameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.NameIdFormat
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
func (o SsoSettingsSamlSettingsPtrOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.OrgMapping
	}).(pulumi.StringPtrOutput)
}

// Base64-encoded string for the SP private key.
func (o SsoSettingsSamlSettingsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Path for the SP private key.
func (o SsoSettingsSamlSettingsPtrOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyPath
	}).(pulumi.StringPtrOutput)
}

// Relay state for IdP-initiated login. Should match relay state configured in IdP.
func (o SsoSettingsSamlSettingsPtrOutput) RelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RelayState
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Admin role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesAdmin
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Editor role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesEditor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesEditor
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesGrafanaAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesGrafanaAdmin
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the None role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesNone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesNone
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Viewer role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesViewer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesViewer
	}).(pulumi.StringPtrOutput)
}

// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
func (o SsoSettingsSamlSettingsPtrOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Whether SAML Single Logout is enabled.
func (o SsoSettingsSamlSettingsPtrOutput) SingleLogout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SingleLogout
	}).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsSamlSettingsPtrOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOrgRoleSync
	}).(pulumi.BoolPtrOutput)
}

type SyntheticMonitoringCheckSettings struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns *SyntheticMonitoringCheckSettingsDns `pulumi:"dns"`
	// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Grpc *SyntheticMonitoringCheckSettingsGrpc `pulumi:"grpc"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http *SyntheticMonitoringCheckSettingsHttp `pulumi:"http"`
	// Settings for MultiHTTP check. The target must be a URL (http or https)
	Multihttp *SyntheticMonitoringCheckSettingsMultihttp `pulumi:"multihttp"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping *SyntheticMonitoringCheckSettingsPing `pulumi:"ping"`
	// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
	Scripted *SyntheticMonitoringCheckSettingsScripted `pulumi:"scripted"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp *SyntheticMonitoringCheckSettingsTcp `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute *SyntheticMonitoringCheckSettingsTraceroute `pulumi:"traceroute"`
}

// SyntheticMonitoringCheckSettingsInput is an input type that accepts SyntheticMonitoringCheckSettingsArgs and SyntheticMonitoringCheckSettingsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsInput` via:
//
//	SyntheticMonitoringCheckSettingsArgs{...}
type SyntheticMonitoringCheckSettingsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput
	ToSyntheticMonitoringCheckSettingsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsOutput
}

type SyntheticMonitoringCheckSettingsArgs struct {
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns SyntheticMonitoringCheckSettingsDnsPtrInput `pulumi:"dns"`
	// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Grpc SyntheticMonitoringCheckSettingsGrpcPtrInput `pulumi:"grpc"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http SyntheticMonitoringCheckSettingsHttpPtrInput `pulumi:"http"`
	// Settings for MultiHTTP check. The target must be a URL (http or https)
	Multihttp SyntheticMonitoringCheckSettingsMultihttpPtrInput `pulumi:"multihttp"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping SyntheticMonitoringCheckSettingsPingPtrInput `pulumi:"ping"`
	// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
	Scripted SyntheticMonitoringCheckSettingsScriptedPtrInput `pulumi:"scripted"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp SyntheticMonitoringCheckSettingsTcpPtrInput `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute SyntheticMonitoringCheckSettingsTraceroutePtrInput `pulumi:"traceroute"`
}

func (SyntheticMonitoringCheckSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return i.ToSyntheticMonitoringCheckSettingsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsOutput)
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsArgs) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsOutput).ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsArgs, SyntheticMonitoringCheckSettingsPtr and SyntheticMonitoringCheckSettingsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput
	ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPtrOutput
}

type syntheticMonitoringCheckSettingsPtrType SyntheticMonitoringCheckSettingsArgs

func SyntheticMonitoringCheckSettingsPtr(v *SyntheticMonitoringCheckSettingsArgs) SyntheticMonitoringCheckSettingsPtrInput {
	return (*syntheticMonitoringCheckSettingsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsPtrType) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsPtrType) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPtrOutput)
}

type SyntheticMonitoringCheckSettingsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutput() SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsOutput) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettings {
		return &v
	}).(SyntheticMonitoringCheckSettingsPtrOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o SyntheticMonitoringCheckSettingsOutput) Dns() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsDns { return v.Dns }).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Grpc() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsGrpc { return v.Grpc }).(SyntheticMonitoringCheckSettingsGrpcPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o SyntheticMonitoringCheckSettingsOutput) Http() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsHttp { return v.Http }).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

// Settings for MultiHTTP check. The target must be a URL (http or https)
func (o SyntheticMonitoringCheckSettingsOutput) Multihttp() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsMultihttp {
		return v.Multihttp
	}).(SyntheticMonitoringCheckSettingsMultihttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Ping() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsPing { return v.Ping }).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
func (o SyntheticMonitoringCheckSettingsOutput) Scripted() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsScripted { return v.Scripted }).(SyntheticMonitoringCheckSettingsScriptedPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsOutput) Tcp() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTcp { return v.Tcp }).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o SyntheticMonitoringCheckSettingsOutput) Traceroute() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTraceroute {
		return v.Traceroute
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettings)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) ToSyntheticMonitoringCheckSettingsPtrOutput() SyntheticMonitoringCheckSettingsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) ToSyntheticMonitoringCheckSettingsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPtrOutput) Elem() SyntheticMonitoringCheckSettingsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) SyntheticMonitoringCheckSettings {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettings
		return ret
	}).(SyntheticMonitoringCheckSettingsOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o SyntheticMonitoringCheckSettingsPtrOutput) Dns() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Grpc() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsGrpc {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(SyntheticMonitoringCheckSettingsGrpcPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o SyntheticMonitoringCheckSettingsPtrOutput) Http() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

// Settings for MultiHTTP check. The target must be a URL (http or https)
func (o SyntheticMonitoringCheckSettingsPtrOutput) Multihttp() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsMultihttp {
		if v == nil {
			return nil
		}
		return v.Multihttp
	}).(SyntheticMonitoringCheckSettingsMultihttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Ping() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsPing {
		if v == nil {
			return nil
		}
		return v.Ping
	}).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Scripted() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsScripted {
		if v == nil {
			return nil
		}
		return v.Scripted
	}).(SyntheticMonitoringCheckSettingsScriptedPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o SyntheticMonitoringCheckSettingsPtrOutput) Tcp() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o SyntheticMonitoringCheckSettingsPtrOutput) Traceroute() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettings) *SyntheticMonitoringCheckSettingsTraceroute {
		if v == nil {
			return nil
		}
		return v.Traceroute
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsDns struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Port to target. Defaults to `53`.
	Port *int `pulumi:"port"`
	// `TCP` or `UDP`. Defaults to `UDP`.
	Protocol *string `pulumi:"protocol"`
	// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
	RecordType *string `pulumi:"recordType"`
	// DNS server address to target. Defaults to `8.8.8.8`.
	Server *string `pulumi:"server"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
	ValidRCodes []string `pulumi:"validRCodes"`
	// Validate additional matches.
	ValidateAdditionalRrs []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr `pulumi:"validateAdditionalRrs"`
	// Validate response answer.
	ValidateAnswerRrs *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs `pulumi:"validateAnswerRrs"`
	// Validate response authority.
	ValidateAuthorityRrs *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs `pulumi:"validateAuthorityRrs"`
}

// SyntheticMonitoringCheckSettingsDnsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsArgs and SyntheticMonitoringCheckSettingsDnsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsArgs{...}
type SyntheticMonitoringCheckSettingsDnsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput
	ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsOutput
}

type SyntheticMonitoringCheckSettingsDnsArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Port to target. Defaults to `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// `TCP` or `UDP`. Defaults to `UDP`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// DNS server address to target. Defaults to `8.8.8.8`.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
	// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
	ValidRCodes pulumi.StringArrayInput `pulumi:"validRCodes"`
	// Validate additional matches.
	ValidateAdditionalRrs SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput `pulumi:"validateAdditionalRrs"`
	// Validate response answer.
	ValidateAnswerRrs SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput `pulumi:"validateAnswerRrs"`
	// Validate response authority.
	ValidateAuthorityRrs SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput `pulumi:"validateAuthorityRrs"`
}

func (SyntheticMonitoringCheckSettingsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsArgs) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsOutput).ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsArgs, SyntheticMonitoringCheckSettingsDnsPtr and SyntheticMonitoringCheckSettingsDnsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsPtrType SyntheticMonitoringCheckSettingsDnsArgs

func SyntheticMonitoringCheckSettingsDnsPtr(v *SyntheticMonitoringCheckSettingsDnsArgs) SyntheticMonitoringCheckSettingsDnsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsPtrType) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsPtrType) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutput() SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDns {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Port to target. Defaults to `53`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// `TCP` or `UDP`. Defaults to `UDP`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// DNS server address to target. Defaults to `8.8.8.8`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsDnsOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) []string { return v.ValidRCodes }).(pulumi.StringArrayOutput)
}

// Validate additional matches.
func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAdditionalRrs() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		return v.ValidateAdditionalRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

// Validate response answer.
func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAnswerRrs() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		return v.ValidateAnswerRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Validate response authority.
func (o SyntheticMonitoringCheckSettingsDnsOutput) ValidateAuthorityRrs() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		return v.ValidateAuthorityRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDns)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutput() SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) SyntheticMonitoringCheckSettingsDns {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDns
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Port to target. Defaults to `53`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// `TCP` or `UDP`. Defaults to `UDP`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.RecordType
	}).(pulumi.StringPtrOutput)
}

// DNS server address to target. Defaults to `8.8.8.8`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) []string {
		if v == nil {
			return nil
		}
		return v.ValidRCodes
	}).(pulumi.StringArrayOutput)
}

// Validate additional matches.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAdditionalRrs() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		if v == nil {
			return nil
		}
		return v.ValidateAdditionalRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

// Validate response answer.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAnswerRrs() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAnswerRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Validate response authority.
func (o SyntheticMonitoringCheckSettingsDnsPtrOutput) ValidateAuthorityRrs() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDns) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAuthorityRrs
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs and SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput)
}

// SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray and SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{ SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{...} }
type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray []SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

// Fail if value matches regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput() SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr {
		return vs[0].([]SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs and SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput).ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs, SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtr and SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs

func SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtr(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Fail if value matches regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string { return v.FailIfMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput)
}

// Fail if value matches regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs and SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput` via:
//
//	SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{...}
type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput)
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput).ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs, SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtr and SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput
	ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput
}

type syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs

func SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtr(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput {
	return (*syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrType) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		return &v
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

// Fail if value matches regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) ToSyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) Elem() SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs
		return ret
	}).(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput)
}

// Fail if value matches regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type SyntheticMonitoringCheckSettingsGrpc struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// gRPC service.
	Service *string `pulumi:"service"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls *bool `pulumi:"tls"`
	// TLS config.
	TlsConfig *SyntheticMonitoringCheckSettingsGrpcTlsConfig `pulumi:"tlsConfig"`
}

// SyntheticMonitoringCheckSettingsGrpcInput is an input type that accepts SyntheticMonitoringCheckSettingsGrpcArgs and SyntheticMonitoringCheckSettingsGrpcOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsGrpcInput` via:
//
//	SyntheticMonitoringCheckSettingsGrpcArgs{...}
type SyntheticMonitoringCheckSettingsGrpcInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsGrpcOutput() SyntheticMonitoringCheckSettingsGrpcOutput
	ToSyntheticMonitoringCheckSettingsGrpcOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsGrpcOutput
}

type SyntheticMonitoringCheckSettingsGrpcArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// gRPC service.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// TLS config.
	TlsConfig SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput `pulumi:"tlsConfig"`
}

func (SyntheticMonitoringCheckSettingsGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpc)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsGrpcArgs) ToSyntheticMonitoringCheckSettingsGrpcOutput() SyntheticMonitoringCheckSettingsGrpcOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsGrpcArgs) ToSyntheticMonitoringCheckSettingsGrpcOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcOutput)
}

func (i SyntheticMonitoringCheckSettingsGrpcArgs) ToSyntheticMonitoringCheckSettingsGrpcPtrOutput() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsGrpcArgs) ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcOutput).ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsGrpcPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsGrpcArgs, SyntheticMonitoringCheckSettingsGrpcPtr and SyntheticMonitoringCheckSettingsGrpcPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsGrpcPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsGrpcArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsGrpcPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsGrpcPtrOutput() SyntheticMonitoringCheckSettingsGrpcPtrOutput
	ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsGrpcPtrOutput
}

type syntheticMonitoringCheckSettingsGrpcPtrType SyntheticMonitoringCheckSettingsGrpcArgs

func SyntheticMonitoringCheckSettingsGrpcPtr(v *SyntheticMonitoringCheckSettingsGrpcArgs) SyntheticMonitoringCheckSettingsGrpcPtrInput {
	return (*syntheticMonitoringCheckSettingsGrpcPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsGrpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsGrpc)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsGrpcPtrType) ToSyntheticMonitoringCheckSettingsGrpcPtrOutput() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsGrpcPtrType) ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcPtrOutput)
}

type SyntheticMonitoringCheckSettingsGrpcOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpc)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsGrpcOutput) ToSyntheticMonitoringCheckSettingsGrpcOutput() SyntheticMonitoringCheckSettingsGrpcOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcOutput) ToSyntheticMonitoringCheckSettingsGrpcOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcOutput) ToSyntheticMonitoringCheckSettingsGrpcPtrOutput() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsGrpcOutput) ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsGrpc) *SyntheticMonitoringCheckSettingsGrpc {
		return &v
	}).(SyntheticMonitoringCheckSettingsGrpcPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsGrpcOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpc) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// gRPC service.
func (o SyntheticMonitoringCheckSettingsGrpcOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpc) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsGrpcOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpc) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsGrpcOutput) TlsConfig() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpc) *SyntheticMonitoringCheckSettingsGrpcTlsConfig {
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsGrpcPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsGrpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsGrpc)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) ToSyntheticMonitoringCheckSettingsGrpcPtrOutput() SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) ToSyntheticMonitoringCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) Elem() SyntheticMonitoringCheckSettingsGrpcOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpc) SyntheticMonitoringCheckSettingsGrpc {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsGrpc
		return ret
	}).(SyntheticMonitoringCheckSettingsGrpcOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpc) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// gRPC service.
func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpc) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpc) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsGrpcPtrOutput) TlsConfig() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpc) *SyntheticMonitoringCheckSettingsGrpcTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsGrpcTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// SyntheticMonitoringCheckSettingsGrpcTlsConfigInput is an input type that accepts SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs and SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsGrpcTlsConfigInput` via:
//
//	SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs{...}
type SyntheticMonitoringCheckSettingsGrpcTlsConfigInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput
	ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput
}

type SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput)
}

func (i SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput).ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs, SyntheticMonitoringCheckSettingsGrpcTlsConfigPtr and SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput
	ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput
}

type syntheticMonitoringCheckSettingsGrpcTlsConfigPtrType SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs

func SyntheticMonitoringCheckSettingsGrpcTlsConfigPtr(v *SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput {
	return (*syntheticMonitoringCheckSettingsGrpcTlsConfigPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsGrpcTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsGrpcTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsGrpcTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *SyntheticMonitoringCheckSettingsGrpcTlsConfig {
		return &v
	}).(SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) Elem() SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) SyntheticMonitoringCheckSettingsGrpcTlsConfig {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsGrpcTlsConfig
		return ret
	}).(SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttp struct {
	// Basic auth settings.
	BasicAuth *SyntheticMonitoringCheckSettingsHttpBasicAuth `pulumi:"basicAuth"`
	// Token for use with bearer authorization header.
	BearerToken *string `pulumi:"bearerToken"`
	// The body of the HTTP request used in probe.
	Body *string `pulumi:"body"`
	// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
	CacheBustingQueryParamName *string `pulumi:"cacheBustingQueryParamName"`
	// List of regexes. If any match the response body, the check will fail.
	FailIfBodyMatchesRegexps []string `pulumi:"failIfBodyMatchesRegexps"`
	// List of regexes. If any do not match the response body, the check will fail.
	FailIfBodyNotMatchesRegexps []string `pulumi:"failIfBodyNotMatchesRegexps"`
	// Check fails if headers match.
	FailIfHeaderMatchesRegexps []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp `pulumi:"failIfHeaderMatchesRegexps"`
	// Check fails if headers do not match.
	FailIfHeaderNotMatchesRegexps []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp `pulumi:"failIfHeaderNotMatchesRegexps"`
	// Fail if SSL is not present. Defaults to `false`.
	FailIfNotSsl *bool `pulumi:"failIfNotSsl"`
	// Fail if SSL is present. Defaults to `false`.
	FailIfSsl *bool `pulumi:"failIfSsl"`
	// The HTTP headers set for the probe.
	Headers []string `pulumi:"headers"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
	Method *string `pulumi:"method"`
	// Do not follow redirects. Defaults to `false`.
	NoFollowRedirects *bool `pulumi:"noFollowRedirects"`
	// The HTTP headers sent to the proxy URL
	ProxyConnectHeaders []string `pulumi:"proxyConnectHeaders"`
	// Proxy URL.
	ProxyUrl *string `pulumi:"proxyUrl"`
	// TLS config.
	TlsConfig *SyntheticMonitoringCheckSettingsHttpTlsConfig `pulumi:"tlsConfig"`
	// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
	ValidHttpVersions []string `pulumi:"validHttpVersions"`
	// Accepted status codes. If unset, defaults to 2xx.
	ValidStatusCodes []int `pulumi:"validStatusCodes"`
}

// SyntheticMonitoringCheckSettingsHttpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpArgs and SyntheticMonitoringCheckSettingsHttpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpArgs{...}
type SyntheticMonitoringCheckSettingsHttpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput
	ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpOutput
}

type SyntheticMonitoringCheckSettingsHttpArgs struct {
	// Basic auth settings.
	BasicAuth SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput `pulumi:"basicAuth"`
	// Token for use with bearer authorization header.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
	// The body of the HTTP request used in probe.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
	CacheBustingQueryParamName pulumi.StringPtrInput `pulumi:"cacheBustingQueryParamName"`
	// List of regexes. If any match the response body, the check will fail.
	FailIfBodyMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfBodyMatchesRegexps"`
	// List of regexes. If any do not match the response body, the check will fail.
	FailIfBodyNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfBodyNotMatchesRegexps"`
	// Check fails if headers match.
	FailIfHeaderMatchesRegexps SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput `pulumi:"failIfHeaderMatchesRegexps"`
	// Check fails if headers do not match.
	FailIfHeaderNotMatchesRegexps SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput `pulumi:"failIfHeaderNotMatchesRegexps"`
	// Fail if SSL is not present. Defaults to `false`.
	FailIfNotSsl pulumi.BoolPtrInput `pulumi:"failIfNotSsl"`
	// Fail if SSL is present. Defaults to `false`.
	FailIfSsl pulumi.BoolPtrInput `pulumi:"failIfSsl"`
	// The HTTP headers set for the probe.
	Headers pulumi.StringArrayInput `pulumi:"headers"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Do not follow redirects. Defaults to `false`.
	NoFollowRedirects pulumi.BoolPtrInput `pulumi:"noFollowRedirects"`
	// The HTTP headers sent to the proxy URL
	ProxyConnectHeaders pulumi.StringArrayInput `pulumi:"proxyConnectHeaders"`
	// Proxy URL.
	ProxyUrl pulumi.StringPtrInput `pulumi:"proxyUrl"`
	// TLS config.
	TlsConfig SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput `pulumi:"tlsConfig"`
	// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
	ValidHttpVersions pulumi.StringArrayInput `pulumi:"validHttpVersions"`
	// Accepted status codes. If unset, defaults to 2xx.
	ValidStatusCodes pulumi.IntArrayInput `pulumi:"validStatusCodes"`
}

func (SyntheticMonitoringCheckSettingsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpArgs) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpOutput).ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpArgs, SyntheticMonitoringCheckSettingsHttpPtr and SyntheticMonitoringCheckSettingsHttpPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput
}

type syntheticMonitoringCheckSettingsHttpPtrType SyntheticMonitoringCheckSettingsHttpArgs

func SyntheticMonitoringCheckSettingsHttpPtr(v *SyntheticMonitoringCheckSettingsHttpArgs) SyntheticMonitoringCheckSettingsHttpPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpPtrType) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpPtrType) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutput() SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttp {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpPtrOutput)
}

// Basic auth settings.
func (o SyntheticMonitoringCheckSettingsHttpOutput) BasicAuth() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		return v.BasicAuth
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

// Token for use with bearer authorization header.
func (o SyntheticMonitoringCheckSettingsHttpOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

// The body of the HTTP request used in probe.
func (o SyntheticMonitoringCheckSettingsHttpOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
func (o SyntheticMonitoringCheckSettingsHttpOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.CacheBustingQueryParamName }).(pulumi.StringPtrOutput)
}

// List of regexes. If any match the response body, the check will fail.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyMatchesRegexps }).(pulumi.StringArrayOutput)
}

// List of regexes. If any do not match the response body, the check will fail.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.FailIfBodyNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Check fails if headers match.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		return v.FailIfHeaderMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

// Check fails if headers do not match.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfHeaderNotMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return v.FailIfHeaderNotMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

// Fail if SSL is not present. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfNotSsl }).(pulumi.BoolPtrOutput)
}

// Fail if SSL is present. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.FailIfSsl }).(pulumi.BoolPtrOutput)
}

// The HTTP headers set for the probe.
func (o SyntheticMonitoringCheckSettingsHttpOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsHttpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
func (o SyntheticMonitoringCheckSettingsHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Do not follow redirects. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *bool { return v.NoFollowRedirects }).(pulumi.BoolPtrOutput)
}

// The HTTP headers sent to the proxy URL
func (o SyntheticMonitoringCheckSettingsHttpOutput) ProxyConnectHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.ProxyConnectHeaders }).(pulumi.StringArrayOutput)
}

// Proxy URL.
func (o SyntheticMonitoringCheckSettingsHttpOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsHttpOutput) TlsConfig() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []string { return v.ValidHttpVersions }).(pulumi.StringArrayOutput)
}

// Accepted status codes. If unset, defaults to 2xx.
func (o SyntheticMonitoringCheckSettingsHttpOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttp) []int { return v.ValidStatusCodes }).(pulumi.IntArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutput() SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ToSyntheticMonitoringCheckSettingsHttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) SyntheticMonitoringCheckSettingsHttp {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttp
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpOutput)
}

// Basic auth settings.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) BasicAuth() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

// Token for use with bearer authorization header.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

// The body of the HTTP request used in probe.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.CacheBustingQueryParamName
	}).(pulumi.StringPtrOutput)
}

// List of regexes. If any match the response body, the check will fail.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// List of regexes. If any do not match the response body, the check will fail.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Check fails if headers match.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfHeaderMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

// Check fails if headers do not match.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfHeaderNotMatchesRegexps() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderNotMatchesRegexps
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

// Fail if SSL is not present. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfNotSsl
	}).(pulumi.BoolPtrOutput)
}

// Fail if SSL is present. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfSsl
	}).(pulumi.BoolPtrOutput)
}

// The HTTP headers set for the probe.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringArrayOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Do not follow redirects. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.NoFollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// The HTTP headers sent to the proxy URL
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ProxyConnectHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.ProxyConnectHeaders
	}).(pulumi.StringArrayOutput)
}

// Proxy URL.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUrl
	}).(pulumi.StringPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) TlsConfig() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.ValidHttpVersions
	}).(pulumi.StringArrayOutput)
}

// Accepted status codes. If unset, defaults to 2xx.
func (o SyntheticMonitoringCheckSettingsHttpPtrOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttp) []int {
		if v == nil {
			return nil
		}
		return v.ValidStatusCodes
	}).(pulumi.IntArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuth struct {
	// Basic auth password.
	Password string `pulumi:"password"`
	// Basic auth username.
	Username string `pulumi:"username"`
}

// SyntheticMonitoringCheckSettingsHttpBasicAuthInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpBasicAuthArgs and SyntheticMonitoringCheckSettingsHttpBasicAuthOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpBasicAuthInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{...}
type SyntheticMonitoringCheckSettingsHttpBasicAuthInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput
	ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthArgs struct {
	// Basic auth password.
	Password pulumi.StringInput `pulumi:"password"`
	// Basic auth username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput).ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpBasicAuthArgs, SyntheticMonitoringCheckSettingsHttpBasicAuthPtr and SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput
}

type syntheticMonitoringCheckSettingsHttpBasicAuthPtrType SyntheticMonitoringCheckSettingsHttpBasicAuthArgs

func SyntheticMonitoringCheckSettingsHttpBasicAuthPtr(v *SyntheticMonitoringCheckSettingsHttpBasicAuthArgs) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpBasicAuthPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpBasicAuthPtrType) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttpBasicAuth) *SyntheticMonitoringCheckSettingsHttpBasicAuth {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput)
}

// Basic auth password.
func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// Basic auth username.
func (o SyntheticMonitoringCheckSettingsHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput() SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) ToSyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpBasicAuthOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) SyntheticMonitoringCheckSettingsHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttpBasicAuth
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput)
}

// Basic auth password.
func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Basic auth username.
func (o SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Header name.
	Header string `pulumi:"header"`
	// Regex that header value should match.
	Regexp string `pulumi:"regexp"`
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs and SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...}
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	// Header name.
	Header pulumi.StringInput `pulumi:"header"`
	// Regex that header value should match.
	Regexp pulumi.StringInput `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray and SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{ SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...} }
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray []SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

// Allow header to be missing from responses. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

// Header name.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

// Regex that header value should match.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp {
		return vs[0].([]SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Header name.
	Header string `pulumi:"header"`
	// Regex that header value should match.
	Regexp string `pulumi:"regexp"`
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs and SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...}
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	// Header name.
	Header pulumi.StringInput `pulumi:"header"`
	// Regex that header value should match.
	Regexp pulumi.StringInput `pulumi:"regexp"`
}

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

// SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray and SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{ SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...} }
type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
	ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray []SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

// Allow header to be missing from responses. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

// Header name.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

// Regex that header value should match.
func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToSyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return vs[0].([]SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// SyntheticMonitoringCheckSettingsHttpTlsConfigInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpTlsConfigArgs and SyntheticMonitoringCheckSettingsHttpTlsConfigOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpTlsConfigInput` via:
//
//	SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{...}
type SyntheticMonitoringCheckSettingsHttpTlsConfigInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput
	ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput)
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput).ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsHttpTlsConfigArgs, SyntheticMonitoringCheckSettingsHttpTlsConfigPtr and SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput
	ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput
}

type syntheticMonitoringCheckSettingsHttpTlsConfigPtrType SyntheticMonitoringCheckSettingsHttpTlsConfigArgs

func SyntheticMonitoringCheckSettingsHttpTlsConfigPtr(v *SyntheticMonitoringCheckSettingsHttpTlsConfigArgs) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput {
	return (*syntheticMonitoringCheckSettingsHttpTlsConfigPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsHttpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsHttpTlsConfig) *SyntheticMonitoringCheckSettingsHttpTlsConfig {
		return &v
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsHttpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) Elem() SyntheticMonitoringCheckSettingsHttpTlsConfigOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) SyntheticMonitoringCheckSettingsHttpTlsConfig {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsHttpTlsConfig
		return ret
	}).(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttp struct {
	Entries []SyntheticMonitoringCheckSettingsMultihttpEntry `pulumi:"entries"`
}

// SyntheticMonitoringCheckSettingsMultihttpInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpArgs and SyntheticMonitoringCheckSettingsMultihttpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpOutput() SyntheticMonitoringCheckSettingsMultihttpOutput
	ToSyntheticMonitoringCheckSettingsMultihttpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpOutput
}

type SyntheticMonitoringCheckSettingsMultihttpArgs struct {
	Entries SyntheticMonitoringCheckSettingsMultihttpEntryArrayInput `pulumi:"entries"`
}

func (SyntheticMonitoringCheckSettingsMultihttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpArgs) ToSyntheticMonitoringCheckSettingsMultihttpOutput() SyntheticMonitoringCheckSettingsMultihttpOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpArgs) ToSyntheticMonitoringCheckSettingsMultihttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpOutput)
}

func (i SyntheticMonitoringCheckSettingsMultihttpArgs) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutput() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpArgs) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpOutput).ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsMultihttpPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpArgs, SyntheticMonitoringCheckSettingsMultihttpPtr and SyntheticMonitoringCheckSettingsMultihttpPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsMultihttpArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsMultihttpPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpPtrOutput() SyntheticMonitoringCheckSettingsMultihttpPtrOutput
	ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpPtrOutput
}

type syntheticMonitoringCheckSettingsMultihttpPtrType SyntheticMonitoringCheckSettingsMultihttpArgs

func SyntheticMonitoringCheckSettingsMultihttpPtr(v *SyntheticMonitoringCheckSettingsMultihttpArgs) SyntheticMonitoringCheckSettingsMultihttpPtrInput {
	return (*syntheticMonitoringCheckSettingsMultihttpPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsMultihttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsMultihttp)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsMultihttpPtrType) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutput() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsMultihttpPtrType) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpOutput) ToSyntheticMonitoringCheckSettingsMultihttpOutput() SyntheticMonitoringCheckSettingsMultihttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpOutput) ToSyntheticMonitoringCheckSettingsMultihttpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpOutput) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutput() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsMultihttpOutput) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsMultihttp) *SyntheticMonitoringCheckSettingsMultihttp {
		return &v
	}).(SyntheticMonitoringCheckSettingsMultihttpPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsMultihttpOutput) Entries() SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttp) []SyntheticMonitoringCheckSettingsMultihttpEntry {
		return v.Entries
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsMultihttp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpPtrOutput) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutput() SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpPtrOutput) ToSyntheticMonitoringCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpPtrOutput) Elem() SyntheticMonitoringCheckSettingsMultihttpOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttp) SyntheticMonitoringCheckSettingsMultihttp {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsMultihttp
		return ret
	}).(SyntheticMonitoringCheckSettingsMultihttpOutput)
}

func (o SyntheticMonitoringCheckSettingsMultihttpPtrOutput) Entries() SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttp) []SyntheticMonitoringCheckSettingsMultihttpEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntry struct {
	// Assertions to make on the request response
	Assertions []SyntheticMonitoringCheckSettingsMultihttpEntryAssertion `pulumi:"assertions"`
	// An individual MultiHTTP request
	Request *SyntheticMonitoringCheckSettingsMultihttpEntryRequest `pulumi:"request"`
	// Variables to extract from the request response
	Variables []SyntheticMonitoringCheckSettingsMultihttpEntryVariable `pulumi:"variables"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryArgs and SyntheticMonitoringCheckSettingsMultihttpEntryOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryOutput() SyntheticMonitoringCheckSettingsMultihttpEntryOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryArgs struct {
	// Assertions to make on the request response
	Assertions SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayInput `pulumi:"assertions"`
	// An individual MultiHTTP request
	Request SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput `pulumi:"request"`
	// Variables to extract from the request response
	Variables SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayInput `pulumi:"variables"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntry)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryOutput() SyntheticMonitoringCheckSettingsMultihttpEntryOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryArray and SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryArray{ SyntheticMonitoringCheckSettingsMultihttpEntryArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryArray []SyntheticMonitoringCheckSettingsMultihttpEntryInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntry)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntry)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryOutput() SyntheticMonitoringCheckSettingsMultihttpEntryOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryOutput {
	return o
}

// Assertions to make on the request response
func (o SyntheticMonitoringCheckSettingsMultihttpEntryOutput) Assertions() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntry) []SyntheticMonitoringCheckSettingsMultihttpEntryAssertion {
		return v.Assertions
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput)
}

// An individual MultiHTTP request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryOutput) Request() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntry) *SyntheticMonitoringCheckSettingsMultihttpEntryRequest {
		return v.Request
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput)
}

// Variables to extract from the request response
func (o SyntheticMonitoringCheckSettingsMultihttpEntryOutput) Variables() SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntry) []SyntheticMonitoringCheckSettingsMultihttpEntryVariable {
		return v.Variables
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntry)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntry {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntry)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryAssertion struct {
	// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
	Condition *string `pulumi:"condition"`
	// The expression of the assertion. Should start with $.
	Expression *string `pulumi:"expression"`
	// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
	Subject *string `pulumi:"subject"`
	// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
	Type string `pulumi:"type"`
	// The value of the assertion
	Value *string `pulumi:"value"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryAssertionInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs and SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryAssertionInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs struct {
	// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The expression of the assertion. Should start with $.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the assertion
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray and SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray{ SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray []SyntheticMonitoringCheckSettingsMultihttpEntryAssertionInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput {
	return o
}

// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryAssertion) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The expression of the assertion. Should start with $.
func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryAssertion) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryAssertion) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryAssertion) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the assertion
func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryAssertion) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntryAssertion {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntryAssertion)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequest struct {
	// The body of the HTTP request used in probe.
	Bodies []SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody `pulumi:"bodies"`
	// The headers to send with the request
	Headers []SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader `pulumi:"headers"`
	// The HTTP method to use
	Method string `pulumi:"method"`
	// Query fields to send with the request
	QueryFields []SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField `pulumi:"queryFields"`
	// The URL for the request
	Url string `pulumi:"url"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs and SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs struct {
	// The body of the HTTP request used in probe.
	Bodies SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayInput `pulumi:"bodies"`
	// The headers to send with the request
	Headers SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayInput `pulumi:"headers"`
	// The HTTP method to use
	Method pulumi.StringInput `pulumi:"method"`
	// Query fields to send with the request
	QueryFields SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayInput `pulumi:"queryFields"`
	// The URL for the request
	Url pulumi.StringInput `pulumi:"url"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput)
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput).ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs, SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtr and SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput
}

type syntheticMonitoringCheckSettingsMultihttpEntryRequestPtrType SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs

func SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtr(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput {
	return (*syntheticMonitoringCheckSettingsMultihttpEntryRequestPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsMultihttpEntryRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsMultihttpEntryRequestPtrType) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsMultihttpEntryRequestPtrType) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) *SyntheticMonitoringCheckSettingsMultihttpEntryRequest {
		return &v
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput)
}

// The body of the HTTP request used in probe.
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) Bodies() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody {
		return v.Bodies
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

// The headers to send with the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) Headers() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader {
		return v.Headers
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

// The HTTP method to use
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) string { return v.Method }).(pulumi.StringOutput)
}

// Query fields to send with the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) QueryFields() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField {
		return v.QueryFields
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

// The URL for the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequest) string { return v.Url }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) Elem() SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) SyntheticMonitoringCheckSettingsMultihttpEntryRequest {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsMultihttpEntryRequest
		return ret
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput)
}

// The body of the HTTP request used in probe.
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) Bodies() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody {
		if v == nil {
			return nil
		}
		return v.Bodies
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

// The headers to send with the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) Headers() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

// The HTTP method to use
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Query fields to send with the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) QueryFields() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) []SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField {
		if v == nil {
			return nil
		}
		return v.QueryFields
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

// The URL for the request
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsMultihttpEntryRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody struct {
	// The content encoding of the body
	ContentEncoding *string `pulumi:"contentEncoding"`
	// The content type of the body
	ContentType *string `pulumi:"contentType"`
	// The body payload
	Payload *string `pulumi:"payload"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs and SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs struct {
	// The content encoding of the body
	ContentEncoding pulumi.StringPtrInput `pulumi:"contentEncoding"`
	// The content type of the body
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The body payload
	Payload pulumi.StringPtrInput `pulumi:"payload"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray and SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray{ SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray []SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput {
	return o
}

// The content encoding of the body
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) ContentEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody) *string { return v.ContentEncoding }).(pulumi.StringPtrOutput)
}

// The content type of the body
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The body payload
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader struct {
	// Name of the header to send
	Name string `pulumi:"name"`
	// Value of the header to send
	Value string `pulumi:"value"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs and SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs struct {
	// Name of the header to send
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the header to send
	Value pulumi.StringInput `pulumi:"value"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray and SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray{ SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray []SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput {
	return o
}

// Name of the header to send
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the header to send
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader) string { return v.Value }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField struct {
	// Name of the query field to send
	Name string `pulumi:"name"`
	// Value of the query field to send
	Value string `pulumi:"value"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs and SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs struct {
	// Name of the query field to send
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the query field to send
	Value pulumi.StringInput `pulumi:"value"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray and SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray{ SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray []SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return o
}

// Name of the query field to send
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the query field to send
func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField) string { return v.Value }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryVariable struct {
	// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
	Attribute *string `pulumi:"attribute"`
	// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
	Expression *string `pulumi:"expression"`
	// The name of the variable to extract
	Name *string `pulumi:"name"`
	// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
	Type string `pulumi:"type"`
}

// SyntheticMonitoringCheckSettingsMultihttpEntryVariableInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs and SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryVariableInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs{...}
type SyntheticMonitoringCheckSettingsMultihttpEntryVariableInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs struct {
	// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
	Attribute pulumi.StringPtrInput `pulumi:"attribute"`
	// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The name of the variable to extract
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
	Type pulumi.StringInput `pulumi:"type"`
}

func (SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput)
}

// SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray and SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray{ SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs{...} }
type SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput
	ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput
}

type SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray []SyntheticMonitoringCheckSettingsMultihttpEntryVariableInput

func (SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput {
	return o
}

// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) Attribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryVariable) *string { return v.Attribute }).(pulumi.StringPtrOutput)
}

// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryVariable) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The name of the variable to extract
func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsMultihttpEntryVariable) string { return v.Type }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput() SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput) ToSyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsMultihttpEntryVariable {
		return vs[0].([]SyntheticMonitoringCheckSettingsMultihttpEntryVariable)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput)
}

type SyntheticMonitoringCheckSettingsPing struct {
	// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
	DontFragment *bool `pulumi:"dontFragment"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Payload size. Defaults to `0`.
	PayloadSize *int `pulumi:"payloadSize"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
}

// SyntheticMonitoringCheckSettingsPingInput is an input type that accepts SyntheticMonitoringCheckSettingsPingArgs and SyntheticMonitoringCheckSettingsPingOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPingInput` via:
//
//	SyntheticMonitoringCheckSettingsPingArgs{...}
type SyntheticMonitoringCheckSettingsPingInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput
	ToSyntheticMonitoringCheckSettingsPingOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPingOutput
}

type SyntheticMonitoringCheckSettingsPingArgs struct {
	// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
	DontFragment pulumi.BoolPtrInput `pulumi:"dontFragment"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Payload size. Defaults to `0`.
	PayloadSize pulumi.IntPtrInput `pulumi:"payloadSize"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
}

func (SyntheticMonitoringCheckSettingsPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingOutput)
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsPingArgs) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingOutput).ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsPingPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsPingArgs, SyntheticMonitoringCheckSettingsPingPtr and SyntheticMonitoringCheckSettingsPingPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsPingPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsPingArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsPingPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput
	ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput
}

type syntheticMonitoringCheckSettingsPingPtrType SyntheticMonitoringCheckSettingsPingArgs

func SyntheticMonitoringCheckSettingsPingPtr(v *SyntheticMonitoringCheckSettingsPingArgs) SyntheticMonitoringCheckSettingsPingPtrInput {
	return (*syntheticMonitoringCheckSettingsPingPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsPingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsPingPtrType) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsPingPtrType) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

type SyntheticMonitoringCheckSettingsPingOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutput() SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsPingOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsPing) *SyntheticMonitoringCheckSettingsPing {
		return &v
	}).(SyntheticMonitoringCheckSettingsPingPtrOutput)
}

// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsPingOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *bool { return v.DontFragment }).(pulumi.BoolPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsPingOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Payload size. Defaults to `0`.
func (o SyntheticMonitoringCheckSettingsPingOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *int { return v.PayloadSize }).(pulumi.IntPtrOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsPingOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsPing) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsPingPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsPingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsPing)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutput() SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) ToSyntheticMonitoringCheckSettingsPingPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsPingPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsPingPtrOutput) Elem() SyntheticMonitoringCheckSettingsPingOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) SyntheticMonitoringCheckSettingsPing {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsPing
		return ret
	}).(SyntheticMonitoringCheckSettingsPingOutput)
}

// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsPingPtrOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *bool {
		if v == nil {
			return nil
		}
		return v.DontFragment
	}).(pulumi.BoolPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsPingPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Payload size. Defaults to `0`.
func (o SyntheticMonitoringCheckSettingsPingPtrOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *int {
		if v == nil {
			return nil
		}
		return v.PayloadSize
	}).(pulumi.IntPtrOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsPingPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsScripted struct {
	Script string `pulumi:"script"`
}

// SyntheticMonitoringCheckSettingsScriptedInput is an input type that accepts SyntheticMonitoringCheckSettingsScriptedArgs and SyntheticMonitoringCheckSettingsScriptedOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsScriptedInput` via:
//
//	SyntheticMonitoringCheckSettingsScriptedArgs{...}
type SyntheticMonitoringCheckSettingsScriptedInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsScriptedOutput() SyntheticMonitoringCheckSettingsScriptedOutput
	ToSyntheticMonitoringCheckSettingsScriptedOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsScriptedOutput
}

type SyntheticMonitoringCheckSettingsScriptedArgs struct {
	Script pulumi.StringInput `pulumi:"script"`
}

func (SyntheticMonitoringCheckSettingsScriptedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsScripted)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsScriptedArgs) ToSyntheticMonitoringCheckSettingsScriptedOutput() SyntheticMonitoringCheckSettingsScriptedOutput {
	return i.ToSyntheticMonitoringCheckSettingsScriptedOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsScriptedArgs) ToSyntheticMonitoringCheckSettingsScriptedOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsScriptedOutput)
}

func (i SyntheticMonitoringCheckSettingsScriptedArgs) ToSyntheticMonitoringCheckSettingsScriptedPtrOutput() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsScriptedArgs) ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsScriptedOutput).ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsScriptedPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsScriptedArgs, SyntheticMonitoringCheckSettingsScriptedPtr and SyntheticMonitoringCheckSettingsScriptedPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsScriptedPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsScriptedArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsScriptedPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsScriptedPtrOutput() SyntheticMonitoringCheckSettingsScriptedPtrOutput
	ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsScriptedPtrOutput
}

type syntheticMonitoringCheckSettingsScriptedPtrType SyntheticMonitoringCheckSettingsScriptedArgs

func SyntheticMonitoringCheckSettingsScriptedPtr(v *SyntheticMonitoringCheckSettingsScriptedArgs) SyntheticMonitoringCheckSettingsScriptedPtrInput {
	return (*syntheticMonitoringCheckSettingsScriptedPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsScriptedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsScripted)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsScriptedPtrType) ToSyntheticMonitoringCheckSettingsScriptedPtrOutput() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsScriptedPtrType) ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsScriptedPtrOutput)
}

type SyntheticMonitoringCheckSettingsScriptedOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsScriptedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsScripted)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsScriptedOutput) ToSyntheticMonitoringCheckSettingsScriptedOutput() SyntheticMonitoringCheckSettingsScriptedOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsScriptedOutput) ToSyntheticMonitoringCheckSettingsScriptedOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsScriptedOutput) ToSyntheticMonitoringCheckSettingsScriptedPtrOutput() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsScriptedOutput) ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsScripted) *SyntheticMonitoringCheckSettingsScripted {
		return &v
	}).(SyntheticMonitoringCheckSettingsScriptedPtrOutput)
}

func (o SyntheticMonitoringCheckSettingsScriptedOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsScripted) string { return v.Script }).(pulumi.StringOutput)
}

type SyntheticMonitoringCheckSettingsScriptedPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsScriptedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsScripted)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsScriptedPtrOutput) ToSyntheticMonitoringCheckSettingsScriptedPtrOutput() SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsScriptedPtrOutput) ToSyntheticMonitoringCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsScriptedPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsScriptedPtrOutput) Elem() SyntheticMonitoringCheckSettingsScriptedOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsScripted) SyntheticMonitoringCheckSettingsScripted {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsScripted
		return ret
	}).(SyntheticMonitoringCheckSettingsScriptedOutput)
}

func (o SyntheticMonitoringCheckSettingsScriptedPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsScripted) *string {
		if v == nil {
			return nil
		}
		return &v.Script
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcp struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// The query sent in the TCP probe and the expected associated response.
	QueryResponses []SyntheticMonitoringCheckSettingsTcpQueryResponse `pulumi:"queryResponses"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls *bool `pulumi:"tls"`
	// TLS config.
	TlsConfig *SyntheticMonitoringCheckSettingsTcpTlsConfig `pulumi:"tlsConfig"`
}

// SyntheticMonitoringCheckSettingsTcpInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpArgs and SyntheticMonitoringCheckSettingsTcpOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpArgs{...}
type SyntheticMonitoringCheckSettingsTcpInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput
	ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpOutput
}

type SyntheticMonitoringCheckSettingsTcpArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// The query sent in the TCP probe and the expected associated response.
	QueryResponses SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput `pulumi:"queryResponses"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// TLS config.
	TlsConfig SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput `pulumi:"tlsConfig"`
}

func (SyntheticMonitoringCheckSettingsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpOutput)
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpArgs) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpOutput).ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTcpPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpArgs, SyntheticMonitoringCheckSettingsTcpPtr and SyntheticMonitoringCheckSettingsTcpPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTcpArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTcpPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput
	ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput
}

type syntheticMonitoringCheckSettingsTcpPtrType SyntheticMonitoringCheckSettingsTcpArgs

func SyntheticMonitoringCheckSettingsTcpPtr(v *SyntheticMonitoringCheckSettingsTcpArgs) SyntheticMonitoringCheckSettingsTcpPtrInput {
	return (*syntheticMonitoringCheckSettingsTcpPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTcpPtrType) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTcpPtrType) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutput() SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTcpOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcp {
		return &v
	}).(SyntheticMonitoringCheckSettingsTcpPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsTcpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// The query sent in the TCP probe and the expected associated response.
func (o SyntheticMonitoringCheckSettingsTcpOutput) QueryResponses() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) []SyntheticMonitoringCheckSettingsTcpQueryResponse {
		return v.QueryResponses
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsTcpOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsTcpOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsTcpOutput) TlsConfig() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcp)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutput() SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) ToSyntheticMonitoringCheckSettingsTcpPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) Elem() SyntheticMonitoringCheckSettingsTcpOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) SyntheticMonitoringCheckSettingsTcp {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTcp
		return ret
	}).(SyntheticMonitoringCheckSettingsTcpOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// The query sent in the TCP probe and the expected associated response.
func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) QueryResponses() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) []SyntheticMonitoringCheckSettingsTcpQueryResponse {
		if v == nil {
			return nil
		}
		return v.QueryResponses
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

// Source IP address.
func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o SyntheticMonitoringCheckSettingsTcpPtrOutput) TlsConfig() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcp) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponse struct {
	// Response to expect.
	Expect string `pulumi:"expect"`
	// Data to send.
	Send string `pulumi:"send"`
	// Upgrade TCP connection to TLS. Defaults to `false`.
	StartTls *bool `pulumi:"startTls"`
}

// SyntheticMonitoringCheckSettingsTcpQueryResponseInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpQueryResponseArgs and SyntheticMonitoringCheckSettingsTcpQueryResponseOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpQueryResponseInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{...}
type SyntheticMonitoringCheckSettingsTcpQueryResponseInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput
	ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArgs struct {
	// Response to expect.
	Expect pulumi.StringInput `pulumi:"expect"`
	// Data to send.
	Send pulumi.StringInput `pulumi:"send"`
	// Upgrade TCP connection to TLS. Defaults to `false`.
	StartTls pulumi.BoolPtrInput `pulumi:"startTls"`
}

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArgs) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput)
}

// SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpQueryResponseArray and SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpQueryResponseArray{ SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{...} }
type SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput
	ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArray []SyntheticMonitoringCheckSettingsTcpQueryResponseInput

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpQueryResponseArray) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return o
}

// Response to expect.
func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Expect() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Expect }).(pulumi.StringOutput)
}

// Data to send.
func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) Send() pulumi.StringOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) string { return v.Send }).(pulumi.StringOutput)
}

// Upgrade TCP connection to TLS. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsTcpQueryResponseOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpQueryResponse) *bool { return v.StartTls }).(pulumi.BoolPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SyntheticMonitoringCheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput() SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) ToSyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput) Index(i pulumi.IntInput) SyntheticMonitoringCheckSettingsTcpQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SyntheticMonitoringCheckSettingsTcpQueryResponse {
		return vs[0].([]SyntheticMonitoringCheckSettingsTcpQueryResponse)[vs[1].(int)]
	}).(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// SyntheticMonitoringCheckSettingsTcpTlsConfigInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpTlsConfigArgs and SyntheticMonitoringCheckSettingsTcpTlsConfigOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpTlsConfigInput` via:
//
//	SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{...}
type SyntheticMonitoringCheckSettingsTcpTlsConfigInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput
	ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput)
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput).ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTcpTlsConfigArgs, SyntheticMonitoringCheckSettingsTcpTlsConfigPtr and SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput
	ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput
}

type syntheticMonitoringCheckSettingsTcpTlsConfigPtrType SyntheticMonitoringCheckSettingsTcpTlsConfigArgs

func SyntheticMonitoringCheckSettingsTcpTlsConfigPtr(v *SyntheticMonitoringCheckSettingsTcpTlsConfigArgs) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput {
	return (*syntheticMonitoringCheckSettingsTcpTlsConfigPtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTcpTlsConfigPtrType) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTcpTlsConfig) *SyntheticMonitoringCheckSettingsTcpTlsConfig {
		return &v
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTcpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput() SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ToSyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) Elem() SyntheticMonitoringCheckSettingsTcpTlsConfigOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) SyntheticMonitoringCheckSettingsTcpTlsConfig {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTcpTlsConfig
		return ret
	}).(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput)
}

// CA certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type SyntheticMonitoringCheckSettingsTraceroute struct {
	// Maximum TTL for the trace Defaults to `64`.
	MaxHops *int `pulumi:"maxHops"`
	// Maximum number of hosts to travers that give no response Defaults to `15`.
	MaxUnknownHops *int `pulumi:"maxUnknownHops"`
	// Reverse lookup hostnames from IP addresses Defaults to `true`.
	PtrLookup *bool `pulumi:"ptrLookup"`
}

// SyntheticMonitoringCheckSettingsTracerouteInput is an input type that accepts SyntheticMonitoringCheckSettingsTracerouteArgs and SyntheticMonitoringCheckSettingsTracerouteOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTracerouteInput` via:
//
//	SyntheticMonitoringCheckSettingsTracerouteArgs{...}
type SyntheticMonitoringCheckSettingsTracerouteInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput
	ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput
}

type SyntheticMonitoringCheckSettingsTracerouteArgs struct {
	// Maximum TTL for the trace Defaults to `64`.
	MaxHops pulumi.IntPtrInput `pulumi:"maxHops"`
	// Maximum number of hosts to travers that give no response Defaults to `15`.
	MaxUnknownHops pulumi.IntPtrInput `pulumi:"maxUnknownHops"`
	// Reverse lookup hostnames from IP addresses Defaults to `true`.
	PtrLookup pulumi.BoolPtrInput `pulumi:"ptrLookup"`
}

func (SyntheticMonitoringCheckSettingsTracerouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return i.ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTracerouteOutput)
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i SyntheticMonitoringCheckSettingsTracerouteArgs) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTracerouteOutput).ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx)
}

// SyntheticMonitoringCheckSettingsTraceroutePtrInput is an input type that accepts SyntheticMonitoringCheckSettingsTracerouteArgs, SyntheticMonitoringCheckSettingsTraceroutePtr and SyntheticMonitoringCheckSettingsTraceroutePtrOutput values.
// You can construct a concrete instance of `SyntheticMonitoringCheckSettingsTraceroutePtrInput` via:
//
//	        SyntheticMonitoringCheckSettingsTracerouteArgs{...}
//
//	or:
//
//	        nil
type SyntheticMonitoringCheckSettingsTraceroutePtrInput interface {
	pulumi.Input

	ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput
	ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput
}

type syntheticMonitoringCheckSettingsTraceroutePtrType SyntheticMonitoringCheckSettingsTracerouteArgs

func SyntheticMonitoringCheckSettingsTraceroutePtr(v *SyntheticMonitoringCheckSettingsTracerouteArgs) SyntheticMonitoringCheckSettingsTraceroutePtrInput {
	return (*syntheticMonitoringCheckSettingsTraceroutePtrType)(v)
}

func (*syntheticMonitoringCheckSettingsTraceroutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (i *syntheticMonitoringCheckSettingsTraceroutePtrType) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return i.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i *syntheticMonitoringCheckSettingsTraceroutePtrType) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

type SyntheticMonitoringCheckSettingsTracerouteOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTracerouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutput() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTracerouteOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (o SyntheticMonitoringCheckSettingsTracerouteOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SyntheticMonitoringCheckSettingsTraceroute) *SyntheticMonitoringCheckSettingsTraceroute {
		return &v
	}).(SyntheticMonitoringCheckSettingsTraceroutePtrOutput)
}

// Maximum TTL for the trace Defaults to `64`.
func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxHops }).(pulumi.IntPtrOutput)
}

// Maximum number of hosts to travers that give no response Defaults to `15`.
func (o SyntheticMonitoringCheckSettingsTracerouteOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *int { return v.MaxUnknownHops }).(pulumi.IntPtrOutput)
}

// Reverse lookup hostnames from IP addresses Defaults to `true`.
func (o SyntheticMonitoringCheckSettingsTracerouteOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SyntheticMonitoringCheckSettingsTraceroute) *bool { return v.PtrLookup }).(pulumi.BoolPtrOutput)
}

type SyntheticMonitoringCheckSettingsTraceroutePtrOutput struct{ *pulumi.OutputState }

func (SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SyntheticMonitoringCheckSettingsTraceroute)(nil)).Elem()
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutput() SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) ToSyntheticMonitoringCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) SyntheticMonitoringCheckSettingsTraceroutePtrOutput {
	return o
}

func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) Elem() SyntheticMonitoringCheckSettingsTracerouteOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) SyntheticMonitoringCheckSettingsTraceroute {
		if v != nil {
			return *v
		}
		var ret SyntheticMonitoringCheckSettingsTraceroute
		return ret
	}).(SyntheticMonitoringCheckSettingsTracerouteOutput)
}

// Maximum TTL for the trace Defaults to `64`.
func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxHops
	}).(pulumi.IntPtrOutput)
}

// Maximum number of hosts to travers that give no response Defaults to `15`.
func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnknownHops
	}).(pulumi.IntPtrOutput)
}

// Reverse lookup hostnames from IP addresses Defaults to `true`.
func (o SyntheticMonitoringCheckSettingsTraceroutePtrOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SyntheticMonitoringCheckSettingsTraceroute) *bool {
		if v == nil {
			return nil
		}
		return v.PtrLookup
	}).(pulumi.BoolPtrOutput)
}

type TeamPreferences struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart *string `pulumi:"weekStart"`
}

// TeamPreferencesInput is an input type that accepts TeamPreferencesArgs and TeamPreferencesOutput values.
// You can construct a concrete instance of `TeamPreferencesInput` via:
//
//	TeamPreferencesArgs{...}
type TeamPreferencesInput interface {
	pulumi.Input

	ToTeamPreferencesOutput() TeamPreferencesOutput
	ToTeamPreferencesOutputWithContext(context.Context) TeamPreferencesOutput
}

type TeamPreferencesArgs struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid pulumi.StringPtrInput `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart pulumi.StringPtrInput `pulumi:"weekStart"`
}

func (TeamPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return i.ToTeamPreferencesOutputWithContext(context.Background())
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput)
}

func (i TeamPreferencesArgs) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return i.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (i TeamPreferencesArgs) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput).ToTeamPreferencesPtrOutputWithContext(ctx)
}

// TeamPreferencesPtrInput is an input type that accepts TeamPreferencesArgs, TeamPreferencesPtr and TeamPreferencesPtrOutput values.
// You can construct a concrete instance of `TeamPreferencesPtrInput` via:
//
//	        TeamPreferencesArgs{...}
//
//	or:
//
//	        nil
type TeamPreferencesPtrInput interface {
	pulumi.Input

	ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput
	ToTeamPreferencesPtrOutputWithContext(context.Context) TeamPreferencesPtrOutput
}

type teamPreferencesPtrType TeamPreferencesArgs

func TeamPreferencesPtr(v *TeamPreferencesArgs) TeamPreferencesPtrInput {
	return (*teamPreferencesPtrType)(v)
}

func (*teamPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (i *teamPreferencesPtrType) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return i.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (i *teamPreferencesPtrType) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesPtrOutput)
}

type TeamPreferencesOutput struct{ *pulumi.OutputState }

func (TeamPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return o.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (o TeamPreferencesOutput) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeamPreferences) *TeamPreferences {
		return &v
	}).(TeamPreferencesPtrOutput)
}

// The UID of the dashboard to display when a team member logs in.
func (o TeamPreferencesOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.HomeDashboardUid }).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o TeamPreferencesOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.Theme }).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o TeamPreferencesOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o TeamPreferencesOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.WeekStart }).(pulumi.StringPtrOutput)
}

type TeamPreferencesPtrOutput struct{ *pulumi.OutputState }

func (TeamPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesPtrOutput) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return o
}

func (o TeamPreferencesPtrOutput) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return o
}

func (o TeamPreferencesPtrOutput) Elem() TeamPreferencesOutput {
	return o.ApplyT(func(v *TeamPreferences) TeamPreferences {
		if v != nil {
			return *v
		}
		var ret TeamPreferences
		return ret
	}).(TeamPreferencesOutput)
}

// The UID of the dashboard to display when a team member logs in.
func (o TeamPreferencesPtrOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.HomeDashboardUid
	}).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o TeamPreferencesPtrOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.Theme
	}).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o TeamPreferencesPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o TeamPreferencesPtrOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.WeekStart
	}).(pulumi.StringPtrOutput)
}

type TeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

// TeamTeamSyncInput is an input type that accepts TeamTeamSyncArgs and TeamTeamSyncOutput values.
// You can construct a concrete instance of `TeamTeamSyncInput` via:
//
//	TeamTeamSyncArgs{...}
type TeamTeamSyncInput interface {
	pulumi.Input

	ToTeamTeamSyncOutput() TeamTeamSyncOutput
	ToTeamTeamSyncOutputWithContext(context.Context) TeamTeamSyncOutput
}

type TeamTeamSyncArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
}

func (TeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return i.ToTeamTeamSyncOutputWithContext(context.Background())
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncOutput)
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return i.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncOutput).ToTeamTeamSyncPtrOutputWithContext(ctx)
}

// TeamTeamSyncPtrInput is an input type that accepts TeamTeamSyncArgs, TeamTeamSyncPtr and TeamTeamSyncPtrOutput values.
// You can construct a concrete instance of `TeamTeamSyncPtrInput` via:
//
//	        TeamTeamSyncArgs{...}
//
//	or:
//
//	        nil
type TeamTeamSyncPtrInput interface {
	pulumi.Input

	ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput
	ToTeamTeamSyncPtrOutputWithContext(context.Context) TeamTeamSyncPtrOutput
}

type teamTeamSyncPtrType TeamTeamSyncArgs

func TeamTeamSyncPtr(v *TeamTeamSyncArgs) TeamTeamSyncPtrInput {
	return (*teamTeamSyncPtrType)(v)
}

func (*teamTeamSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamTeamSync)(nil)).Elem()
}

func (i *teamTeamSyncPtrType) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return i.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (i *teamTeamSyncPtrType) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncPtrOutput)
}

type TeamTeamSyncOutput struct{ *pulumi.OutputState }

func (TeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return o.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeamTeamSync) *TeamTeamSync {
		return &v
	}).(TeamTeamSyncPtrOutput)
}

func (o TeamTeamSyncOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeamTeamSync) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

type TeamTeamSyncPtrOutput struct{ *pulumi.OutputState }

func (TeamTeamSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamTeamSync)(nil)).Elem()
}

func (o TeamTeamSyncPtrOutput) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return o
}

func (o TeamTeamSyncPtrOutput) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return o
}

func (o TeamTeamSyncPtrOutput) Elem() TeamTeamSyncOutput {
	return o.ApplyT(func(v *TeamTeamSync) TeamTeamSync {
		if v != nil {
			return *v
		}
		var ret TeamTeamSync
		return ret
	}).(TeamTeamSyncOutput)
}

func (o TeamTeamSyncPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamTeamSync) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

type GetDashboardsDashboard struct {
	FolderTitle string `pulumi:"folderTitle"`
	Title       string `pulumi:"title"`
	Uid         string `pulumi:"uid"`
}

// GetDashboardsDashboardInput is an input type that accepts GetDashboardsDashboardArgs and GetDashboardsDashboardOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardInput` via:
//
//	GetDashboardsDashboardArgs{...}
type GetDashboardsDashboardInput interface {
	pulumi.Input

	ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput
	ToGetDashboardsDashboardOutputWithContext(context.Context) GetDashboardsDashboardOutput
}

type GetDashboardsDashboardArgs struct {
	FolderTitle pulumi.StringInput `pulumi:"folderTitle"`
	Title       pulumi.StringInput `pulumi:"title"`
	Uid         pulumi.StringInput `pulumi:"uid"`
}

func (GetDashboardsDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return i.ToGetDashboardsDashboardOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardOutput)
}

// GetDashboardsDashboardArrayInput is an input type that accepts GetDashboardsDashboardArray and GetDashboardsDashboardArrayOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardArrayInput` via:
//
//	GetDashboardsDashboardArray{ GetDashboardsDashboardArgs{...} }
type GetDashboardsDashboardArrayInput interface {
	pulumi.Input

	ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput
	ToGetDashboardsDashboardArrayOutputWithContext(context.Context) GetDashboardsDashboardArrayOutput
}

type GetDashboardsDashboardArray []GetDashboardsDashboardInput

func (GetDashboardsDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return i.ToGetDashboardsDashboardArrayOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardArrayOutput)
}

type GetDashboardsDashboardOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) FolderTitle() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.FolderTitle }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Uid }).(pulumi.StringOutput)
}

type GetDashboardsDashboardArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) Index(i pulumi.IntInput) GetDashboardsDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardsDashboard {
		return vs[0].([]GetDashboardsDashboard)[vs[1].(int)]
	}).(GetDashboardsDashboardOutput)
}

type GetFoldersFolder struct {
	// The folder ID.
	Id int `pulumi:"id"`
	// The folder title.
	Title string `pulumi:"title"`
	// The folder's unique identifier.
	Uid string `pulumi:"uid"`
	// The folder's URL
	Url string `pulumi:"url"`
}

// GetFoldersFolderInput is an input type that accepts GetFoldersFolderArgs and GetFoldersFolderOutput values.
// You can construct a concrete instance of `GetFoldersFolderInput` via:
//
//	GetFoldersFolderArgs{...}
type GetFoldersFolderInput interface {
	pulumi.Input

	ToGetFoldersFolderOutput() GetFoldersFolderOutput
	ToGetFoldersFolderOutputWithContext(context.Context) GetFoldersFolderOutput
}

type GetFoldersFolderArgs struct {
	// The folder ID.
	Id pulumi.IntInput `pulumi:"id"`
	// The folder title.
	Title pulumi.StringInput `pulumi:"title"`
	// The folder's unique identifier.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The folder's URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetFoldersFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return i.ToGetFoldersFolderOutputWithContext(context.Background())
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderOutput)
}

// GetFoldersFolderArrayInput is an input type that accepts GetFoldersFolderArray and GetFoldersFolderArrayOutput values.
// You can construct a concrete instance of `GetFoldersFolderArrayInput` via:
//
//	GetFoldersFolderArray{ GetFoldersFolderArgs{...} }
type GetFoldersFolderArrayInput interface {
	pulumi.Input

	ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput
	ToGetFoldersFolderArrayOutputWithContext(context.Context) GetFoldersFolderArrayOutput
}

type GetFoldersFolderArray []GetFoldersFolderInput

func (GetFoldersFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return i.ToGetFoldersFolderArrayOutputWithContext(context.Background())
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderArrayOutput)
}

type GetFoldersFolderOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return o
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return o
}

// The folder ID.
func (o GetFoldersFolderOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetFoldersFolder) int { return v.Id }).(pulumi.IntOutput)
}

// The folder title.
func (o GetFoldersFolderOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Title }).(pulumi.StringOutput)
}

// The folder's unique identifier.
func (o GetFoldersFolderOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Uid }).(pulumi.StringOutput)
}

// The folder's URL
func (o GetFoldersFolderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Url }).(pulumi.StringOutput)
}

type GetFoldersFolderArrayOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) Index(i pulumi.IntInput) GetFoldersFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFoldersFolder {
		return vs[0].([]GetFoldersFolder)[vs[1].(int)]
	}).(GetFoldersFolderOutput)
}

type GetRolePermission struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action string `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope *string `pulumi:"scope"`
}

// GetRolePermissionInput is an input type that accepts GetRolePermissionArgs and GetRolePermissionOutput values.
// You can construct a concrete instance of `GetRolePermissionInput` via:
//
//	GetRolePermissionArgs{...}
type GetRolePermissionInput interface {
	pulumi.Input

	ToGetRolePermissionOutput() GetRolePermissionOutput
	ToGetRolePermissionOutputWithContext(context.Context) GetRolePermissionOutput
}

type GetRolePermissionArgs struct {
	// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
	Action pulumi.StringInput `pulumi:"action"`
	// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
	Scope pulumi.StringPtrInput `pulumi:"scope"`
}

func (GetRolePermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return i.ToGetRolePermissionOutputWithContext(context.Background())
}

func (i GetRolePermissionArgs) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePermissionOutput)
}

// GetRolePermissionArrayInput is an input type that accepts GetRolePermissionArray and GetRolePermissionArrayOutput values.
// You can construct a concrete instance of `GetRolePermissionArrayInput` via:
//
//	GetRolePermissionArray{ GetRolePermissionArgs{...} }
type GetRolePermissionArrayInput interface {
	pulumi.Input

	ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput
	ToGetRolePermissionArrayOutputWithContext(context.Context) GetRolePermissionArrayOutput
}

type GetRolePermissionArray []GetRolePermissionInput

func (GetRolePermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePermission)(nil)).Elem()
}

func (i GetRolePermissionArray) ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput {
	return i.ToGetRolePermissionArrayOutputWithContext(context.Background())
}

func (i GetRolePermissionArray) ToGetRolePermissionArrayOutputWithContext(ctx context.Context) GetRolePermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePermissionArrayOutput)
}

type GetRolePermissionOutput struct{ *pulumi.OutputState }

func (GetRolePermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePermission)(nil)).Elem()
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutput() GetRolePermissionOutput {
	return o
}

func (o GetRolePermissionOutput) ToGetRolePermissionOutputWithContext(ctx context.Context) GetRolePermissionOutput {
	return o
}

// Specific action users granted with the role will be allowed to perform (for example: `users:read`)
func (o GetRolePermissionOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePermission) string { return v.Action }).(pulumi.StringOutput)
}

// Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)
func (o GetRolePermissionOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRolePermission) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

type GetRolePermissionArrayOutput struct{ *pulumi.OutputState }

func (GetRolePermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePermission)(nil)).Elem()
}

func (o GetRolePermissionArrayOutput) ToGetRolePermissionArrayOutput() GetRolePermissionArrayOutput {
	return o
}

func (o GetRolePermissionArrayOutput) ToGetRolePermissionArrayOutputWithContext(ctx context.Context) GetRolePermissionArrayOutput {
	return o
}

func (o GetRolePermissionArrayOutput) Index(i pulumi.IntInput) GetRolePermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolePermission {
		return vs[0].([]GetRolePermission)[vs[1].(int)]
	}).(GetRolePermissionOutput)
}

type GetSlosSlo struct {
	// Configures the alerting rules that will be generated for each
	// 				time window associated with the SLO. Grafana SLOs can generate
	// 				alerts when the short-term error budget burn is very high, the
	// 				long-term error budget burn rate is high, or when the remaining
	// 				error budget is below a certain threshold. Annotations and Labels support templating.
	Alertings []GetSlosSloAlerting `pulumi:"alertings"`
	// Description is a free-text field that can provide more context to an SLO.
	Description string `pulumi:"description"`
	// Destination Datasource sets the datasource defined for an SLO
	DestinationDatasources []GetSlosSloDestinationDatasource `pulumi:"destinationDatasources"`
	// UID for the SLO folder
	FolderUid string `pulumi:"folderUid"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	Labels []GetSlosSloLabel `pulumi:"labels"`
	// Name should be a short description of your indicator. Consider names like "API Availability"
	Name string `pulumi:"name"`
	// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
	Objectives []GetSlosSloObjective `pulumi:"objectives"`
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Queries []GetSlosSloQuery `pulumi:"queries"`
	// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
	Uuid string `pulumi:"uuid"`
}

// GetSlosSloInput is an input type that accepts GetSlosSloArgs and GetSlosSloOutput values.
// You can construct a concrete instance of `GetSlosSloInput` via:
//
//	GetSlosSloArgs{...}
type GetSlosSloInput interface {
	pulumi.Input

	ToGetSlosSloOutput() GetSlosSloOutput
	ToGetSlosSloOutputWithContext(context.Context) GetSlosSloOutput
}

type GetSlosSloArgs struct {
	// Configures the alerting rules that will be generated for each
	// 				time window associated with the SLO. Grafana SLOs can generate
	// 				alerts when the short-term error budget burn is very high, the
	// 				long-term error budget burn rate is high, or when the remaining
	// 				error budget is below a certain threshold. Annotations and Labels support templating.
	Alertings GetSlosSloAlertingArrayInput `pulumi:"alertings"`
	// Description is a free-text field that can provide more context to an SLO.
	Description pulumi.StringInput `pulumi:"description"`
	// Destination Datasource sets the datasource defined for an SLO
	DestinationDatasources GetSlosSloDestinationDatasourceArrayInput `pulumi:"destinationDatasources"`
	// UID for the SLO folder
	FolderUid pulumi.StringInput `pulumi:"folderUid"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	Labels GetSlosSloLabelArrayInput `pulumi:"labels"`
	// Name should be a short description of your indicator. Consider names like "API Availability"
	Name pulumi.StringInput `pulumi:"name"`
	// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
	Objectives GetSlosSloObjectiveArrayInput `pulumi:"objectives"`
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Queries GetSlosSloQueryArrayInput `pulumi:"queries"`
	// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (GetSlosSloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (i GetSlosSloArgs) ToGetSlosSloOutput() GetSlosSloOutput {
	return i.ToGetSlosSloOutputWithContext(context.Background())
}

func (i GetSlosSloArgs) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloOutput)
}

// GetSlosSloArrayInput is an input type that accepts GetSlosSloArray and GetSlosSloArrayOutput values.
// You can construct a concrete instance of `GetSlosSloArrayInput` via:
//
//	GetSlosSloArray{ GetSlosSloArgs{...} }
type GetSlosSloArrayInput interface {
	pulumi.Input

	ToGetSlosSloArrayOutput() GetSlosSloArrayOutput
	ToGetSlosSloArrayOutputWithContext(context.Context) GetSlosSloArrayOutput
}

type GetSlosSloArray []GetSlosSloInput

func (GetSlosSloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSlo)(nil)).Elem()
}

func (i GetSlosSloArray) ToGetSlosSloArrayOutput() GetSlosSloArrayOutput {
	return i.ToGetSlosSloArrayOutputWithContext(context.Background())
}

func (i GetSlosSloArray) ToGetSlosSloArrayOutputWithContext(ctx context.Context) GetSlosSloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloArrayOutput)
}

type GetSlosSloOutput struct{ *pulumi.OutputState }

func (GetSlosSloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (o GetSlosSloOutput) ToGetSlosSloOutput() GetSlosSloOutput {
	return o
}

func (o GetSlosSloOutput) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return o
}

// Configures the alerting rules that will be generated for each
//
//	time window associated with the SLO. Grafana SLOs can generate
//	alerts when the short-term error budget burn is very high, the
//	long-term error budget burn rate is high, or when the remaining
//	error budget is below a certain threshold. Annotations and Labels support templating.
func (o GetSlosSloOutput) Alertings() GetSlosSloAlertingArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloAlerting { return v.Alertings }).(GetSlosSloAlertingArrayOutput)
}

// Description is a free-text field that can provide more context to an SLO.
func (o GetSlosSloOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Description }).(pulumi.StringOutput)
}

// Destination Datasource sets the datasource defined for an SLO
func (o GetSlosSloOutput) DestinationDatasources() GetSlosSloDestinationDatasourceArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloDestinationDatasource { return v.DestinationDatasources }).(GetSlosSloDestinationDatasourceArrayOutput)
}

// UID for the SLO folder
func (o GetSlosSloOutput) FolderUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.FolderUid }).(pulumi.StringOutput)
}

// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloOutput) Labels() GetSlosSloLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloLabel { return v.Labels }).(GetSlosSloLabelArrayOutput)
}

// Name should be a short description of your indicator. Consider names like "API Availability"
func (o GetSlosSloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Name }).(pulumi.StringOutput)
}

// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
func (o GetSlosSloOutput) Objectives() GetSlosSloObjectiveArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloObjective { return v.Objectives }).(GetSlosSloObjectiveArrayOutput)
}

// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
func (o GetSlosSloOutput) Queries() GetSlosSloQueryArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloQuery { return v.Queries }).(GetSlosSloQueryArrayOutput)
}

// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
func (o GetSlosSloOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetSlosSloArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSlo)(nil)).Elem()
}

func (o GetSlosSloArrayOutput) ToGetSlosSloArrayOutput() GetSlosSloArrayOutput {
	return o
}

func (o GetSlosSloArrayOutput) ToGetSlosSloArrayOutputWithContext(ctx context.Context) GetSlosSloArrayOutput {
	return o
}

func (o GetSlosSloArrayOutput) Index(i pulumi.IntInput) GetSlosSloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSlo {
		return vs[0].([]GetSlosSlo)[vs[1].(int)]
	}).(GetSlosSloOutput)
}

type GetSlosSloAlerting struct {
	// Advanced Options for Alert Rules
	AdvancedOptions *GetSlosSloAlertingAdvancedOptions `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []GetSlosSloAlertingAnnotation `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburn *GetSlosSloAlertingFastburn `pulumi:"fastburn"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels []GetSlosSloAlertingLabel `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburn *GetSlosSloAlertingSlowburn `pulumi:"slowburn"`
}

// GetSlosSloAlertingInput is an input type that accepts GetSlosSloAlertingArgs and GetSlosSloAlertingOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingInput` via:
//
//	GetSlosSloAlertingArgs{...}
type GetSlosSloAlertingInput interface {
	pulumi.Input

	ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput
	ToGetSlosSloAlertingOutputWithContext(context.Context) GetSlosSloAlertingOutput
}

type GetSlosSloAlertingArgs struct {
	// Advanced Options for Alert Rules
	AdvancedOptions GetSlosSloAlertingAdvancedOptionsPtrInput `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations GetSlosSloAlertingAnnotationArrayInput `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburn GetSlosSloAlertingFastburnPtrInput `pulumi:"fastburn"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels GetSlosSloAlertingLabelArrayInput `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburn GetSlosSloAlertingSlowburnPtrInput `pulumi:"slowburn"`
}

func (GetSlosSloAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return i.ToGetSlosSloAlertingOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingOutput)
}

// GetSlosSloAlertingArrayInput is an input type that accepts GetSlosSloAlertingArray and GetSlosSloAlertingArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingArrayInput` via:
//
//	GetSlosSloAlertingArray{ GetSlosSloAlertingArgs{...} }
type GetSlosSloAlertingArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput
	ToGetSlosSloAlertingArrayOutputWithContext(context.Context) GetSlosSloAlertingArrayOutput
}

type GetSlosSloAlertingArray []GetSlosSloAlertingInput

func (GetSlosSloAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlerting)(nil)).Elem()
}

func (i GetSlosSloAlertingArray) ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput {
	return i.ToGetSlosSloAlertingArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingArray) ToGetSlosSloAlertingArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingArrayOutput)
}

type GetSlosSloAlertingOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return o
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return o
}

// Advanced Options for Alert Rules
func (o GetSlosSloAlertingOutput) AdvancedOptions() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) *GetSlosSloAlertingAdvancedOptions { return v.AdvancedOptions }).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

// Annotations will be attached to all alerts generated by any of these rules.
func (o GetSlosSloAlertingOutput) Annotations() GetSlosSloAlertingAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingAnnotation { return v.Annotations }).(GetSlosSloAlertingAnnotationArrayOutput)
}

// Alerting Rules generated for Fast Burn alerts
func (o GetSlosSloAlertingOutput) Fastburn() GetSlosSloAlertingFastburnPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) *GetSlosSloAlertingFastburn { return v.Fastburn }).(GetSlosSloAlertingFastburnPtrOutput)
}

// Labels will be attached to all alerts generated by any of these rules.
func (o GetSlosSloAlertingOutput) Labels() GetSlosSloAlertingLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingLabel { return v.Labels }).(GetSlosSloAlertingLabelArrayOutput)
}

// Alerting Rules generated for Slow Burn alerts
func (o GetSlosSloAlertingOutput) Slowburn() GetSlosSloAlertingSlowburnPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) *GetSlosSloAlertingSlowburn { return v.Slowburn }).(GetSlosSloAlertingSlowburnPtrOutput)
}

type GetSlosSloAlertingArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlerting)(nil)).Elem()
}

func (o GetSlosSloAlertingArrayOutput) ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput {
	return o
}

func (o GetSlosSloAlertingArrayOutput) ToGetSlosSloAlertingArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingArrayOutput {
	return o
}

func (o GetSlosSloAlertingArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlerting {
		return vs[0].([]GetSlosSloAlerting)[vs[1].(int)]
	}).(GetSlosSloAlertingOutput)
}

type GetSlosSloAlertingAdvancedOptions struct {
	// Minimum number of failed events to trigger an alert
	MinFailures *int `pulumi:"minFailures"`
}

// GetSlosSloAlertingAdvancedOptionsInput is an input type that accepts GetSlosSloAlertingAdvancedOptionsArgs and GetSlosSloAlertingAdvancedOptionsOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAdvancedOptionsInput` via:
//
//	GetSlosSloAlertingAdvancedOptionsArgs{...}
type GetSlosSloAlertingAdvancedOptionsInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput
	ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(context.Context) GetSlosSloAlertingAdvancedOptionsOutput
}

type GetSlosSloAlertingAdvancedOptionsArgs struct {
	// Minimum number of failed events to trigger an alert
	MinFailures pulumi.IntPtrInput `pulumi:"minFailures"`
}

func (GetSlosSloAlertingAdvancedOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsOutput)
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsOutput).ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx)
}

// GetSlosSloAlertingAdvancedOptionsPtrInput is an input type that accepts GetSlosSloAlertingAdvancedOptionsArgs, GetSlosSloAlertingAdvancedOptionsPtr and GetSlosSloAlertingAdvancedOptionsPtrOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAdvancedOptionsPtrInput` via:
//
//	        GetSlosSloAlertingAdvancedOptionsArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloAlertingAdvancedOptionsPtrInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput
	ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput
}

type getSlosSloAlertingAdvancedOptionsPtrType GetSlosSloAlertingAdvancedOptionsArgs

func GetSlosSloAlertingAdvancedOptionsPtr(v *GetSlosSloAlertingAdvancedOptionsArgs) GetSlosSloAlertingAdvancedOptionsPtrInput {
	return (*getSlosSloAlertingAdvancedOptionsPtrType)(v)
}

func (*getSlosSloAlertingAdvancedOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (i *getSlosSloAlertingAdvancedOptionsPtrType) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i *getSlosSloAlertingAdvancedOptionsPtrType) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

type GetSlosSloAlertingAdvancedOptionsOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAdvancedOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloAlertingAdvancedOptions) *GetSlosSloAlertingAdvancedOptions {
		return &v
	}).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

// Minimum number of failed events to trigger an alert
func (o GetSlosSloAlertingAdvancedOptionsOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAdvancedOptions) *int { return v.MinFailures }).(pulumi.IntPtrOutput)
}

type GetSlosSloAlertingAdvancedOptionsPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAdvancedOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) Elem() GetSlosSloAlertingAdvancedOptionsOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingAdvancedOptions) GetSlosSloAlertingAdvancedOptions {
		if v != nil {
			return *v
		}
		var ret GetSlosSloAlertingAdvancedOptions
		return ret
	}).(GetSlosSloAlertingAdvancedOptionsOutput)
}

// Minimum number of failed events to trigger an alert
func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingAdvancedOptions) *int {
		if v == nil {
			return nil
		}
		return v.MinFailures
	}).(pulumi.IntPtrOutput)
}

type GetSlosSloAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingAnnotationInput is an input type that accepts GetSlosSloAlertingAnnotationArgs and GetSlosSloAlertingAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAnnotationInput` via:
//
//	GetSlosSloAlertingAnnotationArgs{...}
type GetSlosSloAlertingAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput
	ToGetSlosSloAlertingAnnotationOutputWithContext(context.Context) GetSlosSloAlertingAnnotationOutput
}

type GetSlosSloAlertingAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return i.ToGetSlosSloAlertingAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAnnotationOutput)
}

// GetSlosSloAlertingAnnotationArrayInput is an input type that accepts GetSlosSloAlertingAnnotationArray and GetSlosSloAlertingAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAnnotationArrayInput` via:
//
//	GetSlosSloAlertingAnnotationArray{ GetSlosSloAlertingAnnotationArgs{...} }
type GetSlosSloAlertingAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput
	ToGetSlosSloAlertingAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingAnnotationArrayOutput
}

type GetSlosSloAlertingAnnotationArray []GetSlosSloAlertingAnnotationInput

func (GetSlosSloAlertingAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingAnnotationArray) ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAnnotationArray) ToGetSlosSloAlertingAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAnnotationArrayOutput)
}

type GetSlosSloAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingAnnotationArrayOutput) ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationArrayOutput) ToGetSlosSloAlertingAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingAnnotation {
		return vs[0].([]GetSlosSloAlertingAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingAnnotationOutput)
}

type GetSlosSloAlertingFastburn struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations []GetSlosSloAlertingFastburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels []GetSlosSloAlertingFastburnLabel `pulumi:"labels"`
}

// GetSlosSloAlertingFastburnInput is an input type that accepts GetSlosSloAlertingFastburnArgs and GetSlosSloAlertingFastburnOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnInput` via:
//
//	GetSlosSloAlertingFastburnArgs{...}
type GetSlosSloAlertingFastburnInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput
	ToGetSlosSloAlertingFastburnOutputWithContext(context.Context) GetSlosSloAlertingFastburnOutput
}

type GetSlosSloAlertingFastburnArgs struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations GetSlosSloAlertingFastburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels GetSlosSloAlertingFastburnLabelArrayInput `pulumi:"labels"`
}

func (GetSlosSloAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return i.ToGetSlosSloAlertingFastburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnOutput)
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnPtrOutput() GetSlosSloAlertingFastburnPtrOutput {
	return i.ToGetSlosSloAlertingFastburnPtrOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnOutput).ToGetSlosSloAlertingFastburnPtrOutputWithContext(ctx)
}

// GetSlosSloAlertingFastburnPtrInput is an input type that accepts GetSlosSloAlertingFastburnArgs, GetSlosSloAlertingFastburnPtr and GetSlosSloAlertingFastburnPtrOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnPtrInput` via:
//
//	        GetSlosSloAlertingFastburnArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloAlertingFastburnPtrInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnPtrOutput() GetSlosSloAlertingFastburnPtrOutput
	ToGetSlosSloAlertingFastburnPtrOutputWithContext(context.Context) GetSlosSloAlertingFastburnPtrOutput
}

type getSlosSloAlertingFastburnPtrType GetSlosSloAlertingFastburnArgs

func GetSlosSloAlertingFastburnPtr(v *GetSlosSloAlertingFastburnArgs) GetSlosSloAlertingFastburnPtrInput {
	return (*getSlosSloAlertingFastburnPtrType)(v)
}

func (*getSlosSloAlertingFastburnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (i *getSlosSloAlertingFastburnPtrType) ToGetSlosSloAlertingFastburnPtrOutput() GetSlosSloAlertingFastburnPtrOutput {
	return i.ToGetSlosSloAlertingFastburnPtrOutputWithContext(context.Background())
}

func (i *getSlosSloAlertingFastburnPtrType) ToGetSlosSloAlertingFastburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnPtrOutput)
}

type GetSlosSloAlertingFastburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return o
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return o
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnPtrOutput() GetSlosSloAlertingFastburnPtrOutput {
	return o.ToGetSlosSloAlertingFastburnPtrOutputWithContext(context.Background())
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloAlertingFastburn) *GetSlosSloAlertingFastburn {
		return &v
	}).(GetSlosSloAlertingFastburnPtrOutput)
}

// Annotations to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnOutput) Annotations() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnAnnotation { return v.Annotations }).(GetSlosSloAlertingFastburnAnnotationArrayOutput)
}

// Labels to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnOutput) Labels() GetSlosSloAlertingFastburnLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnLabel { return v.Labels }).(GetSlosSloAlertingFastburnLabelArrayOutput)
}

type GetSlosSloAlertingFastburnPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnPtrOutput) ToGetSlosSloAlertingFastburnPtrOutput() GetSlosSloAlertingFastburnPtrOutput {
	return o
}

func (o GetSlosSloAlertingFastburnPtrOutput) ToGetSlosSloAlertingFastburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnPtrOutput {
	return o
}

func (o GetSlosSloAlertingFastburnPtrOutput) Elem() GetSlosSloAlertingFastburnOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingFastburn) GetSlosSloAlertingFastburn {
		if v != nil {
			return *v
		}
		var ret GetSlosSloAlertingFastburn
		return ret
	}).(GetSlosSloAlertingFastburnOutput)
}

// Annotations to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnPtrOutput) Annotations() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnAnnotation {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(GetSlosSloAlertingFastburnAnnotationArrayOutput)
}

// Labels to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnPtrOutput) Labels() GetSlosSloAlertingFastburnLabelArrayOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(GetSlosSloAlertingFastburnLabelArrayOutput)
}

type GetSlosSloAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingFastburnAnnotationInput is an input type that accepts GetSlosSloAlertingFastburnAnnotationArgs and GetSlosSloAlertingFastburnAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnAnnotationInput` via:
//
//	GetSlosSloAlertingFastburnAnnotationArgs{...}
type GetSlosSloAlertingFastburnAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput
	ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(context.Context) GetSlosSloAlertingFastburnAnnotationOutput
}

type GetSlosSloAlertingFastburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return i.ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnAnnotationOutput)
}

// GetSlosSloAlertingFastburnAnnotationArrayInput is an input type that accepts GetSlosSloAlertingFastburnAnnotationArray and GetSlosSloAlertingFastburnAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnAnnotationArrayInput` via:
//
//	GetSlosSloAlertingFastburnAnnotationArray{ GetSlosSloAlertingFastburnAnnotationArgs{...} }
type GetSlosSloAlertingFastburnAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput
	ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput
}

type GetSlosSloAlertingFastburnAnnotationArray []GetSlosSloAlertingFastburnAnnotationInput

func (GetSlosSloAlertingFastburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnAnnotationArray) ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnAnnotationArray) ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnAnnotationArrayOutput)
}

type GetSlosSloAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingFastburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingFastburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingFastburnAnnotation {
		return vs[0].([]GetSlosSloAlertingFastburnAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingFastburnAnnotationOutput)
}

type GetSlosSloAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingFastburnLabelInput is an input type that accepts GetSlosSloAlertingFastburnLabelArgs and GetSlosSloAlertingFastburnLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnLabelInput` via:
//
//	GetSlosSloAlertingFastburnLabelArgs{...}
type GetSlosSloAlertingFastburnLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput
	ToGetSlosSloAlertingFastburnLabelOutputWithContext(context.Context) GetSlosSloAlertingFastburnLabelOutput
}

type GetSlosSloAlertingFastburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return i.ToGetSlosSloAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnLabelOutput)
}

// GetSlosSloAlertingFastburnLabelArrayInput is an input type that accepts GetSlosSloAlertingFastburnLabelArray and GetSlosSloAlertingFastburnLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnLabelArrayInput` via:
//
//	GetSlosSloAlertingFastburnLabelArray{ GetSlosSloAlertingFastburnLabelArgs{...} }
type GetSlosSloAlertingFastburnLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput
	ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingFastburnLabelArrayOutput
}

type GetSlosSloAlertingFastburnLabelArray []GetSlosSloAlertingFastburnLabelInput

func (GetSlosSloAlertingFastburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnLabelArray) ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput {
	return i.ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnLabelArray) ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnLabelArrayOutput)
}

type GetSlosSloAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingFastburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingFastburnLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingFastburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingFastburnLabel {
		return vs[0].([]GetSlosSloAlertingFastburnLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingFastburnLabelOutput)
}

type GetSlosSloAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingLabelInput is an input type that accepts GetSlosSloAlertingLabelArgs and GetSlosSloAlertingLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingLabelInput` via:
//
//	GetSlosSloAlertingLabelArgs{...}
type GetSlosSloAlertingLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput
	ToGetSlosSloAlertingLabelOutputWithContext(context.Context) GetSlosSloAlertingLabelOutput
}

type GetSlosSloAlertingLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return i.ToGetSlosSloAlertingLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingLabelOutput)
}

// GetSlosSloAlertingLabelArrayInput is an input type that accepts GetSlosSloAlertingLabelArray and GetSlosSloAlertingLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingLabelArrayInput` via:
//
//	GetSlosSloAlertingLabelArray{ GetSlosSloAlertingLabelArgs{...} }
type GetSlosSloAlertingLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput
	ToGetSlosSloAlertingLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingLabelArrayOutput
}

type GetSlosSloAlertingLabelArray []GetSlosSloAlertingLabelInput

func (GetSlosSloAlertingLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingLabelArray) ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput {
	return i.ToGetSlosSloAlertingLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingLabelArray) ToGetSlosSloAlertingLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingLabelArrayOutput)
}

type GetSlosSloAlertingLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingLabelArrayOutput) ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingLabelArrayOutput) ToGetSlosSloAlertingLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingLabel {
		return vs[0].([]GetSlosSloAlertingLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingLabelOutput)
}

type GetSlosSloAlertingSlowburn struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations []GetSlosSloAlertingSlowburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels []GetSlosSloAlertingSlowburnLabel `pulumi:"labels"`
}

// GetSlosSloAlertingSlowburnInput is an input type that accepts GetSlosSloAlertingSlowburnArgs and GetSlosSloAlertingSlowburnOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnInput` via:
//
//	GetSlosSloAlertingSlowburnArgs{...}
type GetSlosSloAlertingSlowburnInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput
	ToGetSlosSloAlertingSlowburnOutputWithContext(context.Context) GetSlosSloAlertingSlowburnOutput
}

type GetSlosSloAlertingSlowburnArgs struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations GetSlosSloAlertingSlowburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels GetSlosSloAlertingSlowburnLabelArrayInput `pulumi:"labels"`
}

func (GetSlosSloAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return i.ToGetSlosSloAlertingSlowburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnOutput)
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnPtrOutput() GetSlosSloAlertingSlowburnPtrOutput {
	return i.ToGetSlosSloAlertingSlowburnPtrOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnOutput).ToGetSlosSloAlertingSlowburnPtrOutputWithContext(ctx)
}

// GetSlosSloAlertingSlowburnPtrInput is an input type that accepts GetSlosSloAlertingSlowburnArgs, GetSlosSloAlertingSlowburnPtr and GetSlosSloAlertingSlowburnPtrOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnPtrInput` via:
//
//	        GetSlosSloAlertingSlowburnArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloAlertingSlowburnPtrInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnPtrOutput() GetSlosSloAlertingSlowburnPtrOutput
	ToGetSlosSloAlertingSlowburnPtrOutputWithContext(context.Context) GetSlosSloAlertingSlowburnPtrOutput
}

type getSlosSloAlertingSlowburnPtrType GetSlosSloAlertingSlowburnArgs

func GetSlosSloAlertingSlowburnPtr(v *GetSlosSloAlertingSlowburnArgs) GetSlosSloAlertingSlowburnPtrInput {
	return (*getSlosSloAlertingSlowburnPtrType)(v)
}

func (*getSlosSloAlertingSlowburnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (i *getSlosSloAlertingSlowburnPtrType) ToGetSlosSloAlertingSlowburnPtrOutput() GetSlosSloAlertingSlowburnPtrOutput {
	return i.ToGetSlosSloAlertingSlowburnPtrOutputWithContext(context.Background())
}

func (i *getSlosSloAlertingSlowburnPtrType) ToGetSlosSloAlertingSlowburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnPtrOutput)
}

type GetSlosSloAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnPtrOutput() GetSlosSloAlertingSlowburnPtrOutput {
	return o.ToGetSlosSloAlertingSlowburnPtrOutputWithContext(context.Background())
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloAlertingSlowburn) *GetSlosSloAlertingSlowburn {
		return &v
	}).(GetSlosSloAlertingSlowburnPtrOutput)
}

// Annotations to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnOutput) Annotations() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnAnnotation { return v.Annotations }).(GetSlosSloAlertingSlowburnAnnotationArrayOutput)
}

// Labels to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnOutput) Labels() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnLabel { return v.Labels }).(GetSlosSloAlertingSlowburnLabelArrayOutput)
}

type GetSlosSloAlertingSlowburnPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnPtrOutput) ToGetSlosSloAlertingSlowburnPtrOutput() GetSlosSloAlertingSlowburnPtrOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnPtrOutput) ToGetSlosSloAlertingSlowburnPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnPtrOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnPtrOutput) Elem() GetSlosSloAlertingSlowburnOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingSlowburn) GetSlosSloAlertingSlowburn {
		if v != nil {
			return *v
		}
		var ret GetSlosSloAlertingSlowburn
		return ret
	}).(GetSlosSloAlertingSlowburnOutput)
}

// Annotations to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnPtrOutput) Annotations() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnAnnotation {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(GetSlosSloAlertingSlowburnAnnotationArrayOutput)
}

// Labels to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnPtrOutput) Labels() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnLabel {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(GetSlosSloAlertingSlowburnLabelArrayOutput)
}

type GetSlosSloAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingSlowburnAnnotationInput is an input type that accepts GetSlosSloAlertingSlowburnAnnotationArgs and GetSlosSloAlertingSlowburnAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnAnnotationInput` via:
//
//	GetSlosSloAlertingSlowburnAnnotationArgs{...}
type GetSlosSloAlertingSlowburnAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput
	ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(context.Context) GetSlosSloAlertingSlowburnAnnotationOutput
}

type GetSlosSloAlertingSlowburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return i.ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnAnnotationOutput)
}

// GetSlosSloAlertingSlowburnAnnotationArrayInput is an input type that accepts GetSlosSloAlertingSlowburnAnnotationArray and GetSlosSloAlertingSlowburnAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnAnnotationArrayInput` via:
//
//	GetSlosSloAlertingSlowburnAnnotationArray{ GetSlosSloAlertingSlowburnAnnotationArgs{...} }
type GetSlosSloAlertingSlowburnAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput
	ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput
}

type GetSlosSloAlertingSlowburnAnnotationArray []GetSlosSloAlertingSlowburnAnnotationInput

func (GetSlosSloAlertingSlowburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnAnnotationArray) ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnAnnotationArray) ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnAnnotationArrayOutput)
}

type GetSlosSloAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingSlowburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingSlowburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingSlowburnAnnotation {
		return vs[0].([]GetSlosSloAlertingSlowburnAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingSlowburnAnnotationOutput)
}

type GetSlosSloAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingSlowburnLabelInput is an input type that accepts GetSlosSloAlertingSlowburnLabelArgs and GetSlosSloAlertingSlowburnLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnLabelInput` via:
//
//	GetSlosSloAlertingSlowburnLabelArgs{...}
type GetSlosSloAlertingSlowburnLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput
	ToGetSlosSloAlertingSlowburnLabelOutputWithContext(context.Context) GetSlosSloAlertingSlowburnLabelOutput
}

type GetSlosSloAlertingSlowburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return i.ToGetSlosSloAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnLabelOutput)
}

// GetSlosSloAlertingSlowburnLabelArrayInput is an input type that accepts GetSlosSloAlertingSlowburnLabelArray and GetSlosSloAlertingSlowburnLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnLabelArrayInput` via:
//
//	GetSlosSloAlertingSlowburnLabelArray{ GetSlosSloAlertingSlowburnLabelArgs{...} }
type GetSlosSloAlertingSlowburnLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput
	ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput
}

type GetSlosSloAlertingSlowburnLabelArray []GetSlosSloAlertingSlowburnLabelInput

func (GetSlosSloAlertingSlowburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnLabelArray) ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return i.ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnLabelArray) ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnLabelArrayOutput)
}

type GetSlosSloAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingSlowburnLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingSlowburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingSlowburnLabel {
		return vs[0].([]GetSlosSloAlertingSlowburnLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingSlowburnLabelOutput)
}

type GetSlosSloDestinationDatasource struct {
	// UID for the Mimir Datasource
	Uid *string `pulumi:"uid"`
}

// GetSlosSloDestinationDatasourceInput is an input type that accepts GetSlosSloDestinationDatasourceArgs and GetSlosSloDestinationDatasourceOutput values.
// You can construct a concrete instance of `GetSlosSloDestinationDatasourceInput` via:
//
//	GetSlosSloDestinationDatasourceArgs{...}
type GetSlosSloDestinationDatasourceInput interface {
	pulumi.Input

	ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput
	ToGetSlosSloDestinationDatasourceOutputWithContext(context.Context) GetSlosSloDestinationDatasourceOutput
}

type GetSlosSloDestinationDatasourceArgs struct {
	// UID for the Mimir Datasource
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (GetSlosSloDestinationDatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (i GetSlosSloDestinationDatasourceArgs) ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput {
	return i.ToGetSlosSloDestinationDatasourceOutputWithContext(context.Background())
}

func (i GetSlosSloDestinationDatasourceArgs) ToGetSlosSloDestinationDatasourceOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloDestinationDatasourceOutput)
}

// GetSlosSloDestinationDatasourceArrayInput is an input type that accepts GetSlosSloDestinationDatasourceArray and GetSlosSloDestinationDatasourceArrayOutput values.
// You can construct a concrete instance of `GetSlosSloDestinationDatasourceArrayInput` via:
//
//	GetSlosSloDestinationDatasourceArray{ GetSlosSloDestinationDatasourceArgs{...} }
type GetSlosSloDestinationDatasourceArrayInput interface {
	pulumi.Input

	ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput
	ToGetSlosSloDestinationDatasourceArrayOutputWithContext(context.Context) GetSlosSloDestinationDatasourceArrayOutput
}

type GetSlosSloDestinationDatasourceArray []GetSlosSloDestinationDatasourceInput

func (GetSlosSloDestinationDatasourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (i GetSlosSloDestinationDatasourceArray) ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput {
	return i.ToGetSlosSloDestinationDatasourceArrayOutputWithContext(context.Background())
}

func (i GetSlosSloDestinationDatasourceArray) ToGetSlosSloDestinationDatasourceArrayOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloDestinationDatasourceArrayOutput)
}

type GetSlosSloDestinationDatasourceOutput struct{ *pulumi.OutputState }

func (GetSlosSloDestinationDatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (o GetSlosSloDestinationDatasourceOutput) ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceOutput) ToGetSlosSloDestinationDatasourceOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceOutput {
	return o
}

// UID for the Mimir Datasource
func (o GetSlosSloDestinationDatasourceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSlosSloDestinationDatasource) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type GetSlosSloDestinationDatasourceArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloDestinationDatasourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (o GetSlosSloDestinationDatasourceArrayOutput) ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceArrayOutput) ToGetSlosSloDestinationDatasourceArrayOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceArrayOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceArrayOutput) Index(i pulumi.IntInput) GetSlosSloDestinationDatasourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloDestinationDatasource {
		return vs[0].([]GetSlosSloDestinationDatasource)[vs[1].(int)]
	}).(GetSlosSloDestinationDatasourceOutput)
}

type GetSlosSloLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloLabelInput is an input type that accepts GetSlosSloLabelArgs and GetSlosSloLabelOutput values.
// You can construct a concrete instance of `GetSlosSloLabelInput` via:
//
//	GetSlosSloLabelArgs{...}
type GetSlosSloLabelInput interface {
	pulumi.Input

	ToGetSlosSloLabelOutput() GetSlosSloLabelOutput
	ToGetSlosSloLabelOutputWithContext(context.Context) GetSlosSloLabelOutput
}

type GetSlosSloLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return i.ToGetSlosSloLabelOutputWithContext(context.Background())
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloLabelOutput)
}

// GetSlosSloLabelArrayInput is an input type that accepts GetSlosSloLabelArray and GetSlosSloLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloLabelArrayInput` via:
//
//	GetSlosSloLabelArray{ GetSlosSloLabelArgs{...} }
type GetSlosSloLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput
	ToGetSlosSloLabelArrayOutputWithContext(context.Context) GetSlosSloLabelArrayOutput
}

type GetSlosSloLabelArray []GetSlosSloLabelInput

func (GetSlosSloLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloLabel)(nil)).Elem()
}

func (i GetSlosSloLabelArray) ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput {
	return i.ToGetSlosSloLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloLabelArray) ToGetSlosSloLabelArrayOutputWithContext(ctx context.Context) GetSlosSloLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloLabelArrayOutput)
}

type GetSlosSloLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloLabel)(nil)).Elem()
}

func (o GetSlosSloLabelArrayOutput) ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput {
	return o
}

func (o GetSlosSloLabelArrayOutput) ToGetSlosSloLabelArrayOutputWithContext(ctx context.Context) GetSlosSloLabelArrayOutput {
	return o
}

func (o GetSlosSloLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloLabel {
		return vs[0].([]GetSlosSloLabel)[vs[1].(int)]
	}).(GetSlosSloLabelOutput)
}

type GetSlosSloObjective struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value float64 `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window string `pulumi:"window"`
}

// GetSlosSloObjectiveInput is an input type that accepts GetSlosSloObjectiveArgs and GetSlosSloObjectiveOutput values.
// You can construct a concrete instance of `GetSlosSloObjectiveInput` via:
//
//	GetSlosSloObjectiveArgs{...}
type GetSlosSloObjectiveInput interface {
	pulumi.Input

	ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput
	ToGetSlosSloObjectiveOutputWithContext(context.Context) GetSlosSloObjectiveOutput
}

type GetSlosSloObjectiveArgs struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value pulumi.Float64Input `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window pulumi.StringInput `pulumi:"window"`
}

func (GetSlosSloObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return i.ToGetSlosSloObjectiveOutputWithContext(context.Background())
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloObjectiveOutput)
}

// GetSlosSloObjectiveArrayInput is an input type that accepts GetSlosSloObjectiveArray and GetSlosSloObjectiveArrayOutput values.
// You can construct a concrete instance of `GetSlosSloObjectiveArrayInput` via:
//
//	GetSlosSloObjectiveArray{ GetSlosSloObjectiveArgs{...} }
type GetSlosSloObjectiveArrayInput interface {
	pulumi.Input

	ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput
	ToGetSlosSloObjectiveArrayOutputWithContext(context.Context) GetSlosSloObjectiveArrayOutput
}

type GetSlosSloObjectiveArray []GetSlosSloObjectiveInput

func (GetSlosSloObjectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloObjective)(nil)).Elem()
}

func (i GetSlosSloObjectiveArray) ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput {
	return i.ToGetSlosSloObjectiveArrayOutputWithContext(context.Background())
}

func (i GetSlosSloObjectiveArray) ToGetSlosSloObjectiveArrayOutputWithContext(ctx context.Context) GetSlosSloObjectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloObjectiveArrayOutput)
}

type GetSlosSloObjectiveOutput struct{ *pulumi.OutputState }

func (GetSlosSloObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return o
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return o
}

// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
func (o GetSlosSloObjectiveOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v GetSlosSloObjective) float64 { return v.Value }).(pulumi.Float64Output)
}

// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
func (o GetSlosSloObjectiveOutput) Window() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloObjective) string { return v.Window }).(pulumi.StringOutput)
}

type GetSlosSloObjectiveArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloObjectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloObjective)(nil)).Elem()
}

func (o GetSlosSloObjectiveArrayOutput) ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput {
	return o
}

func (o GetSlosSloObjectiveArrayOutput) ToGetSlosSloObjectiveArrayOutputWithContext(ctx context.Context) GetSlosSloObjectiveArrayOutput {
	return o
}

func (o GetSlosSloObjectiveArrayOutput) Index(i pulumi.IntInput) GetSlosSloObjectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloObjective {
		return vs[0].([]GetSlosSloObjective)[vs[1].(int)]
	}).(GetSlosSloObjectiveOutput)
}

type GetSlosSloQuery struct {
	Freeform *GetSlosSloQueryFreeform `pulumi:"freeform"`
	Ratio    *GetSlosSloQueryRatio    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type string `pulumi:"type"`
}

// GetSlosSloQueryInput is an input type that accepts GetSlosSloQueryArgs and GetSlosSloQueryOutput values.
// You can construct a concrete instance of `GetSlosSloQueryInput` via:
//
//	GetSlosSloQueryArgs{...}
type GetSlosSloQueryInput interface {
	pulumi.Input

	ToGetSlosSloQueryOutput() GetSlosSloQueryOutput
	ToGetSlosSloQueryOutputWithContext(context.Context) GetSlosSloQueryOutput
}

type GetSlosSloQueryArgs struct {
	Freeform GetSlosSloQueryFreeformPtrInput `pulumi:"freeform"`
	Ratio    GetSlosSloQueryRatioPtrInput    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetSlosSloQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return i.ToGetSlosSloQueryOutputWithContext(context.Background())
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryOutput)
}

// GetSlosSloQueryArrayInput is an input type that accepts GetSlosSloQueryArray and GetSlosSloQueryArrayOutput values.
// You can construct a concrete instance of `GetSlosSloQueryArrayInput` via:
//
//	GetSlosSloQueryArray{ GetSlosSloQueryArgs{...} }
type GetSlosSloQueryArrayInput interface {
	pulumi.Input

	ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput
	ToGetSlosSloQueryArrayOutputWithContext(context.Context) GetSlosSloQueryArrayOutput
}

type GetSlosSloQueryArray []GetSlosSloQueryInput

func (GetSlosSloQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloQuery)(nil)).Elem()
}

func (i GetSlosSloQueryArray) ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput {
	return i.ToGetSlosSloQueryArrayOutputWithContext(context.Background())
}

func (i GetSlosSloQueryArray) ToGetSlosSloQueryArrayOutputWithContext(ctx context.Context) GetSlosSloQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryArrayOutput)
}

type GetSlosSloQueryOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) Freeform() GetSlosSloQueryFreeformPtrOutput {
	return o.ApplyT(func(v GetSlosSloQuery) *GetSlosSloQueryFreeform { return v.Freeform }).(GetSlosSloQueryFreeformPtrOutput)
}

func (o GetSlosSloQueryOutput) Ratio() GetSlosSloQueryRatioPtrOutput {
	return o.ApplyT(func(v GetSlosSloQuery) *GetSlosSloQueryRatio { return v.Ratio }).(GetSlosSloQueryRatioPtrOutput)
}

// Query type must be one of: "freeform", "query", "ratio", or "threshold"
func (o GetSlosSloQueryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQuery) string { return v.Type }).(pulumi.StringOutput)
}

type GetSlosSloQueryArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloQuery)(nil)).Elem()
}

func (o GetSlosSloQueryArrayOutput) ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput {
	return o
}

func (o GetSlosSloQueryArrayOutput) ToGetSlosSloQueryArrayOutputWithContext(ctx context.Context) GetSlosSloQueryArrayOutput {
	return o
}

func (o GetSlosSloQueryArrayOutput) Index(i pulumi.IntInput) GetSlosSloQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloQuery {
		return vs[0].([]GetSlosSloQuery)[vs[1].(int)]
	}).(GetSlosSloQueryOutput)
}

type GetSlosSloQueryFreeform struct {
	// Freeform Query Field
	Query string `pulumi:"query"`
}

// GetSlosSloQueryFreeformInput is an input type that accepts GetSlosSloQueryFreeformArgs and GetSlosSloQueryFreeformOutput values.
// You can construct a concrete instance of `GetSlosSloQueryFreeformInput` via:
//
//	GetSlosSloQueryFreeformArgs{...}
type GetSlosSloQueryFreeformInput interface {
	pulumi.Input

	ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput
	ToGetSlosSloQueryFreeformOutputWithContext(context.Context) GetSlosSloQueryFreeformOutput
}

type GetSlosSloQueryFreeformArgs struct {
	// Freeform Query Field
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetSlosSloQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return i.ToGetSlosSloQueryFreeformOutputWithContext(context.Background())
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformOutput)
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return i.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformOutput).ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx)
}

// GetSlosSloQueryFreeformPtrInput is an input type that accepts GetSlosSloQueryFreeformArgs, GetSlosSloQueryFreeformPtr and GetSlosSloQueryFreeformPtrOutput values.
// You can construct a concrete instance of `GetSlosSloQueryFreeformPtrInput` via:
//
//	        GetSlosSloQueryFreeformArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloQueryFreeformPtrInput interface {
	pulumi.Input

	ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput
	ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Context) GetSlosSloQueryFreeformPtrOutput
}

type getSlosSloQueryFreeformPtrType GetSlosSloQueryFreeformArgs

func GetSlosSloQueryFreeformPtr(v *GetSlosSloQueryFreeformArgs) GetSlosSloQueryFreeformPtrInput {
	return (*getSlosSloQueryFreeformPtrType)(v)
}

func (*getSlosSloQueryFreeformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryFreeform)(nil)).Elem()
}

func (i *getSlosSloQueryFreeformPtrType) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return i.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (i *getSlosSloQueryFreeformPtrType) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformPtrOutput)
}

type GetSlosSloQueryFreeformOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return o.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloQueryFreeform) *GetSlosSloQueryFreeform {
		return &v
	}).(GetSlosSloQueryFreeformPtrOutput)
}

// Freeform Query Field
func (o GetSlosSloQueryFreeformOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryFreeform) string { return v.Query }).(pulumi.StringOutput)
}

type GetSlosSloQueryFreeformPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryFreeformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryFreeform)(nil)).Elem()
}

func (o GetSlosSloQueryFreeformPtrOutput) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return o
}

func (o GetSlosSloQueryFreeformPtrOutput) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return o
}

func (o GetSlosSloQueryFreeformPtrOutput) Elem() GetSlosSloQueryFreeformOutput {
	return o.ApplyT(func(v *GetSlosSloQueryFreeform) GetSlosSloQueryFreeform {
		if v != nil {
			return *v
		}
		var ret GetSlosSloQueryFreeform
		return ret
	}).(GetSlosSloQueryFreeformOutput)
}

// Freeform Query Field
func (o GetSlosSloQueryFreeformPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryFreeform) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type GetSlosSloQueryRatio struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	GroupByLabels []string `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric string `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric string `pulumi:"totalMetric"`
}

// GetSlosSloQueryRatioInput is an input type that accepts GetSlosSloQueryRatioArgs and GetSlosSloQueryRatioOutput values.
// You can construct a concrete instance of `GetSlosSloQueryRatioInput` via:
//
//	GetSlosSloQueryRatioArgs{...}
type GetSlosSloQueryRatioInput interface {
	pulumi.Input

	ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput
	ToGetSlosSloQueryRatioOutputWithContext(context.Context) GetSlosSloQueryRatioOutput
}

type GetSlosSloQueryRatioArgs struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	GroupByLabels pulumi.StringArrayInput `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric pulumi.StringInput `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric pulumi.StringInput `pulumi:"totalMetric"`
}

func (GetSlosSloQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return i.ToGetSlosSloQueryRatioOutputWithContext(context.Background())
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioOutput)
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return i.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioOutput).ToGetSlosSloQueryRatioPtrOutputWithContext(ctx)
}

// GetSlosSloQueryRatioPtrInput is an input type that accepts GetSlosSloQueryRatioArgs, GetSlosSloQueryRatioPtr and GetSlosSloQueryRatioPtrOutput values.
// You can construct a concrete instance of `GetSlosSloQueryRatioPtrInput` via:
//
//	        GetSlosSloQueryRatioArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloQueryRatioPtrInput interface {
	pulumi.Input

	ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput
	ToGetSlosSloQueryRatioPtrOutputWithContext(context.Context) GetSlosSloQueryRatioPtrOutput
}

type getSlosSloQueryRatioPtrType GetSlosSloQueryRatioArgs

func GetSlosSloQueryRatioPtr(v *GetSlosSloQueryRatioArgs) GetSlosSloQueryRatioPtrInput {
	return (*getSlosSloQueryRatioPtrType)(v)
}

func (*getSlosSloQueryRatioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryRatio)(nil)).Elem()
}

func (i *getSlosSloQueryRatioPtrType) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return i.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (i *getSlosSloQueryRatioPtrType) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioPtrOutput)
}

type GetSlosSloQueryRatioOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return o.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloQueryRatio) *GetSlosSloQueryRatio {
		return &v
	}).(GetSlosSloQueryRatioPtrOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloQueryRatioOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) []string { return v.GroupByLabels }).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o GetSlosSloQueryRatioOutput) SuccessMetric() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) string { return v.SuccessMetric }).(pulumi.StringOutput)
}

// Metric for total events (denominator)
func (o GetSlosSloQueryRatioOutput) TotalMetric() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) string { return v.TotalMetric }).(pulumi.StringOutput)
}

type GetSlosSloQueryRatioPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryRatioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryRatio)(nil)).Elem()
}

func (o GetSlosSloQueryRatioPtrOutput) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return o
}

func (o GetSlosSloQueryRatioPtrOutput) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return o
}

func (o GetSlosSloQueryRatioPtrOutput) Elem() GetSlosSloQueryRatioOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) GetSlosSloQueryRatio {
		if v != nil {
			return *v
		}
		var ret GetSlosSloQueryRatio
		return ret
	}).(GetSlosSloQueryRatioOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloQueryRatioPtrOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) []string {
		if v == nil {
			return nil
		}
		return v.GroupByLabels
	}).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o GetSlosSloQueryRatioPtrOutput) SuccessMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.SuccessMetric
	}).(pulumi.StringPtrOutput)
}

// Metric for total events (denominator)
func (o GetSlosSloQueryRatioPtrOutput) TotalMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.TotalMetric
	}).(pulumi.StringPtrOutput)
}

type GetTeamPreference struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart *string `pulumi:"weekStart"`
}

// GetTeamPreferenceInput is an input type that accepts GetTeamPreferenceArgs and GetTeamPreferenceOutput values.
// You can construct a concrete instance of `GetTeamPreferenceInput` via:
//
//	GetTeamPreferenceArgs{...}
type GetTeamPreferenceInput interface {
	pulumi.Input

	ToGetTeamPreferenceOutput() GetTeamPreferenceOutput
	ToGetTeamPreferenceOutputWithContext(context.Context) GetTeamPreferenceOutput
}

type GetTeamPreferenceArgs struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid pulumi.StringPtrInput `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart pulumi.StringPtrInput `pulumi:"weekStart"`
}

func (GetTeamPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return i.ToGetTeamPreferenceOutputWithContext(context.Background())
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamPreferenceOutput)
}

// GetTeamPreferenceArrayInput is an input type that accepts GetTeamPreferenceArray and GetTeamPreferenceArrayOutput values.
// You can construct a concrete instance of `GetTeamPreferenceArrayInput` via:
//
//	GetTeamPreferenceArray{ GetTeamPreferenceArgs{...} }
type GetTeamPreferenceArrayInput interface {
	pulumi.Input

	ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput
	ToGetTeamPreferenceArrayOutputWithContext(context.Context) GetTeamPreferenceArrayOutput
}

type GetTeamPreferenceArray []GetTeamPreferenceInput

func (GetTeamPreferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamPreference)(nil)).Elem()
}

func (i GetTeamPreferenceArray) ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput {
	return i.ToGetTeamPreferenceArrayOutputWithContext(context.Background())
}

func (i GetTeamPreferenceArray) ToGetTeamPreferenceArrayOutputWithContext(ctx context.Context) GetTeamPreferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamPreferenceArrayOutput)
}

type GetTeamPreferenceOutput struct{ *pulumi.OutputState }

func (GetTeamPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return o
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return o
}

// The UID of the dashboard to display when a team member logs in.
func (o GetTeamPreferenceOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.HomeDashboardUid }).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o GetTeamPreferenceOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.Theme }).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o GetTeamPreferenceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o GetTeamPreferenceOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.WeekStart }).(pulumi.StringPtrOutput)
}

type GetTeamPreferenceArrayOutput struct{ *pulumi.OutputState }

func (GetTeamPreferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamPreference)(nil)).Elem()
}

func (o GetTeamPreferenceArrayOutput) ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput {
	return o
}

func (o GetTeamPreferenceArrayOutput) ToGetTeamPreferenceArrayOutputWithContext(ctx context.Context) GetTeamPreferenceArrayOutput {
	return o
}

func (o GetTeamPreferenceArrayOutput) Index(i pulumi.IntInput) GetTeamPreferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamPreference {
		return vs[0].([]GetTeamPreference)[vs[1].(int)]
	}).(GetTeamPreferenceOutput)
}

type GetTeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

// GetTeamTeamSyncInput is an input type that accepts GetTeamTeamSyncArgs and GetTeamTeamSyncOutput values.
// You can construct a concrete instance of `GetTeamTeamSyncInput` via:
//
//	GetTeamTeamSyncArgs{...}
type GetTeamTeamSyncInput interface {
	pulumi.Input

	ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput
	ToGetTeamTeamSyncOutputWithContext(context.Context) GetTeamTeamSyncOutput
}

type GetTeamTeamSyncArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
}

func (GetTeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return i.ToGetTeamTeamSyncOutputWithContext(context.Background())
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamTeamSyncOutput)
}

// GetTeamTeamSyncArrayInput is an input type that accepts GetTeamTeamSyncArray and GetTeamTeamSyncArrayOutput values.
// You can construct a concrete instance of `GetTeamTeamSyncArrayInput` via:
//
//	GetTeamTeamSyncArray{ GetTeamTeamSyncArgs{...} }
type GetTeamTeamSyncArrayInput interface {
	pulumi.Input

	ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput
	ToGetTeamTeamSyncArrayOutputWithContext(context.Context) GetTeamTeamSyncArrayOutput
}

type GetTeamTeamSyncArray []GetTeamTeamSyncInput

func (GetTeamTeamSyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamTeamSync)(nil)).Elem()
}

func (i GetTeamTeamSyncArray) ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput {
	return i.ToGetTeamTeamSyncArrayOutputWithContext(context.Background())
}

func (i GetTeamTeamSyncArray) ToGetTeamTeamSyncArrayOutputWithContext(ctx context.Context) GetTeamTeamSyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamTeamSyncArrayOutput)
}

type GetTeamTeamSyncOutput struct{ *pulumi.OutputState }

func (GetTeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamTeamSync) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

type GetTeamTeamSyncArrayOutput struct{ *pulumi.OutputState }

func (GetTeamTeamSyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamTeamSync)(nil)).Elem()
}

func (o GetTeamTeamSyncArrayOutput) ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput {
	return o
}

func (o GetTeamTeamSyncArrayOutput) ToGetTeamTeamSyncArrayOutputWithContext(ctx context.Context) GetTeamTeamSyncArrayOutput {
	return o
}

func (o GetTeamTeamSyncArrayOutput) Index(i pulumi.IntInput) GetTeamTeamSyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamTeamSync {
		return vs[0].([]GetTeamTeamSync)[vs[1].(int)]
	}).(GetTeamTeamSyncOutput)
}

type GetUsersUser struct {
	// The user's email.
	Email string `pulumi:"email"`
	// The user ID.
	Id int `pulumi:"id"`
	// Whether the user is admin or not.
	IsAdmin bool `pulumi:"isAdmin"`
	// The user's login.
	Login string `pulumi:"login"`
	// The user's name.
	Name string `pulumi:"name"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The user's email.
	Email pulumi.StringInput `pulumi:"email"`
	// The user ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the user is admin or not.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// The user's login.
	Login pulumi.StringInput `pulumi:"login"`
	// The user's name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The user's email.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// The user ID.
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the user is admin or not.
func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// The user's login.
func (o GetUsersUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Login }).(pulumi.StringOutput)
}

// The user's name.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccessPolicyRealmInput)(nil)).Elem(), CloudAccessPolicyRealmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccessPolicyRealmArrayInput)(nil)).Elem(), CloudAccessPolicyRealmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicyInput)(nil)).Elem(), CloudAccessPolicyRealmLabelPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudAccessPolicyRealmLabelPolicyArrayInput)(nil)).Elem(), CloudAccessPolicyRealmLabelPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerInput)(nil)).Elem(), ContactPointAlertmanagerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerArrayInput)(nil)).Elem(), ContactPointAlertmanagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingInput)(nil)).Elem(), ContactPointDingdingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingArrayInput)(nil)).Elem(), ContactPointDingdingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordInput)(nil)).Elem(), ContactPointDiscordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordArrayInput)(nil)).Elem(), ContactPointDiscordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailInput)(nil)).Elem(), ContactPointEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailArrayInput)(nil)).Elem(), ContactPointEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatInput)(nil)).Elem(), ContactPointGooglechatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatArrayInput)(nil)).Elem(), ContactPointGooglechatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaInput)(nil)).Elem(), ContactPointKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaArrayInput)(nil)).Elem(), ContactPointKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointLineInput)(nil)).Elem(), ContactPointLineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointLineArrayInput)(nil)).Elem(), ContactPointLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOncallInput)(nil)).Elem(), ContactPointOncallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOncallArrayInput)(nil)).Elem(), ContactPointOncallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyInput)(nil)).Elem(), ContactPointOpsgenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyArrayInput)(nil)).Elem(), ContactPointOpsgenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyResponderInput)(nil)).Elem(), ContactPointOpsgenyResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyResponderArrayInput)(nil)).Elem(), ContactPointOpsgenyResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyInput)(nil)).Elem(), ContactPointPagerdutyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyArrayInput)(nil)).Elem(), ContactPointPagerdutyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverInput)(nil)).Elem(), ContactPointPushoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverArrayInput)(nil)).Elem(), ContactPointPushoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoInput)(nil)).Elem(), ContactPointSensugoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoArrayInput)(nil)).Elem(), ContactPointSensugoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackInput)(nil)).Elem(), ContactPointSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackArrayInput)(nil)).Elem(), ContactPointSlackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSnInput)(nil)).Elem(), ContactPointSnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSnArrayInput)(nil)).Elem(), ContactPointSnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamInput)(nil)).Elem(), ContactPointTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamArrayInput)(nil)).Elem(), ContactPointTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramInput)(nil)).Elem(), ContactPointTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramArrayInput)(nil)).Elem(), ContactPointTelegramArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaInput)(nil)).Elem(), ContactPointThreemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaArrayInput)(nil)).Elem(), ContactPointThreemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropInput)(nil)).Elem(), ContactPointVictoropArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropArrayInput)(nil)).Elem(), ContactPointVictoropArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebexInput)(nil)).Elem(), ContactPointWebexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebexArrayInput)(nil)).Elem(), ContactPointWebexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookInput)(nil)).Elem(), ContactPointWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookArrayInput)(nil)).Elem(), ContactPointWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomInput)(nil)).Elem(), ContactPointWecomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomArrayInput)(nil)).Elem(), ContactPointWecomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionInput)(nil)).Elem(), DashboardPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionArrayInput)(nil)).Elem(), DashboardPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionInput)(nil)).Elem(), DataSourcePermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DataSourcePermissionPermissionArrayInput)(nil)).Elem(), DataSourcePermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionInput)(nil)).Elem(), FolderPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionArrayInput)(nil)).Elem(), FolderPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningHolidayCustomPeriodInput)(nil)).Elem(), MachineLearningHolidayCustomPeriodArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningHolidayCustomPeriodArrayInput)(nil)).Elem(), MachineLearningHolidayCustomPeriodArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmInput)(nil)).Elem(), MachineLearningOutlierDetectorAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmPtrInput)(nil)).Elem(), MachineLearningOutlierDetectorAlgorithmArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfigInput)(nil)).Elem(), MachineLearningOutlierDetectorAlgorithmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningOutlierDetectorAlgorithmConfigPtrInput)(nil)).Elem(), MachineLearningOutlierDetectorAlgorithmConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalInput)(nil)).Elem(), MuteTimingIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalArrayInput)(nil)).Elem(), MuteTimingIntervalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeInput)(nil)).Elem(), MuteTimingIntervalTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeArrayInput)(nil)).Elem(), MuteTimingIntervalTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteInput)(nil)).Elem(), OncallIntegrationDefaultRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRoutePtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteMsteamsInput)(nil)).Elem(), OncallIntegrationDefaultRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteMsteamsPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteSlackInput)(nil)).Elem(), OncallIntegrationDefaultRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteSlackPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteTelegramInput)(nil)).Elem(), OncallIntegrationDefaultRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationDefaultRouteTelegramPtrInput)(nil)).Elem(), OncallIntegrationDefaultRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesInput)(nil)).Elem(), OncallIntegrationTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesPtrInput)(nil)).Elem(), OncallIntegrationTemplatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesEmailInput)(nil)).Elem(), OncallIntegrationTemplatesEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesEmailPtrInput)(nil)).Elem(), OncallIntegrationTemplatesEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeamsInput)(nil)).Elem(), OncallIntegrationTemplatesMicrosoftTeamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesMicrosoftTeamsPtrInput)(nil)).Elem(), OncallIntegrationTemplatesMicrosoftTeamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesPhoneCallInput)(nil)).Elem(), OncallIntegrationTemplatesPhoneCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesPhoneCallPtrInput)(nil)).Elem(), OncallIntegrationTemplatesPhoneCallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSlackInput)(nil)).Elem(), OncallIntegrationTemplatesSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSlackPtrInput)(nil)).Elem(), OncallIntegrationTemplatesSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSmsInput)(nil)).Elem(), OncallIntegrationTemplatesSmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesSmsPtrInput)(nil)).Elem(), OncallIntegrationTemplatesSmsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesTelegramInput)(nil)).Elem(), OncallIntegrationTemplatesTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesTelegramPtrInput)(nil)).Elem(), OncallIntegrationTemplatesTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesWebInput)(nil)).Elem(), OncallIntegrationTemplatesWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallIntegrationTemplatesWebPtrInput)(nil)).Elem(), OncallIntegrationTemplatesWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteMsteamsInput)(nil)).Elem(), OncallRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteMsteamsPtrInput)(nil)).Elem(), OncallRouteMsteamsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteSlackInput)(nil)).Elem(), OncallRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteSlackPtrInput)(nil)).Elem(), OncallRouteSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteTelegramInput)(nil)).Elem(), OncallRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteTelegramPtrInput)(nil)).Elem(), OncallRouteTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleSlackInput)(nil)).Elem(), OncallScheduleSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallScheduleSlackPtrInput)(nil)).Elem(), OncallScheduleSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemInput)(nil)).Elem(), PlaylistItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemArrayInput)(nil)).Elem(), PlaylistItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardInput)(nil)).Elem(), ReportDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardArrayInput)(nil)).Elem(), ReportDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardTimeRangeInput)(nil)).Elem(), ReportDashboardTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportDashboardTimeRangePtrInput)(nil)).Elem(), ReportDashboardTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportScheduleInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReportSchedulePtrInput)(nil)).Elem(), ReportScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionInput)(nil)).Elem(), RolePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePermissionArrayInput)(nil)).Elem(), RolePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleInput)(nil)).Elem(), RuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleArrayInput)(nil)).Elem(), RuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataInput)(nil)).Elem(), RuleGroupRuleDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataArrayInput)(nil)).Elem(), RuleGroupRuleDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRangeInput)(nil)).Elem(), RuleGroupRuleDataRelativeTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleNotificationSettingsInput)(nil)).Elem(), RuleGroupRuleNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleNotificationSettingsPtrInput)(nil)).Elem(), RuleGroupRuleNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingInput)(nil)).Elem(), SLOAlertingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingArrayInput)(nil)).Elem(), SLOAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAdvancedOptionsInput)(nil)).Elem(), SLOAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAdvancedOptionsPtrInput)(nil)).Elem(), SLOAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAnnotationInput)(nil)).Elem(), SLOAlertingAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAnnotationArrayInput)(nil)).Elem(), SLOAlertingAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnInput)(nil)).Elem(), SLOAlertingFastburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnArrayInput)(nil)).Elem(), SLOAlertingFastburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnAnnotationInput)(nil)).Elem(), SLOAlertingFastburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnAnnotationArrayInput)(nil)).Elem(), SLOAlertingFastburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnLabelInput)(nil)).Elem(), SLOAlertingFastburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnLabelArrayInput)(nil)).Elem(), SLOAlertingFastburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingLabelInput)(nil)).Elem(), SLOAlertingLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingLabelArrayInput)(nil)).Elem(), SLOAlertingLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnInput)(nil)).Elem(), SLOAlertingSlowburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnArrayInput)(nil)).Elem(), SLOAlertingSlowburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnAnnotationInput)(nil)).Elem(), SLOAlertingSlowburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnAnnotationArrayInput)(nil)).Elem(), SLOAlertingSlowburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnLabelInput)(nil)).Elem(), SLOAlertingSlowburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnLabelArrayInput)(nil)).Elem(), SLOAlertingSlowburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLODestinationDatasourceInput)(nil)).Elem(), SLODestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLODestinationDatasourcePtrInput)(nil)).Elem(), SLODestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOLabelInput)(nil)).Elem(), SLOLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOLabelArrayInput)(nil)).Elem(), SLOLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOObjectiveInput)(nil)).Elem(), SLOObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOObjectiveArrayInput)(nil)).Elem(), SLOObjectiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryInput)(nil)).Elem(), SLOQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryArrayInput)(nil)).Elem(), SLOQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryFreeformInput)(nil)).Elem(), SLOQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryFreeformPtrInput)(nil)).Elem(), SLOQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryRatioInput)(nil)).Elem(), SLOQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryRatioPtrInput)(nil)).Elem(), SLOQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPermissionPermissionInput)(nil)).Elem(), ServiceAccountPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPermissionPermissionArrayInput)(nil)).Elem(), ServiceAccountPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsOauth2SettingsInput)(nil)).Elem(), SsoSettingsOauth2SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsOauth2SettingsPtrInput)(nil)).Elem(), SsoSettingsOauth2SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsSamlSettingsInput)(nil)).Elem(), SsoSettingsSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsSamlSettingsPtrInput)(nil)).Elem(), SsoSettingsSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcTlsConfigInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsGrpcTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuthInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpBasicAuthPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfigInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsHttpTlsConfigPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryAssertionInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryVariableInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsMultihttpEntryVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPingInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsPingPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsScriptedInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsScriptedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsScriptedPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsScriptedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponseInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpQueryResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpQueryResponseArrayInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpQueryResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfigInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTcpTlsConfigPtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTracerouteInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTracerouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SyntheticMonitoringCheckSettingsTraceroutePtrInput)(nil)).Elem(), SyntheticMonitoringCheckSettingsTracerouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesInput)(nil)).Elem(), TeamPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesPtrInput)(nil)).Elem(), TeamPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamTeamSyncInput)(nil)).Elem(), TeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamTeamSyncPtrInput)(nil)).Elem(), TeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardInput)(nil)).Elem(), GetDashboardsDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardArrayInput)(nil)).Elem(), GetDashboardsDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderInput)(nil)).Elem(), GetFoldersFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderArrayInput)(nil)).Elem(), GetFoldersFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePermissionInput)(nil)).Elem(), GetRolePermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePermissionArrayInput)(nil)).Elem(), GetRolePermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloInput)(nil)).Elem(), GetSlosSloArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloArrayInput)(nil)).Elem(), GetSlosSloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingInput)(nil)).Elem(), GetSlosSloAlertingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingArrayInput)(nil)).Elem(), GetSlosSloAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAdvancedOptionsInput)(nil)).Elem(), GetSlosSloAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAdvancedOptionsPtrInput)(nil)).Elem(), GetSlosSloAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAnnotationInput)(nil)).Elem(), GetSlosSloAlertingAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnInput)(nil)).Elem(), GetSlosSloAlertingFastburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnPtrInput)(nil)).Elem(), GetSlosSloAlertingFastburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotationInput)(nil)).Elem(), GetSlosSloAlertingFastburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingFastburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnLabelInput)(nil)).Elem(), GetSlosSloAlertingFastburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingFastburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingLabelInput)(nil)).Elem(), GetSlosSloAlertingLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnInput)(nil)).Elem(), GetSlosSloAlertingSlowburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnPtrInput)(nil)).Elem(), GetSlosSloAlertingSlowburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotationInput)(nil)).Elem(), GetSlosSloAlertingSlowburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingSlowburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnLabelInput)(nil)).Elem(), GetSlosSloAlertingSlowburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingSlowburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloDestinationDatasourceInput)(nil)).Elem(), GetSlosSloDestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloDestinationDatasourceArrayInput)(nil)).Elem(), GetSlosSloDestinationDatasourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloLabelInput)(nil)).Elem(), GetSlosSloLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloLabelArrayInput)(nil)).Elem(), GetSlosSloLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloObjectiveInput)(nil)).Elem(), GetSlosSloObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloObjectiveArrayInput)(nil)).Elem(), GetSlosSloObjectiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryInput)(nil)).Elem(), GetSlosSloQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryArrayInput)(nil)).Elem(), GetSlosSloQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryFreeformInput)(nil)).Elem(), GetSlosSloQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryFreeformPtrInput)(nil)).Elem(), GetSlosSloQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryRatioInput)(nil)).Elem(), GetSlosSloQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryRatioPtrInput)(nil)).Elem(), GetSlosSloQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamPreferenceInput)(nil)).Elem(), GetTeamPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamPreferenceArrayInput)(nil)).Elem(), GetTeamPreferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamTeamSyncInput)(nil)).Elem(), GetTeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamTeamSyncArrayInput)(nil)).Elem(), GetTeamTeamSyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(CloudAccessPolicyRealmOutput{})
	pulumi.RegisterOutputType(CloudAccessPolicyRealmArrayOutput{})
	pulumi.RegisterOutputType(CloudAccessPolicyRealmLabelPolicyOutput{})
	pulumi.RegisterOutputType(CloudAccessPolicyRealmLabelPolicyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordArrayOutput{})
	pulumi.RegisterOutputType(ContactPointEmailOutput{})
	pulumi.RegisterOutputType(ContactPointEmailArrayOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatArrayOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointLineOutput{})
	pulumi.RegisterOutputType(ContactPointLineArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOncallOutput{})
	pulumi.RegisterOutputType(ContactPointOncallArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyResponderOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyResponderArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSlackOutput{})
	pulumi.RegisterOutputType(ContactPointSlackArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSnOutput{})
	pulumi.RegisterOutputType(ContactPointSnArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTeamOutput{})
	pulumi.RegisterOutputType(ContactPointTeamArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramArrayOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebexOutput{})
	pulumi.RegisterOutputType(ContactPointWebexArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWecomOutput{})
	pulumi.RegisterOutputType(ContactPointWecomArrayOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionOutput{})
	pulumi.RegisterOutputType(DataSourcePermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(MachineLearningHolidayCustomPeriodOutput{})
	pulumi.RegisterOutputType(MachineLearningHolidayCustomPeriodArrayOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmPtrOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmConfigOutput{})
	pulumi.RegisterOutputType(MachineLearningOutlierDetectorAlgorithmConfigPtrOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRoutePtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteMsteamsPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallIntegrationDefaultRouteTelegramPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesEmailOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesEmailPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesMicrosoftTeamsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesMicrosoftTeamsPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesPhoneCallOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesPhoneCallPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSlackOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSmsOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesSmsPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesTelegramOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesTelegramPtrOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesWebOutput{})
	pulumi.RegisterOutputType(OncallIntegrationTemplatesWebPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteMsteamsOutput{})
	pulumi.RegisterOutputType(OncallRouteMsteamsPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteSlackOutput{})
	pulumi.RegisterOutputType(OncallRouteSlackPtrOutput{})
	pulumi.RegisterOutputType(OncallRouteTelegramOutput{})
	pulumi.RegisterOutputType(OncallRouteTelegramPtrOutput{})
	pulumi.RegisterOutputType(OncallScheduleSlackOutput{})
	pulumi.RegisterOutputType(OncallScheduleSlackPtrOutput{})
	pulumi.RegisterOutputType(PlaylistItemOutput{})
	pulumi.RegisterOutputType(PlaylistItemArrayOutput{})
	pulumi.RegisterOutputType(ReportDashboardOutput{})
	pulumi.RegisterOutputType(ReportDashboardArrayOutput{})
	pulumi.RegisterOutputType(ReportDashboardTimeRangeOutput{})
	pulumi.RegisterOutputType(ReportDashboardTimeRangePtrOutput{})
	pulumi.RegisterOutputType(ReportScheduleOutput{})
	pulumi.RegisterOutputType(ReportSchedulePtrOutput{})
	pulumi.RegisterOutputType(RolePermissionOutput{})
	pulumi.RegisterOutputType(RolePermissionArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataRelativeTimeRangeOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleNotificationSettingsOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(SLOAlertingOutput{})
	pulumi.RegisterOutputType(SLOAlertingArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingAdvancedOptionsOutput{})
	pulumi.RegisterOutputType(SLOAlertingAdvancedOptionsPtrOutput{})
	pulumi.RegisterOutputType(SLOAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnLabelArrayOutput{})
	pulumi.RegisterOutputType(SLODestinationDatasourceOutput{})
	pulumi.RegisterOutputType(SLODestinationDatasourcePtrOutput{})
	pulumi.RegisterOutputType(SLOLabelOutput{})
	pulumi.RegisterOutputType(SLOLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOObjectiveOutput{})
	pulumi.RegisterOutputType(SLOObjectiveArrayOutput{})
	pulumi.RegisterOutputType(SLOQueryOutput{})
	pulumi.RegisterOutputType(SLOQueryArrayOutput{})
	pulumi.RegisterOutputType(SLOQueryFreeformOutput{})
	pulumi.RegisterOutputType(SLOQueryFreeformPtrOutput{})
	pulumi.RegisterOutputType(SLOQueryRatioOutput{})
	pulumi.RegisterOutputType(SLOQueryRatioPtrOutput{})
	pulumi.RegisterOutputType(ServiceAccountPermissionPermissionOutput{})
	pulumi.RegisterOutputType(ServiceAccountPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(SsoSettingsOauth2SettingsOutput{})
	pulumi.RegisterOutputType(SsoSettingsOauth2SettingsPtrOutput{})
	pulumi.RegisterOutputType(SsoSettingsSamlSettingsOutput{})
	pulumi.RegisterOutputType(SsoSettingsSamlSettingsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAdditionalRrArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAnswerRrsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrsPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsGrpcOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsGrpcPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsGrpcTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsGrpcTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsHttpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryAssertionArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestBodyArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryVariableOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsMultihttpEntryVariableArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPingOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsPingPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsScriptedOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsScriptedPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpQueryResponseOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpTlsConfigOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTcpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTracerouteOutput{})
	pulumi.RegisterOutputType(SyntheticMonitoringCheckSettingsTraceroutePtrOutput{})
	pulumi.RegisterOutputType(TeamPreferencesOutput{})
	pulumi.RegisterOutputType(TeamPreferencesPtrOutput{})
	pulumi.RegisterOutputType(TeamTeamSyncOutput{})
	pulumi.RegisterOutputType(TeamTeamSyncPtrOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardArrayOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderArrayOutput{})
	pulumi.RegisterOutputType(GetRolePermissionOutput{})
	pulumi.RegisterOutputType(GetRolePermissionArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloOutput{})
	pulumi.RegisterOutputType(GetSlosSloArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAdvancedOptionsOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAdvancedOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloDestinationDatasourceOutput{})
	pulumi.RegisterOutputType(GetSlosSloDestinationDatasourceArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloObjectiveOutput{})
	pulumi.RegisterOutputType(GetSlosSloObjectiveArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryFreeformOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryFreeformPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryRatioOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryRatioPtrOutput{})
	pulumi.RegisterOutputType(GetTeamPreferenceOutput{})
	pulumi.RegisterOutputType(GetTeamPreferenceArrayOutput{})
	pulumi.RegisterOutputType(GetTeamTeamSyncOutput{})
	pulumi.RegisterOutputType(GetTeamTeamSyncArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
