// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [HTTP API](https://grafana.com/docs/oncall/latest/oncall-api-reference/routes/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/onCall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleSlackChannel, err := onCall.GetSlackChannel(ctx, &oncall.GetSlackChannelArgs{
//				Name: "example_slack_channel",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = onCall.NewEscalationChain(ctx, "default", &onCall.EscalationChainArgs{
//				Name: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleIntegration, err := onCall.NewIntegration(ctx, "example_integration", &onCall.IntegrationArgs{
//				Name:         pulumi.String("Grafana Integration"),
//				Type:         pulumi.String("grafana"),
//				DefaultRoute: &oncall.IntegrationDefaultRouteArgs{},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = onCall.NewRoute(ctx, "example_route", &onCall.RouteArgs{
//				IntegrationId:     exampleIntegration.ID(),
//				EscalationChainId: _default.ID(),
//				RoutingRegex:      pulumi.String("us-(east|west)"),
//				Position:          pulumi.Int(0),
//				Slack: &oncall.RouteSlackArgs{
//					ChannelId: pulumi.String(exampleSlackChannel.SlackId),
//					Enabled:   pulumi.Bool(true),
//				},
//				Telegram: &oncall.RouteTelegramArgs{
//					Id:      pulumi.String("ONCALLTELEGRAMID"),
//					Enabled: pulumi.Bool(true),
//				},
//				Msteams: &oncall.RouteMsteamsArgs{
//					Id:      pulumi.String("ONCALLMSTEAMSID"),
//					Enabled: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/oncallRoute:OncallRoute name "{{ id }}"
// ```
//
// Deprecated: grafana.index/oncallroute.OncallRoute has been deprecated in favor of grafana.oncall/route.Route
type OncallRoute struct {
	pulumi.CustomResourceState

	// The ID of the escalation chain.
	EscalationChainId pulumi.StringOutput `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId pulumi.StringOutput `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams OncallRouteMsteamsPtrOutput `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position pulumi.IntOutput `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumi.StringOutput `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumi.StringPtrOutput `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack OncallRouteSlackPtrOutput `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram OncallRouteTelegramPtrOutput `pulumi:"telegram"`
}

// NewOncallRoute registers a new resource with the given unique name, arguments, and options.
func NewOncallRoute(ctx *pulumi.Context,
	name string, args *OncallRouteArgs, opts ...pulumi.ResourceOption) (*OncallRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EscalationChainId == nil {
		return nil, errors.New("invalid value for required argument 'EscalationChainId'")
	}
	if args.IntegrationId == nil {
		return nil, errors.New("invalid value for required argument 'IntegrationId'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	if args.RoutingRegex == nil {
		return nil, errors.New("invalid value for required argument 'RoutingRegex'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OncallRoute
	err := ctx.RegisterResource("grafana:index/oncallRoute:OncallRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOncallRoute gets an existing OncallRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOncallRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OncallRouteState, opts ...pulumi.ResourceOption) (*OncallRoute, error) {
	var resource OncallRoute
	err := ctx.ReadResource("grafana:index/oncallRoute:OncallRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OncallRoute resources.
type oncallRouteState struct {
	// The ID of the escalation chain.
	EscalationChainId *string `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId *string `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams *OncallRouteMsteams `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position *int `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex *string `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType *string `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack *OncallRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallRouteTelegram `pulumi:"telegram"`
}

type OncallRouteState struct {
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringPtrInput
	// The ID of the integration.
	IntegrationId pulumi.StringPtrInput
	// MS teams-specific settings for a route.
	Msteams OncallRouteMsteamsPtrInput
	// The position of the route (starts from 0).
	Position pulumi.IntPtrInput
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumi.StringPtrInput
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumi.StringPtrInput
	// Slack-specific settings for a route.
	Slack OncallRouteSlackPtrInput
	// Telegram-specific settings for a route.
	Telegram OncallRouteTelegramPtrInput
}

func (OncallRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallRouteState)(nil)).Elem()
}

type oncallRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId string `pulumi:"escalationChainId"`
	// The ID of the integration.
	IntegrationId string `pulumi:"integrationId"`
	// MS teams-specific settings for a route.
	Msteams *OncallRouteMsteams `pulumi:"msteams"`
	// The position of the route (starts from 0).
	Position int `pulumi:"position"`
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex string `pulumi:"routingRegex"`
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType *string `pulumi:"routingType"`
	// Slack-specific settings for a route.
	Slack *OncallRouteSlack `pulumi:"slack"`
	// Telegram-specific settings for a route.
	Telegram *OncallRouteTelegram `pulumi:"telegram"`
}

// The set of arguments for constructing a OncallRoute resource.
type OncallRouteArgs struct {
	// The ID of the escalation chain.
	EscalationChainId pulumi.StringInput
	// The ID of the integration.
	IntegrationId pulumi.StringInput
	// MS teams-specific settings for a route.
	Msteams OncallRouteMsteamsPtrInput
	// The position of the route (starts from 0).
	Position pulumi.IntInput
	// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
	RoutingRegex pulumi.StringInput
	// The type of route. Can be jinja2, regex Defaults to `regex`.
	RoutingType pulumi.StringPtrInput
	// Slack-specific settings for a route.
	Slack OncallRouteSlackPtrInput
	// Telegram-specific settings for a route.
	Telegram OncallRouteTelegramPtrInput
}

func (OncallRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*oncallRouteArgs)(nil)).Elem()
}

type OncallRouteInput interface {
	pulumi.Input

	ToOncallRouteOutput() OncallRouteOutput
	ToOncallRouteOutputWithContext(ctx context.Context) OncallRouteOutput
}

func (*OncallRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRoute)(nil)).Elem()
}

func (i *OncallRoute) ToOncallRouteOutput() OncallRouteOutput {
	return i.ToOncallRouteOutputWithContext(context.Background())
}

func (i *OncallRoute) ToOncallRouteOutputWithContext(ctx context.Context) OncallRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteOutput)
}

// OncallRouteArrayInput is an input type that accepts OncallRouteArray and OncallRouteArrayOutput values.
// You can construct a concrete instance of `OncallRouteArrayInput` via:
//
//	OncallRouteArray{ OncallRouteArgs{...} }
type OncallRouteArrayInput interface {
	pulumi.Input

	ToOncallRouteArrayOutput() OncallRouteArrayOutput
	ToOncallRouteArrayOutputWithContext(context.Context) OncallRouteArrayOutput
}

type OncallRouteArray []OncallRouteInput

func (OncallRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallRoute)(nil)).Elem()
}

func (i OncallRouteArray) ToOncallRouteArrayOutput() OncallRouteArrayOutput {
	return i.ToOncallRouteArrayOutputWithContext(context.Background())
}

func (i OncallRouteArray) ToOncallRouteArrayOutputWithContext(ctx context.Context) OncallRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteArrayOutput)
}

// OncallRouteMapInput is an input type that accepts OncallRouteMap and OncallRouteMapOutput values.
// You can construct a concrete instance of `OncallRouteMapInput` via:
//
//	OncallRouteMap{ "key": OncallRouteArgs{...} }
type OncallRouteMapInput interface {
	pulumi.Input

	ToOncallRouteMapOutput() OncallRouteMapOutput
	ToOncallRouteMapOutputWithContext(context.Context) OncallRouteMapOutput
}

type OncallRouteMap map[string]OncallRouteInput

func (OncallRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallRoute)(nil)).Elem()
}

func (i OncallRouteMap) ToOncallRouteMapOutput() OncallRouteMapOutput {
	return i.ToOncallRouteMapOutputWithContext(context.Background())
}

func (i OncallRouteMap) ToOncallRouteMapOutputWithContext(ctx context.Context) OncallRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OncallRouteMapOutput)
}

type OncallRouteOutput struct{ *pulumi.OutputState }

func (OncallRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OncallRoute)(nil)).Elem()
}

func (o OncallRouteOutput) ToOncallRouteOutput() OncallRouteOutput {
	return o
}

func (o OncallRouteOutput) ToOncallRouteOutputWithContext(ctx context.Context) OncallRouteOutput {
	return o
}

// The ID of the escalation chain.
func (o OncallRouteOutput) EscalationChainId() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallRoute) pulumi.StringOutput { return v.EscalationChainId }).(pulumi.StringOutput)
}

// The ID of the integration.
func (o OncallRouteOutput) IntegrationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallRoute) pulumi.StringOutput { return v.IntegrationId }).(pulumi.StringOutput)
}

// MS teams-specific settings for a route.
func (o OncallRouteOutput) Msteams() OncallRouteMsteamsPtrOutput {
	return o.ApplyT(func(v *OncallRoute) OncallRouteMsteamsPtrOutput { return v.Msteams }).(OncallRouteMsteamsPtrOutput)
}

// The position of the route (starts from 0).
func (o OncallRouteOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *OncallRoute) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.
func (o OncallRouteOutput) RoutingRegex() pulumi.StringOutput {
	return o.ApplyT(func(v *OncallRoute) pulumi.StringOutput { return v.RoutingRegex }).(pulumi.StringOutput)
}

// The type of route. Can be jinja2, regex Defaults to `regex`.
func (o OncallRouteOutput) RoutingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OncallRoute) pulumi.StringPtrOutput { return v.RoutingType }).(pulumi.StringPtrOutput)
}

// Slack-specific settings for a route.
func (o OncallRouteOutput) Slack() OncallRouteSlackPtrOutput {
	return o.ApplyT(func(v *OncallRoute) OncallRouteSlackPtrOutput { return v.Slack }).(OncallRouteSlackPtrOutput)
}

// Telegram-specific settings for a route.
func (o OncallRouteOutput) Telegram() OncallRouteTelegramPtrOutput {
	return o.ApplyT(func(v *OncallRoute) OncallRouteTelegramPtrOutput { return v.Telegram }).(OncallRouteTelegramPtrOutput)
}

type OncallRouteArrayOutput struct{ *pulumi.OutputState }

func (OncallRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OncallRoute)(nil)).Elem()
}

func (o OncallRouteArrayOutput) ToOncallRouteArrayOutput() OncallRouteArrayOutput {
	return o
}

func (o OncallRouteArrayOutput) ToOncallRouteArrayOutputWithContext(ctx context.Context) OncallRouteArrayOutput {
	return o
}

func (o OncallRouteArrayOutput) Index(i pulumi.IntInput) OncallRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OncallRoute {
		return vs[0].([]*OncallRoute)[vs[1].(int)]
	}).(OncallRouteOutput)
}

type OncallRouteMapOutput struct{ *pulumi.OutputState }

func (OncallRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OncallRoute)(nil)).Elem()
}

func (o OncallRouteMapOutput) ToOncallRouteMapOutput() OncallRouteMapOutput {
	return o
}

func (o OncallRouteMapOutput) ToOncallRouteMapOutputWithContext(ctx context.Context) OncallRouteMapOutput {
	return o
}

func (o OncallRouteMapOutput) MapIndex(k pulumi.StringInput) OncallRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OncallRoute {
		return vs[0].(map[string]*OncallRoute)[vs[1].(string)]
	}).(OncallRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteInput)(nil)).Elem(), &OncallRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteArrayInput)(nil)).Elem(), OncallRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OncallRouteMapInput)(nil)).Elem(), OncallRouteMap{})
	pulumi.RegisterOutputType(OncallRouteOutput{})
	pulumi.RegisterOutputType(OncallRouteArrayOutput{})
	pulumi.RegisterOutputType(OncallRouteMapOutput{})
}
