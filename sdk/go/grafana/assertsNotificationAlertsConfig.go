// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages Asserts Alert Configurations through Grafana API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// Basic alert configuration with silencing
//			_, err := grafana.NewAssertsNotificationAlertsConfig(ctx, "prometheus_remote_storage_failures", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("PrometheusRemoteStorageFailures"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":   pulumi.String("PrometheusRemoteStorageFailures"),
//					"alertgroup":  pulumi.String("prometheus.alerts"),
//					"asserts_env": pulumi.String("prod"),
//				},
//				Silenced: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// High severity alert with specific job and context matching
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "error_buildup_notify", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("ErrorBuildupNotify"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":               pulumi.String("ErrorBuildup"),
//					"job":                     pulumi.String("acai"),
//					"asserts_request_type":    pulumi.String("inbound"),
//					"asserts_request_context": pulumi.String("/auth"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// Alert with additional labels and custom duration
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "payment_test_alert", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("PaymentTestAlert"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":         pulumi.String("PaymentTestAlert"),
//					"additional_labels": pulumi.String("asserts_severity=~\"critical\""),
//					"alertgroup":        pulumi.String("alex-k8s-integration-test.alerts"),
//				},
//				AlertLabels: pulumi.StringMap{
//					"testing": pulumi.String("onetwothree"),
//				},
//				Duration: pulumi.String("5m"),
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// Latency alert for shipping service
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "high_shipping_latency", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("high shipping latency"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":            pulumi.String("LatencyP99ErrorBuildup"),
//					"job":                  pulumi.String("shipping"),
//					"asserts_request_type": pulumi.String("inbound"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// CPU throttling alert with warning severity
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "cpu_throttling_sustained", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("CPUThrottlingSustained"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":         pulumi.String("CPUThrottlingSustained"),
//					"additional_labels": pulumi.String("asserts_severity=~\"warning\""),
//				},
//				Silenced: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			// Ingress error rate alert
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "ingress_error", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("ingress error"),
//				MatchLabels: pulumi.StringMap{
//					"alertname":            pulumi.String("ErrorRatioBreach"),
//					"job":                  pulumi.String("ingress-nginx-controller-metrics"),
//					"asserts_request_type": pulumi.String("inbound"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			// MySQL Galera cluster alert
//			_, err = grafana.NewAssertsNotificationAlertsConfig(ctx, "mysql_galera_not_ready", &grafana.AssertsNotificationAlertsConfigArgs{
//				Name: pulumi.String("MySQLGaleraNotReady"),
//				MatchLabels: pulumi.StringMap{
//					"alertname": pulumi.String("MySQLGaleraNotReady"),
//				},
//				Silenced: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig name "{{ name }}"
// ```
type AssertsNotificationAlertsConfig struct {
	pulumi.CustomResourceState

	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapOutput `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrOutput `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapOutput `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrOutput `pulumi:"silenced"`
}

// NewAssertsNotificationAlertsConfig registers a new resource with the given unique name, arguments, and options.
func NewAssertsNotificationAlertsConfig(ctx *pulumi.Context,
	name string, args *AssertsNotificationAlertsConfigArgs, opts ...pulumi.ResourceOption) (*AssertsNotificationAlertsConfig, error) {
	if args == nil {
		args = &AssertsNotificationAlertsConfigArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AssertsNotificationAlertsConfig
	err := ctx.RegisterResource("grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAssertsNotificationAlertsConfig gets an existing AssertsNotificationAlertsConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAssertsNotificationAlertsConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AssertsNotificationAlertsConfigState, opts ...pulumi.ResourceOption) (*AssertsNotificationAlertsConfig, error) {
	var resource AssertsNotificationAlertsConfig
	err := ctx.ReadResource("grafana:index/assertsNotificationAlertsConfig:AssertsNotificationAlertsConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AssertsNotificationAlertsConfig resources.
type assertsNotificationAlertsConfigState struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels map[string]string `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name *string `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `pulumi:"silenced"`
}

type AssertsNotificationAlertsConfigState struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapInput
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrInput
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the alert configuration.
	Name pulumi.StringPtrInput
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrInput
}

func (AssertsNotificationAlertsConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*assertsNotificationAlertsConfigState)(nil)).Elem()
}

type assertsNotificationAlertsConfigArgs struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels map[string]string `pulumi:"alertLabels"`
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration *string `pulumi:"duration"`
	// Labels to match for this alert configuration.
	MatchLabels map[string]string `pulumi:"matchLabels"`
	// The name of the alert configuration.
	Name *string `pulumi:"name"`
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced *bool `pulumi:"silenced"`
}

// The set of arguments for constructing a AssertsNotificationAlertsConfig resource.
type AssertsNotificationAlertsConfigArgs struct {
	// Labels to add to alerts generated by this configuration.
	AlertLabels pulumi.StringMapInput
	// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
	Duration pulumi.StringPtrInput
	// Labels to match for this alert configuration.
	MatchLabels pulumi.StringMapInput
	// The name of the alert configuration.
	Name pulumi.StringPtrInput
	// Whether this alert configuration is silenced. Defaults to `false`.
	Silenced pulumi.BoolPtrInput
}

func (AssertsNotificationAlertsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*assertsNotificationAlertsConfigArgs)(nil)).Elem()
}

type AssertsNotificationAlertsConfigInput interface {
	pulumi.Input

	ToAssertsNotificationAlertsConfigOutput() AssertsNotificationAlertsConfigOutput
	ToAssertsNotificationAlertsConfigOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigOutput
}

func (*AssertsNotificationAlertsConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (i *AssertsNotificationAlertsConfig) ToAssertsNotificationAlertsConfigOutput() AssertsNotificationAlertsConfigOutput {
	return i.ToAssertsNotificationAlertsConfigOutputWithContext(context.Background())
}

func (i *AssertsNotificationAlertsConfig) ToAssertsNotificationAlertsConfigOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssertsNotificationAlertsConfigOutput)
}

// AssertsNotificationAlertsConfigArrayInput is an input type that accepts AssertsNotificationAlertsConfigArray and AssertsNotificationAlertsConfigArrayOutput values.
// You can construct a concrete instance of `AssertsNotificationAlertsConfigArrayInput` via:
//
//	AssertsNotificationAlertsConfigArray{ AssertsNotificationAlertsConfigArgs{...} }
type AssertsNotificationAlertsConfigArrayInput interface {
	pulumi.Input

	ToAssertsNotificationAlertsConfigArrayOutput() AssertsNotificationAlertsConfigArrayOutput
	ToAssertsNotificationAlertsConfigArrayOutputWithContext(context.Context) AssertsNotificationAlertsConfigArrayOutput
}

type AssertsNotificationAlertsConfigArray []AssertsNotificationAlertsConfigInput

func (AssertsNotificationAlertsConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (i AssertsNotificationAlertsConfigArray) ToAssertsNotificationAlertsConfigArrayOutput() AssertsNotificationAlertsConfigArrayOutput {
	return i.ToAssertsNotificationAlertsConfigArrayOutputWithContext(context.Background())
}

func (i AssertsNotificationAlertsConfigArray) ToAssertsNotificationAlertsConfigArrayOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssertsNotificationAlertsConfigArrayOutput)
}

// AssertsNotificationAlertsConfigMapInput is an input type that accepts AssertsNotificationAlertsConfigMap and AssertsNotificationAlertsConfigMapOutput values.
// You can construct a concrete instance of `AssertsNotificationAlertsConfigMapInput` via:
//
//	AssertsNotificationAlertsConfigMap{ "key": AssertsNotificationAlertsConfigArgs{...} }
type AssertsNotificationAlertsConfigMapInput interface {
	pulumi.Input

	ToAssertsNotificationAlertsConfigMapOutput() AssertsNotificationAlertsConfigMapOutput
	ToAssertsNotificationAlertsConfigMapOutputWithContext(context.Context) AssertsNotificationAlertsConfigMapOutput
}

type AssertsNotificationAlertsConfigMap map[string]AssertsNotificationAlertsConfigInput

func (AssertsNotificationAlertsConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (i AssertsNotificationAlertsConfigMap) ToAssertsNotificationAlertsConfigMapOutput() AssertsNotificationAlertsConfigMapOutput {
	return i.ToAssertsNotificationAlertsConfigMapOutputWithContext(context.Background())
}

func (i AssertsNotificationAlertsConfigMap) ToAssertsNotificationAlertsConfigMapOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AssertsNotificationAlertsConfigMapOutput)
}

type AssertsNotificationAlertsConfigOutput struct{ *pulumi.OutputState }

func (AssertsNotificationAlertsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (o AssertsNotificationAlertsConfigOutput) ToAssertsNotificationAlertsConfigOutput() AssertsNotificationAlertsConfigOutput {
	return o
}

func (o AssertsNotificationAlertsConfigOutput) ToAssertsNotificationAlertsConfigOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigOutput {
	return o
}

// Labels to add to alerts generated by this configuration.
func (o AssertsNotificationAlertsConfigOutput) AlertLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssertsNotificationAlertsConfig) pulumi.StringMapOutput { return v.AlertLabels }).(pulumi.StringMapOutput)
}

// Duration for which the condition must be true before firing (e.g., '5m', '30s'). Maps to 'for' in Asserts API.
func (o AssertsNotificationAlertsConfigOutput) Duration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AssertsNotificationAlertsConfig) pulumi.StringPtrOutput { return v.Duration }).(pulumi.StringPtrOutput)
}

// Labels to match for this alert configuration.
func (o AssertsNotificationAlertsConfigOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AssertsNotificationAlertsConfig) pulumi.StringMapOutput { return v.MatchLabels }).(pulumi.StringMapOutput)
}

// The name of the alert configuration.
func (o AssertsNotificationAlertsConfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AssertsNotificationAlertsConfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether this alert configuration is silenced. Defaults to `false`.
func (o AssertsNotificationAlertsConfigOutput) Silenced() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AssertsNotificationAlertsConfig) pulumi.BoolPtrOutput { return v.Silenced }).(pulumi.BoolPtrOutput)
}

type AssertsNotificationAlertsConfigArrayOutput struct{ *pulumi.OutputState }

func (AssertsNotificationAlertsConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (o AssertsNotificationAlertsConfigArrayOutput) ToAssertsNotificationAlertsConfigArrayOutput() AssertsNotificationAlertsConfigArrayOutput {
	return o
}

func (o AssertsNotificationAlertsConfigArrayOutput) ToAssertsNotificationAlertsConfigArrayOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigArrayOutput {
	return o
}

func (o AssertsNotificationAlertsConfigArrayOutput) Index(i pulumi.IntInput) AssertsNotificationAlertsConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AssertsNotificationAlertsConfig {
		return vs[0].([]*AssertsNotificationAlertsConfig)[vs[1].(int)]
	}).(AssertsNotificationAlertsConfigOutput)
}

type AssertsNotificationAlertsConfigMapOutput struct{ *pulumi.OutputState }

func (AssertsNotificationAlertsConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AssertsNotificationAlertsConfig)(nil)).Elem()
}

func (o AssertsNotificationAlertsConfigMapOutput) ToAssertsNotificationAlertsConfigMapOutput() AssertsNotificationAlertsConfigMapOutput {
	return o
}

func (o AssertsNotificationAlertsConfigMapOutput) ToAssertsNotificationAlertsConfigMapOutputWithContext(ctx context.Context) AssertsNotificationAlertsConfigMapOutput {
	return o
}

func (o AssertsNotificationAlertsConfigMapOutput) MapIndex(k pulumi.StringInput) AssertsNotificationAlertsConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AssertsNotificationAlertsConfig {
		return vs[0].(map[string]*AssertsNotificationAlertsConfig)[vs[1].(string)]
	}).(AssertsNotificationAlertsConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AssertsNotificationAlertsConfigInput)(nil)).Elem(), &AssertsNotificationAlertsConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssertsNotificationAlertsConfigArrayInput)(nil)).Elem(), AssertsNotificationAlertsConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AssertsNotificationAlertsConfigMapInput)(nil)).Elem(), AssertsNotificationAlertsConfigMap{})
	pulumi.RegisterOutputType(AssertsNotificationAlertsConfigOutput{})
	pulumi.RegisterOutputType(AssertsNotificationAlertsConfigArrayOutput{})
	pulumi.RegisterOutputType(AssertsNotificationAlertsConfigMapOutput{})
}
