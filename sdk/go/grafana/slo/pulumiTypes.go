// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package slo

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type SLOAlerting struct {
	// Advanced Options for Alert Rules
	AdvancedOptions *SLOAlertingAdvancedOptions `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []SLOAlertingAnnotation `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns []SLOAlertingFastburn `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels []SLOAlertingLabel `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns []SLOAlertingSlowburn `pulumi:"slowburns"`
}

// SLOAlertingInput is an input type that accepts SLOAlertingArgs and SLOAlertingOutput values.
// You can construct a concrete instance of `SLOAlertingInput` via:
//
//	SLOAlertingArgs{...}
type SLOAlertingInput interface {
	pulumi.Input

	ToSLOAlertingOutput() SLOAlertingOutput
	ToSLOAlertingOutputWithContext(context.Context) SLOAlertingOutput
}

type SLOAlertingArgs struct {
	// Advanced Options for Alert Rules
	AdvancedOptions SLOAlertingAdvancedOptionsPtrInput `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations SLOAlertingAnnotationArrayInput `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns SLOAlertingFastburnArrayInput `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels SLOAlertingLabelArrayInput `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns SLOAlertingSlowburnArrayInput `pulumi:"slowburns"`
}

func (SLOAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (i SLOAlertingArgs) ToSLOAlertingOutput() SLOAlertingOutput {
	return i.ToSLOAlertingOutputWithContext(context.Background())
}

func (i SLOAlertingArgs) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingOutput)
}

// SLOAlertingArrayInput is an input type that accepts SLOAlertingArray and SLOAlertingArrayOutput values.
// You can construct a concrete instance of `SLOAlertingArrayInput` via:
//
//	SLOAlertingArray{ SLOAlertingArgs{...} }
type SLOAlertingArrayInput interface {
	pulumi.Input

	ToSLOAlertingArrayOutput() SLOAlertingArrayOutput
	ToSLOAlertingArrayOutputWithContext(context.Context) SLOAlertingArrayOutput
}

type SLOAlertingArray []SLOAlertingInput

func (SLOAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlerting)(nil)).Elem()
}

func (i SLOAlertingArray) ToSLOAlertingArrayOutput() SLOAlertingArrayOutput {
	return i.ToSLOAlertingArrayOutputWithContext(context.Background())
}

func (i SLOAlertingArray) ToSLOAlertingArrayOutputWithContext(ctx context.Context) SLOAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingArrayOutput)
}

type SLOAlertingOutput struct{ *pulumi.OutputState }

func (SLOAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlerting)(nil)).Elem()
}

func (o SLOAlertingOutput) ToSLOAlertingOutput() SLOAlertingOutput {
	return o
}

func (o SLOAlertingOutput) ToSLOAlertingOutputWithContext(ctx context.Context) SLOAlertingOutput {
	return o
}

// Advanced Options for Alert Rules
func (o SLOAlertingOutput) AdvancedOptions() SLOAlertingAdvancedOptionsPtrOutput {
	return o.ApplyT(func(v SLOAlerting) *SLOAlertingAdvancedOptions { return v.AdvancedOptions }).(SLOAlertingAdvancedOptionsPtrOutput)
}

// Annotations will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Annotations() SLOAlertingAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingAnnotation { return v.Annotations }).(SLOAlertingAnnotationArrayOutput)
}

// Alerting Rules generated for Fast Burn alerts
func (o SLOAlertingOutput) Fastburns() SLOAlertingFastburnArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingFastburn { return v.Fastburns }).(SLOAlertingFastburnArrayOutput)
}

// Labels will be attached to all alerts generated by any of these rules.
func (o SLOAlertingOutput) Labels() SLOAlertingLabelArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingLabel { return v.Labels }).(SLOAlertingLabelArrayOutput)
}

// Alerting Rules generated for Slow Burn alerts
func (o SLOAlertingOutput) Slowburns() SLOAlertingSlowburnArrayOutput {
	return o.ApplyT(func(v SLOAlerting) []SLOAlertingSlowburn { return v.Slowburns }).(SLOAlertingSlowburnArrayOutput)
}

type SLOAlertingArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlerting)(nil)).Elem()
}

func (o SLOAlertingArrayOutput) ToSLOAlertingArrayOutput() SLOAlertingArrayOutput {
	return o
}

func (o SLOAlertingArrayOutput) ToSLOAlertingArrayOutputWithContext(ctx context.Context) SLOAlertingArrayOutput {
	return o
}

func (o SLOAlertingArrayOutput) Index(i pulumi.IntInput) SLOAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlerting {
		return vs[0].([]SLOAlerting)[vs[1].(int)]
	}).(SLOAlertingOutput)
}

type SLOAlertingAdvancedOptions struct {
	// Minimum number of failed events to trigger an alert
	MinFailures *int `pulumi:"minFailures"`
}

// SLOAlertingAdvancedOptionsInput is an input type that accepts SLOAlertingAdvancedOptionsArgs and SLOAlertingAdvancedOptionsOutput values.
// You can construct a concrete instance of `SLOAlertingAdvancedOptionsInput` via:
//
//	SLOAlertingAdvancedOptionsArgs{...}
type SLOAlertingAdvancedOptionsInput interface {
	pulumi.Input

	ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput
	ToSLOAlertingAdvancedOptionsOutputWithContext(context.Context) SLOAlertingAdvancedOptionsOutput
}

type SLOAlertingAdvancedOptionsArgs struct {
	// Minimum number of failed events to trigger an alert
	MinFailures pulumi.IntPtrInput `pulumi:"minFailures"`
}

func (SLOAlertingAdvancedOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput {
	return i.ToSLOAlertingAdvancedOptionsOutputWithContext(context.Background())
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsOutput)
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return i.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i SLOAlertingAdvancedOptionsArgs) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsOutput).ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx)
}

// SLOAlertingAdvancedOptionsPtrInput is an input type that accepts SLOAlertingAdvancedOptionsArgs, SLOAlertingAdvancedOptionsPtr and SLOAlertingAdvancedOptionsPtrOutput values.
// You can construct a concrete instance of `SLOAlertingAdvancedOptionsPtrInput` via:
//
//	        SLOAlertingAdvancedOptionsArgs{...}
//
//	or:
//
//	        nil
type SLOAlertingAdvancedOptionsPtrInput interface {
	pulumi.Input

	ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput
	ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Context) SLOAlertingAdvancedOptionsPtrOutput
}

type sloalertingAdvancedOptionsPtrType SLOAlertingAdvancedOptionsArgs

func SLOAlertingAdvancedOptionsPtr(v *SLOAlertingAdvancedOptionsArgs) SLOAlertingAdvancedOptionsPtrInput {
	return (*sloalertingAdvancedOptionsPtrType)(v)
}

func (*sloalertingAdvancedOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (i *sloalertingAdvancedOptionsPtrType) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return i.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i *sloalertingAdvancedOptionsPtrType) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAdvancedOptionsPtrOutput)
}

type SLOAlertingAdvancedOptionsOutput struct{ *pulumi.OutputState }

func (SLOAlertingAdvancedOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsOutput() SLOAlertingAdvancedOptionsOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return o.ToSLOAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (o SLOAlertingAdvancedOptionsOutput) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOAlertingAdvancedOptions) *SLOAlertingAdvancedOptions {
		return &v
	}).(SLOAlertingAdvancedOptionsPtrOutput)
}

// Minimum number of failed events to trigger an alert
func (o SLOAlertingAdvancedOptionsOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SLOAlertingAdvancedOptions) *int { return v.MinFailures }).(pulumi.IntPtrOutput)
}

type SLOAlertingAdvancedOptionsPtrOutput struct{ *pulumi.OutputState }

func (SLOAlertingAdvancedOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOAlertingAdvancedOptions)(nil)).Elem()
}

func (o SLOAlertingAdvancedOptionsPtrOutput) ToSLOAlertingAdvancedOptionsPtrOutput() SLOAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsPtrOutput) ToSLOAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) SLOAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o SLOAlertingAdvancedOptionsPtrOutput) Elem() SLOAlertingAdvancedOptionsOutput {
	return o.ApplyT(func(v *SLOAlertingAdvancedOptions) SLOAlertingAdvancedOptions {
		if v != nil {
			return *v
		}
		var ret SLOAlertingAdvancedOptions
		return ret
	}).(SLOAlertingAdvancedOptionsOutput)
}

// Minimum number of failed events to trigger an alert
func (o SLOAlertingAdvancedOptionsPtrOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SLOAlertingAdvancedOptions) *int {
		if v == nil {
			return nil
		}
		return v.MinFailures
	}).(pulumi.IntPtrOutput)
}

type SLOAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingAnnotationInput is an input type that accepts SLOAlertingAnnotationArgs and SLOAlertingAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingAnnotationInput` via:
//
//	SLOAlertingAnnotationArgs{...}
type SLOAlertingAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput
	ToSLOAlertingAnnotationOutputWithContext(context.Context) SLOAlertingAnnotationOutput
}

type SLOAlertingAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return i.ToSLOAlertingAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingAnnotationArgs) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAnnotationOutput)
}

// SLOAlertingAnnotationArrayInput is an input type that accepts SLOAlertingAnnotationArray and SLOAlertingAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingAnnotationArrayInput` via:
//
//	SLOAlertingAnnotationArray{ SLOAlertingAnnotationArgs{...} }
type SLOAlertingAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput
	ToSLOAlertingAnnotationArrayOutputWithContext(context.Context) SLOAlertingAnnotationArrayOutput
}

type SLOAlertingAnnotationArray []SLOAlertingAnnotationInput

func (SLOAlertingAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingAnnotation)(nil)).Elem()
}

func (i SLOAlertingAnnotationArray) ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput {
	return i.ToSLOAlertingAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingAnnotationArray) ToSLOAlertingAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingAnnotationArrayOutput)
}

type SLOAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingAnnotation)(nil)).Elem()
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutput() SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) ToSLOAlertingAnnotationOutputWithContext(ctx context.Context) SLOAlertingAnnotationOutput {
	return o
}

func (o SLOAlertingAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingAnnotation)(nil)).Elem()
}

func (o SLOAlertingAnnotationArrayOutput) ToSLOAlertingAnnotationArrayOutput() SLOAlertingAnnotationArrayOutput {
	return o
}

func (o SLOAlertingAnnotationArrayOutput) ToSLOAlertingAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingAnnotationArrayOutput {
	return o
}

func (o SLOAlertingAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingAnnotation {
		return vs[0].([]SLOAlertingAnnotation)[vs[1].(int)]
	}).(SLOAlertingAnnotationOutput)
}

type SLOAlertingFastburn struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations []SLOAlertingFastburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels []SLOAlertingFastburnLabel `pulumi:"labels"`
}

// SLOAlertingFastburnInput is an input type that accepts SLOAlertingFastburnArgs and SLOAlertingFastburnOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnInput` via:
//
//	SLOAlertingFastburnArgs{...}
type SLOAlertingFastburnInput interface {
	pulumi.Input

	ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput
	ToSLOAlertingFastburnOutputWithContext(context.Context) SLOAlertingFastburnOutput
}

type SLOAlertingFastburnArgs struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations SLOAlertingFastburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels SLOAlertingFastburnLabelArrayInput `pulumi:"labels"`
}

func (SLOAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return i.ToSLOAlertingFastburnOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnArgs) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnOutput)
}

// SLOAlertingFastburnArrayInput is an input type that accepts SLOAlertingFastburnArray and SLOAlertingFastburnArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnArrayInput` via:
//
//	SLOAlertingFastburnArray{ SLOAlertingFastburnArgs{...} }
type SLOAlertingFastburnArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput
	ToSLOAlertingFastburnArrayOutputWithContext(context.Context) SLOAlertingFastburnArrayOutput
}

type SLOAlertingFastburnArray []SLOAlertingFastburnInput

func (SLOAlertingFastburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburn)(nil)).Elem()
}

func (i SLOAlertingFastburnArray) ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput {
	return i.ToSLOAlertingFastburnArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnArray) ToSLOAlertingFastburnArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnArrayOutput)
}

type SLOAlertingFastburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburn)(nil)).Elem()
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutput() SLOAlertingFastburnOutput {
	return o
}

func (o SLOAlertingFastburnOutput) ToSLOAlertingFastburnOutputWithContext(ctx context.Context) SLOAlertingFastburnOutput {
	return o
}

// Annotations to attach only to Fast Burn alerts.
func (o SLOAlertingFastburnOutput) Annotations() SLOAlertingFastburnAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlertingFastburn) []SLOAlertingFastburnAnnotation { return v.Annotations }).(SLOAlertingFastburnAnnotationArrayOutput)
}

// Labels to attach only to Fast Burn alerts.
func (o SLOAlertingFastburnOutput) Labels() SLOAlertingFastburnLabelArrayOutput {
	return o.ApplyT(func(v SLOAlertingFastburn) []SLOAlertingFastburnLabel { return v.Labels }).(SLOAlertingFastburnLabelArrayOutput)
}

type SLOAlertingFastburnArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburn)(nil)).Elem()
}

func (o SLOAlertingFastburnArrayOutput) ToSLOAlertingFastburnArrayOutput() SLOAlertingFastburnArrayOutput {
	return o
}

func (o SLOAlertingFastburnArrayOutput) ToSLOAlertingFastburnArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnArrayOutput {
	return o
}

func (o SLOAlertingFastburnArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburn {
		return vs[0].([]SLOAlertingFastburn)[vs[1].(int)]
	}).(SLOAlertingFastburnOutput)
}

type SLOAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingFastburnAnnotationInput is an input type that accepts SLOAlertingFastburnAnnotationArgs and SLOAlertingFastburnAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnAnnotationInput` via:
//
//	SLOAlertingFastburnAnnotationArgs{...}
type SLOAlertingFastburnAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput
	ToSLOAlertingFastburnAnnotationOutputWithContext(context.Context) SLOAlertingFastburnAnnotationOutput
}

type SLOAlertingFastburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return i.ToSLOAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnAnnotationArgs) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnAnnotationOutput)
}

// SLOAlertingFastburnAnnotationArrayInput is an input type that accepts SLOAlertingFastburnAnnotationArray and SLOAlertingFastburnAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnAnnotationArrayInput` via:
//
//	SLOAlertingFastburnAnnotationArray{ SLOAlertingFastburnAnnotationArgs{...} }
type SLOAlertingFastburnAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput
	ToSLOAlertingFastburnAnnotationArrayOutputWithContext(context.Context) SLOAlertingFastburnAnnotationArrayOutput
}

type SLOAlertingFastburnAnnotationArray []SLOAlertingFastburnAnnotationInput

func (SLOAlertingFastburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingFastburnAnnotationArray) ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput {
	return i.ToSLOAlertingFastburnAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnAnnotationArray) ToSLOAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnAnnotationArrayOutput)
}

type SLOAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutput() SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) ToSLOAlertingFastburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingFastburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingFastburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingFastburnAnnotationArrayOutput) ToSLOAlertingFastburnAnnotationArrayOutput() SLOAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationArrayOutput) ToSLOAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingFastburnAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburnAnnotation {
		return vs[0].([]SLOAlertingFastburnAnnotation)[vs[1].(int)]
	}).(SLOAlertingFastburnAnnotationOutput)
}

type SLOAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingFastburnLabelInput is an input type that accepts SLOAlertingFastburnLabelArgs and SLOAlertingFastburnLabelOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnLabelInput` via:
//
//	SLOAlertingFastburnLabelArgs{...}
type SLOAlertingFastburnLabelInput interface {
	pulumi.Input

	ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput
	ToSLOAlertingFastburnLabelOutputWithContext(context.Context) SLOAlertingFastburnLabelOutput
}

type SLOAlertingFastburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return i.ToSLOAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnLabelArgs) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnLabelOutput)
}

// SLOAlertingFastburnLabelArrayInput is an input type that accepts SLOAlertingFastburnLabelArray and SLOAlertingFastburnLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingFastburnLabelArrayInput` via:
//
//	SLOAlertingFastburnLabelArray{ SLOAlertingFastburnLabelArgs{...} }
type SLOAlertingFastburnLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput
	ToSLOAlertingFastburnLabelArrayOutputWithContext(context.Context) SLOAlertingFastburnLabelArrayOutput
}

type SLOAlertingFastburnLabelArray []SLOAlertingFastburnLabelInput

func (SLOAlertingFastburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnLabel)(nil)).Elem()
}

func (i SLOAlertingFastburnLabelArray) ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput {
	return i.ToSLOAlertingFastburnLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingFastburnLabelArray) ToSLOAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingFastburnLabelArrayOutput)
}

type SLOAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingFastburnLabel)(nil)).Elem()
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutput() SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) ToSLOAlertingFastburnLabelOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelOutput {
	return o
}

func (o SLOAlertingFastburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingFastburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingFastburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingFastburnLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingFastburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingFastburnLabel)(nil)).Elem()
}

func (o SLOAlertingFastburnLabelArrayOutput) ToSLOAlertingFastburnLabelArrayOutput() SLOAlertingFastburnLabelArrayOutput {
	return o
}

func (o SLOAlertingFastburnLabelArrayOutput) ToSLOAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingFastburnLabelArrayOutput {
	return o
}

func (o SLOAlertingFastburnLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingFastburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingFastburnLabel {
		return vs[0].([]SLOAlertingFastburnLabel)[vs[1].(int)]
	}).(SLOAlertingFastburnLabelOutput)
}

type SLOAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingLabelInput is an input type that accepts SLOAlertingLabelArgs and SLOAlertingLabelOutput values.
// You can construct a concrete instance of `SLOAlertingLabelInput` via:
//
//	SLOAlertingLabelArgs{...}
type SLOAlertingLabelInput interface {
	pulumi.Input

	ToSLOAlertingLabelOutput() SLOAlertingLabelOutput
	ToSLOAlertingLabelOutputWithContext(context.Context) SLOAlertingLabelOutput
}

type SLOAlertingLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return i.ToSLOAlertingLabelOutputWithContext(context.Background())
}

func (i SLOAlertingLabelArgs) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingLabelOutput)
}

// SLOAlertingLabelArrayInput is an input type that accepts SLOAlertingLabelArray and SLOAlertingLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingLabelArrayInput` via:
//
//	SLOAlertingLabelArray{ SLOAlertingLabelArgs{...} }
type SLOAlertingLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput
	ToSLOAlertingLabelArrayOutputWithContext(context.Context) SLOAlertingLabelArrayOutput
}

type SLOAlertingLabelArray []SLOAlertingLabelInput

func (SLOAlertingLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingLabel)(nil)).Elem()
}

func (i SLOAlertingLabelArray) ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput {
	return i.ToSLOAlertingLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingLabelArray) ToSLOAlertingLabelArrayOutputWithContext(ctx context.Context) SLOAlertingLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingLabelArrayOutput)
}

type SLOAlertingLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingLabel)(nil)).Elem()
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutput() SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) ToSLOAlertingLabelOutputWithContext(ctx context.Context) SLOAlertingLabelOutput {
	return o
}

func (o SLOAlertingLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingLabel)(nil)).Elem()
}

func (o SLOAlertingLabelArrayOutput) ToSLOAlertingLabelArrayOutput() SLOAlertingLabelArrayOutput {
	return o
}

func (o SLOAlertingLabelArrayOutput) ToSLOAlertingLabelArrayOutputWithContext(ctx context.Context) SLOAlertingLabelArrayOutput {
	return o
}

func (o SLOAlertingLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingLabel {
		return vs[0].([]SLOAlertingLabel)[vs[1].(int)]
	}).(SLOAlertingLabelOutput)
}

type SLOAlertingSlowburn struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations []SLOAlertingSlowburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels []SLOAlertingSlowburnLabel `pulumi:"labels"`
}

// SLOAlertingSlowburnInput is an input type that accepts SLOAlertingSlowburnArgs and SLOAlertingSlowburnOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnInput` via:
//
//	SLOAlertingSlowburnArgs{...}
type SLOAlertingSlowburnInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput
	ToSLOAlertingSlowburnOutputWithContext(context.Context) SLOAlertingSlowburnOutput
}

type SLOAlertingSlowburnArgs struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations SLOAlertingSlowburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels SLOAlertingSlowburnLabelArrayInput `pulumi:"labels"`
}

func (SLOAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return i.ToSLOAlertingSlowburnOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnArgs) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnOutput)
}

// SLOAlertingSlowburnArrayInput is an input type that accepts SLOAlertingSlowburnArray and SLOAlertingSlowburnArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnArrayInput` via:
//
//	SLOAlertingSlowburnArray{ SLOAlertingSlowburnArgs{...} }
type SLOAlertingSlowburnArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput
	ToSLOAlertingSlowburnArrayOutputWithContext(context.Context) SLOAlertingSlowburnArrayOutput
}

type SLOAlertingSlowburnArray []SLOAlertingSlowburnInput

func (SLOAlertingSlowburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburn)(nil)).Elem()
}

func (i SLOAlertingSlowburnArray) ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput {
	return i.ToSLOAlertingSlowburnArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnArray) ToSLOAlertingSlowburnArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnArrayOutput)
}

type SLOAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburn)(nil)).Elem()
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutput() SLOAlertingSlowburnOutput {
	return o
}

func (o SLOAlertingSlowburnOutput) ToSLOAlertingSlowburnOutputWithContext(ctx context.Context) SLOAlertingSlowburnOutput {
	return o
}

// Annotations to attach only to Slow Burn alerts.
func (o SLOAlertingSlowburnOutput) Annotations() SLOAlertingSlowburnAnnotationArrayOutput {
	return o.ApplyT(func(v SLOAlertingSlowburn) []SLOAlertingSlowburnAnnotation { return v.Annotations }).(SLOAlertingSlowburnAnnotationArrayOutput)
}

// Labels to attach only to Slow Burn alerts.
func (o SLOAlertingSlowburnOutput) Labels() SLOAlertingSlowburnLabelArrayOutput {
	return o.ApplyT(func(v SLOAlertingSlowburn) []SLOAlertingSlowburnLabel { return v.Labels }).(SLOAlertingSlowburnLabelArrayOutput)
}

type SLOAlertingSlowburnArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburn)(nil)).Elem()
}

func (o SLOAlertingSlowburnArrayOutput) ToSLOAlertingSlowburnArrayOutput() SLOAlertingSlowburnArrayOutput {
	return o
}

func (o SLOAlertingSlowburnArrayOutput) ToSLOAlertingSlowburnArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnArrayOutput {
	return o
}

func (o SLOAlertingSlowburnArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburn {
		return vs[0].([]SLOAlertingSlowburn)[vs[1].(int)]
	}).(SLOAlertingSlowburnOutput)
}

type SLOAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingSlowburnAnnotationInput is an input type that accepts SLOAlertingSlowburnAnnotationArgs and SLOAlertingSlowburnAnnotationOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnAnnotationInput` via:
//
//	SLOAlertingSlowburnAnnotationArgs{...}
type SLOAlertingSlowburnAnnotationInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput
	ToSLOAlertingSlowburnAnnotationOutputWithContext(context.Context) SLOAlertingSlowburnAnnotationOutput
}

type SLOAlertingSlowburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return i.ToSLOAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnAnnotationArgs) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnAnnotationOutput)
}

// SLOAlertingSlowburnAnnotationArrayInput is an input type that accepts SLOAlertingSlowburnAnnotationArray and SLOAlertingSlowburnAnnotationArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnAnnotationArrayInput` via:
//
//	SLOAlertingSlowburnAnnotationArray{ SLOAlertingSlowburnAnnotationArgs{...} }
type SLOAlertingSlowburnAnnotationArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput
	ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(context.Context) SLOAlertingSlowburnAnnotationArrayOutput
}

type SLOAlertingSlowburnAnnotationArray []SLOAlertingSlowburnAnnotationInput

func (SLOAlertingSlowburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i SLOAlertingSlowburnAnnotationArray) ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput {
	return i.ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnAnnotationArray) ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnAnnotationArrayOutput)
}

type SLOAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutput() SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) ToSLOAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingSlowburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingSlowburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) ToSLOAlertingSlowburnAnnotationArrayOutput() SLOAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) ToSLOAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o SLOAlertingSlowburnAnnotationArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburnAnnotation {
		return vs[0].([]SLOAlertingSlowburnAnnotation)[vs[1].(int)]
	}).(SLOAlertingSlowburnAnnotationOutput)
}

type SLOAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOAlertingSlowburnLabelInput is an input type that accepts SLOAlertingSlowburnLabelArgs and SLOAlertingSlowburnLabelOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnLabelInput` via:
//
//	SLOAlertingSlowburnLabelArgs{...}
type SLOAlertingSlowburnLabelInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput
	ToSLOAlertingSlowburnLabelOutputWithContext(context.Context) SLOAlertingSlowburnLabelOutput
}

type SLOAlertingSlowburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return i.ToSLOAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnLabelArgs) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnLabelOutput)
}

// SLOAlertingSlowburnLabelArrayInput is an input type that accepts SLOAlertingSlowburnLabelArray and SLOAlertingSlowburnLabelArrayOutput values.
// You can construct a concrete instance of `SLOAlertingSlowburnLabelArrayInput` via:
//
//	SLOAlertingSlowburnLabelArray{ SLOAlertingSlowburnLabelArgs{...} }
type SLOAlertingSlowburnLabelArrayInput interface {
	pulumi.Input

	ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput
	ToSLOAlertingSlowburnLabelArrayOutputWithContext(context.Context) SLOAlertingSlowburnLabelArrayOutput
}

type SLOAlertingSlowburnLabelArray []SLOAlertingSlowburnLabelInput

func (SLOAlertingSlowburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (i SLOAlertingSlowburnLabelArray) ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput {
	return i.ToSLOAlertingSlowburnLabelArrayOutputWithContext(context.Background())
}

func (i SLOAlertingSlowburnLabelArray) ToSLOAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOAlertingSlowburnLabelArrayOutput)
}

type SLOAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutput() SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) ToSLOAlertingSlowburnLabelOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelOutput {
	return o
}

func (o SLOAlertingSlowburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOAlertingSlowburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOAlertingSlowburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOAlertingSlowburnLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOAlertingSlowburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOAlertingSlowburnLabel)(nil)).Elem()
}

func (o SLOAlertingSlowburnLabelArrayOutput) ToSLOAlertingSlowburnLabelArrayOutput() SLOAlertingSlowburnLabelArrayOutput {
	return o
}

func (o SLOAlertingSlowburnLabelArrayOutput) ToSLOAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) SLOAlertingSlowburnLabelArrayOutput {
	return o
}

func (o SLOAlertingSlowburnLabelArrayOutput) Index(i pulumi.IntInput) SLOAlertingSlowburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOAlertingSlowburnLabel {
		return vs[0].([]SLOAlertingSlowburnLabel)[vs[1].(int)]
	}).(SLOAlertingSlowburnLabelOutput)
}

type SLODestinationDatasource struct {
	// UID for the Mimir Datasource
	Uid *string `pulumi:"uid"`
}

// SLODestinationDatasourceInput is an input type that accepts SLODestinationDatasourceArgs and SLODestinationDatasourceOutput values.
// You can construct a concrete instance of `SLODestinationDatasourceInput` via:
//
//	SLODestinationDatasourceArgs{...}
type SLODestinationDatasourceInput interface {
	pulumi.Input

	ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput
	ToSLODestinationDatasourceOutputWithContext(context.Context) SLODestinationDatasourceOutput
}

type SLODestinationDatasourceArgs struct {
	// UID for the Mimir Datasource
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (SLODestinationDatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLODestinationDatasource)(nil)).Elem()
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput {
	return i.ToSLODestinationDatasourceOutputWithContext(context.Background())
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourceOutputWithContext(ctx context.Context) SLODestinationDatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourceOutput)
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return i.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (i SLODestinationDatasourceArgs) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourceOutput).ToSLODestinationDatasourcePtrOutputWithContext(ctx)
}

// SLODestinationDatasourcePtrInput is an input type that accepts SLODestinationDatasourceArgs, SLODestinationDatasourcePtr and SLODestinationDatasourcePtrOutput values.
// You can construct a concrete instance of `SLODestinationDatasourcePtrInput` via:
//
//	        SLODestinationDatasourceArgs{...}
//
//	or:
//
//	        nil
type SLODestinationDatasourcePtrInput interface {
	pulumi.Input

	ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput
	ToSLODestinationDatasourcePtrOutputWithContext(context.Context) SLODestinationDatasourcePtrOutput
}

type slodestinationDatasourcePtrType SLODestinationDatasourceArgs

func SLODestinationDatasourcePtr(v *SLODestinationDatasourceArgs) SLODestinationDatasourcePtrInput {
	return (*slodestinationDatasourcePtrType)(v)
}

func (*slodestinationDatasourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLODestinationDatasource)(nil)).Elem()
}

func (i *slodestinationDatasourcePtrType) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return i.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (i *slodestinationDatasourcePtrType) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLODestinationDatasourcePtrOutput)
}

type SLODestinationDatasourceOutput struct{ *pulumi.OutputState }

func (SLODestinationDatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLODestinationDatasource)(nil)).Elem()
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourceOutput() SLODestinationDatasourceOutput {
	return o
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourceOutputWithContext(ctx context.Context) SLODestinationDatasourceOutput {
	return o
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return o.ToSLODestinationDatasourcePtrOutputWithContext(context.Background())
}

func (o SLODestinationDatasourceOutput) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLODestinationDatasource) *SLODestinationDatasource {
		return &v
	}).(SLODestinationDatasourcePtrOutput)
}

// UID for the Mimir Datasource
func (o SLODestinationDatasourceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SLODestinationDatasource) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type SLODestinationDatasourcePtrOutput struct{ *pulumi.OutputState }

func (SLODestinationDatasourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLODestinationDatasource)(nil)).Elem()
}

func (o SLODestinationDatasourcePtrOutput) ToSLODestinationDatasourcePtrOutput() SLODestinationDatasourcePtrOutput {
	return o
}

func (o SLODestinationDatasourcePtrOutput) ToSLODestinationDatasourcePtrOutputWithContext(ctx context.Context) SLODestinationDatasourcePtrOutput {
	return o
}

func (o SLODestinationDatasourcePtrOutput) Elem() SLODestinationDatasourceOutput {
	return o.ApplyT(func(v *SLODestinationDatasource) SLODestinationDatasource {
		if v != nil {
			return *v
		}
		var ret SLODestinationDatasource
		return ret
	}).(SLODestinationDatasourceOutput)
}

// UID for the Mimir Datasource
func (o SLODestinationDatasourcePtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLODestinationDatasource) *string {
		if v == nil {
			return nil
		}
		return v.Uid
	}).(pulumi.StringPtrOutput)
}

type SLOLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// SLOLabelInput is an input type that accepts SLOLabelArgs and SLOLabelOutput values.
// You can construct a concrete instance of `SLOLabelInput` via:
//
//	SLOLabelArgs{...}
type SLOLabelInput interface {
	pulumi.Input

	ToSLOLabelOutput() SLOLabelOutput
	ToSLOLabelOutputWithContext(context.Context) SLOLabelOutput
}

type SLOLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (SLOLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (i SLOLabelArgs) ToSLOLabelOutput() SLOLabelOutput {
	return i.ToSLOLabelOutputWithContext(context.Background())
}

func (i SLOLabelArgs) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOLabelOutput)
}

// SLOLabelArrayInput is an input type that accepts SLOLabelArray and SLOLabelArrayOutput values.
// You can construct a concrete instance of `SLOLabelArrayInput` via:
//
//	SLOLabelArray{ SLOLabelArgs{...} }
type SLOLabelArrayInput interface {
	pulumi.Input

	ToSLOLabelArrayOutput() SLOLabelArrayOutput
	ToSLOLabelArrayOutputWithContext(context.Context) SLOLabelArrayOutput
}

type SLOLabelArray []SLOLabelInput

func (SLOLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOLabel)(nil)).Elem()
}

func (i SLOLabelArray) ToSLOLabelArrayOutput() SLOLabelArrayOutput {
	return i.ToSLOLabelArrayOutputWithContext(context.Background())
}

func (i SLOLabelArray) ToSLOLabelArrayOutputWithContext(ctx context.Context) SLOLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOLabelArrayOutput)
}

type SLOLabelOutput struct{ *pulumi.OutputState }

func (SLOLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOLabel)(nil)).Elem()
}

func (o SLOLabelOutput) ToSLOLabelOutput() SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) ToSLOLabelOutputWithContext(ctx context.Context) SLOLabelOutput {
	return o
}

func (o SLOLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v SLOLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o SLOLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v SLOLabel) string { return v.Value }).(pulumi.StringOutput)
}

type SLOLabelArrayOutput struct{ *pulumi.OutputState }

func (SLOLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOLabel)(nil)).Elem()
}

func (o SLOLabelArrayOutput) ToSLOLabelArrayOutput() SLOLabelArrayOutput {
	return o
}

func (o SLOLabelArrayOutput) ToSLOLabelArrayOutputWithContext(ctx context.Context) SLOLabelArrayOutput {
	return o
}

func (o SLOLabelArrayOutput) Index(i pulumi.IntInput) SLOLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOLabel {
		return vs[0].([]SLOLabel)[vs[1].(int)]
	}).(SLOLabelOutput)
}

type SLOObjective struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value float64 `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window string `pulumi:"window"`
}

// SLOObjectiveInput is an input type that accepts SLOObjectiveArgs and SLOObjectiveOutput values.
// You can construct a concrete instance of `SLOObjectiveInput` via:
//
//	SLOObjectiveArgs{...}
type SLOObjectiveInput interface {
	pulumi.Input

	ToSLOObjectiveOutput() SLOObjectiveOutput
	ToSLOObjectiveOutputWithContext(context.Context) SLOObjectiveOutput
}

type SLOObjectiveArgs struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value pulumi.Float64Input `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window pulumi.StringInput `pulumi:"window"`
}

func (SLOObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return i.ToSLOObjectiveOutputWithContext(context.Background())
}

func (i SLOObjectiveArgs) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOObjectiveOutput)
}

// SLOObjectiveArrayInput is an input type that accepts SLOObjectiveArray and SLOObjectiveArrayOutput values.
// You can construct a concrete instance of `SLOObjectiveArrayInput` via:
//
//	SLOObjectiveArray{ SLOObjectiveArgs{...} }
type SLOObjectiveArrayInput interface {
	pulumi.Input

	ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput
	ToSLOObjectiveArrayOutputWithContext(context.Context) SLOObjectiveArrayOutput
}

type SLOObjectiveArray []SLOObjectiveInput

func (SLOObjectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOObjective)(nil)).Elem()
}

func (i SLOObjectiveArray) ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput {
	return i.ToSLOObjectiveArrayOutputWithContext(context.Background())
}

func (i SLOObjectiveArray) ToSLOObjectiveArrayOutputWithContext(ctx context.Context) SLOObjectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOObjectiveArrayOutput)
}

type SLOObjectiveOutput struct{ *pulumi.OutputState }

func (SLOObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOObjective)(nil)).Elem()
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutput() SLOObjectiveOutput {
	return o
}

func (o SLOObjectiveOutput) ToSLOObjectiveOutputWithContext(ctx context.Context) SLOObjectiveOutput {
	return o
}

// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
func (o SLOObjectiveOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v SLOObjective) float64 { return v.Value }).(pulumi.Float64Output)
}

// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
func (o SLOObjectiveOutput) Window() pulumi.StringOutput {
	return o.ApplyT(func(v SLOObjective) string { return v.Window }).(pulumi.StringOutput)
}

type SLOObjectiveArrayOutput struct{ *pulumi.OutputState }

func (SLOObjectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOObjective)(nil)).Elem()
}

func (o SLOObjectiveArrayOutput) ToSLOObjectiveArrayOutput() SLOObjectiveArrayOutput {
	return o
}

func (o SLOObjectiveArrayOutput) ToSLOObjectiveArrayOutputWithContext(ctx context.Context) SLOObjectiveArrayOutput {
	return o
}

func (o SLOObjectiveArrayOutput) Index(i pulumi.IntInput) SLOObjectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOObjective {
		return vs[0].([]SLOObjective)[vs[1].(int)]
	}).(SLOObjectiveOutput)
}

type SLOQuery struct {
	Freeform *SLOQueryFreeform `pulumi:"freeform"`
	Ratio    *SLOQueryRatio    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type string `pulumi:"type"`
}

// SLOQueryInput is an input type that accepts SLOQueryArgs and SLOQueryOutput values.
// You can construct a concrete instance of `SLOQueryInput` via:
//
//	SLOQueryArgs{...}
type SLOQueryInput interface {
	pulumi.Input

	ToSLOQueryOutput() SLOQueryOutput
	ToSLOQueryOutputWithContext(context.Context) SLOQueryOutput
}

type SLOQueryArgs struct {
	Freeform SLOQueryFreeformPtrInput `pulumi:"freeform"`
	Ratio    SLOQueryRatioPtrInput    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type pulumi.StringInput `pulumi:"type"`
}

func (SLOQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (i SLOQueryArgs) ToSLOQueryOutput() SLOQueryOutput {
	return i.ToSLOQueryOutputWithContext(context.Background())
}

func (i SLOQueryArgs) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryOutput)
}

// SLOQueryArrayInput is an input type that accepts SLOQueryArray and SLOQueryArrayOutput values.
// You can construct a concrete instance of `SLOQueryArrayInput` via:
//
//	SLOQueryArray{ SLOQueryArgs{...} }
type SLOQueryArrayInput interface {
	pulumi.Input

	ToSLOQueryArrayOutput() SLOQueryArrayOutput
	ToSLOQueryArrayOutputWithContext(context.Context) SLOQueryArrayOutput
}

type SLOQueryArray []SLOQueryInput

func (SLOQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOQuery)(nil)).Elem()
}

func (i SLOQueryArray) ToSLOQueryArrayOutput() SLOQueryArrayOutput {
	return i.ToSLOQueryArrayOutputWithContext(context.Background())
}

func (i SLOQueryArray) ToSLOQueryArrayOutputWithContext(ctx context.Context) SLOQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryArrayOutput)
}

type SLOQueryOutput struct{ *pulumi.OutputState }

func (SLOQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQuery)(nil)).Elem()
}

func (o SLOQueryOutput) ToSLOQueryOutput() SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) ToSLOQueryOutputWithContext(ctx context.Context) SLOQueryOutput {
	return o
}

func (o SLOQueryOutput) Freeform() SLOQueryFreeformPtrOutput {
	return o.ApplyT(func(v SLOQuery) *SLOQueryFreeform { return v.Freeform }).(SLOQueryFreeformPtrOutput)
}

func (o SLOQueryOutput) Ratio() SLOQueryRatioPtrOutput {
	return o.ApplyT(func(v SLOQuery) *SLOQueryRatio { return v.Ratio }).(SLOQueryRatioPtrOutput)
}

// Query type must be one of: "freeform", "query", "ratio", or "threshold"
func (o SLOQueryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQuery) string { return v.Type }).(pulumi.StringOutput)
}

type SLOQueryArrayOutput struct{ *pulumi.OutputState }

func (SLOQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SLOQuery)(nil)).Elem()
}

func (o SLOQueryArrayOutput) ToSLOQueryArrayOutput() SLOQueryArrayOutput {
	return o
}

func (o SLOQueryArrayOutput) ToSLOQueryArrayOutputWithContext(ctx context.Context) SLOQueryArrayOutput {
	return o
}

func (o SLOQueryArrayOutput) Index(i pulumi.IntInput) SLOQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SLOQuery {
		return vs[0].([]SLOQuery)[vs[1].(int)]
	}).(SLOQueryOutput)
}

type SLOQueryFreeform struct {
	// Freeform Query Field
	Query string `pulumi:"query"`
}

// SLOQueryFreeformInput is an input type that accepts SLOQueryFreeformArgs and SLOQueryFreeformOutput values.
// You can construct a concrete instance of `SLOQueryFreeformInput` via:
//
//	SLOQueryFreeformArgs{...}
type SLOQueryFreeformInput interface {
	pulumi.Input

	ToSLOQueryFreeformOutput() SLOQueryFreeformOutput
	ToSLOQueryFreeformOutputWithContext(context.Context) SLOQueryFreeformOutput
}

type SLOQueryFreeformArgs struct {
	// Freeform Query Field
	Query pulumi.StringInput `pulumi:"query"`
}

func (SLOQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return i.ToSLOQueryFreeformOutputWithContext(context.Background())
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformOutput)
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return i.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (i SLOQueryFreeformArgs) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformOutput).ToSLOQueryFreeformPtrOutputWithContext(ctx)
}

// SLOQueryFreeformPtrInput is an input type that accepts SLOQueryFreeformArgs, SLOQueryFreeformPtr and SLOQueryFreeformPtrOutput values.
// You can construct a concrete instance of `SLOQueryFreeformPtrInput` via:
//
//	        SLOQueryFreeformArgs{...}
//
//	or:
//
//	        nil
type SLOQueryFreeformPtrInput interface {
	pulumi.Input

	ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput
	ToSLOQueryFreeformPtrOutputWithContext(context.Context) SLOQueryFreeformPtrOutput
}

type sloqueryFreeformPtrType SLOQueryFreeformArgs

func SLOQueryFreeformPtr(v *SLOQueryFreeformArgs) SLOQueryFreeformPtrInput {
	return (*sloqueryFreeformPtrType)(v)
}

func (*sloqueryFreeformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryFreeform)(nil)).Elem()
}

func (i *sloqueryFreeformPtrType) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return i.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (i *sloqueryFreeformPtrType) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryFreeformPtrOutput)
}

type SLOQueryFreeformOutput struct{ *pulumi.OutputState }

func (SLOQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryFreeform)(nil)).Elem()
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutput() SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformOutputWithContext(ctx context.Context) SLOQueryFreeformOutput {
	return o
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return o.ToSLOQueryFreeformPtrOutputWithContext(context.Background())
}

func (o SLOQueryFreeformOutput) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOQueryFreeform) *SLOQueryFreeform {
		return &v
	}).(SLOQueryFreeformPtrOutput)
}

// Freeform Query Field
func (o SLOQueryFreeformOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryFreeform) string { return v.Query }).(pulumi.StringOutput)
}

type SLOQueryFreeformPtrOutput struct{ *pulumi.OutputState }

func (SLOQueryFreeformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryFreeform)(nil)).Elem()
}

func (o SLOQueryFreeformPtrOutput) ToSLOQueryFreeformPtrOutput() SLOQueryFreeformPtrOutput {
	return o
}

func (o SLOQueryFreeformPtrOutput) ToSLOQueryFreeformPtrOutputWithContext(ctx context.Context) SLOQueryFreeformPtrOutput {
	return o
}

func (o SLOQueryFreeformPtrOutput) Elem() SLOQueryFreeformOutput {
	return o.ApplyT(func(v *SLOQueryFreeform) SLOQueryFreeform {
		if v != nil {
			return *v
		}
		var ret SLOQueryFreeform
		return ret
	}).(SLOQueryFreeformOutput)
}

// Freeform Query Field
func (o SLOQueryFreeformPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryFreeform) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type SLOQueryRatio struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	GroupByLabels []string `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric string `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric string `pulumi:"totalMetric"`
}

// SLOQueryRatioInput is an input type that accepts SLOQueryRatioArgs and SLOQueryRatioOutput values.
// You can construct a concrete instance of `SLOQueryRatioInput` via:
//
//	SLOQueryRatioArgs{...}
type SLOQueryRatioInput interface {
	pulumi.Input

	ToSLOQueryRatioOutput() SLOQueryRatioOutput
	ToSLOQueryRatioOutputWithContext(context.Context) SLOQueryRatioOutput
}

type SLOQueryRatioArgs struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
	GroupByLabels pulumi.StringArrayInput `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric pulumi.StringInput `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric pulumi.StringInput `pulumi:"totalMetric"`
}

func (SLOQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return i.ToSLOQueryRatioOutputWithContext(context.Background())
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioOutput)
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return i.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (i SLOQueryRatioArgs) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioOutput).ToSLOQueryRatioPtrOutputWithContext(ctx)
}

// SLOQueryRatioPtrInput is an input type that accepts SLOQueryRatioArgs, SLOQueryRatioPtr and SLOQueryRatioPtrOutput values.
// You can construct a concrete instance of `SLOQueryRatioPtrInput` via:
//
//	        SLOQueryRatioArgs{...}
//
//	or:
//
//	        nil
type SLOQueryRatioPtrInput interface {
	pulumi.Input

	ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput
	ToSLOQueryRatioPtrOutputWithContext(context.Context) SLOQueryRatioPtrOutput
}

type sloqueryRatioPtrType SLOQueryRatioArgs

func SLOQueryRatioPtr(v *SLOQueryRatioArgs) SLOQueryRatioPtrInput {
	return (*sloqueryRatioPtrType)(v)
}

func (*sloqueryRatioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryRatio)(nil)).Elem()
}

func (i *sloqueryRatioPtrType) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return i.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (i *sloqueryRatioPtrType) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SLOQueryRatioPtrOutput)
}

type SLOQueryRatioOutput struct{ *pulumi.OutputState }

func (SLOQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SLOQueryRatio)(nil)).Elem()
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutput() SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioOutputWithContext(ctx context.Context) SLOQueryRatioOutput {
	return o
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return o.ToSLOQueryRatioPtrOutputWithContext(context.Background())
}

func (o SLOQueryRatioOutput) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SLOQueryRatio) *SLOQueryRatio {
		return &v
	}).(SLOQueryRatioPtrOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOQueryRatioOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SLOQueryRatio) []string { return v.GroupByLabels }).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o SLOQueryRatioOutput) SuccessMetric() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryRatio) string { return v.SuccessMetric }).(pulumi.StringOutput)
}

// Metric for total events (denominator)
func (o SLOQueryRatioOutput) TotalMetric() pulumi.StringOutput {
	return o.ApplyT(func(v SLOQueryRatio) string { return v.TotalMetric }).(pulumi.StringOutput)
}

type SLOQueryRatioPtrOutput struct{ *pulumi.OutputState }

func (SLOQueryRatioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SLOQueryRatio)(nil)).Elem()
}

func (o SLOQueryRatioPtrOutput) ToSLOQueryRatioPtrOutput() SLOQueryRatioPtrOutput {
	return o
}

func (o SLOQueryRatioPtrOutput) ToSLOQueryRatioPtrOutputWithContext(ctx context.Context) SLOQueryRatioPtrOutput {
	return o
}

func (o SLOQueryRatioPtrOutput) Elem() SLOQueryRatioOutput {
	return o.ApplyT(func(v *SLOQueryRatio) SLOQueryRatio {
		if v != nil {
			return *v
		}
		var ret SLOQueryRatio
		return ret
	}).(SLOQueryRatioOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z*][a-zA-Z0-9*]*$"
func (o SLOQueryRatioPtrOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SLOQueryRatio) []string {
		if v == nil {
			return nil
		}
		return v.GroupByLabels
	}).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o SLOQueryRatioPtrOutput) SuccessMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.SuccessMetric
	}).(pulumi.StringPtrOutput)
}

// Metric for total events (denominator)
func (o SLOQueryRatioPtrOutput) TotalMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SLOQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.TotalMetric
	}).(pulumi.StringPtrOutput)
}

type GetSlosSlo struct {
	// Configures the alerting rules that will be generated for each
	// 				time window associated with the SLO. Grafana SLOs can generate
	// 				alerts when the short-term error budget burn is very high, the
	// 				long-term error budget burn rate is high, or when the remaining
	// 				error budget is below a certain threshold. Annotations and Labels support templating.
	Alertings []GetSlosSloAlerting `pulumi:"alertings"`
	// Description is a free-text field that can provide more context to an SLO.
	Description string `pulumi:"description"`
	// Destination Datasource sets the datasource defined for an SLO
	DestinationDatasources []GetSlosSloDestinationDatasource `pulumi:"destinationDatasources"`
	// UID for the SLO folder
	FolderUid string `pulumi:"folderUid"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	Labels []GetSlosSloLabel `pulumi:"labels"`
	// Name should be a short description of your indicator. Consider names like "API Availability"
	Name string `pulumi:"name"`
	// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
	Objectives []GetSlosSloObjective `pulumi:"objectives"`
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Queries []GetSlosSloQuery `pulumi:"queries"`
	// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
	Uuid string `pulumi:"uuid"`
}

// GetSlosSloInput is an input type that accepts GetSlosSloArgs and GetSlosSloOutput values.
// You can construct a concrete instance of `GetSlosSloInput` via:
//
//	GetSlosSloArgs{...}
type GetSlosSloInput interface {
	pulumi.Input

	ToGetSlosSloOutput() GetSlosSloOutput
	ToGetSlosSloOutputWithContext(context.Context) GetSlosSloOutput
}

type GetSlosSloArgs struct {
	// Configures the alerting rules that will be generated for each
	// 				time window associated with the SLO. Grafana SLOs can generate
	// 				alerts when the short-term error budget burn is very high, the
	// 				long-term error budget burn rate is high, or when the remaining
	// 				error budget is below a certain threshold. Annotations and Labels support templating.
	Alertings GetSlosSloAlertingArrayInput `pulumi:"alertings"`
	// Description is a free-text field that can provide more context to an SLO.
	Description pulumi.StringInput `pulumi:"description"`
	// Destination Datasource sets the datasource defined for an SLO
	DestinationDatasources GetSlosSloDestinationDatasourceArrayInput `pulumi:"destinationDatasources"`
	// UID for the SLO folder
	FolderUid pulumi.StringInput `pulumi:"folderUid"`
	// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	Labels GetSlosSloLabelArrayInput `pulumi:"labels"`
	// Name should be a short description of your indicator. Consider names like "API Availability"
	Name pulumi.StringInput `pulumi:"name"`
	// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
	Objectives GetSlosSloObjectiveArrayInput `pulumi:"objectives"`
	// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
	Queries GetSlosSloQueryArrayInput `pulumi:"queries"`
	// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
	Uuid pulumi.StringInput `pulumi:"uuid"`
}

func (GetSlosSloArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (i GetSlosSloArgs) ToGetSlosSloOutput() GetSlosSloOutput {
	return i.ToGetSlosSloOutputWithContext(context.Background())
}

func (i GetSlosSloArgs) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloOutput)
}

// GetSlosSloArrayInput is an input type that accepts GetSlosSloArray and GetSlosSloArrayOutput values.
// You can construct a concrete instance of `GetSlosSloArrayInput` via:
//
//	GetSlosSloArray{ GetSlosSloArgs{...} }
type GetSlosSloArrayInput interface {
	pulumi.Input

	ToGetSlosSloArrayOutput() GetSlosSloArrayOutput
	ToGetSlosSloArrayOutputWithContext(context.Context) GetSlosSloArrayOutput
}

type GetSlosSloArray []GetSlosSloInput

func (GetSlosSloArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSlo)(nil)).Elem()
}

func (i GetSlosSloArray) ToGetSlosSloArrayOutput() GetSlosSloArrayOutput {
	return i.ToGetSlosSloArrayOutputWithContext(context.Background())
}

func (i GetSlosSloArray) ToGetSlosSloArrayOutputWithContext(ctx context.Context) GetSlosSloArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloArrayOutput)
}

type GetSlosSloOutput struct{ *pulumi.OutputState }

func (GetSlosSloOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSlo)(nil)).Elem()
}

func (o GetSlosSloOutput) ToGetSlosSloOutput() GetSlosSloOutput {
	return o
}

func (o GetSlosSloOutput) ToGetSlosSloOutputWithContext(ctx context.Context) GetSlosSloOutput {
	return o
}

// Configures the alerting rules that will be generated for each
//
//	time window associated with the SLO. Grafana SLOs can generate
//	alerts when the short-term error budget burn is very high, the
//	long-term error budget burn rate is high, or when the remaining
//	error budget is below a certain threshold. Annotations and Labels support templating.
func (o GetSlosSloOutput) Alertings() GetSlosSloAlertingArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloAlerting { return v.Alertings }).(GetSlosSloAlertingArrayOutput)
}

// Description is a free-text field that can provide more context to an SLO.
func (o GetSlosSloOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Description }).(pulumi.StringOutput)
}

// Destination Datasource sets the datasource defined for an SLO
func (o GetSlosSloOutput) DestinationDatasources() GetSlosSloDestinationDatasourceArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloDestinationDatasource { return v.DestinationDatasources }).(GetSlosSloDestinationDatasourceArrayOutput)
}

// UID for the SLO folder
func (o GetSlosSloOutput) FolderUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.FolderUid }).(pulumi.StringOutput)
}

// Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloOutput) Labels() GetSlosSloLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloLabel { return v.Labels }).(GetSlosSloLabelArrayOutput)
}

// Name should be a short description of your indicator. Consider names like "API Availability"
func (o GetSlosSloOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Name }).(pulumi.StringOutput)
}

// Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.
func (o GetSlosSloOutput) Objectives() GetSlosSloObjectiveArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloObjective { return v.Objectives }).(GetSlosSloObjectiveArrayOutput)
}

// Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.
func (o GetSlosSloOutput) Queries() GetSlosSloQueryArrayOutput {
	return o.ApplyT(func(v GetSlosSlo) []GetSlosSloQuery { return v.Queries }).(GetSlosSloQueryArrayOutput)
}

// A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.
func (o GetSlosSloOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSlo) string { return v.Uuid }).(pulumi.StringOutput)
}

type GetSlosSloArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSlo)(nil)).Elem()
}

func (o GetSlosSloArrayOutput) ToGetSlosSloArrayOutput() GetSlosSloArrayOutput {
	return o
}

func (o GetSlosSloArrayOutput) ToGetSlosSloArrayOutputWithContext(ctx context.Context) GetSlosSloArrayOutput {
	return o
}

func (o GetSlosSloArrayOutput) Index(i pulumi.IntInput) GetSlosSloOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSlo {
		return vs[0].([]GetSlosSlo)[vs[1].(int)]
	}).(GetSlosSloOutput)
}

type GetSlosSloAlerting struct {
	// Advanced Options for Alert Rules
	AdvancedOptions *GetSlosSloAlertingAdvancedOptions `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations []GetSlosSloAlertingAnnotation `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns []GetSlosSloAlertingFastburn `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels []GetSlosSloAlertingLabel `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns []GetSlosSloAlertingSlowburn `pulumi:"slowburns"`
}

// GetSlosSloAlertingInput is an input type that accepts GetSlosSloAlertingArgs and GetSlosSloAlertingOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingInput` via:
//
//	GetSlosSloAlertingArgs{...}
type GetSlosSloAlertingInput interface {
	pulumi.Input

	ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput
	ToGetSlosSloAlertingOutputWithContext(context.Context) GetSlosSloAlertingOutput
}

type GetSlosSloAlertingArgs struct {
	// Advanced Options for Alert Rules
	AdvancedOptions GetSlosSloAlertingAdvancedOptionsPtrInput `pulumi:"advancedOptions"`
	// Annotations will be attached to all alerts generated by any of these rules.
	Annotations GetSlosSloAlertingAnnotationArrayInput `pulumi:"annotations"`
	// Alerting Rules generated for Fast Burn alerts
	Fastburns GetSlosSloAlertingFastburnArrayInput `pulumi:"fastburns"`
	// Labels will be attached to all alerts generated by any of these rules.
	Labels GetSlosSloAlertingLabelArrayInput `pulumi:"labels"`
	// Alerting Rules generated for Slow Burn alerts
	Slowburns GetSlosSloAlertingSlowburnArrayInput `pulumi:"slowburns"`
}

func (GetSlosSloAlertingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return i.ToGetSlosSloAlertingOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingArgs) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingOutput)
}

// GetSlosSloAlertingArrayInput is an input type that accepts GetSlosSloAlertingArray and GetSlosSloAlertingArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingArrayInput` via:
//
//	GetSlosSloAlertingArray{ GetSlosSloAlertingArgs{...} }
type GetSlosSloAlertingArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput
	ToGetSlosSloAlertingArrayOutputWithContext(context.Context) GetSlosSloAlertingArrayOutput
}

type GetSlosSloAlertingArray []GetSlosSloAlertingInput

func (GetSlosSloAlertingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlerting)(nil)).Elem()
}

func (i GetSlosSloAlertingArray) ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput {
	return i.ToGetSlosSloAlertingArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingArray) ToGetSlosSloAlertingArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingArrayOutput)
}

type GetSlosSloAlertingOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlerting)(nil)).Elem()
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutput() GetSlosSloAlertingOutput {
	return o
}

func (o GetSlosSloAlertingOutput) ToGetSlosSloAlertingOutputWithContext(ctx context.Context) GetSlosSloAlertingOutput {
	return o
}

// Advanced Options for Alert Rules
func (o GetSlosSloAlertingOutput) AdvancedOptions() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) *GetSlosSloAlertingAdvancedOptions { return v.AdvancedOptions }).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

// Annotations will be attached to all alerts generated by any of these rules.
func (o GetSlosSloAlertingOutput) Annotations() GetSlosSloAlertingAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingAnnotation { return v.Annotations }).(GetSlosSloAlertingAnnotationArrayOutput)
}

// Alerting Rules generated for Fast Burn alerts
func (o GetSlosSloAlertingOutput) Fastburns() GetSlosSloAlertingFastburnArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingFastburn { return v.Fastburns }).(GetSlosSloAlertingFastburnArrayOutput)
}

// Labels will be attached to all alerts generated by any of these rules.
func (o GetSlosSloAlertingOutput) Labels() GetSlosSloAlertingLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingLabel { return v.Labels }).(GetSlosSloAlertingLabelArrayOutput)
}

// Alerting Rules generated for Slow Burn alerts
func (o GetSlosSloAlertingOutput) Slowburns() GetSlosSloAlertingSlowburnArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlerting) []GetSlosSloAlertingSlowburn { return v.Slowburns }).(GetSlosSloAlertingSlowburnArrayOutput)
}

type GetSlosSloAlertingArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlerting)(nil)).Elem()
}

func (o GetSlosSloAlertingArrayOutput) ToGetSlosSloAlertingArrayOutput() GetSlosSloAlertingArrayOutput {
	return o
}

func (o GetSlosSloAlertingArrayOutput) ToGetSlosSloAlertingArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingArrayOutput {
	return o
}

func (o GetSlosSloAlertingArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlerting {
		return vs[0].([]GetSlosSloAlerting)[vs[1].(int)]
	}).(GetSlosSloAlertingOutput)
}

type GetSlosSloAlertingAdvancedOptions struct {
	// Minimum number of failed events to trigger an alert
	MinFailures *int `pulumi:"minFailures"`
}

// GetSlosSloAlertingAdvancedOptionsInput is an input type that accepts GetSlosSloAlertingAdvancedOptionsArgs and GetSlosSloAlertingAdvancedOptionsOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAdvancedOptionsInput` via:
//
//	GetSlosSloAlertingAdvancedOptionsArgs{...}
type GetSlosSloAlertingAdvancedOptionsInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput
	ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(context.Context) GetSlosSloAlertingAdvancedOptionsOutput
}

type GetSlosSloAlertingAdvancedOptionsArgs struct {
	// Minimum number of failed events to trigger an alert
	MinFailures pulumi.IntPtrInput `pulumi:"minFailures"`
}

func (GetSlosSloAlertingAdvancedOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsOutput)
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAdvancedOptionsArgs) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsOutput).ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx)
}

// GetSlosSloAlertingAdvancedOptionsPtrInput is an input type that accepts GetSlosSloAlertingAdvancedOptionsArgs, GetSlosSloAlertingAdvancedOptionsPtr and GetSlosSloAlertingAdvancedOptionsPtrOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAdvancedOptionsPtrInput` via:
//
//	        GetSlosSloAlertingAdvancedOptionsArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloAlertingAdvancedOptionsPtrInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput
	ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput
}

type getSlosSloAlertingAdvancedOptionsPtrType GetSlosSloAlertingAdvancedOptionsArgs

func GetSlosSloAlertingAdvancedOptionsPtr(v *GetSlosSloAlertingAdvancedOptionsArgs) GetSlosSloAlertingAdvancedOptionsPtrInput {
	return (*getSlosSloAlertingAdvancedOptionsPtrType)(v)
}

func (*getSlosSloAlertingAdvancedOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (i *getSlosSloAlertingAdvancedOptionsPtrType) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return i.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (i *getSlosSloAlertingAdvancedOptionsPtrType) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

type GetSlosSloAlertingAdvancedOptionsOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAdvancedOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsOutput() GetSlosSloAlertingAdvancedOptionsOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(context.Background())
}

func (o GetSlosSloAlertingAdvancedOptionsOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloAlertingAdvancedOptions) *GetSlosSloAlertingAdvancedOptions {
		return &v
	}).(GetSlosSloAlertingAdvancedOptionsPtrOutput)
}

// Minimum number of failed events to trigger an alert
func (o GetSlosSloAlertingAdvancedOptionsOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAdvancedOptions) *int { return v.MinFailures }).(pulumi.IntPtrOutput)
}

type GetSlosSloAlertingAdvancedOptionsPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAdvancedOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloAlertingAdvancedOptions)(nil)).Elem()
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutput() GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) ToGetSlosSloAlertingAdvancedOptionsPtrOutputWithContext(ctx context.Context) GetSlosSloAlertingAdvancedOptionsPtrOutput {
	return o
}

func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) Elem() GetSlosSloAlertingAdvancedOptionsOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingAdvancedOptions) GetSlosSloAlertingAdvancedOptions {
		if v != nil {
			return *v
		}
		var ret GetSlosSloAlertingAdvancedOptions
		return ret
	}).(GetSlosSloAlertingAdvancedOptionsOutput)
}

// Minimum number of failed events to trigger an alert
func (o GetSlosSloAlertingAdvancedOptionsPtrOutput) MinFailures() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GetSlosSloAlertingAdvancedOptions) *int {
		if v == nil {
			return nil
		}
		return v.MinFailures
	}).(pulumi.IntPtrOutput)
}

type GetSlosSloAlertingAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingAnnotationInput is an input type that accepts GetSlosSloAlertingAnnotationArgs and GetSlosSloAlertingAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAnnotationInput` via:
//
//	GetSlosSloAlertingAnnotationArgs{...}
type GetSlosSloAlertingAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput
	ToGetSlosSloAlertingAnnotationOutputWithContext(context.Context) GetSlosSloAlertingAnnotationOutput
}

type GetSlosSloAlertingAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return i.ToGetSlosSloAlertingAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAnnotationArgs) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAnnotationOutput)
}

// GetSlosSloAlertingAnnotationArrayInput is an input type that accepts GetSlosSloAlertingAnnotationArray and GetSlosSloAlertingAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingAnnotationArrayInput` via:
//
//	GetSlosSloAlertingAnnotationArray{ GetSlosSloAlertingAnnotationArgs{...} }
type GetSlosSloAlertingAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput
	ToGetSlosSloAlertingAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingAnnotationArrayOutput
}

type GetSlosSloAlertingAnnotationArray []GetSlosSloAlertingAnnotationInput

func (GetSlosSloAlertingAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingAnnotationArray) ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingAnnotationArray) ToGetSlosSloAlertingAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingAnnotationArrayOutput)
}

type GetSlosSloAlertingAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutput() GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) ToGetSlosSloAlertingAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingAnnotationArrayOutput) ToGetSlosSloAlertingAnnotationArrayOutput() GetSlosSloAlertingAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationArrayOutput) ToGetSlosSloAlertingAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingAnnotation {
		return vs[0].([]GetSlosSloAlertingAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingAnnotationOutput)
}

type GetSlosSloAlertingFastburn struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations []GetSlosSloAlertingFastburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels []GetSlosSloAlertingFastburnLabel `pulumi:"labels"`
}

// GetSlosSloAlertingFastburnInput is an input type that accepts GetSlosSloAlertingFastburnArgs and GetSlosSloAlertingFastburnOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnInput` via:
//
//	GetSlosSloAlertingFastburnArgs{...}
type GetSlosSloAlertingFastburnInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput
	ToGetSlosSloAlertingFastburnOutputWithContext(context.Context) GetSlosSloAlertingFastburnOutput
}

type GetSlosSloAlertingFastburnArgs struct {
	// Annotations to attach only to Fast Burn alerts.
	Annotations GetSlosSloAlertingFastburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Fast Burn alerts.
	Labels GetSlosSloAlertingFastburnLabelArrayInput `pulumi:"labels"`
}

func (GetSlosSloAlertingFastburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return i.ToGetSlosSloAlertingFastburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnArgs) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnOutput)
}

// GetSlosSloAlertingFastburnArrayInput is an input type that accepts GetSlosSloAlertingFastburnArray and GetSlosSloAlertingFastburnArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnArrayInput` via:
//
//	GetSlosSloAlertingFastburnArray{ GetSlosSloAlertingFastburnArgs{...} }
type GetSlosSloAlertingFastburnArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnArrayOutput() GetSlosSloAlertingFastburnArrayOutput
	ToGetSlosSloAlertingFastburnArrayOutputWithContext(context.Context) GetSlosSloAlertingFastburnArrayOutput
}

type GetSlosSloAlertingFastburnArray []GetSlosSloAlertingFastburnInput

func (GetSlosSloAlertingFastburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnArray) ToGetSlosSloAlertingFastburnArrayOutput() GetSlosSloAlertingFastburnArrayOutput {
	return i.ToGetSlosSloAlertingFastburnArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnArray) ToGetSlosSloAlertingFastburnArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnArrayOutput)
}

type GetSlosSloAlertingFastburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutput() GetSlosSloAlertingFastburnOutput {
	return o
}

func (o GetSlosSloAlertingFastburnOutput) ToGetSlosSloAlertingFastburnOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnOutput {
	return o
}

// Annotations to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnOutput) Annotations() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnAnnotation { return v.Annotations }).(GetSlosSloAlertingFastburnAnnotationArrayOutput)
}

// Labels to attach only to Fast Burn alerts.
func (o GetSlosSloAlertingFastburnOutput) Labels() GetSlosSloAlertingFastburnLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburn) []GetSlosSloAlertingFastburnLabel { return v.Labels }).(GetSlosSloAlertingFastburnLabelArrayOutput)
}

type GetSlosSloAlertingFastburnArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburn)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnArrayOutput) ToGetSlosSloAlertingFastburnArrayOutput() GetSlosSloAlertingFastburnArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnArrayOutput) ToGetSlosSloAlertingFastburnArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingFastburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingFastburn {
		return vs[0].([]GetSlosSloAlertingFastburn)[vs[1].(int)]
	}).(GetSlosSloAlertingFastburnOutput)
}

type GetSlosSloAlertingFastburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingFastburnAnnotationInput is an input type that accepts GetSlosSloAlertingFastburnAnnotationArgs and GetSlosSloAlertingFastburnAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnAnnotationInput` via:
//
//	GetSlosSloAlertingFastburnAnnotationArgs{...}
type GetSlosSloAlertingFastburnAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput
	ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(context.Context) GetSlosSloAlertingFastburnAnnotationOutput
}

type GetSlosSloAlertingFastburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return i.ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnAnnotationArgs) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnAnnotationOutput)
}

// GetSlosSloAlertingFastburnAnnotationArrayInput is an input type that accepts GetSlosSloAlertingFastburnAnnotationArray and GetSlosSloAlertingFastburnAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnAnnotationArrayInput` via:
//
//	GetSlosSloAlertingFastburnAnnotationArray{ GetSlosSloAlertingFastburnAnnotationArgs{...} }
type GetSlosSloAlertingFastburnAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput
	ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput
}

type GetSlosSloAlertingFastburnAnnotationArray []GetSlosSloAlertingFastburnAnnotationInput

func (GetSlosSloAlertingFastburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnAnnotationArray) ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnAnnotationArray) ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnAnnotationArrayOutput)
}

type GetSlosSloAlertingFastburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutput() GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) ToGetSlosSloAlertingFastburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingFastburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingFastburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) ToGetSlosSloAlertingFastburnAnnotationArrayOutput() GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) ToGetSlosSloAlertingFastburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingFastburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingFastburnAnnotation {
		return vs[0].([]GetSlosSloAlertingFastburnAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingFastburnAnnotationOutput)
}

type GetSlosSloAlertingFastburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingFastburnLabelInput is an input type that accepts GetSlosSloAlertingFastburnLabelArgs and GetSlosSloAlertingFastburnLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnLabelInput` via:
//
//	GetSlosSloAlertingFastburnLabelArgs{...}
type GetSlosSloAlertingFastburnLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput
	ToGetSlosSloAlertingFastburnLabelOutputWithContext(context.Context) GetSlosSloAlertingFastburnLabelOutput
}

type GetSlosSloAlertingFastburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingFastburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return i.ToGetSlosSloAlertingFastburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnLabelArgs) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnLabelOutput)
}

// GetSlosSloAlertingFastburnLabelArrayInput is an input type that accepts GetSlosSloAlertingFastburnLabelArray and GetSlosSloAlertingFastburnLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingFastburnLabelArrayInput` via:
//
//	GetSlosSloAlertingFastburnLabelArray{ GetSlosSloAlertingFastburnLabelArgs{...} }
type GetSlosSloAlertingFastburnLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput
	ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingFastburnLabelArrayOutput
}

type GetSlosSloAlertingFastburnLabelArray []GetSlosSloAlertingFastburnLabelInput

func (GetSlosSloAlertingFastburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingFastburnLabelArray) ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput {
	return i.ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingFastburnLabelArray) ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingFastburnLabelArrayOutput)
}

type GetSlosSloAlertingFastburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutput() GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) ToGetSlosSloAlertingFastburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingFastburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingFastburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingFastburnLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingFastburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingFastburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) ToGetSlosSloAlertingFastburnLabelArrayOutput() GetSlosSloAlertingFastburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) ToGetSlosSloAlertingFastburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingFastburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingFastburnLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingFastburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingFastburnLabel {
		return vs[0].([]GetSlosSloAlertingFastburnLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingFastburnLabelOutput)
}

type GetSlosSloAlertingLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingLabelInput is an input type that accepts GetSlosSloAlertingLabelArgs and GetSlosSloAlertingLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingLabelInput` via:
//
//	GetSlosSloAlertingLabelArgs{...}
type GetSlosSloAlertingLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput
	ToGetSlosSloAlertingLabelOutputWithContext(context.Context) GetSlosSloAlertingLabelOutput
}

type GetSlosSloAlertingLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return i.ToGetSlosSloAlertingLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingLabelArgs) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingLabelOutput)
}

// GetSlosSloAlertingLabelArrayInput is an input type that accepts GetSlosSloAlertingLabelArray and GetSlosSloAlertingLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingLabelArrayInput` via:
//
//	GetSlosSloAlertingLabelArray{ GetSlosSloAlertingLabelArgs{...} }
type GetSlosSloAlertingLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput
	ToGetSlosSloAlertingLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingLabelArrayOutput
}

type GetSlosSloAlertingLabelArray []GetSlosSloAlertingLabelInput

func (GetSlosSloAlertingLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingLabelArray) ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput {
	return i.ToGetSlosSloAlertingLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingLabelArray) ToGetSlosSloAlertingLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingLabelArrayOutput)
}

type GetSlosSloAlertingLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutput() GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) ToGetSlosSloAlertingLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelOutput {
	return o
}

func (o GetSlosSloAlertingLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingLabelArrayOutput) ToGetSlosSloAlertingLabelArrayOutput() GetSlosSloAlertingLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingLabelArrayOutput) ToGetSlosSloAlertingLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingLabel {
		return vs[0].([]GetSlosSloAlertingLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingLabelOutput)
}

type GetSlosSloAlertingSlowburn struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations []GetSlosSloAlertingSlowburnAnnotation `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels []GetSlosSloAlertingSlowburnLabel `pulumi:"labels"`
}

// GetSlosSloAlertingSlowburnInput is an input type that accepts GetSlosSloAlertingSlowburnArgs and GetSlosSloAlertingSlowburnOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnInput` via:
//
//	GetSlosSloAlertingSlowburnArgs{...}
type GetSlosSloAlertingSlowburnInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput
	ToGetSlosSloAlertingSlowburnOutputWithContext(context.Context) GetSlosSloAlertingSlowburnOutput
}

type GetSlosSloAlertingSlowburnArgs struct {
	// Annotations to attach only to Slow Burn alerts.
	Annotations GetSlosSloAlertingSlowburnAnnotationArrayInput `pulumi:"annotations"`
	// Labels to attach only to Slow Burn alerts.
	Labels GetSlosSloAlertingSlowburnLabelArrayInput `pulumi:"labels"`
}

func (GetSlosSloAlertingSlowburnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return i.ToGetSlosSloAlertingSlowburnOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnArgs) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnOutput)
}

// GetSlosSloAlertingSlowburnArrayInput is an input type that accepts GetSlosSloAlertingSlowburnArray and GetSlosSloAlertingSlowburnArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnArrayInput` via:
//
//	GetSlosSloAlertingSlowburnArray{ GetSlosSloAlertingSlowburnArgs{...} }
type GetSlosSloAlertingSlowburnArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnArrayOutput() GetSlosSloAlertingSlowburnArrayOutput
	ToGetSlosSloAlertingSlowburnArrayOutputWithContext(context.Context) GetSlosSloAlertingSlowburnArrayOutput
}

type GetSlosSloAlertingSlowburnArray []GetSlosSloAlertingSlowburnInput

func (GetSlosSloAlertingSlowburnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnArray) ToGetSlosSloAlertingSlowburnArrayOutput() GetSlosSloAlertingSlowburnArrayOutput {
	return i.ToGetSlosSloAlertingSlowburnArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnArray) ToGetSlosSloAlertingSlowburnArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnArrayOutput)
}

type GetSlosSloAlertingSlowburnOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutput() GetSlosSloAlertingSlowburnOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnOutput) ToGetSlosSloAlertingSlowburnOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnOutput {
	return o
}

// Annotations to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnOutput) Annotations() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnAnnotation { return v.Annotations }).(GetSlosSloAlertingSlowburnAnnotationArrayOutput)
}

// Labels to attach only to Slow Burn alerts.
func (o GetSlosSloAlertingSlowburnOutput) Labels() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburn) []GetSlosSloAlertingSlowburnLabel { return v.Labels }).(GetSlosSloAlertingSlowburnLabelArrayOutput)
}

type GetSlosSloAlertingSlowburnArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburn)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnArrayOutput) ToGetSlosSloAlertingSlowburnArrayOutput() GetSlosSloAlertingSlowburnArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnArrayOutput) ToGetSlosSloAlertingSlowburnArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingSlowburnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingSlowburn {
		return vs[0].([]GetSlosSloAlertingSlowburn)[vs[1].(int)]
	}).(GetSlosSloAlertingSlowburnOutput)
}

type GetSlosSloAlertingSlowburnAnnotation struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingSlowburnAnnotationInput is an input type that accepts GetSlosSloAlertingSlowburnAnnotationArgs and GetSlosSloAlertingSlowburnAnnotationOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnAnnotationInput` via:
//
//	GetSlosSloAlertingSlowburnAnnotationArgs{...}
type GetSlosSloAlertingSlowburnAnnotationInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput
	ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(context.Context) GetSlosSloAlertingSlowburnAnnotationOutput
}

type GetSlosSloAlertingSlowburnAnnotationArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnAnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return i.ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnAnnotationArgs) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnAnnotationOutput)
}

// GetSlosSloAlertingSlowburnAnnotationArrayInput is an input type that accepts GetSlosSloAlertingSlowburnAnnotationArray and GetSlosSloAlertingSlowburnAnnotationArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnAnnotationArrayInput` via:
//
//	GetSlosSloAlertingSlowburnAnnotationArray{ GetSlosSloAlertingSlowburnAnnotationArgs{...} }
type GetSlosSloAlertingSlowburnAnnotationArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput
	ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput
}

type GetSlosSloAlertingSlowburnAnnotationArray []GetSlosSloAlertingSlowburnAnnotationInput

func (GetSlosSloAlertingSlowburnAnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnAnnotationArray) ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return i.ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnAnnotationArray) ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnAnnotationArrayOutput)
}

type GetSlosSloAlertingSlowburnAnnotationOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnAnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutput() GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) ToGetSlosSloAlertingSlowburnAnnotationOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingSlowburnAnnotationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnAnnotation) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingSlowburnAnnotationArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnAnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnAnnotation)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) ToGetSlosSloAlertingSlowburnAnnotationArrayOutput() GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) ToGetSlosSloAlertingSlowburnAnnotationArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnAnnotationArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnAnnotationArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingSlowburnAnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingSlowburnAnnotation {
		return vs[0].([]GetSlosSloAlertingSlowburnAnnotation)[vs[1].(int)]
	}).(GetSlosSloAlertingSlowburnAnnotationOutput)
}

type GetSlosSloAlertingSlowburnLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloAlertingSlowburnLabelInput is an input type that accepts GetSlosSloAlertingSlowburnLabelArgs and GetSlosSloAlertingSlowburnLabelOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnLabelInput` via:
//
//	GetSlosSloAlertingSlowburnLabelArgs{...}
type GetSlosSloAlertingSlowburnLabelInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput
	ToGetSlosSloAlertingSlowburnLabelOutputWithContext(context.Context) GetSlosSloAlertingSlowburnLabelOutput
}

type GetSlosSloAlertingSlowburnLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloAlertingSlowburnLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return i.ToGetSlosSloAlertingSlowburnLabelOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnLabelArgs) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnLabelOutput)
}

// GetSlosSloAlertingSlowburnLabelArrayInput is an input type that accepts GetSlosSloAlertingSlowburnLabelArray and GetSlosSloAlertingSlowburnLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloAlertingSlowburnLabelArrayInput` via:
//
//	GetSlosSloAlertingSlowburnLabelArray{ GetSlosSloAlertingSlowburnLabelArgs{...} }
type GetSlosSloAlertingSlowburnLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput
	ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput
}

type GetSlosSloAlertingSlowburnLabelArray []GetSlosSloAlertingSlowburnLabelInput

func (GetSlosSloAlertingSlowburnLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (i GetSlosSloAlertingSlowburnLabelArray) ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return i.ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloAlertingSlowburnLabelArray) ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloAlertingSlowburnLabelArrayOutput)
}

type GetSlosSloAlertingSlowburnLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutput() GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) ToGetSlosSloAlertingSlowburnLabelOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloAlertingSlowburnLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloAlertingSlowburnLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloAlertingSlowburnLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloAlertingSlowburnLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloAlertingSlowburnLabel)(nil)).Elem()
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) ToGetSlosSloAlertingSlowburnLabelArrayOutput() GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) ToGetSlosSloAlertingSlowburnLabelArrayOutputWithContext(ctx context.Context) GetSlosSloAlertingSlowburnLabelArrayOutput {
	return o
}

func (o GetSlosSloAlertingSlowburnLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloAlertingSlowburnLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloAlertingSlowburnLabel {
		return vs[0].([]GetSlosSloAlertingSlowburnLabel)[vs[1].(int)]
	}).(GetSlosSloAlertingSlowburnLabelOutput)
}

type GetSlosSloDestinationDatasource struct {
	// UID for the Mimir Datasource
	Uid *string `pulumi:"uid"`
}

// GetSlosSloDestinationDatasourceInput is an input type that accepts GetSlosSloDestinationDatasourceArgs and GetSlosSloDestinationDatasourceOutput values.
// You can construct a concrete instance of `GetSlosSloDestinationDatasourceInput` via:
//
//	GetSlosSloDestinationDatasourceArgs{...}
type GetSlosSloDestinationDatasourceInput interface {
	pulumi.Input

	ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput
	ToGetSlosSloDestinationDatasourceOutputWithContext(context.Context) GetSlosSloDestinationDatasourceOutput
}

type GetSlosSloDestinationDatasourceArgs struct {
	// UID for the Mimir Datasource
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (GetSlosSloDestinationDatasourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (i GetSlosSloDestinationDatasourceArgs) ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput {
	return i.ToGetSlosSloDestinationDatasourceOutputWithContext(context.Background())
}

func (i GetSlosSloDestinationDatasourceArgs) ToGetSlosSloDestinationDatasourceOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloDestinationDatasourceOutput)
}

// GetSlosSloDestinationDatasourceArrayInput is an input type that accepts GetSlosSloDestinationDatasourceArray and GetSlosSloDestinationDatasourceArrayOutput values.
// You can construct a concrete instance of `GetSlosSloDestinationDatasourceArrayInput` via:
//
//	GetSlosSloDestinationDatasourceArray{ GetSlosSloDestinationDatasourceArgs{...} }
type GetSlosSloDestinationDatasourceArrayInput interface {
	pulumi.Input

	ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput
	ToGetSlosSloDestinationDatasourceArrayOutputWithContext(context.Context) GetSlosSloDestinationDatasourceArrayOutput
}

type GetSlosSloDestinationDatasourceArray []GetSlosSloDestinationDatasourceInput

func (GetSlosSloDestinationDatasourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (i GetSlosSloDestinationDatasourceArray) ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput {
	return i.ToGetSlosSloDestinationDatasourceArrayOutputWithContext(context.Background())
}

func (i GetSlosSloDestinationDatasourceArray) ToGetSlosSloDestinationDatasourceArrayOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloDestinationDatasourceArrayOutput)
}

type GetSlosSloDestinationDatasourceOutput struct{ *pulumi.OutputState }

func (GetSlosSloDestinationDatasourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (o GetSlosSloDestinationDatasourceOutput) ToGetSlosSloDestinationDatasourceOutput() GetSlosSloDestinationDatasourceOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceOutput) ToGetSlosSloDestinationDatasourceOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceOutput {
	return o
}

// UID for the Mimir Datasource
func (o GetSlosSloDestinationDatasourceOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSlosSloDestinationDatasource) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type GetSlosSloDestinationDatasourceArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloDestinationDatasourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloDestinationDatasource)(nil)).Elem()
}

func (o GetSlosSloDestinationDatasourceArrayOutput) ToGetSlosSloDestinationDatasourceArrayOutput() GetSlosSloDestinationDatasourceArrayOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceArrayOutput) ToGetSlosSloDestinationDatasourceArrayOutputWithContext(ctx context.Context) GetSlosSloDestinationDatasourceArrayOutput {
	return o
}

func (o GetSlosSloDestinationDatasourceArrayOutput) Index(i pulumi.IntInput) GetSlosSloDestinationDatasourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloDestinationDatasource {
		return vs[0].([]GetSlosSloDestinationDatasource)[vs[1].(int)]
	}).(GetSlosSloDestinationDatasourceOutput)
}

type GetSlosSloLabel struct {
	Key   string `pulumi:"key"`
	Value string `pulumi:"value"`
}

// GetSlosSloLabelInput is an input type that accepts GetSlosSloLabelArgs and GetSlosSloLabelOutput values.
// You can construct a concrete instance of `GetSlosSloLabelInput` via:
//
//	GetSlosSloLabelArgs{...}
type GetSlosSloLabelInput interface {
	pulumi.Input

	ToGetSlosSloLabelOutput() GetSlosSloLabelOutput
	ToGetSlosSloLabelOutputWithContext(context.Context) GetSlosSloLabelOutput
}

type GetSlosSloLabelArgs struct {
	Key   pulumi.StringInput `pulumi:"key"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetSlosSloLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return i.ToGetSlosSloLabelOutputWithContext(context.Background())
}

func (i GetSlosSloLabelArgs) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloLabelOutput)
}

// GetSlosSloLabelArrayInput is an input type that accepts GetSlosSloLabelArray and GetSlosSloLabelArrayOutput values.
// You can construct a concrete instance of `GetSlosSloLabelArrayInput` via:
//
//	GetSlosSloLabelArray{ GetSlosSloLabelArgs{...} }
type GetSlosSloLabelArrayInput interface {
	pulumi.Input

	ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput
	ToGetSlosSloLabelArrayOutputWithContext(context.Context) GetSlosSloLabelArrayOutput
}

type GetSlosSloLabelArray []GetSlosSloLabelInput

func (GetSlosSloLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloLabel)(nil)).Elem()
}

func (i GetSlosSloLabelArray) ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput {
	return i.ToGetSlosSloLabelArrayOutputWithContext(context.Background())
}

func (i GetSlosSloLabelArray) ToGetSlosSloLabelArrayOutputWithContext(ctx context.Context) GetSlosSloLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloLabelArrayOutput)
}

type GetSlosSloLabelOutput struct{ *pulumi.OutputState }

func (GetSlosSloLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloLabel)(nil)).Elem()
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutput() GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) ToGetSlosSloLabelOutputWithContext(ctx context.Context) GetSlosSloLabelOutput {
	return o
}

func (o GetSlosSloLabelOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloLabel) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetSlosSloLabelOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloLabel) string { return v.Value }).(pulumi.StringOutput)
}

type GetSlosSloLabelArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloLabel)(nil)).Elem()
}

func (o GetSlosSloLabelArrayOutput) ToGetSlosSloLabelArrayOutput() GetSlosSloLabelArrayOutput {
	return o
}

func (o GetSlosSloLabelArrayOutput) ToGetSlosSloLabelArrayOutputWithContext(ctx context.Context) GetSlosSloLabelArrayOutput {
	return o
}

func (o GetSlosSloLabelArrayOutput) Index(i pulumi.IntInput) GetSlosSloLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloLabel {
		return vs[0].([]GetSlosSloLabel)[vs[1].(int)]
	}).(GetSlosSloLabelOutput)
}

type GetSlosSloObjective struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value float64 `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window string `pulumi:"window"`
}

// GetSlosSloObjectiveInput is an input type that accepts GetSlosSloObjectiveArgs and GetSlosSloObjectiveOutput values.
// You can construct a concrete instance of `GetSlosSloObjectiveInput` via:
//
//	GetSlosSloObjectiveArgs{...}
type GetSlosSloObjectiveInput interface {
	pulumi.Input

	ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput
	ToGetSlosSloObjectiveOutputWithContext(context.Context) GetSlosSloObjectiveOutput
}

type GetSlosSloObjectiveArgs struct {
	// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
	Value pulumi.Float64Input `pulumi:"value"`
	// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
	Window pulumi.StringInput `pulumi:"window"`
}

func (GetSlosSloObjectiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return i.ToGetSlosSloObjectiveOutputWithContext(context.Background())
}

func (i GetSlosSloObjectiveArgs) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloObjectiveOutput)
}

// GetSlosSloObjectiveArrayInput is an input type that accepts GetSlosSloObjectiveArray and GetSlosSloObjectiveArrayOutput values.
// You can construct a concrete instance of `GetSlosSloObjectiveArrayInput` via:
//
//	GetSlosSloObjectiveArray{ GetSlosSloObjectiveArgs{...} }
type GetSlosSloObjectiveArrayInput interface {
	pulumi.Input

	ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput
	ToGetSlosSloObjectiveArrayOutputWithContext(context.Context) GetSlosSloObjectiveArrayOutput
}

type GetSlosSloObjectiveArray []GetSlosSloObjectiveInput

func (GetSlosSloObjectiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloObjective)(nil)).Elem()
}

func (i GetSlosSloObjectiveArray) ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput {
	return i.ToGetSlosSloObjectiveArrayOutputWithContext(context.Background())
}

func (i GetSlosSloObjectiveArray) ToGetSlosSloObjectiveArrayOutputWithContext(ctx context.Context) GetSlosSloObjectiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloObjectiveArrayOutput)
}

type GetSlosSloObjectiveOutput struct{ *pulumi.OutputState }

func (GetSlosSloObjectiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloObjective)(nil)).Elem()
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutput() GetSlosSloObjectiveOutput {
	return o
}

func (o GetSlosSloObjectiveOutput) ToGetSlosSloObjectiveOutputWithContext(ctx context.Context) GetSlosSloObjectiveOutput {
	return o
}

// Value between 0 and 1. If the value of the query is above the objective, the SLO is met.
func (o GetSlosSloObjectiveOutput) Value() pulumi.Float64Output {
	return o.ApplyT(func(v GetSlosSloObjective) float64 { return v.Value }).(pulumi.Float64Output)
}

// A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.
func (o GetSlosSloObjectiveOutput) Window() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloObjective) string { return v.Window }).(pulumi.StringOutput)
}

type GetSlosSloObjectiveArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloObjectiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloObjective)(nil)).Elem()
}

func (o GetSlosSloObjectiveArrayOutput) ToGetSlosSloObjectiveArrayOutput() GetSlosSloObjectiveArrayOutput {
	return o
}

func (o GetSlosSloObjectiveArrayOutput) ToGetSlosSloObjectiveArrayOutputWithContext(ctx context.Context) GetSlosSloObjectiveArrayOutput {
	return o
}

func (o GetSlosSloObjectiveArrayOutput) Index(i pulumi.IntInput) GetSlosSloObjectiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloObjective {
		return vs[0].([]GetSlosSloObjective)[vs[1].(int)]
	}).(GetSlosSloObjectiveOutput)
}

type GetSlosSloQuery struct {
	Freeform *GetSlosSloQueryFreeform `pulumi:"freeform"`
	Ratio    *GetSlosSloQueryRatio    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type string `pulumi:"type"`
}

// GetSlosSloQueryInput is an input type that accepts GetSlosSloQueryArgs and GetSlosSloQueryOutput values.
// You can construct a concrete instance of `GetSlosSloQueryInput` via:
//
//	GetSlosSloQueryArgs{...}
type GetSlosSloQueryInput interface {
	pulumi.Input

	ToGetSlosSloQueryOutput() GetSlosSloQueryOutput
	ToGetSlosSloQueryOutputWithContext(context.Context) GetSlosSloQueryOutput
}

type GetSlosSloQueryArgs struct {
	Freeform GetSlosSloQueryFreeformPtrInput `pulumi:"freeform"`
	Ratio    GetSlosSloQueryRatioPtrInput    `pulumi:"ratio"`
	// Query type must be one of: "freeform", "query", "ratio", or "threshold"
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetSlosSloQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return i.ToGetSlosSloQueryOutputWithContext(context.Background())
}

func (i GetSlosSloQueryArgs) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryOutput)
}

// GetSlosSloQueryArrayInput is an input type that accepts GetSlosSloQueryArray and GetSlosSloQueryArrayOutput values.
// You can construct a concrete instance of `GetSlosSloQueryArrayInput` via:
//
//	GetSlosSloQueryArray{ GetSlosSloQueryArgs{...} }
type GetSlosSloQueryArrayInput interface {
	pulumi.Input

	ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput
	ToGetSlosSloQueryArrayOutputWithContext(context.Context) GetSlosSloQueryArrayOutput
}

type GetSlosSloQueryArray []GetSlosSloQueryInput

func (GetSlosSloQueryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloQuery)(nil)).Elem()
}

func (i GetSlosSloQueryArray) ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput {
	return i.ToGetSlosSloQueryArrayOutputWithContext(context.Background())
}

func (i GetSlosSloQueryArray) ToGetSlosSloQueryArrayOutputWithContext(ctx context.Context) GetSlosSloQueryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryArrayOutput)
}

type GetSlosSloQueryOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQuery)(nil)).Elem()
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutput() GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) ToGetSlosSloQueryOutputWithContext(ctx context.Context) GetSlosSloQueryOutput {
	return o
}

func (o GetSlosSloQueryOutput) Freeform() GetSlosSloQueryFreeformPtrOutput {
	return o.ApplyT(func(v GetSlosSloQuery) *GetSlosSloQueryFreeform { return v.Freeform }).(GetSlosSloQueryFreeformPtrOutput)
}

func (o GetSlosSloQueryOutput) Ratio() GetSlosSloQueryRatioPtrOutput {
	return o.ApplyT(func(v GetSlosSloQuery) *GetSlosSloQueryRatio { return v.Ratio }).(GetSlosSloQueryRatioPtrOutput)
}

// Query type must be one of: "freeform", "query", "ratio", or "threshold"
func (o GetSlosSloQueryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQuery) string { return v.Type }).(pulumi.StringOutput)
}

type GetSlosSloQueryArrayOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSlosSloQuery)(nil)).Elem()
}

func (o GetSlosSloQueryArrayOutput) ToGetSlosSloQueryArrayOutput() GetSlosSloQueryArrayOutput {
	return o
}

func (o GetSlosSloQueryArrayOutput) ToGetSlosSloQueryArrayOutputWithContext(ctx context.Context) GetSlosSloQueryArrayOutput {
	return o
}

func (o GetSlosSloQueryArrayOutput) Index(i pulumi.IntInput) GetSlosSloQueryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSlosSloQuery {
		return vs[0].([]GetSlosSloQuery)[vs[1].(int)]
	}).(GetSlosSloQueryOutput)
}

type GetSlosSloQueryFreeform struct {
	// Freeform Query Field
	Query string `pulumi:"query"`
}

// GetSlosSloQueryFreeformInput is an input type that accepts GetSlosSloQueryFreeformArgs and GetSlosSloQueryFreeformOutput values.
// You can construct a concrete instance of `GetSlosSloQueryFreeformInput` via:
//
//	GetSlosSloQueryFreeformArgs{...}
type GetSlosSloQueryFreeformInput interface {
	pulumi.Input

	ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput
	ToGetSlosSloQueryFreeformOutputWithContext(context.Context) GetSlosSloQueryFreeformOutput
}

type GetSlosSloQueryFreeformArgs struct {
	// Freeform Query Field
	Query pulumi.StringInput `pulumi:"query"`
}

func (GetSlosSloQueryFreeformArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return i.ToGetSlosSloQueryFreeformOutputWithContext(context.Background())
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformOutput)
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return i.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (i GetSlosSloQueryFreeformArgs) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformOutput).ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx)
}

// GetSlosSloQueryFreeformPtrInput is an input type that accepts GetSlosSloQueryFreeformArgs, GetSlosSloQueryFreeformPtr and GetSlosSloQueryFreeformPtrOutput values.
// You can construct a concrete instance of `GetSlosSloQueryFreeformPtrInput` via:
//
//	        GetSlosSloQueryFreeformArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloQueryFreeformPtrInput interface {
	pulumi.Input

	ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput
	ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Context) GetSlosSloQueryFreeformPtrOutput
}

type getSlosSloQueryFreeformPtrType GetSlosSloQueryFreeformArgs

func GetSlosSloQueryFreeformPtr(v *GetSlosSloQueryFreeformArgs) GetSlosSloQueryFreeformPtrInput {
	return (*getSlosSloQueryFreeformPtrType)(v)
}

func (*getSlosSloQueryFreeformPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryFreeform)(nil)).Elem()
}

func (i *getSlosSloQueryFreeformPtrType) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return i.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (i *getSlosSloQueryFreeformPtrType) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryFreeformPtrOutput)
}

type GetSlosSloQueryFreeformOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryFreeformOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryFreeform)(nil)).Elem()
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutput() GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformOutput {
	return o
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return o.ToGetSlosSloQueryFreeformPtrOutputWithContext(context.Background())
}

func (o GetSlosSloQueryFreeformOutput) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloQueryFreeform) *GetSlosSloQueryFreeform {
		return &v
	}).(GetSlosSloQueryFreeformPtrOutput)
}

// Freeform Query Field
func (o GetSlosSloQueryFreeformOutput) Query() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryFreeform) string { return v.Query }).(pulumi.StringOutput)
}

type GetSlosSloQueryFreeformPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryFreeformPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryFreeform)(nil)).Elem()
}

func (o GetSlosSloQueryFreeformPtrOutput) ToGetSlosSloQueryFreeformPtrOutput() GetSlosSloQueryFreeformPtrOutput {
	return o
}

func (o GetSlosSloQueryFreeformPtrOutput) ToGetSlosSloQueryFreeformPtrOutputWithContext(ctx context.Context) GetSlosSloQueryFreeformPtrOutput {
	return o
}

func (o GetSlosSloQueryFreeformPtrOutput) Elem() GetSlosSloQueryFreeformOutput {
	return o.ApplyT(func(v *GetSlosSloQueryFreeform) GetSlosSloQueryFreeform {
		if v != nil {
			return *v
		}
		var ret GetSlosSloQueryFreeform
		return ret
	}).(GetSlosSloQueryFreeformOutput)
}

// Freeform Query Field
func (o GetSlosSloQueryFreeformPtrOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryFreeform) *string {
		if v == nil {
			return nil
		}
		return &v.Query
	}).(pulumi.StringPtrOutput)
}

type GetSlosSloQueryRatio struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	GroupByLabels []string `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric string `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric string `pulumi:"totalMetric"`
}

// GetSlosSloQueryRatioInput is an input type that accepts GetSlosSloQueryRatioArgs and GetSlosSloQueryRatioOutput values.
// You can construct a concrete instance of `GetSlosSloQueryRatioInput` via:
//
//	GetSlosSloQueryRatioArgs{...}
type GetSlosSloQueryRatioInput interface {
	pulumi.Input

	ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput
	ToGetSlosSloQueryRatioOutputWithContext(context.Context) GetSlosSloQueryRatioOutput
}

type GetSlosSloQueryRatioArgs struct {
	// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
	GroupByLabels pulumi.StringArrayInput `pulumi:"groupByLabels"`
	// Counter metric for success events (numerator)
	SuccessMetric pulumi.StringInput `pulumi:"successMetric"`
	// Metric for total events (denominator)
	TotalMetric pulumi.StringInput `pulumi:"totalMetric"`
}

func (GetSlosSloQueryRatioArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return i.ToGetSlosSloQueryRatioOutputWithContext(context.Background())
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioOutput)
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return i.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (i GetSlosSloQueryRatioArgs) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioOutput).ToGetSlosSloQueryRatioPtrOutputWithContext(ctx)
}

// GetSlosSloQueryRatioPtrInput is an input type that accepts GetSlosSloQueryRatioArgs, GetSlosSloQueryRatioPtr and GetSlosSloQueryRatioPtrOutput values.
// You can construct a concrete instance of `GetSlosSloQueryRatioPtrInput` via:
//
//	        GetSlosSloQueryRatioArgs{...}
//
//	or:
//
//	        nil
type GetSlosSloQueryRatioPtrInput interface {
	pulumi.Input

	ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput
	ToGetSlosSloQueryRatioPtrOutputWithContext(context.Context) GetSlosSloQueryRatioPtrOutput
}

type getSlosSloQueryRatioPtrType GetSlosSloQueryRatioArgs

func GetSlosSloQueryRatioPtr(v *GetSlosSloQueryRatioArgs) GetSlosSloQueryRatioPtrInput {
	return (*getSlosSloQueryRatioPtrType)(v)
}

func (*getSlosSloQueryRatioPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryRatio)(nil)).Elem()
}

func (i *getSlosSloQueryRatioPtrType) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return i.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (i *getSlosSloQueryRatioPtrType) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSlosSloQueryRatioPtrOutput)
}

type GetSlosSloQueryRatioOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryRatioOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSlosSloQueryRatio)(nil)).Elem()
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutput() GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioOutputWithContext(ctx context.Context) GetSlosSloQueryRatioOutput {
	return o
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return o.ToGetSlosSloQueryRatioPtrOutputWithContext(context.Background())
}

func (o GetSlosSloQueryRatioOutput) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GetSlosSloQueryRatio) *GetSlosSloQueryRatio {
		return &v
	}).(GetSlosSloQueryRatioPtrOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloQueryRatioOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) []string { return v.GroupByLabels }).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o GetSlosSloQueryRatioOutput) SuccessMetric() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) string { return v.SuccessMetric }).(pulumi.StringOutput)
}

// Metric for total events (denominator)
func (o GetSlosSloQueryRatioOutput) TotalMetric() pulumi.StringOutput {
	return o.ApplyT(func(v GetSlosSloQueryRatio) string { return v.TotalMetric }).(pulumi.StringOutput)
}

type GetSlosSloQueryRatioPtrOutput struct{ *pulumi.OutputState }

func (GetSlosSloQueryRatioPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GetSlosSloQueryRatio)(nil)).Elem()
}

func (o GetSlosSloQueryRatioPtrOutput) ToGetSlosSloQueryRatioPtrOutput() GetSlosSloQueryRatioPtrOutput {
	return o
}

func (o GetSlosSloQueryRatioPtrOutput) ToGetSlosSloQueryRatioPtrOutputWithContext(ctx context.Context) GetSlosSloQueryRatioPtrOutput {
	return o
}

func (o GetSlosSloQueryRatioPtrOutput) Elem() GetSlosSloQueryRatioOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) GetSlosSloQueryRatio {
		if v != nil {
			return *v
		}
		var ret GetSlosSloQueryRatio
		return ret
	}).(GetSlosSloQueryRatioOutput)
}

// Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - "^[a-zA-Z_][a-zA-Z0-9_]*$"
func (o GetSlosSloQueryRatioPtrOutput) GroupByLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) []string {
		if v == nil {
			return nil
		}
		return v.GroupByLabels
	}).(pulumi.StringArrayOutput)
}

// Counter metric for success events (numerator)
func (o GetSlosSloQueryRatioPtrOutput) SuccessMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.SuccessMetric
	}).(pulumi.StringPtrOutput)
}

// Metric for total events (denominator)
func (o GetSlosSloQueryRatioPtrOutput) TotalMetric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GetSlosSloQueryRatio) *string {
		if v == nil {
			return nil
		}
		return &v.TotalMetric
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingInput)(nil)).Elem(), SLOAlertingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingArrayInput)(nil)).Elem(), SLOAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAdvancedOptionsInput)(nil)).Elem(), SLOAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAdvancedOptionsPtrInput)(nil)).Elem(), SLOAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAnnotationInput)(nil)).Elem(), SLOAlertingAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingAnnotationArrayInput)(nil)).Elem(), SLOAlertingAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnInput)(nil)).Elem(), SLOAlertingFastburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnArrayInput)(nil)).Elem(), SLOAlertingFastburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnAnnotationInput)(nil)).Elem(), SLOAlertingFastburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnAnnotationArrayInput)(nil)).Elem(), SLOAlertingFastburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnLabelInput)(nil)).Elem(), SLOAlertingFastburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingFastburnLabelArrayInput)(nil)).Elem(), SLOAlertingFastburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingLabelInput)(nil)).Elem(), SLOAlertingLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingLabelArrayInput)(nil)).Elem(), SLOAlertingLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnInput)(nil)).Elem(), SLOAlertingSlowburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnArrayInput)(nil)).Elem(), SLOAlertingSlowburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnAnnotationInput)(nil)).Elem(), SLOAlertingSlowburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnAnnotationArrayInput)(nil)).Elem(), SLOAlertingSlowburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnLabelInput)(nil)).Elem(), SLOAlertingSlowburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOAlertingSlowburnLabelArrayInput)(nil)).Elem(), SLOAlertingSlowburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLODestinationDatasourceInput)(nil)).Elem(), SLODestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLODestinationDatasourcePtrInput)(nil)).Elem(), SLODestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOLabelInput)(nil)).Elem(), SLOLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOLabelArrayInput)(nil)).Elem(), SLOLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOObjectiveInput)(nil)).Elem(), SLOObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOObjectiveArrayInput)(nil)).Elem(), SLOObjectiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryInput)(nil)).Elem(), SLOQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryArrayInput)(nil)).Elem(), SLOQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryFreeformInput)(nil)).Elem(), SLOQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryFreeformPtrInput)(nil)).Elem(), SLOQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryRatioInput)(nil)).Elem(), SLOQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SLOQueryRatioPtrInput)(nil)).Elem(), SLOQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloInput)(nil)).Elem(), GetSlosSloArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloArrayInput)(nil)).Elem(), GetSlosSloArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingInput)(nil)).Elem(), GetSlosSloAlertingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingArrayInput)(nil)).Elem(), GetSlosSloAlertingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAdvancedOptionsInput)(nil)).Elem(), GetSlosSloAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAdvancedOptionsPtrInput)(nil)).Elem(), GetSlosSloAlertingAdvancedOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAnnotationInput)(nil)).Elem(), GetSlosSloAlertingAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnInput)(nil)).Elem(), GetSlosSloAlertingFastburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnArrayInput)(nil)).Elem(), GetSlosSloAlertingFastburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotationInput)(nil)).Elem(), GetSlosSloAlertingFastburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingFastburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnLabelInput)(nil)).Elem(), GetSlosSloAlertingFastburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingFastburnLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingFastburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingLabelInput)(nil)).Elem(), GetSlosSloAlertingLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnInput)(nil)).Elem(), GetSlosSloAlertingSlowburnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnArrayInput)(nil)).Elem(), GetSlosSloAlertingSlowburnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotationInput)(nil)).Elem(), GetSlosSloAlertingSlowburnAnnotationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnAnnotationArrayInput)(nil)).Elem(), GetSlosSloAlertingSlowburnAnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnLabelInput)(nil)).Elem(), GetSlosSloAlertingSlowburnLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloAlertingSlowburnLabelArrayInput)(nil)).Elem(), GetSlosSloAlertingSlowburnLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloDestinationDatasourceInput)(nil)).Elem(), GetSlosSloDestinationDatasourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloDestinationDatasourceArrayInput)(nil)).Elem(), GetSlosSloDestinationDatasourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloLabelInput)(nil)).Elem(), GetSlosSloLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloLabelArrayInput)(nil)).Elem(), GetSlosSloLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloObjectiveInput)(nil)).Elem(), GetSlosSloObjectiveArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloObjectiveArrayInput)(nil)).Elem(), GetSlosSloObjectiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryInput)(nil)).Elem(), GetSlosSloQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryArrayInput)(nil)).Elem(), GetSlosSloQueryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryFreeformInput)(nil)).Elem(), GetSlosSloQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryFreeformPtrInput)(nil)).Elem(), GetSlosSloQueryFreeformArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryRatioInput)(nil)).Elem(), GetSlosSloQueryRatioArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSlosSloQueryRatioPtrInput)(nil)).Elem(), GetSlosSloQueryRatioArgs{})
	pulumi.RegisterOutputType(SLOAlertingOutput{})
	pulumi.RegisterOutputType(SLOAlertingArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingAdvancedOptionsOutput{})
	pulumi.RegisterOutputType(SLOAlertingAdvancedOptionsPtrOutput{})
	pulumi.RegisterOutputType(SLOAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingFastburnLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(SLOAlertingSlowburnLabelArrayOutput{})
	pulumi.RegisterOutputType(SLODestinationDatasourceOutput{})
	pulumi.RegisterOutputType(SLODestinationDatasourcePtrOutput{})
	pulumi.RegisterOutputType(SLOLabelOutput{})
	pulumi.RegisterOutputType(SLOLabelArrayOutput{})
	pulumi.RegisterOutputType(SLOObjectiveOutput{})
	pulumi.RegisterOutputType(SLOObjectiveArrayOutput{})
	pulumi.RegisterOutputType(SLOQueryOutput{})
	pulumi.RegisterOutputType(SLOQueryArrayOutput{})
	pulumi.RegisterOutputType(SLOQueryFreeformOutput{})
	pulumi.RegisterOutputType(SLOQueryFreeformPtrOutput{})
	pulumi.RegisterOutputType(SLOQueryRatioOutput{})
	pulumi.RegisterOutputType(SLOQueryRatioPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloOutput{})
	pulumi.RegisterOutputType(GetSlosSloArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAdvancedOptionsOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAdvancedOptionsPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingFastburnLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnAnnotationOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnAnnotationArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloAlertingSlowburnLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloDestinationDatasourceOutput{})
	pulumi.RegisterOutputType(GetSlosSloDestinationDatasourceArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloLabelOutput{})
	pulumi.RegisterOutputType(GetSlosSloLabelArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloObjectiveOutput{})
	pulumi.RegisterOutputType(GetSlosSloObjectiveArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryArrayOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryFreeformOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryFreeformPtrOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryRatioOutput{})
	pulumi.RegisterOutputType(GetSlosSloQueryRatioPtrOutput{})
}
