// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type RoleAssignmentItem struct {
	pulumi.CustomResourceState

	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// the role UID onto which to assign an actor
	RoleUid pulumi.StringOutput `pulumi:"roleUid"`
	// the service account onto which the role is to be assigned
	ServiceAccountId pulumi.StringPtrOutput `pulumi:"serviceAccountId"`
	// the team onto which the role is to be assigned
	TeamId pulumi.StringPtrOutput `pulumi:"teamId"`
	// the user onto which the role is to be assigned
	UserId pulumi.StringPtrOutput `pulumi:"userId"`
}

// NewRoleAssignmentItem registers a new resource with the given unique name, arguments, and options.
func NewRoleAssignmentItem(ctx *pulumi.Context,
	name string, args *RoleAssignmentItemArgs, opts ...pulumi.ResourceOption) (*RoleAssignmentItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RoleUid == nil {
		return nil, errors.New("invalid value for required argument 'RoleUid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RoleAssignmentItem
	err := ctx.RegisterResource("grafana:index/roleAssignmentItem:RoleAssignmentItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRoleAssignmentItem gets an existing RoleAssignmentItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRoleAssignmentItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RoleAssignmentItemState, opts ...pulumi.ResourceOption) (*RoleAssignmentItem, error) {
	var resource RoleAssignmentItem
	err := ctx.ReadResource("grafana:index/roleAssignmentItem:RoleAssignmentItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RoleAssignmentItem resources.
type roleAssignmentItemState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// the role UID onto which to assign an actor
	RoleUid *string `pulumi:"roleUid"`
	// the service account onto which the role is to be assigned
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// the team onto which the role is to be assigned
	TeamId *string `pulumi:"teamId"`
	// the user onto which the role is to be assigned
	UserId *string `pulumi:"userId"`
}

type RoleAssignmentItemState struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// the role UID onto which to assign an actor
	RoleUid pulumi.StringPtrInput
	// the service account onto which the role is to be assigned
	ServiceAccountId pulumi.StringPtrInput
	// the team onto which the role is to be assigned
	TeamId pulumi.StringPtrInput
	// the user onto which the role is to be assigned
	UserId pulumi.StringPtrInput
}

func (RoleAssignmentItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentItemState)(nil)).Elem()
}

type roleAssignmentItemArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// the role UID onto which to assign an actor
	RoleUid string `pulumi:"roleUid"`
	// the service account onto which the role is to be assigned
	ServiceAccountId *string `pulumi:"serviceAccountId"`
	// the team onto which the role is to be assigned
	TeamId *string `pulumi:"teamId"`
	// the user onto which the role is to be assigned
	UserId *string `pulumi:"userId"`
}

// The set of arguments for constructing a RoleAssignmentItem resource.
type RoleAssignmentItemArgs struct {
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// the role UID onto which to assign an actor
	RoleUid pulumi.StringInput
	// the service account onto which the role is to be assigned
	ServiceAccountId pulumi.StringPtrInput
	// the team onto which the role is to be assigned
	TeamId pulumi.StringPtrInput
	// the user onto which the role is to be assigned
	UserId pulumi.StringPtrInput
}

func (RoleAssignmentItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*roleAssignmentItemArgs)(nil)).Elem()
}

type RoleAssignmentItemInput interface {
	pulumi.Input

	ToRoleAssignmentItemOutput() RoleAssignmentItemOutput
	ToRoleAssignmentItemOutputWithContext(ctx context.Context) RoleAssignmentItemOutput
}

func (*RoleAssignmentItem) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentItem)(nil)).Elem()
}

func (i *RoleAssignmentItem) ToRoleAssignmentItemOutput() RoleAssignmentItemOutput {
	return i.ToRoleAssignmentItemOutputWithContext(context.Background())
}

func (i *RoleAssignmentItem) ToRoleAssignmentItemOutputWithContext(ctx context.Context) RoleAssignmentItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentItemOutput)
}

// RoleAssignmentItemArrayInput is an input type that accepts RoleAssignmentItemArray and RoleAssignmentItemArrayOutput values.
// You can construct a concrete instance of `RoleAssignmentItemArrayInput` via:
//
//	RoleAssignmentItemArray{ RoleAssignmentItemArgs{...} }
type RoleAssignmentItemArrayInput interface {
	pulumi.Input

	ToRoleAssignmentItemArrayOutput() RoleAssignmentItemArrayOutput
	ToRoleAssignmentItemArrayOutputWithContext(context.Context) RoleAssignmentItemArrayOutput
}

type RoleAssignmentItemArray []RoleAssignmentItemInput

func (RoleAssignmentItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignmentItem)(nil)).Elem()
}

func (i RoleAssignmentItemArray) ToRoleAssignmentItemArrayOutput() RoleAssignmentItemArrayOutput {
	return i.ToRoleAssignmentItemArrayOutputWithContext(context.Background())
}

func (i RoleAssignmentItemArray) ToRoleAssignmentItemArrayOutputWithContext(ctx context.Context) RoleAssignmentItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentItemArrayOutput)
}

// RoleAssignmentItemMapInput is an input type that accepts RoleAssignmentItemMap and RoleAssignmentItemMapOutput values.
// You can construct a concrete instance of `RoleAssignmentItemMapInput` via:
//
//	RoleAssignmentItemMap{ "key": RoleAssignmentItemArgs{...} }
type RoleAssignmentItemMapInput interface {
	pulumi.Input

	ToRoleAssignmentItemMapOutput() RoleAssignmentItemMapOutput
	ToRoleAssignmentItemMapOutputWithContext(context.Context) RoleAssignmentItemMapOutput
}

type RoleAssignmentItemMap map[string]RoleAssignmentItemInput

func (RoleAssignmentItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignmentItem)(nil)).Elem()
}

func (i RoleAssignmentItemMap) ToRoleAssignmentItemMapOutput() RoleAssignmentItemMapOutput {
	return i.ToRoleAssignmentItemMapOutputWithContext(context.Background())
}

func (i RoleAssignmentItemMap) ToRoleAssignmentItemMapOutputWithContext(ctx context.Context) RoleAssignmentItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RoleAssignmentItemMapOutput)
}

type RoleAssignmentItemOutput struct{ *pulumi.OutputState }

func (RoleAssignmentItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RoleAssignmentItem)(nil)).Elem()
}

func (o RoleAssignmentItemOutput) ToRoleAssignmentItemOutput() RoleAssignmentItemOutput {
	return o
}

func (o RoleAssignmentItemOutput) ToRoleAssignmentItemOutputWithContext(ctx context.Context) RoleAssignmentItemOutput {
	return o
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o RoleAssignmentItemOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignmentItem) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// the role UID onto which to assign an actor
func (o RoleAssignmentItemOutput) RoleUid() pulumi.StringOutput {
	return o.ApplyT(func(v *RoleAssignmentItem) pulumi.StringOutput { return v.RoleUid }).(pulumi.StringOutput)
}

// the service account onto which the role is to be assigned
func (o RoleAssignmentItemOutput) ServiceAccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentItem) pulumi.StringPtrOutput { return v.ServiceAccountId }).(pulumi.StringPtrOutput)
}

// the team onto which the role is to be assigned
func (o RoleAssignmentItemOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentItem) pulumi.StringPtrOutput { return v.TeamId }).(pulumi.StringPtrOutput)
}

// the user onto which the role is to be assigned
func (o RoleAssignmentItemOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RoleAssignmentItem) pulumi.StringPtrOutput { return v.UserId }).(pulumi.StringPtrOutput)
}

type RoleAssignmentItemArrayOutput struct{ *pulumi.OutputState }

func (RoleAssignmentItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RoleAssignmentItem)(nil)).Elem()
}

func (o RoleAssignmentItemArrayOutput) ToRoleAssignmentItemArrayOutput() RoleAssignmentItemArrayOutput {
	return o
}

func (o RoleAssignmentItemArrayOutput) ToRoleAssignmentItemArrayOutputWithContext(ctx context.Context) RoleAssignmentItemArrayOutput {
	return o
}

func (o RoleAssignmentItemArrayOutput) Index(i pulumi.IntInput) RoleAssignmentItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RoleAssignmentItem {
		return vs[0].([]*RoleAssignmentItem)[vs[1].(int)]
	}).(RoleAssignmentItemOutput)
}

type RoleAssignmentItemMapOutput struct{ *pulumi.OutputState }

func (RoleAssignmentItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RoleAssignmentItem)(nil)).Elem()
}

func (o RoleAssignmentItemMapOutput) ToRoleAssignmentItemMapOutput() RoleAssignmentItemMapOutput {
	return o
}

func (o RoleAssignmentItemMapOutput) ToRoleAssignmentItemMapOutputWithContext(ctx context.Context) RoleAssignmentItemMapOutput {
	return o
}

func (o RoleAssignmentItemMapOutput) MapIndex(k pulumi.StringInput) RoleAssignmentItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RoleAssignmentItem {
		return vs[0].(map[string]*RoleAssignmentItem)[vs[1].(string)]
	}).(RoleAssignmentItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentItemInput)(nil)).Elem(), &RoleAssignmentItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentItemArrayInput)(nil)).Elem(), RoleAssignmentItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RoleAssignmentItemMapInput)(nil)).Elem(), RoleAssignmentItemMap{})
	pulumi.RegisterOutputType(RoleAssignmentItemOutput{})
	pulumi.RegisterOutputType(RoleAssignmentItemArrayOutput{})
	pulumi.RegisterOutputType(RoleAssignmentItemMapOutput{})
}
