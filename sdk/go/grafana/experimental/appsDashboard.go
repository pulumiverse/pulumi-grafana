// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package experimental

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages Grafana dashboards using the new Grafana APIs.
//
// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/dashboard/#new-dashboard-apis)
type AppsDashboard struct {
	pulumi.CustomResourceState

	// The metadata of the resource.
	Metadata AppsDashboardMetadataPtrOutput `pulumi:"metadata"`
	// Options for applying the resource.
	Options AppsDashboardOptionsPtrOutput `pulumi:"options"`
	// The spec of the resource.
	Spec AppsDashboardSpecPtrOutput `pulumi:"spec"`
}

// NewAppsDashboard registers a new resource with the given unique name, arguments, and options.
func NewAppsDashboard(ctx *pulumi.Context,
	name string, args *AppsDashboardArgs, opts ...pulumi.ResourceOption) (*AppsDashboard, error) {
	if args == nil {
		args = &AppsDashboardArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AppsDashboard
	err := ctx.RegisterResource("grafana:experimental/appsDashboard:AppsDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAppsDashboard gets an existing AppsDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAppsDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AppsDashboardState, opts ...pulumi.ResourceOption) (*AppsDashboard, error) {
	var resource AppsDashboard
	err := ctx.ReadResource("grafana:experimental/appsDashboard:AppsDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AppsDashboard resources.
type appsDashboardState struct {
	// The metadata of the resource.
	Metadata *AppsDashboardMetadata `pulumi:"metadata"`
	// Options for applying the resource.
	Options *AppsDashboardOptions `pulumi:"options"`
	// The spec of the resource.
	Spec *AppsDashboardSpec `pulumi:"spec"`
}

type AppsDashboardState struct {
	// The metadata of the resource.
	Metadata AppsDashboardMetadataPtrInput
	// Options for applying the resource.
	Options AppsDashboardOptionsPtrInput
	// The spec of the resource.
	Spec AppsDashboardSpecPtrInput
}

func (AppsDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*appsDashboardState)(nil)).Elem()
}

type appsDashboardArgs struct {
	// The metadata of the resource.
	Metadata *AppsDashboardMetadata `pulumi:"metadata"`
	// Options for applying the resource.
	Options *AppsDashboardOptions `pulumi:"options"`
	// The spec of the resource.
	Spec *AppsDashboardSpec `pulumi:"spec"`
}

// The set of arguments for constructing a AppsDashboard resource.
type AppsDashboardArgs struct {
	// The metadata of the resource.
	Metadata AppsDashboardMetadataPtrInput
	// Options for applying the resource.
	Options AppsDashboardOptionsPtrInput
	// The spec of the resource.
	Spec AppsDashboardSpecPtrInput
}

func (AppsDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*appsDashboardArgs)(nil)).Elem()
}

type AppsDashboardInput interface {
	pulumi.Input

	ToAppsDashboardOutput() AppsDashboardOutput
	ToAppsDashboardOutputWithContext(ctx context.Context) AppsDashboardOutput
}

func (*AppsDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsDashboard)(nil)).Elem()
}

func (i *AppsDashboard) ToAppsDashboardOutput() AppsDashboardOutput {
	return i.ToAppsDashboardOutputWithContext(context.Background())
}

func (i *AppsDashboard) ToAppsDashboardOutputWithContext(ctx context.Context) AppsDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsDashboardOutput)
}

// AppsDashboardArrayInput is an input type that accepts AppsDashboardArray and AppsDashboardArrayOutput values.
// You can construct a concrete instance of `AppsDashboardArrayInput` via:
//
//	AppsDashboardArray{ AppsDashboardArgs{...} }
type AppsDashboardArrayInput interface {
	pulumi.Input

	ToAppsDashboardArrayOutput() AppsDashboardArrayOutput
	ToAppsDashboardArrayOutputWithContext(context.Context) AppsDashboardArrayOutput
}

type AppsDashboardArray []AppsDashboardInput

func (AppsDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppsDashboard)(nil)).Elem()
}

func (i AppsDashboardArray) ToAppsDashboardArrayOutput() AppsDashboardArrayOutput {
	return i.ToAppsDashboardArrayOutputWithContext(context.Background())
}

func (i AppsDashboardArray) ToAppsDashboardArrayOutputWithContext(ctx context.Context) AppsDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsDashboardArrayOutput)
}

// AppsDashboardMapInput is an input type that accepts AppsDashboardMap and AppsDashboardMapOutput values.
// You can construct a concrete instance of `AppsDashboardMapInput` via:
//
//	AppsDashboardMap{ "key": AppsDashboardArgs{...} }
type AppsDashboardMapInput interface {
	pulumi.Input

	ToAppsDashboardMapOutput() AppsDashboardMapOutput
	ToAppsDashboardMapOutputWithContext(context.Context) AppsDashboardMapOutput
}

type AppsDashboardMap map[string]AppsDashboardInput

func (AppsDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppsDashboard)(nil)).Elem()
}

func (i AppsDashboardMap) ToAppsDashboardMapOutput() AppsDashboardMapOutput {
	return i.ToAppsDashboardMapOutputWithContext(context.Background())
}

func (i AppsDashboardMap) ToAppsDashboardMapOutputWithContext(ctx context.Context) AppsDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AppsDashboardMapOutput)
}

type AppsDashboardOutput struct{ *pulumi.OutputState }

func (AppsDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AppsDashboard)(nil)).Elem()
}

func (o AppsDashboardOutput) ToAppsDashboardOutput() AppsDashboardOutput {
	return o
}

func (o AppsDashboardOutput) ToAppsDashboardOutputWithContext(ctx context.Context) AppsDashboardOutput {
	return o
}

// The metadata of the resource.
func (o AppsDashboardOutput) Metadata() AppsDashboardMetadataPtrOutput {
	return o.ApplyT(func(v *AppsDashboard) AppsDashboardMetadataPtrOutput { return v.Metadata }).(AppsDashboardMetadataPtrOutput)
}

// Options for applying the resource.
func (o AppsDashboardOutput) Options() AppsDashboardOptionsPtrOutput {
	return o.ApplyT(func(v *AppsDashboard) AppsDashboardOptionsPtrOutput { return v.Options }).(AppsDashboardOptionsPtrOutput)
}

// The spec of the resource.
func (o AppsDashboardOutput) Spec() AppsDashboardSpecPtrOutput {
	return o.ApplyT(func(v *AppsDashboard) AppsDashboardSpecPtrOutput { return v.Spec }).(AppsDashboardSpecPtrOutput)
}

type AppsDashboardArrayOutput struct{ *pulumi.OutputState }

func (AppsDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AppsDashboard)(nil)).Elem()
}

func (o AppsDashboardArrayOutput) ToAppsDashboardArrayOutput() AppsDashboardArrayOutput {
	return o
}

func (o AppsDashboardArrayOutput) ToAppsDashboardArrayOutputWithContext(ctx context.Context) AppsDashboardArrayOutput {
	return o
}

func (o AppsDashboardArrayOutput) Index(i pulumi.IntInput) AppsDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AppsDashboard {
		return vs[0].([]*AppsDashboard)[vs[1].(int)]
	}).(AppsDashboardOutput)
}

type AppsDashboardMapOutput struct{ *pulumi.OutputState }

func (AppsDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AppsDashboard)(nil)).Elem()
}

func (o AppsDashboardMapOutput) ToAppsDashboardMapOutput() AppsDashboardMapOutput {
	return o
}

func (o AppsDashboardMapOutput) ToAppsDashboardMapOutputWithContext(ctx context.Context) AppsDashboardMapOutput {
	return o
}

func (o AppsDashboardMapOutput) MapIndex(k pulumi.StringInput) AppsDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AppsDashboard {
		return vs[0].(map[string]*AppsDashboard)[vs[1].(string)]
	}).(AppsDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AppsDashboardInput)(nil)).Elem(), &AppsDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppsDashboardArrayInput)(nil)).Elem(), AppsDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AppsDashboardMapInput)(nil)).Elem(), AppsDashboardMap{})
	pulumi.RegisterOutputType(AppsDashboardOutput{})
	pulumi.RegisterOutputType(AppsDashboardArrayOutput{})
	pulumi.RegisterOutputType(AppsDashboardMapOutput{})
}
