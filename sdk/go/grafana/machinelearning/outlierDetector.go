// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearning

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// An outlier detector monitors the results of a query and reports when its values are outside normal bands.
//
// The normal band is configured by choice of algorithm, its sensitivity and other configuration.
//
// Visit https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for more details.
//
// ## Import
//
// ```sh
// $ pulumi import grafana:machineLearning/outlierDetector:OutlierDetector name "{{ id }}"
// ```
type OutlierDetector struct {
	pulumi.CustomResourceState

	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm OutlierDetectorAlgorithmOutput `pulumi:"algorithm"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringOutput `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringOutput `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The name of the outlier detector.
	Name pulumi.StringOutput `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.StringMapOutput `pulumi:"queryParams"`
}

// NewOutlierDetector registers a new resource with the given unique name, arguments, and options.
func NewOutlierDetector(ctx *pulumi.Context,
	name string, args *OutlierDetectorArgs, opts ...pulumi.ResourceOption) (*OutlierDetector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Algorithm == nil {
		return nil, errors.New("invalid value for required argument 'Algorithm'")
	}
	if args.DatasourceType == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceType'")
	}
	if args.DatasourceUid == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceUid'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.QueryParams == nil {
		return nil, errors.New("invalid value for required argument 'QueryParams'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/machineLearningOutlierDetector:MachineLearningOutlierDetector"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OutlierDetector
	err := ctx.RegisterResource("grafana:machineLearning/outlierDetector:OutlierDetector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOutlierDetector gets an existing OutlierDetector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOutlierDetector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OutlierDetectorState, opts ...pulumi.ResourceOption) (*OutlierDetector, error) {
	var resource OutlierDetector
	err := ctx.ReadResource("grafana:machineLearning/outlierDetector:OutlierDetector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OutlierDetector resources.
type outlierDetectorState struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm *OutlierDetectorAlgorithm `pulumi:"algorithm"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType *string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description *string `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric *string `pulumi:"metric"`
	// The name of the outlier detector.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]string `pulumi:"queryParams"`
}

type OutlierDetectorState struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm OutlierDetectorAlgorithmPtrInput
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringPtrInput
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringPtrInput
	// A description of the outlier detector.
	Description pulumi.StringPtrInput
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumi.IntPtrInput
	// The metric used to query the outlier detector results.
	Metric pulumi.StringPtrInput
	// The name of the outlier detector.
	Name pulumi.StringPtrInput
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.StringMapInput
}

func (OutlierDetectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*outlierDetectorState)(nil)).Elem()
}

type outlierDetectorArgs struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm OutlierDetectorAlgorithm `pulumi:"algorithm"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid string `pulumi:"datasourceUid"`
	// A description of the outlier detector.
	Description *string `pulumi:"description"`
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval *int `pulumi:"interval"`
	// The metric used to query the outlier detector results.
	Metric string `pulumi:"metric"`
	// The name of the outlier detector.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]string `pulumi:"queryParams"`
}

// The set of arguments for constructing a OutlierDetector resource.
type OutlierDetectorArgs struct {
	// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
	Algorithm OutlierDetectorAlgorithmInput
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringInput
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringInput
	// A description of the outlier detector.
	Description pulumi.StringPtrInput
	// The data interval in seconds to monitor. Defaults to `300`.
	Interval pulumi.IntPtrInput
	// The metric used to query the outlier detector results.
	Metric pulumi.StringInput
	// The name of the outlier detector.
	Name pulumi.StringPtrInput
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.StringMapInput
}

func (OutlierDetectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*outlierDetectorArgs)(nil)).Elem()
}

type OutlierDetectorInput interface {
	pulumi.Input

	ToOutlierDetectorOutput() OutlierDetectorOutput
	ToOutlierDetectorOutputWithContext(ctx context.Context) OutlierDetectorOutput
}

func (*OutlierDetector) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetector)(nil)).Elem()
}

func (i *OutlierDetector) ToOutlierDetectorOutput() OutlierDetectorOutput {
	return i.ToOutlierDetectorOutputWithContext(context.Background())
}

func (i *OutlierDetector) ToOutlierDetectorOutputWithContext(ctx context.Context) OutlierDetectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectorOutput)
}

// OutlierDetectorArrayInput is an input type that accepts OutlierDetectorArray and OutlierDetectorArrayOutput values.
// You can construct a concrete instance of `OutlierDetectorArrayInput` via:
//
//	OutlierDetectorArray{ OutlierDetectorArgs{...} }
type OutlierDetectorArrayInput interface {
	pulumi.Input

	ToOutlierDetectorArrayOutput() OutlierDetectorArrayOutput
	ToOutlierDetectorArrayOutputWithContext(context.Context) OutlierDetectorArrayOutput
}

type OutlierDetectorArray []OutlierDetectorInput

func (OutlierDetectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutlierDetector)(nil)).Elem()
}

func (i OutlierDetectorArray) ToOutlierDetectorArrayOutput() OutlierDetectorArrayOutput {
	return i.ToOutlierDetectorArrayOutputWithContext(context.Background())
}

func (i OutlierDetectorArray) ToOutlierDetectorArrayOutputWithContext(ctx context.Context) OutlierDetectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectorArrayOutput)
}

// OutlierDetectorMapInput is an input type that accepts OutlierDetectorMap and OutlierDetectorMapOutput values.
// You can construct a concrete instance of `OutlierDetectorMapInput` via:
//
//	OutlierDetectorMap{ "key": OutlierDetectorArgs{...} }
type OutlierDetectorMapInput interface {
	pulumi.Input

	ToOutlierDetectorMapOutput() OutlierDetectorMapOutput
	ToOutlierDetectorMapOutputWithContext(context.Context) OutlierDetectorMapOutput
}

type OutlierDetectorMap map[string]OutlierDetectorInput

func (OutlierDetectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutlierDetector)(nil)).Elem()
}

func (i OutlierDetectorMap) ToOutlierDetectorMapOutput() OutlierDetectorMapOutput {
	return i.ToOutlierDetectorMapOutputWithContext(context.Background())
}

func (i OutlierDetectorMap) ToOutlierDetectorMapOutputWithContext(ctx context.Context) OutlierDetectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OutlierDetectorMapOutput)
}

type OutlierDetectorOutput struct{ *pulumi.OutputState }

func (OutlierDetectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OutlierDetector)(nil)).Elem()
}

func (o OutlierDetectorOutput) ToOutlierDetectorOutput() OutlierDetectorOutput {
	return o
}

func (o OutlierDetectorOutput) ToOutlierDetectorOutputWithContext(ctx context.Context) OutlierDetectorOutput {
	return o
}

// The algorithm to use and its configuration. See https://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.
func (o OutlierDetectorOutput) Algorithm() OutlierDetectorAlgorithmOutput {
	return o.ApplyT(func(v *OutlierDetector) OutlierDetectorAlgorithmOutput { return v.Algorithm }).(OutlierDetectorAlgorithmOutput)
}

// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
func (o OutlierDetectorOutput) DatasourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringOutput { return v.DatasourceType }).(pulumi.StringOutput)
}

// The uid of the datasource to query.
func (o OutlierDetectorOutput) DatasourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringOutput { return v.DatasourceUid }).(pulumi.StringOutput)
}

// A description of the outlier detector.
func (o OutlierDetectorOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The data interval in seconds to monitor. Defaults to `300`.
func (o OutlierDetectorOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.IntPtrOutput { return v.Interval }).(pulumi.IntPtrOutput)
}

// The metric used to query the outlier detector results.
func (o OutlierDetectorOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// The name of the outlier detector.
func (o OutlierDetectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An object representing the query params to query Grafana with.
func (o OutlierDetectorOutput) QueryParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OutlierDetector) pulumi.StringMapOutput { return v.QueryParams }).(pulumi.StringMapOutput)
}

type OutlierDetectorArrayOutput struct{ *pulumi.OutputState }

func (OutlierDetectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OutlierDetector)(nil)).Elem()
}

func (o OutlierDetectorArrayOutput) ToOutlierDetectorArrayOutput() OutlierDetectorArrayOutput {
	return o
}

func (o OutlierDetectorArrayOutput) ToOutlierDetectorArrayOutputWithContext(ctx context.Context) OutlierDetectorArrayOutput {
	return o
}

func (o OutlierDetectorArrayOutput) Index(i pulumi.IntInput) OutlierDetectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OutlierDetector {
		return vs[0].([]*OutlierDetector)[vs[1].(int)]
	}).(OutlierDetectorOutput)
}

type OutlierDetectorMapOutput struct{ *pulumi.OutputState }

func (OutlierDetectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OutlierDetector)(nil)).Elem()
}

func (o OutlierDetectorMapOutput) ToOutlierDetectorMapOutput() OutlierDetectorMapOutput {
	return o
}

func (o OutlierDetectorMapOutput) ToOutlierDetectorMapOutputWithContext(ctx context.Context) OutlierDetectorMapOutput {
	return o
}

func (o OutlierDetectorMapOutput) MapIndex(k pulumi.StringInput) OutlierDetectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OutlierDetector {
		return vs[0].(map[string]*OutlierDetector)[vs[1].(string)]
	}).(OutlierDetectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OutlierDetectorInput)(nil)).Elem(), &OutlierDetector{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutlierDetectorArrayInput)(nil)).Elem(), OutlierDetectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OutlierDetectorMapInput)(nil)).Elem(), OutlierDetectorMap{})
	pulumi.RegisterOutputType(OutlierDetectorOutput{})
	pulumi.RegisterOutputType(OutlierDetectorArrayOutput{})
	pulumi.RegisterOutputType(OutlierDetectorMapOutput{})
}
