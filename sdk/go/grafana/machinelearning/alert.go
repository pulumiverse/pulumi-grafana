// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package machinelearning

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// ## Example Usage
//
// ### Forecast Alert
//
// This alert uses a forecast.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/machinelearning"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAlertJob, err := machinelearning.NewJob(ctx, "test_alert_job", &machinelearning.JobArgs{
//				Name:           pulumi.String("Test Job"),
//				Metric:         pulumi.String("tf_test_alert_job"),
//				DatasourceType: pulumi.String("prometheus"),
//				DatasourceUid:  pulumi.String("abcd12345"),
//				QueryParams: pulumi.StringMap{
//					"expr": pulumi.String("grafanacloud_grafana_instance_active_user_count"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = machinelearning.NewAlert(ctx, "test_job_alert", &machinelearning.AlertArgs{
//				JobId:            testAlertJob.ID(),
//				Title:            pulumi.String("Test Alert"),
//				AnomalyCondition: pulumi.String("any"),
//				Threshold:        pulumi.String(">0.8"),
//				Window:           pulumi.String("15m"),
//				NoDataState:      pulumi.String("OK"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Outlier Alert
//
// This alert uses an outlier detector.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/machinelearning"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAlertOutlierDetector, err := machinelearning.NewOutlierDetector(ctx, "test_alert_outlier_detector", &machinelearning.OutlierDetectorArgs{
//				Name:           pulumi.String("Test Outlier"),
//				Metric:         pulumi.String("tf_test_alert_outlier"),
//				DatasourceType: pulumi.String("prometheus"),
//				DatasourceUid:  pulumi.String("AbCd12345"),
//				QueryParams: pulumi.StringMap{
//					"expr": pulumi.String("grafanacloud_grafana_instance_active_user_count"),
//				},
//				Interval: pulumi.Int(300),
//				Algorithm: &machinelearning.OutlierDetectorAlgorithmArgs{
//					Name:        pulumi.String("dbscan"),
//					Sensitivity: pulumi.Float64(0.5),
//					Config: &machinelearning.OutlierDetectorAlgorithmConfigArgs{
//						Epsilon: pulumi.Float64(1),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = machinelearning.NewAlert(ctx, "test_outlier_alert", &machinelearning.AlertArgs{
//				OutlierId: testAlertOutlierDetector.ID(),
//				Title:     pulumi.String("Test Alert"),
//				Window:    pulumi.String("1h"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:machineLearning/alert:Alert name "{{ id }}"
// ```
type Alert struct {
	pulumi.CustomResourceState

	// Annotations to add to the alert generated in Grafana.
	Annotations pulumi.StringMapOutput `pulumi:"annotations"`
	// The condition for when to consider a point as anomalous.
	AnomalyCondition pulumi.StringPtrOutput `pulumi:"anomalyCondition"`
	// How long values must be anomalous before firing an alert.
	For pulumi.StringOutput `pulumi:"for"`
	// The forecast this alert belongs to.
	JobId pulumi.StringPtrOutput `pulumi:"jobId"`
	// Labels to add to the alert generated in Grafana.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// How the alert should be processed when no data is returned by the underlying series
	NoDataState pulumi.StringPtrOutput `pulumi:"noDataState"`
	// The forecast this alert belongs to.
	OutlierId pulumi.StringPtrOutput `pulumi:"outlierId"`
	// The threshold of points over the window that need to be anomalous to alert.
	Threshold pulumi.StringPtrOutput `pulumi:"threshold"`
	// The title of the alert.
	Title pulumi.StringOutput `pulumi:"title"`
	// How much time to average values over
	Window pulumi.StringOutput `pulumi:"window"`
}

// NewAlert registers a new resource with the given unique name, arguments, and options.
func NewAlert(ctx *pulumi.Context,
	name string, args *AlertArgs, opts ...pulumi.ResourceOption) (*Alert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Alert
	err := ctx.RegisterResource("grafana:machineLearning/alert:Alert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlert gets an existing Alert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertState, opts ...pulumi.ResourceOption) (*Alert, error) {
	var resource Alert
	err := ctx.ReadResource("grafana:machineLearning/alert:Alert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alert resources.
type alertState struct {
	// Annotations to add to the alert generated in Grafana.
	Annotations map[string]string `pulumi:"annotations"`
	// The condition for when to consider a point as anomalous.
	AnomalyCondition *string `pulumi:"anomalyCondition"`
	// How long values must be anomalous before firing an alert.
	For *string `pulumi:"for"`
	// The forecast this alert belongs to.
	JobId *string `pulumi:"jobId"`
	// Labels to add to the alert generated in Grafana.
	Labels map[string]string `pulumi:"labels"`
	// How the alert should be processed when no data is returned by the underlying series
	NoDataState *string `pulumi:"noDataState"`
	// The forecast this alert belongs to.
	OutlierId *string `pulumi:"outlierId"`
	// The threshold of points over the window that need to be anomalous to alert.
	Threshold *string `pulumi:"threshold"`
	// The title of the alert.
	Title *string `pulumi:"title"`
	// How much time to average values over
	Window *string `pulumi:"window"`
}

type AlertState struct {
	// Annotations to add to the alert generated in Grafana.
	Annotations pulumi.StringMapInput
	// The condition for when to consider a point as anomalous.
	AnomalyCondition pulumi.StringPtrInput
	// How long values must be anomalous before firing an alert.
	For pulumi.StringPtrInput
	// The forecast this alert belongs to.
	JobId pulumi.StringPtrInput
	// Labels to add to the alert generated in Grafana.
	Labels pulumi.StringMapInput
	// How the alert should be processed when no data is returned by the underlying series
	NoDataState pulumi.StringPtrInput
	// The forecast this alert belongs to.
	OutlierId pulumi.StringPtrInput
	// The threshold of points over the window that need to be anomalous to alert.
	Threshold pulumi.StringPtrInput
	// The title of the alert.
	Title pulumi.StringPtrInput
	// How much time to average values over
	Window pulumi.StringPtrInput
}

func (AlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertState)(nil)).Elem()
}

type alertArgs struct {
	// Annotations to add to the alert generated in Grafana.
	Annotations map[string]string `pulumi:"annotations"`
	// The condition for when to consider a point as anomalous.
	AnomalyCondition *string `pulumi:"anomalyCondition"`
	// How long values must be anomalous before firing an alert.
	For *string `pulumi:"for"`
	// The forecast this alert belongs to.
	JobId *string `pulumi:"jobId"`
	// Labels to add to the alert generated in Grafana.
	Labels map[string]string `pulumi:"labels"`
	// How the alert should be processed when no data is returned by the underlying series
	NoDataState *string `pulumi:"noDataState"`
	// The forecast this alert belongs to.
	OutlierId *string `pulumi:"outlierId"`
	// The threshold of points over the window that need to be anomalous to alert.
	Threshold *string `pulumi:"threshold"`
	// The title of the alert.
	Title string `pulumi:"title"`
	// How much time to average values over
	Window *string `pulumi:"window"`
}

// The set of arguments for constructing a Alert resource.
type AlertArgs struct {
	// Annotations to add to the alert generated in Grafana.
	Annotations pulumi.StringMapInput
	// The condition for when to consider a point as anomalous.
	AnomalyCondition pulumi.StringPtrInput
	// How long values must be anomalous before firing an alert.
	For pulumi.StringPtrInput
	// The forecast this alert belongs to.
	JobId pulumi.StringPtrInput
	// Labels to add to the alert generated in Grafana.
	Labels pulumi.StringMapInput
	// How the alert should be processed when no data is returned by the underlying series
	NoDataState pulumi.StringPtrInput
	// The forecast this alert belongs to.
	OutlierId pulumi.StringPtrInput
	// The threshold of points over the window that need to be anomalous to alert.
	Threshold pulumi.StringPtrInput
	// The title of the alert.
	Title pulumi.StringInput
	// How much time to average values over
	Window pulumi.StringPtrInput
}

func (AlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertArgs)(nil)).Elem()
}

type AlertInput interface {
	pulumi.Input

	ToAlertOutput() AlertOutput
	ToAlertOutputWithContext(ctx context.Context) AlertOutput
}

func (*Alert) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (i *Alert) ToAlertOutput() AlertOutput {
	return i.ToAlertOutputWithContext(context.Background())
}

func (i *Alert) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertOutput)
}

// AlertArrayInput is an input type that accepts AlertArray and AlertArrayOutput values.
// You can construct a concrete instance of `AlertArrayInput` via:
//
//	AlertArray{ AlertArgs{...} }
type AlertArrayInput interface {
	pulumi.Input

	ToAlertArrayOutput() AlertArrayOutput
	ToAlertArrayOutputWithContext(context.Context) AlertArrayOutput
}

type AlertArray []AlertInput

func (AlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (i AlertArray) ToAlertArrayOutput() AlertArrayOutput {
	return i.ToAlertArrayOutputWithContext(context.Background())
}

func (i AlertArray) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertArrayOutput)
}

// AlertMapInput is an input type that accepts AlertMap and AlertMapOutput values.
// You can construct a concrete instance of `AlertMapInput` via:
//
//	AlertMap{ "key": AlertArgs{...} }
type AlertMapInput interface {
	pulumi.Input

	ToAlertMapOutput() AlertMapOutput
	ToAlertMapOutputWithContext(context.Context) AlertMapOutput
}

type AlertMap map[string]AlertInput

func (AlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (i AlertMap) ToAlertMapOutput() AlertMapOutput {
	return i.ToAlertMapOutputWithContext(context.Background())
}

func (i AlertMap) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertMapOutput)
}

type AlertOutput struct{ *pulumi.OutputState }

func (AlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alert)(nil)).Elem()
}

func (o AlertOutput) ToAlertOutput() AlertOutput {
	return o
}

func (o AlertOutput) ToAlertOutputWithContext(ctx context.Context) AlertOutput {
	return o
}

// Annotations to add to the alert generated in Grafana.
func (o AlertOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringMapOutput { return v.Annotations }).(pulumi.StringMapOutput)
}

// The condition for when to consider a point as anomalous.
func (o AlertOutput) AnomalyCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.AnomalyCondition }).(pulumi.StringPtrOutput)
}

// How long values must be anomalous before firing an alert.
func (o AlertOutput) For() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.For }).(pulumi.StringOutput)
}

// The forecast this alert belongs to.
func (o AlertOutput) JobId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.JobId }).(pulumi.StringPtrOutput)
}

// Labels to add to the alert generated in Grafana.
func (o AlertOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// How the alert should be processed when no data is returned by the underlying series
func (o AlertOutput) NoDataState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.NoDataState }).(pulumi.StringPtrOutput)
}

// The forecast this alert belongs to.
func (o AlertOutput) OutlierId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.OutlierId }).(pulumi.StringPtrOutput)
}

// The threshold of points over the window that need to be anomalous to alert.
func (o AlertOutput) Threshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringPtrOutput { return v.Threshold }).(pulumi.StringPtrOutput)
}

// The title of the alert.
func (o AlertOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// How much time to average values over
func (o AlertOutput) Window() pulumi.StringOutput {
	return o.ApplyT(func(v *Alert) pulumi.StringOutput { return v.Window }).(pulumi.StringOutput)
}

type AlertArrayOutput struct{ *pulumi.OutputState }

func (AlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alert)(nil)).Elem()
}

func (o AlertArrayOutput) ToAlertArrayOutput() AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) ToAlertArrayOutputWithContext(ctx context.Context) AlertArrayOutput {
	return o
}

func (o AlertArrayOutput) Index(i pulumi.IntInput) AlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].([]*Alert)[vs[1].(int)]
	}).(AlertOutput)
}

type AlertMapOutput struct{ *pulumi.OutputState }

func (AlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alert)(nil)).Elem()
}

func (o AlertMapOutput) ToAlertMapOutput() AlertMapOutput {
	return o
}

func (o AlertMapOutput) ToAlertMapOutputWithContext(ctx context.Context) AlertMapOutput {
	return o
}

func (o AlertMapOutput) MapIndex(k pulumi.StringInput) AlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alert {
		return vs[0].(map[string]*Alert)[vs[1].(string)]
	}).(AlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertInput)(nil)).Elem(), &Alert{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertArrayInput)(nil)).Elem(), AlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertMapInput)(nil)).Elem(), AlertMap{})
	pulumi.RegisterOutputType(AlertOutput{})
	pulumi.RegisterOutputType(AlertArrayOutput{})
	pulumi.RegisterOutputType(AlertMapOutput{})
}
