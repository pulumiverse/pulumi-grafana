// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package syntheticmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Sets up Synthetic Monitoring on a Grafana cloud stack and generates a token.
// Once a Grafana Cloud stack is created, a user can either use this resource or go into the UI to install synthetic monitoring.
// This resource cannot be imported but it can be used on an existing Synthetic Monitoring installation without issues.
//
// **Note that this resource must be used on a provider configured with Grafana Cloud credentials.**
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/)
// * [API documentation](https://github.com/grafana/synthetic-monitoring-api-go-client/blob/main/docs/API.md#apiv1registerinstall)
//
// Required access policy scopes:
//
// * stacks:read
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi/config"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/cloud"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/syntheticMonitoring"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			cfg := config.New(ctx, "")
//			// Cloud Access Policy token for Grafana Cloud with the following scopes: accesspolicies:read|write|delete, stacks:read|write|delete
//			cloudAccessPolicyToken := cfg.RequireObject("cloudAccessPolicyToken")
//			stackSlug := cfg.RequireObject("stackSlug")
//			cloudRegion := "us"
//			if param := cfg.Get("cloudRegion"); param != "" {
//				cloudRegion = param
//			}
//			smStack, err := cloud.NewStack(ctx, "sm_stack", &cloud.StackArgs{
//				Name:       pulumi.Any(stackSlug),
//				Slug:       pulumi.Any(stackSlug),
//				RegionSlug: pulumi.String(cloudRegion),
//			})
//			if err != nil {
//				return err
//			}
//			// Step 2: Install Synthetic Monitoring on the stack
//			smMetricsPublish, err := cloud.NewAccessPolicy(ctx, "sm_metrics_publish", &cloud.AccessPolicyArgs{
//				Region: pulumi.String(cloudRegion),
//				Name:   pulumi.String("metric-publisher-for-sm"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("metrics:write"),
//					pulumi.String("stacks:read"),
//					pulumi.String("logs:write"),
//					pulumi.String("traces:write"),
//				},
//				Realms: cloud.AccessPolicyRealmArray{
//					&cloud.AccessPolicyRealmArgs{
//						Type:       pulumi.String("stack"),
//						Identifier: smStack.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			smMetricsPublishAccessPolicyToken, err := cloud.NewAccessPolicyToken(ctx, "sm_metrics_publish", &cloud.AccessPolicyTokenArgs{
//				Region:         pulumi.String(cloudRegion),
//				AccessPolicyId: smMetricsPublish.PolicyId,
//				Name:           pulumi.String("metric-publisher-for-sm"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = syntheticMonitoring.NewInstallation(ctx, "sm_stack", &syntheticMonitoring.InstallationArgs{
//				StackId:             smStack.ID(),
//				MetricsPublisherKey: smMetricsPublishAccessPolicyToken.Token,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = syntheticMonitoring.GetProbes(ctx, &syntheticmonitoring.GetProbesArgs{}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Installation struct {
	pulumi.CustomResourceState

	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringOutput `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken pulumi.StringOutput `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringOutput `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringOutput `pulumi:"stackSmApiUrl"`
}

// NewInstallation registers a new resource with the given unique name, arguments, and options.
func NewInstallation(ctx *pulumi.Context,
	name string, args *InstallationArgs, opts ...pulumi.ResourceOption) (*Installation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MetricsPublisherKey == nil {
		return nil, errors.New("invalid value for required argument 'MetricsPublisherKey'")
	}
	if args.StackId == nil {
		return nil, errors.New("invalid value for required argument 'StackId'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation"),
		},
	})
	opts = append(opts, aliases)
	if args.MetricsPublisherKey != nil {
		args.MetricsPublisherKey = pulumi.ToSecret(args.MetricsPublisherKey).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"metricsPublisherKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Installation
	err := ctx.RegisterResource("grafana:syntheticMonitoring/installation:Installation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstallation gets an existing Installation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstallation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstallationState, opts ...pulumi.ResourceOption) (*Installation, error) {
	var resource Installation
	err := ctx.ReadResource("grafana:syntheticMonitoring/installation:Installation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Installation resources.
type installationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey *string `pulumi:"metricsPublisherKey"`
	// Generated token to access the SM API.
	SmAccessToken *string `pulumi:"smAccessToken"`
	// The ID or slug of the stack to install SM on.
	StackId *string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

type InstallationState struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringPtrInput
	// Generated token to access the SM API.
	SmAccessToken pulumi.StringPtrInput
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringPtrInput
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringPtrInput
}

func (InstallationState) ElementType() reflect.Type {
	return reflect.TypeOf((*installationState)(nil)).Elem()
}

type installationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey string `pulumi:"metricsPublisherKey"`
	// The ID or slug of the stack to install SM on.
	StackId string `pulumi:"stackId"`
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl *string `pulumi:"stackSmApiUrl"`
}

// The set of arguments for constructing a Installation resource.
type InstallationArgs struct {
	// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
	MetricsPublisherKey pulumi.StringInput
	// The ID or slug of the stack to install SM on.
	StackId pulumi.StringInput
	// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
	StackSmApiUrl pulumi.StringPtrInput
}

func (InstallationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*installationArgs)(nil)).Elem()
}

type InstallationInput interface {
	pulumi.Input

	ToInstallationOutput() InstallationOutput
	ToInstallationOutputWithContext(ctx context.Context) InstallationOutput
}

func (*Installation) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (i *Installation) ToInstallationOutput() InstallationOutput {
	return i.ToInstallationOutputWithContext(context.Background())
}

func (i *Installation) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationOutput)
}

// InstallationArrayInput is an input type that accepts InstallationArray and InstallationArrayOutput values.
// You can construct a concrete instance of `InstallationArrayInput` via:
//
//	InstallationArray{ InstallationArgs{...} }
type InstallationArrayInput interface {
	pulumi.Input

	ToInstallationArrayOutput() InstallationArrayOutput
	ToInstallationArrayOutputWithContext(context.Context) InstallationArrayOutput
}

type InstallationArray []InstallationInput

func (InstallationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Installation)(nil)).Elem()
}

func (i InstallationArray) ToInstallationArrayOutput() InstallationArrayOutput {
	return i.ToInstallationArrayOutputWithContext(context.Background())
}

func (i InstallationArray) ToInstallationArrayOutputWithContext(ctx context.Context) InstallationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationArrayOutput)
}

// InstallationMapInput is an input type that accepts InstallationMap and InstallationMapOutput values.
// You can construct a concrete instance of `InstallationMapInput` via:
//
//	InstallationMap{ "key": InstallationArgs{...} }
type InstallationMapInput interface {
	pulumi.Input

	ToInstallationMapOutput() InstallationMapOutput
	ToInstallationMapOutputWithContext(context.Context) InstallationMapOutput
}

type InstallationMap map[string]InstallationInput

func (InstallationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Installation)(nil)).Elem()
}

func (i InstallationMap) ToInstallationMapOutput() InstallationMapOutput {
	return i.ToInstallationMapOutputWithContext(context.Background())
}

func (i InstallationMap) ToInstallationMapOutputWithContext(ctx context.Context) InstallationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstallationMapOutput)
}

type InstallationOutput struct{ *pulumi.OutputState }

func (InstallationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Installation)(nil)).Elem()
}

func (o InstallationOutput) ToInstallationOutput() InstallationOutput {
	return o
}

func (o InstallationOutput) ToInstallationOutputWithContext(ctx context.Context) InstallationOutput {
	return o
}

// The [Grafana Cloud access policy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with the following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and logs to Grafana Cloud stack.
func (o InstallationOutput) MetricsPublisherKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.MetricsPublisherKey }).(pulumi.StringOutput)
}

// Generated token to access the SM API.
func (o InstallationOutput) SmAccessToken() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.SmAccessToken }).(pulumi.StringOutput)
}

// The ID or slug of the stack to install SM on.
func (o InstallationOutput) StackId() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.StackId }).(pulumi.StringOutput)
}

// The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here: https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/set-up/set-up-private-probes/#probe-api-server-url. A static mapping exists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is computed automatically and readable.
func (o InstallationOutput) StackSmApiUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Installation) pulumi.StringOutput { return v.StackSmApiUrl }).(pulumi.StringOutput)
}

type InstallationArrayOutput struct{ *pulumi.OutputState }

func (InstallationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Installation)(nil)).Elem()
}

func (o InstallationArrayOutput) ToInstallationArrayOutput() InstallationArrayOutput {
	return o
}

func (o InstallationArrayOutput) ToInstallationArrayOutputWithContext(ctx context.Context) InstallationArrayOutput {
	return o
}

func (o InstallationArrayOutput) Index(i pulumi.IntInput) InstallationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Installation {
		return vs[0].([]*Installation)[vs[1].(int)]
	}).(InstallationOutput)
}

type InstallationMapOutput struct{ *pulumi.OutputState }

func (InstallationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Installation)(nil)).Elem()
}

func (o InstallationMapOutput) ToInstallationMapOutput() InstallationMapOutput {
	return o
}

func (o InstallationMapOutput) ToInstallationMapOutputWithContext(ctx context.Context) InstallationMapOutput {
	return o
}

func (o InstallationMapOutput) MapIndex(k pulumi.StringInput) InstallationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Installation {
		return vs[0].(map[string]*Installation)[vs[1].(string)]
	}).(InstallationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationInput)(nil)).Elem(), &Installation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationArrayInput)(nil)).Elem(), InstallationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstallationMapInput)(nil)).Elem(), InstallationMap{})
	pulumi.RegisterOutputType(InstallationOutput{})
	pulumi.RegisterOutputType(InstallationArrayOutput{})
	pulumi.RegisterOutputType(InstallationMapOutput{})
}
