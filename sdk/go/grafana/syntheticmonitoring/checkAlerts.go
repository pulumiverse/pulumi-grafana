// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package syntheticmonitoring

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// Manages alerts for a check in Grafana Synthetic Monitoring.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/configure-alerts/configure-per-check-alerts/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/syntheticmonitoring"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main, err := syntheticmonitoring.NewCheck(ctx, "main", &syntheticmonitoring.CheckArgs{
//				Job:     pulumi.String("Check Alert Test"),
//				Target:  pulumi.String("https://grafana.com"),
//				Enabled: pulumi.Bool(true),
//				Probes: pulumi.IntArray{
//					pulumi.Int(1),
//				},
//				Labels: pulumi.StringMap{},
//				Settings: &syntheticmonitoring.CheckSettingsArgs{
//					Http: &syntheticmonitoring.CheckSettingsHttpArgs{
//						IpVersion: pulumi.String("V4"),
//						Method:    pulumi.String("GET"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = syntheticmonitoring.NewCheckAlerts(ctx, "main", &syntheticmonitoring.CheckAlertsArgs{
//				CheckId: main.ID(),
//				Alerts: syntheticmonitoring.CheckAlertsAlertArray{
//					&syntheticmonitoring.CheckAlertsAlertArgs{
//						Name:      pulumi.String("ProbeFailedExecutionsTooHigh"),
//						Threshold: pulumi.Float64(1),
//						Period:    pulumi.String("15m"),
//					},
//					&syntheticmonitoring.CheckAlertsAlertArgs{
//						Name:      pulumi.String("TLSTargetCertificateCloseToExpiring"),
//						Threshold: pulumi.Float64(14),
//						Period:    pulumi.String(""),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:syntheticMonitoring/checkAlerts:CheckAlerts name "{{ check_id }}"
// ```
type CheckAlerts struct {
	pulumi.CustomResourceState

	// List of alerts for the check.
	Alerts CheckAlertsAlertArrayOutput `pulumi:"alerts"`
	// The ID of the check to manage alerts for.
	CheckId pulumi.IntOutput `pulumi:"checkId"`
}

// NewCheckAlerts registers a new resource with the given unique name, arguments, and options.
func NewCheckAlerts(ctx *pulumi.Context,
	name string, args *CheckAlertsArgs, opts ...pulumi.ResourceOption) (*CheckAlerts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Alerts == nil {
		return nil, errors.New("invalid value for required argument 'Alerts'")
	}
	if args.CheckId == nil {
		return nil, errors.New("invalid value for required argument 'CheckId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CheckAlerts
	err := ctx.RegisterResource("grafana:syntheticMonitoring/checkAlerts:CheckAlerts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCheckAlerts gets an existing CheckAlerts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCheckAlerts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CheckAlertsState, opts ...pulumi.ResourceOption) (*CheckAlerts, error) {
	var resource CheckAlerts
	err := ctx.ReadResource("grafana:syntheticMonitoring/checkAlerts:CheckAlerts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CheckAlerts resources.
type checkAlertsState struct {
	// List of alerts for the check.
	Alerts []CheckAlertsAlert `pulumi:"alerts"`
	// The ID of the check to manage alerts for.
	CheckId *int `pulumi:"checkId"`
}

type CheckAlertsState struct {
	// List of alerts for the check.
	Alerts CheckAlertsAlertArrayInput
	// The ID of the check to manage alerts for.
	CheckId pulumi.IntPtrInput
}

func (CheckAlertsState) ElementType() reflect.Type {
	return reflect.TypeOf((*checkAlertsState)(nil)).Elem()
}

type checkAlertsArgs struct {
	// List of alerts for the check.
	Alerts []CheckAlertsAlert `pulumi:"alerts"`
	// The ID of the check to manage alerts for.
	CheckId int `pulumi:"checkId"`
}

// The set of arguments for constructing a CheckAlerts resource.
type CheckAlertsArgs struct {
	// List of alerts for the check.
	Alerts CheckAlertsAlertArrayInput
	// The ID of the check to manage alerts for.
	CheckId pulumi.IntInput
}

func (CheckAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*checkAlertsArgs)(nil)).Elem()
}

type CheckAlertsInput interface {
	pulumi.Input

	ToCheckAlertsOutput() CheckAlertsOutput
	ToCheckAlertsOutputWithContext(ctx context.Context) CheckAlertsOutput
}

func (*CheckAlerts) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlerts)(nil)).Elem()
}

func (i *CheckAlerts) ToCheckAlertsOutput() CheckAlertsOutput {
	return i.ToCheckAlertsOutputWithContext(context.Background())
}

func (i *CheckAlerts) ToCheckAlertsOutputWithContext(ctx context.Context) CheckAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertsOutput)
}

// CheckAlertsArrayInput is an input type that accepts CheckAlertsArray and CheckAlertsArrayOutput values.
// You can construct a concrete instance of `CheckAlertsArrayInput` via:
//
//	CheckAlertsArray{ CheckAlertsArgs{...} }
type CheckAlertsArrayInput interface {
	pulumi.Input

	ToCheckAlertsArrayOutput() CheckAlertsArrayOutput
	ToCheckAlertsArrayOutputWithContext(context.Context) CheckAlertsArrayOutput
}

type CheckAlertsArray []CheckAlertsInput

func (CheckAlertsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckAlerts)(nil)).Elem()
}

func (i CheckAlertsArray) ToCheckAlertsArrayOutput() CheckAlertsArrayOutput {
	return i.ToCheckAlertsArrayOutputWithContext(context.Background())
}

func (i CheckAlertsArray) ToCheckAlertsArrayOutputWithContext(ctx context.Context) CheckAlertsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertsArrayOutput)
}

// CheckAlertsMapInput is an input type that accepts CheckAlertsMap and CheckAlertsMapOutput values.
// You can construct a concrete instance of `CheckAlertsMapInput` via:
//
//	CheckAlertsMap{ "key": CheckAlertsArgs{...} }
type CheckAlertsMapInput interface {
	pulumi.Input

	ToCheckAlertsMapOutput() CheckAlertsMapOutput
	ToCheckAlertsMapOutputWithContext(context.Context) CheckAlertsMapOutput
}

type CheckAlertsMap map[string]CheckAlertsInput

func (CheckAlertsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckAlerts)(nil)).Elem()
}

func (i CheckAlertsMap) ToCheckAlertsMapOutput() CheckAlertsMapOutput {
	return i.ToCheckAlertsMapOutputWithContext(context.Background())
}

func (i CheckAlertsMap) ToCheckAlertsMapOutputWithContext(ctx context.Context) CheckAlertsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckAlertsMapOutput)
}

type CheckAlertsOutput struct{ *pulumi.OutputState }

func (CheckAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckAlerts)(nil)).Elem()
}

func (o CheckAlertsOutput) ToCheckAlertsOutput() CheckAlertsOutput {
	return o
}

func (o CheckAlertsOutput) ToCheckAlertsOutputWithContext(ctx context.Context) CheckAlertsOutput {
	return o
}

// List of alerts for the check.
func (o CheckAlertsOutput) Alerts() CheckAlertsAlertArrayOutput {
	return o.ApplyT(func(v *CheckAlerts) CheckAlertsAlertArrayOutput { return v.Alerts }).(CheckAlertsAlertArrayOutput)
}

// The ID of the check to manage alerts for.
func (o CheckAlertsOutput) CheckId() pulumi.IntOutput {
	return o.ApplyT(func(v *CheckAlerts) pulumi.IntOutput { return v.CheckId }).(pulumi.IntOutput)
}

type CheckAlertsArrayOutput struct{ *pulumi.OutputState }

func (CheckAlertsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CheckAlerts)(nil)).Elem()
}

func (o CheckAlertsArrayOutput) ToCheckAlertsArrayOutput() CheckAlertsArrayOutput {
	return o
}

func (o CheckAlertsArrayOutput) ToCheckAlertsArrayOutputWithContext(ctx context.Context) CheckAlertsArrayOutput {
	return o
}

func (o CheckAlertsArrayOutput) Index(i pulumi.IntInput) CheckAlertsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CheckAlerts {
		return vs[0].([]*CheckAlerts)[vs[1].(int)]
	}).(CheckAlertsOutput)
}

type CheckAlertsMapOutput struct{ *pulumi.OutputState }

func (CheckAlertsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CheckAlerts)(nil)).Elem()
}

func (o CheckAlertsMapOutput) ToCheckAlertsMapOutput() CheckAlertsMapOutput {
	return o
}

func (o CheckAlertsMapOutput) ToCheckAlertsMapOutputWithContext(ctx context.Context) CheckAlertsMapOutput {
	return o
}

func (o CheckAlertsMapOutput) MapIndex(k pulumi.StringInput) CheckAlertsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CheckAlerts {
		return vs[0].(map[string]*CheckAlerts)[vs[1].(string)]
	}).(CheckAlertsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertsInput)(nil)).Elem(), &CheckAlerts{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertsArrayInput)(nil)).Elem(), CheckAlertsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckAlertsMapInput)(nil)).Elem(), CheckAlertsMap{})
	pulumi.RegisterOutputType(CheckAlertsOutput{})
	pulumi.RegisterOutputType(CheckAlertsArrayOutput{})
	pulumi.RegisterOutputType(CheckAlertsMapOutput{})
}
