// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package syntheticmonitoring

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type CheckSettings struct {
	// Settings for browser check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6-browser/.
	Browser *CheckSettingsBrowser `pulumi:"browser"`
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns *CheckSettingsDns `pulumi:"dns"`
	// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Grpc *CheckSettingsGrpc `pulumi:"grpc"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http *CheckSettingsHttp `pulumi:"http"`
	// Settings for MultiHTTP check. The target must be a URL (http or https)
	Multihttp *CheckSettingsMultihttp `pulumi:"multihttp"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping *CheckSettingsPing `pulumi:"ping"`
	// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
	Scripted *CheckSettingsScripted `pulumi:"scripted"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp *CheckSettingsTcp `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute *CheckSettingsTraceroute `pulumi:"traceroute"`
}

// CheckSettingsInput is an input type that accepts CheckSettingsArgs and CheckSettingsOutput values.
// You can construct a concrete instance of `CheckSettingsInput` via:
//
//	CheckSettingsArgs{...}
type CheckSettingsInput interface {
	pulumi.Input

	ToCheckSettingsOutput() CheckSettingsOutput
	ToCheckSettingsOutputWithContext(context.Context) CheckSettingsOutput
}

type CheckSettingsArgs struct {
	// Settings for browser check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6-browser/.
	Browser CheckSettingsBrowserPtrInput `pulumi:"browser"`
	// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
	Dns CheckSettingsDnsPtrInput `pulumi:"dns"`
	// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Grpc CheckSettingsGrpcPtrInput `pulumi:"grpc"`
	// Settings for HTTP check. The target must be a URL (http or https).
	Http CheckSettingsHttpPtrInput `pulumi:"http"`
	// Settings for MultiHTTP check. The target must be a URL (http or https)
	Multihttp CheckSettingsMultihttpPtrInput `pulumi:"multihttp"`
	// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
	Ping CheckSettingsPingPtrInput `pulumi:"ping"`
	// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
	Scripted CheckSettingsScriptedPtrInput `pulumi:"scripted"`
	// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
	Tcp CheckSettingsTcpPtrInput `pulumi:"tcp"`
	// Settings for traceroute check. The target must be a valid hostname or IP address
	Traceroute CheckSettingsTraceroutePtrInput `pulumi:"traceroute"`
}

func (CheckSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettings)(nil)).Elem()
}

func (i CheckSettingsArgs) ToCheckSettingsOutput() CheckSettingsOutput {
	return i.ToCheckSettingsOutputWithContext(context.Background())
}

func (i CheckSettingsArgs) ToCheckSettingsOutputWithContext(ctx context.Context) CheckSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsOutput)
}

func (i CheckSettingsArgs) ToCheckSettingsPtrOutput() CheckSettingsPtrOutput {
	return i.ToCheckSettingsPtrOutputWithContext(context.Background())
}

func (i CheckSettingsArgs) ToCheckSettingsPtrOutputWithContext(ctx context.Context) CheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsOutput).ToCheckSettingsPtrOutputWithContext(ctx)
}

// CheckSettingsPtrInput is an input type that accepts CheckSettingsArgs, CheckSettingsPtr and CheckSettingsPtrOutput values.
// You can construct a concrete instance of `CheckSettingsPtrInput` via:
//
//	        CheckSettingsArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsPtrInput interface {
	pulumi.Input

	ToCheckSettingsPtrOutput() CheckSettingsPtrOutput
	ToCheckSettingsPtrOutputWithContext(context.Context) CheckSettingsPtrOutput
}

type checkSettingsPtrType CheckSettingsArgs

func CheckSettingsPtr(v *CheckSettingsArgs) CheckSettingsPtrInput {
	return (*checkSettingsPtrType)(v)
}

func (*checkSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettings)(nil)).Elem()
}

func (i *checkSettingsPtrType) ToCheckSettingsPtrOutput() CheckSettingsPtrOutput {
	return i.ToCheckSettingsPtrOutputWithContext(context.Background())
}

func (i *checkSettingsPtrType) ToCheckSettingsPtrOutputWithContext(ctx context.Context) CheckSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsPtrOutput)
}

type CheckSettingsOutput struct{ *pulumi.OutputState }

func (CheckSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettings)(nil)).Elem()
}

func (o CheckSettingsOutput) ToCheckSettingsOutput() CheckSettingsOutput {
	return o
}

func (o CheckSettingsOutput) ToCheckSettingsOutputWithContext(ctx context.Context) CheckSettingsOutput {
	return o
}

func (o CheckSettingsOutput) ToCheckSettingsPtrOutput() CheckSettingsPtrOutput {
	return o.ToCheckSettingsPtrOutputWithContext(context.Background())
}

func (o CheckSettingsOutput) ToCheckSettingsPtrOutputWithContext(ctx context.Context) CheckSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettings) *CheckSettings {
		return &v
	}).(CheckSettingsPtrOutput)
}

// Settings for browser check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6-browser/.
func (o CheckSettingsOutput) Browser() CheckSettingsBrowserPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsBrowser { return v.Browser }).(CheckSettingsBrowserPtrOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o CheckSettingsOutput) Dns() CheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsDns { return v.Dns }).(CheckSettingsDnsPtrOutput)
}

// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o CheckSettingsOutput) Grpc() CheckSettingsGrpcPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsGrpc { return v.Grpc }).(CheckSettingsGrpcPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o CheckSettingsOutput) Http() CheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsHttp { return v.Http }).(CheckSettingsHttpPtrOutput)
}

// Settings for MultiHTTP check. The target must be a URL (http or https)
func (o CheckSettingsOutput) Multihttp() CheckSettingsMultihttpPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsMultihttp { return v.Multihttp }).(CheckSettingsMultihttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o CheckSettingsOutput) Ping() CheckSettingsPingPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsPing { return v.Ping }).(CheckSettingsPingPtrOutput)
}

// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
func (o CheckSettingsOutput) Scripted() CheckSettingsScriptedPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsScripted { return v.Scripted }).(CheckSettingsScriptedPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o CheckSettingsOutput) Tcp() CheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsTcp { return v.Tcp }).(CheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o CheckSettingsOutput) Traceroute() CheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v CheckSettings) *CheckSettingsTraceroute { return v.Traceroute }).(CheckSettingsTraceroutePtrOutput)
}

type CheckSettingsPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettings)(nil)).Elem()
}

func (o CheckSettingsPtrOutput) ToCheckSettingsPtrOutput() CheckSettingsPtrOutput {
	return o
}

func (o CheckSettingsPtrOutput) ToCheckSettingsPtrOutputWithContext(ctx context.Context) CheckSettingsPtrOutput {
	return o
}

func (o CheckSettingsPtrOutput) Elem() CheckSettingsOutput {
	return o.ApplyT(func(v *CheckSettings) CheckSettings {
		if v != nil {
			return *v
		}
		var ret CheckSettings
		return ret
	}).(CheckSettingsOutput)
}

// Settings for browser check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6-browser/.
func (o CheckSettingsPtrOutput) Browser() CheckSettingsBrowserPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsBrowser {
		if v == nil {
			return nil
		}
		return v.Browser
	}).(CheckSettingsBrowserPtrOutput)
}

// Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).
func (o CheckSettingsPtrOutput) Dns() CheckSettingsDnsPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsDns {
		if v == nil {
			return nil
		}
		return v.Dns
	}).(CheckSettingsDnsPtrOutput)
}

// Settings for gRPC Health check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o CheckSettingsPtrOutput) Grpc() CheckSettingsGrpcPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsGrpc {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(CheckSettingsGrpcPtrOutput)
}

// Settings for HTTP check. The target must be a URL (http or https).
func (o CheckSettingsPtrOutput) Http() CheckSettingsHttpPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsHttp {
		if v == nil {
			return nil
		}
		return v.Http
	}).(CheckSettingsHttpPtrOutput)
}

// Settings for MultiHTTP check. The target must be a URL (http or https)
func (o CheckSettingsPtrOutput) Multihttp() CheckSettingsMultihttpPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsMultihttp {
		if v == nil {
			return nil
		}
		return v.Multihttp
	}).(CheckSettingsMultihttpPtrOutput)
}

// Settings for ping (ICMP) check. The target must be a valid hostname or IP address.
func (o CheckSettingsPtrOutput) Ping() CheckSettingsPingPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsPing {
		if v == nil {
			return nil
		}
		return v.Ping
	}).(CheckSettingsPingPtrOutput)
}

// Settings for scripted check. See https://grafana.com/docs/grafana-cloud/testing/synthetic-monitoring/create-checks/checks/k6/.
func (o CheckSettingsPtrOutput) Scripted() CheckSettingsScriptedPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsScripted {
		if v == nil {
			return nil
		}
		return v.Scripted
	}).(CheckSettingsScriptedPtrOutput)
}

// Settings for TCP check. The target must be of the form `<host>:<port>`, where the host portion must be a valid hostname or IP address.
func (o CheckSettingsPtrOutput) Tcp() CheckSettingsTcpPtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsTcp {
		if v == nil {
			return nil
		}
		return v.Tcp
	}).(CheckSettingsTcpPtrOutput)
}

// Settings for traceroute check. The target must be a valid hostname or IP address
func (o CheckSettingsPtrOutput) Traceroute() CheckSettingsTraceroutePtrOutput {
	return o.ApplyT(func(v *CheckSettings) *CheckSettingsTraceroute {
		if v == nil {
			return nil
		}
		return v.Traceroute
	}).(CheckSettingsTraceroutePtrOutput)
}

type CheckSettingsBrowser struct {
	Script string `pulumi:"script"`
}

// CheckSettingsBrowserInput is an input type that accepts CheckSettingsBrowserArgs and CheckSettingsBrowserOutput values.
// You can construct a concrete instance of `CheckSettingsBrowserInput` via:
//
//	CheckSettingsBrowserArgs{...}
type CheckSettingsBrowserInput interface {
	pulumi.Input

	ToCheckSettingsBrowserOutput() CheckSettingsBrowserOutput
	ToCheckSettingsBrowserOutputWithContext(context.Context) CheckSettingsBrowserOutput
}

type CheckSettingsBrowserArgs struct {
	Script pulumi.StringInput `pulumi:"script"`
}

func (CheckSettingsBrowserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsBrowser)(nil)).Elem()
}

func (i CheckSettingsBrowserArgs) ToCheckSettingsBrowserOutput() CheckSettingsBrowserOutput {
	return i.ToCheckSettingsBrowserOutputWithContext(context.Background())
}

func (i CheckSettingsBrowserArgs) ToCheckSettingsBrowserOutputWithContext(ctx context.Context) CheckSettingsBrowserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsBrowserOutput)
}

func (i CheckSettingsBrowserArgs) ToCheckSettingsBrowserPtrOutput() CheckSettingsBrowserPtrOutput {
	return i.ToCheckSettingsBrowserPtrOutputWithContext(context.Background())
}

func (i CheckSettingsBrowserArgs) ToCheckSettingsBrowserPtrOutputWithContext(ctx context.Context) CheckSettingsBrowserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsBrowserOutput).ToCheckSettingsBrowserPtrOutputWithContext(ctx)
}

// CheckSettingsBrowserPtrInput is an input type that accepts CheckSettingsBrowserArgs, CheckSettingsBrowserPtr and CheckSettingsBrowserPtrOutput values.
// You can construct a concrete instance of `CheckSettingsBrowserPtrInput` via:
//
//	        CheckSettingsBrowserArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsBrowserPtrInput interface {
	pulumi.Input

	ToCheckSettingsBrowserPtrOutput() CheckSettingsBrowserPtrOutput
	ToCheckSettingsBrowserPtrOutputWithContext(context.Context) CheckSettingsBrowserPtrOutput
}

type checkSettingsBrowserPtrType CheckSettingsBrowserArgs

func CheckSettingsBrowserPtr(v *CheckSettingsBrowserArgs) CheckSettingsBrowserPtrInput {
	return (*checkSettingsBrowserPtrType)(v)
}

func (*checkSettingsBrowserPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsBrowser)(nil)).Elem()
}

func (i *checkSettingsBrowserPtrType) ToCheckSettingsBrowserPtrOutput() CheckSettingsBrowserPtrOutput {
	return i.ToCheckSettingsBrowserPtrOutputWithContext(context.Background())
}

func (i *checkSettingsBrowserPtrType) ToCheckSettingsBrowserPtrOutputWithContext(ctx context.Context) CheckSettingsBrowserPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsBrowserPtrOutput)
}

type CheckSettingsBrowserOutput struct{ *pulumi.OutputState }

func (CheckSettingsBrowserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsBrowser)(nil)).Elem()
}

func (o CheckSettingsBrowserOutput) ToCheckSettingsBrowserOutput() CheckSettingsBrowserOutput {
	return o
}

func (o CheckSettingsBrowserOutput) ToCheckSettingsBrowserOutputWithContext(ctx context.Context) CheckSettingsBrowserOutput {
	return o
}

func (o CheckSettingsBrowserOutput) ToCheckSettingsBrowserPtrOutput() CheckSettingsBrowserPtrOutput {
	return o.ToCheckSettingsBrowserPtrOutputWithContext(context.Background())
}

func (o CheckSettingsBrowserOutput) ToCheckSettingsBrowserPtrOutputWithContext(ctx context.Context) CheckSettingsBrowserPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsBrowser) *CheckSettingsBrowser {
		return &v
	}).(CheckSettingsBrowserPtrOutput)
}

func (o CheckSettingsBrowserOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsBrowser) string { return v.Script }).(pulumi.StringOutput)
}

type CheckSettingsBrowserPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsBrowserPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsBrowser)(nil)).Elem()
}

func (o CheckSettingsBrowserPtrOutput) ToCheckSettingsBrowserPtrOutput() CheckSettingsBrowserPtrOutput {
	return o
}

func (o CheckSettingsBrowserPtrOutput) ToCheckSettingsBrowserPtrOutputWithContext(ctx context.Context) CheckSettingsBrowserPtrOutput {
	return o
}

func (o CheckSettingsBrowserPtrOutput) Elem() CheckSettingsBrowserOutput {
	return o.ApplyT(func(v *CheckSettingsBrowser) CheckSettingsBrowser {
		if v != nil {
			return *v
		}
		var ret CheckSettingsBrowser
		return ret
	}).(CheckSettingsBrowserOutput)
}

func (o CheckSettingsBrowserPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsBrowser) *string {
		if v == nil {
			return nil
		}
		return &v.Script
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsDns struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Port to target. Defaults to `53`.
	Port *int `pulumi:"port"`
	// `TCP` or `UDP`. Defaults to `UDP`.
	Protocol *string `pulumi:"protocol"`
	// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
	RecordType *string `pulumi:"recordType"`
	// DNS server address to target. Defaults to `8.8.8.8`.
	Server *string `pulumi:"server"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
	ValidRCodes []string `pulumi:"validRCodes"`
	// Validate additional matches.
	ValidateAdditionalRrs []CheckSettingsDnsValidateAdditionalRr `pulumi:"validateAdditionalRrs"`
	// Validate response answer.
	ValidateAnswerRrs *CheckSettingsDnsValidateAnswerRrs `pulumi:"validateAnswerRrs"`
	// Validate response authority.
	ValidateAuthorityRrs *CheckSettingsDnsValidateAuthorityRrs `pulumi:"validateAuthorityRrs"`
}

// CheckSettingsDnsInput is an input type that accepts CheckSettingsDnsArgs and CheckSettingsDnsOutput values.
// You can construct a concrete instance of `CheckSettingsDnsInput` via:
//
//	CheckSettingsDnsArgs{...}
type CheckSettingsDnsInput interface {
	pulumi.Input

	ToCheckSettingsDnsOutput() CheckSettingsDnsOutput
	ToCheckSettingsDnsOutputWithContext(context.Context) CheckSettingsDnsOutput
}

type CheckSettingsDnsArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Port to target. Defaults to `53`.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// `TCP` or `UDP`. Defaults to `UDP`.
	Protocol pulumi.StringPtrInput `pulumi:"protocol"`
	// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
	RecordType pulumi.StringPtrInput `pulumi:"recordType"`
	// DNS server address to target. Defaults to `8.8.8.8`.
	Server pulumi.StringPtrInput `pulumi:"server"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
	// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
	ValidRCodes pulumi.StringArrayInput `pulumi:"validRCodes"`
	// Validate additional matches.
	ValidateAdditionalRrs CheckSettingsDnsValidateAdditionalRrArrayInput `pulumi:"validateAdditionalRrs"`
	// Validate response answer.
	ValidateAnswerRrs CheckSettingsDnsValidateAnswerRrsPtrInput `pulumi:"validateAnswerRrs"`
	// Validate response authority.
	ValidateAuthorityRrs CheckSettingsDnsValidateAuthorityRrsPtrInput `pulumi:"validateAuthorityRrs"`
}

func (CheckSettingsDnsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDns)(nil)).Elem()
}

func (i CheckSettingsDnsArgs) ToCheckSettingsDnsOutput() CheckSettingsDnsOutput {
	return i.ToCheckSettingsDnsOutputWithContext(context.Background())
}

func (i CheckSettingsDnsArgs) ToCheckSettingsDnsOutputWithContext(ctx context.Context) CheckSettingsDnsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsOutput)
}

func (i CheckSettingsDnsArgs) ToCheckSettingsDnsPtrOutput() CheckSettingsDnsPtrOutput {
	return i.ToCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i CheckSettingsDnsArgs) ToCheckSettingsDnsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsOutput).ToCheckSettingsDnsPtrOutputWithContext(ctx)
}

// CheckSettingsDnsPtrInput is an input type that accepts CheckSettingsDnsArgs, CheckSettingsDnsPtr and CheckSettingsDnsPtrOutput values.
// You can construct a concrete instance of `CheckSettingsDnsPtrInput` via:
//
//	        CheckSettingsDnsArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsDnsPtrInput interface {
	pulumi.Input

	ToCheckSettingsDnsPtrOutput() CheckSettingsDnsPtrOutput
	ToCheckSettingsDnsPtrOutputWithContext(context.Context) CheckSettingsDnsPtrOutput
}

type checkSettingsDnsPtrType CheckSettingsDnsArgs

func CheckSettingsDnsPtr(v *CheckSettingsDnsArgs) CheckSettingsDnsPtrInput {
	return (*checkSettingsDnsPtrType)(v)
}

func (*checkSettingsDnsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDns)(nil)).Elem()
}

func (i *checkSettingsDnsPtrType) ToCheckSettingsDnsPtrOutput() CheckSettingsDnsPtrOutput {
	return i.ToCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (i *checkSettingsDnsPtrType) ToCheckSettingsDnsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsPtrOutput)
}

type CheckSettingsDnsOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDns)(nil)).Elem()
}

func (o CheckSettingsDnsOutput) ToCheckSettingsDnsOutput() CheckSettingsDnsOutput {
	return o
}

func (o CheckSettingsDnsOutput) ToCheckSettingsDnsOutputWithContext(ctx context.Context) CheckSettingsDnsOutput {
	return o
}

func (o CheckSettingsDnsOutput) ToCheckSettingsDnsPtrOutput() CheckSettingsDnsPtrOutput {
	return o.ToCheckSettingsDnsPtrOutputWithContext(context.Background())
}

func (o CheckSettingsDnsOutput) ToCheckSettingsDnsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsDns) *CheckSettingsDns {
		return &v
	}).(CheckSettingsDnsPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsDnsOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Port to target. Defaults to `53`.
func (o CheckSettingsDnsOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// `TCP` or `UDP`. Defaults to `UDP`.
func (o CheckSettingsDnsOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *string { return v.Protocol }).(pulumi.StringPtrOutput)
}

// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
func (o CheckSettingsDnsOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *string { return v.RecordType }).(pulumi.StringPtrOutput)
}

// DNS server address to target. Defaults to `8.8.8.8`.
func (o CheckSettingsDnsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *string { return v.Server }).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o CheckSettingsDnsOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
func (o CheckSettingsDnsOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDns) []string { return v.ValidRCodes }).(pulumi.StringArrayOutput)
}

// Validate additional matches.
func (o CheckSettingsDnsOutput) ValidateAdditionalRrs() CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v CheckSettingsDns) []CheckSettingsDnsValidateAdditionalRr { return v.ValidateAdditionalRrs }).(CheckSettingsDnsValidateAdditionalRrArrayOutput)
}

// Validate response answer.
func (o CheckSettingsDnsOutput) ValidateAnswerRrs() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *CheckSettingsDnsValidateAnswerRrs { return v.ValidateAnswerRrs }).(CheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Validate response authority.
func (o CheckSettingsDnsOutput) ValidateAuthorityRrs() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v CheckSettingsDns) *CheckSettingsDnsValidateAuthorityRrs { return v.ValidateAuthorityRrs }).(CheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type CheckSettingsDnsPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDns)(nil)).Elem()
}

func (o CheckSettingsDnsPtrOutput) ToCheckSettingsDnsPtrOutput() CheckSettingsDnsPtrOutput {
	return o
}

func (o CheckSettingsDnsPtrOutput) ToCheckSettingsDnsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsPtrOutput {
	return o
}

func (o CheckSettingsDnsPtrOutput) Elem() CheckSettingsDnsOutput {
	return o.ApplyT(func(v *CheckSettingsDns) CheckSettingsDns {
		if v != nil {
			return *v
		}
		var ret CheckSettingsDns
		return ret
	}).(CheckSettingsDnsOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsDnsPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Port to target. Defaults to `53`.
func (o CheckSettingsDnsPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// `TCP` or `UDP`. Defaults to `UDP`.
func (o CheckSettingsDnsPtrOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Protocol
	}).(pulumi.StringPtrOutput)
}

// One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`. Defaults to `A`.
func (o CheckSettingsDnsPtrOutput) RecordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.RecordType
	}).(pulumi.StringPtrOutput)
}

// DNS server address to target. Defaults to `8.8.8.8`.
func (o CheckSettingsDnsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// Source IP address.
func (o CheckSettingsDnsPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

// List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.
func (o CheckSettingsDnsPtrOutput) ValidRCodes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDns) []string {
		if v == nil {
			return nil
		}
		return v.ValidRCodes
	}).(pulumi.StringArrayOutput)
}

// Validate additional matches.
func (o CheckSettingsDnsPtrOutput) ValidateAdditionalRrs() CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDns) []CheckSettingsDnsValidateAdditionalRr {
		if v == nil {
			return nil
		}
		return v.ValidateAdditionalRrs
	}).(CheckSettingsDnsValidateAdditionalRrArrayOutput)
}

// Validate response answer.
func (o CheckSettingsDnsPtrOutput) ValidateAnswerRrs() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *CheckSettingsDnsValidateAnswerRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAnswerRrs
	}).(CheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Validate response authority.
func (o CheckSettingsDnsPtrOutput) ValidateAuthorityRrs() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyT(func(v *CheckSettingsDns) *CheckSettingsDnsValidateAuthorityRrs {
		if v == nil {
			return nil
		}
		return v.ValidateAuthorityRrs
	}).(CheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type CheckSettingsDnsValidateAdditionalRr struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// CheckSettingsDnsValidateAdditionalRrInput is an input type that accepts CheckSettingsDnsValidateAdditionalRrArgs and CheckSettingsDnsValidateAdditionalRrOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAdditionalRrInput` via:
//
//	CheckSettingsDnsValidateAdditionalRrArgs{...}
type CheckSettingsDnsValidateAdditionalRrInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAdditionalRrOutput() CheckSettingsDnsValidateAdditionalRrOutput
	ToCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Context) CheckSettingsDnsValidateAdditionalRrOutput
}

type CheckSettingsDnsValidateAdditionalRrArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (CheckSettingsDnsValidateAdditionalRrArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i CheckSettingsDnsValidateAdditionalRrArgs) ToCheckSettingsDnsValidateAdditionalRrOutput() CheckSettingsDnsValidateAdditionalRrOutput {
	return i.ToCheckSettingsDnsValidateAdditionalRrOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAdditionalRrArgs) ToCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAdditionalRrOutput)
}

// CheckSettingsDnsValidateAdditionalRrArrayInput is an input type that accepts CheckSettingsDnsValidateAdditionalRrArray and CheckSettingsDnsValidateAdditionalRrArrayOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAdditionalRrArrayInput` via:
//
//	CheckSettingsDnsValidateAdditionalRrArray{ CheckSettingsDnsValidateAdditionalRrArgs{...} }
type CheckSettingsDnsValidateAdditionalRrArrayInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAdditionalRrArrayOutput() CheckSettingsDnsValidateAdditionalRrArrayOutput
	ToCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Context) CheckSettingsDnsValidateAdditionalRrArrayOutput
}

type CheckSettingsDnsValidateAdditionalRrArray []CheckSettingsDnsValidateAdditionalRrInput

func (CheckSettingsDnsValidateAdditionalRrArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (i CheckSettingsDnsValidateAdditionalRrArray) ToCheckSettingsDnsValidateAdditionalRrArrayOutput() CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return i.ToCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAdditionalRrArray) ToCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAdditionalRrArrayOutput)
}

type CheckSettingsDnsValidateAdditionalRrOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAdditionalRrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAdditionalRrOutput) ToCheckSettingsDnsValidateAdditionalRrOutput() CheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

func (o CheckSettingsDnsValidateAdditionalRrOutput) ToCheckSettingsDnsValidateAdditionalRrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAdditionalRrOutput {
	return o
}

// Fail if value matches regex.
func (o CheckSettingsDnsValidateAdditionalRrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAdditionalRr) []string { return v.FailIfMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o CheckSettingsDnsValidateAdditionalRrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAdditionalRr) []string { return v.FailIfNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

type CheckSettingsDnsValidateAdditionalRrArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAdditionalRrArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsDnsValidateAdditionalRr)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAdditionalRrArrayOutput) ToCheckSettingsDnsValidateAdditionalRrArrayOutput() CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o CheckSettingsDnsValidateAdditionalRrArrayOutput) ToCheckSettingsDnsValidateAdditionalRrArrayOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAdditionalRrArrayOutput {
	return o
}

func (o CheckSettingsDnsValidateAdditionalRrArrayOutput) Index(i pulumi.IntInput) CheckSettingsDnsValidateAdditionalRrOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsDnsValidateAdditionalRr {
		return vs[0].([]CheckSettingsDnsValidateAdditionalRr)[vs[1].(int)]
	}).(CheckSettingsDnsValidateAdditionalRrOutput)
}

type CheckSettingsDnsValidateAnswerRrs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// CheckSettingsDnsValidateAnswerRrsInput is an input type that accepts CheckSettingsDnsValidateAnswerRrsArgs and CheckSettingsDnsValidateAnswerRrsOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAnswerRrsInput` via:
//
//	CheckSettingsDnsValidateAnswerRrsArgs{...}
type CheckSettingsDnsValidateAnswerRrsInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAnswerRrsOutput() CheckSettingsDnsValidateAnswerRrsOutput
	ToCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Context) CheckSettingsDnsValidateAnswerRrsOutput
}

type CheckSettingsDnsValidateAnswerRrsArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (CheckSettingsDnsValidateAnswerRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i CheckSettingsDnsValidateAnswerRrsArgs) ToCheckSettingsDnsValidateAnswerRrsOutput() CheckSettingsDnsValidateAnswerRrsOutput {
	return i.ToCheckSettingsDnsValidateAnswerRrsOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAnswerRrsArgs) ToCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAnswerRrsOutput)
}

func (i CheckSettingsDnsValidateAnswerRrsArgs) ToCheckSettingsDnsValidateAnswerRrsPtrOutput() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAnswerRrsArgs) ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAnswerRrsOutput).ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx)
}

// CheckSettingsDnsValidateAnswerRrsPtrInput is an input type that accepts CheckSettingsDnsValidateAnswerRrsArgs, CheckSettingsDnsValidateAnswerRrsPtr and CheckSettingsDnsValidateAnswerRrsPtrOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAnswerRrsPtrInput` via:
//
//	        CheckSettingsDnsValidateAnswerRrsArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsDnsValidateAnswerRrsPtrInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAnswerRrsPtrOutput() CheckSettingsDnsValidateAnswerRrsPtrOutput
	ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Context) CheckSettingsDnsValidateAnswerRrsPtrOutput
}

type checkSettingsDnsValidateAnswerRrsPtrType CheckSettingsDnsValidateAnswerRrsArgs

func CheckSettingsDnsValidateAnswerRrsPtr(v *CheckSettingsDnsValidateAnswerRrsArgs) CheckSettingsDnsValidateAnswerRrsPtrInput {
	return (*checkSettingsDnsValidateAnswerRrsPtrType)(v)
}

func (*checkSettingsDnsValidateAnswerRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (i *checkSettingsDnsValidateAnswerRrsPtrType) ToCheckSettingsDnsValidateAnswerRrsPtrOutput() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return i.ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (i *checkSettingsDnsValidateAnswerRrsPtrType) ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAnswerRrsPtrOutput)
}

type CheckSettingsDnsValidateAnswerRrsOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAnswerRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAnswerRrsOutput) ToCheckSettingsDnsValidateAnswerRrsOutput() CheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o CheckSettingsDnsValidateAnswerRrsOutput) ToCheckSettingsDnsValidateAnswerRrsOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsOutput {
	return o
}

func (o CheckSettingsDnsValidateAnswerRrsOutput) ToCheckSettingsDnsValidateAnswerRrsPtrOutput() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(context.Background())
}

func (o CheckSettingsDnsValidateAnswerRrsOutput) ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsDnsValidateAnswerRrs) *CheckSettingsDnsValidateAnswerRrs {
		return &v
	}).(CheckSettingsDnsValidateAnswerRrsPtrOutput)
}

// Fail if value matches regex.
func (o CheckSettingsDnsValidateAnswerRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAnswerRrs) []string { return v.FailIfMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o CheckSettingsDnsValidateAnswerRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAnswerRrs) []string { return v.FailIfNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

type CheckSettingsDnsValidateAnswerRrsPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAnswerRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDnsValidateAnswerRrs)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAnswerRrsPtrOutput) ToCheckSettingsDnsValidateAnswerRrsPtrOutput() CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o CheckSettingsDnsValidateAnswerRrsPtrOutput) ToCheckSettingsDnsValidateAnswerRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAnswerRrsPtrOutput {
	return o
}

func (o CheckSettingsDnsValidateAnswerRrsPtrOutput) Elem() CheckSettingsDnsValidateAnswerRrsOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAnswerRrs) CheckSettingsDnsValidateAnswerRrs {
		if v != nil {
			return *v
		}
		var ret CheckSettingsDnsValidateAnswerRrs
		return ret
	}).(CheckSettingsDnsValidateAnswerRrsOutput)
}

// Fail if value matches regex.
func (o CheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o CheckSettingsDnsValidateAnswerRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAnswerRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type CheckSettingsDnsValidateAuthorityRrs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps []string `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps []string `pulumi:"failIfNotMatchesRegexps"`
}

// CheckSettingsDnsValidateAuthorityRrsInput is an input type that accepts CheckSettingsDnsValidateAuthorityRrsArgs and CheckSettingsDnsValidateAuthorityRrsOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAuthorityRrsInput` via:
//
//	CheckSettingsDnsValidateAuthorityRrsArgs{...}
type CheckSettingsDnsValidateAuthorityRrsInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAuthorityRrsOutput() CheckSettingsDnsValidateAuthorityRrsOutput
	ToCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Context) CheckSettingsDnsValidateAuthorityRrsOutput
}

type CheckSettingsDnsValidateAuthorityRrsArgs struct {
	// Fail if value matches regex.
	FailIfMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfMatchesRegexps"`
	// Fail if value does not match regex.
	FailIfNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfNotMatchesRegexps"`
}

func (CheckSettingsDnsValidateAuthorityRrsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i CheckSettingsDnsValidateAuthorityRrsArgs) ToCheckSettingsDnsValidateAuthorityRrsOutput() CheckSettingsDnsValidateAuthorityRrsOutput {
	return i.ToCheckSettingsDnsValidateAuthorityRrsOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAuthorityRrsArgs) ToCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAuthorityRrsOutput)
}

func (i CheckSettingsDnsValidateAuthorityRrsArgs) ToCheckSettingsDnsValidateAuthorityRrsPtrOutput() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i CheckSettingsDnsValidateAuthorityRrsArgs) ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAuthorityRrsOutput).ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx)
}

// CheckSettingsDnsValidateAuthorityRrsPtrInput is an input type that accepts CheckSettingsDnsValidateAuthorityRrsArgs, CheckSettingsDnsValidateAuthorityRrsPtr and CheckSettingsDnsValidateAuthorityRrsPtrOutput values.
// You can construct a concrete instance of `CheckSettingsDnsValidateAuthorityRrsPtrInput` via:
//
//	        CheckSettingsDnsValidateAuthorityRrsArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsDnsValidateAuthorityRrsPtrInput interface {
	pulumi.Input

	ToCheckSettingsDnsValidateAuthorityRrsPtrOutput() CheckSettingsDnsValidateAuthorityRrsPtrOutput
	ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Context) CheckSettingsDnsValidateAuthorityRrsPtrOutput
}

type checkSettingsDnsValidateAuthorityRrsPtrType CheckSettingsDnsValidateAuthorityRrsArgs

func CheckSettingsDnsValidateAuthorityRrsPtr(v *CheckSettingsDnsValidateAuthorityRrsArgs) CheckSettingsDnsValidateAuthorityRrsPtrInput {
	return (*checkSettingsDnsValidateAuthorityRrsPtrType)(v)
}

func (*checkSettingsDnsValidateAuthorityRrsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (i *checkSettingsDnsValidateAuthorityRrsPtrType) ToCheckSettingsDnsValidateAuthorityRrsPtrOutput() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return i.ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (i *checkSettingsDnsValidateAuthorityRrsPtrType) ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

type CheckSettingsDnsValidateAuthorityRrsOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAuthorityRrsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAuthorityRrsOutput) ToCheckSettingsDnsValidateAuthorityRrsOutput() CheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o CheckSettingsDnsValidateAuthorityRrsOutput) ToCheckSettingsDnsValidateAuthorityRrsOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsOutput {
	return o
}

func (o CheckSettingsDnsValidateAuthorityRrsOutput) ToCheckSettingsDnsValidateAuthorityRrsPtrOutput() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(context.Background())
}

func (o CheckSettingsDnsValidateAuthorityRrsOutput) ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsDnsValidateAuthorityRrs) *CheckSettingsDnsValidateAuthorityRrs {
		return &v
	}).(CheckSettingsDnsValidateAuthorityRrsPtrOutput)
}

// Fail if value matches regex.
func (o CheckSettingsDnsValidateAuthorityRrsOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAuthorityRrs) []string { return v.FailIfMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o CheckSettingsDnsValidateAuthorityRrsOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsDnsValidateAuthorityRrs) []string { return v.FailIfNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

type CheckSettingsDnsValidateAuthorityRrsPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsDnsValidateAuthorityRrsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsDnsValidateAuthorityRrs)(nil)).Elem()
}

func (o CheckSettingsDnsValidateAuthorityRrsPtrOutput) ToCheckSettingsDnsValidateAuthorityRrsPtrOutput() CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o CheckSettingsDnsValidateAuthorityRrsPtrOutput) ToCheckSettingsDnsValidateAuthorityRrsPtrOutputWithContext(ctx context.Context) CheckSettingsDnsValidateAuthorityRrsPtrOutput {
	return o
}

func (o CheckSettingsDnsValidateAuthorityRrsPtrOutput) Elem() CheckSettingsDnsValidateAuthorityRrsOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAuthorityRrs) CheckSettingsDnsValidateAuthorityRrs {
		if v != nil {
			return *v
		}
		var ret CheckSettingsDnsValidateAuthorityRrs
		return ret
	}).(CheckSettingsDnsValidateAuthorityRrsOutput)
}

// Fail if value matches regex.
func (o CheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Fail if value does not match regex.
func (o CheckSettingsDnsValidateAuthorityRrsPtrOutput) FailIfNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsDnsValidateAuthorityRrs) []string {
		if v == nil {
			return nil
		}
		return v.FailIfNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

type CheckSettingsGrpc struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// gRPC service.
	Service *string `pulumi:"service"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls *bool `pulumi:"tls"`
	// TLS config.
	TlsConfig *CheckSettingsGrpcTlsConfig `pulumi:"tlsConfig"`
}

// CheckSettingsGrpcInput is an input type that accepts CheckSettingsGrpcArgs and CheckSettingsGrpcOutput values.
// You can construct a concrete instance of `CheckSettingsGrpcInput` via:
//
//	CheckSettingsGrpcArgs{...}
type CheckSettingsGrpcInput interface {
	pulumi.Input

	ToCheckSettingsGrpcOutput() CheckSettingsGrpcOutput
	ToCheckSettingsGrpcOutputWithContext(context.Context) CheckSettingsGrpcOutput
}

type CheckSettingsGrpcArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// gRPC service.
	Service pulumi.StringPtrInput `pulumi:"service"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// TLS config.
	TlsConfig CheckSettingsGrpcTlsConfigPtrInput `pulumi:"tlsConfig"`
}

func (CheckSettingsGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsGrpc)(nil)).Elem()
}

func (i CheckSettingsGrpcArgs) ToCheckSettingsGrpcOutput() CheckSettingsGrpcOutput {
	return i.ToCheckSettingsGrpcOutputWithContext(context.Background())
}

func (i CheckSettingsGrpcArgs) ToCheckSettingsGrpcOutputWithContext(ctx context.Context) CheckSettingsGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcOutput)
}

func (i CheckSettingsGrpcArgs) ToCheckSettingsGrpcPtrOutput() CheckSettingsGrpcPtrOutput {
	return i.ToCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (i CheckSettingsGrpcArgs) ToCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcOutput).ToCheckSettingsGrpcPtrOutputWithContext(ctx)
}

// CheckSettingsGrpcPtrInput is an input type that accepts CheckSettingsGrpcArgs, CheckSettingsGrpcPtr and CheckSettingsGrpcPtrOutput values.
// You can construct a concrete instance of `CheckSettingsGrpcPtrInput` via:
//
//	        CheckSettingsGrpcArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsGrpcPtrInput interface {
	pulumi.Input

	ToCheckSettingsGrpcPtrOutput() CheckSettingsGrpcPtrOutput
	ToCheckSettingsGrpcPtrOutputWithContext(context.Context) CheckSettingsGrpcPtrOutput
}

type checkSettingsGrpcPtrType CheckSettingsGrpcArgs

func CheckSettingsGrpcPtr(v *CheckSettingsGrpcArgs) CheckSettingsGrpcPtrInput {
	return (*checkSettingsGrpcPtrType)(v)
}

func (*checkSettingsGrpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsGrpc)(nil)).Elem()
}

func (i *checkSettingsGrpcPtrType) ToCheckSettingsGrpcPtrOutput() CheckSettingsGrpcPtrOutput {
	return i.ToCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (i *checkSettingsGrpcPtrType) ToCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcPtrOutput)
}

type CheckSettingsGrpcOutput struct{ *pulumi.OutputState }

func (CheckSettingsGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsGrpc)(nil)).Elem()
}

func (o CheckSettingsGrpcOutput) ToCheckSettingsGrpcOutput() CheckSettingsGrpcOutput {
	return o
}

func (o CheckSettingsGrpcOutput) ToCheckSettingsGrpcOutputWithContext(ctx context.Context) CheckSettingsGrpcOutput {
	return o
}

func (o CheckSettingsGrpcOutput) ToCheckSettingsGrpcPtrOutput() CheckSettingsGrpcPtrOutput {
	return o.ToCheckSettingsGrpcPtrOutputWithContext(context.Background())
}

func (o CheckSettingsGrpcOutput) ToCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsGrpc) *CheckSettingsGrpc {
		return &v
	}).(CheckSettingsGrpcPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsGrpcOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpc) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// gRPC service.
func (o CheckSettingsGrpcOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpc) *string { return v.Service }).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o CheckSettingsGrpcOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpc) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o CheckSettingsGrpcOutput) TlsConfig() CheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpc) *CheckSettingsGrpcTlsConfig { return v.TlsConfig }).(CheckSettingsGrpcTlsConfigPtrOutput)
}

type CheckSettingsGrpcPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsGrpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsGrpc)(nil)).Elem()
}

func (o CheckSettingsGrpcPtrOutput) ToCheckSettingsGrpcPtrOutput() CheckSettingsGrpcPtrOutput {
	return o
}

func (o CheckSettingsGrpcPtrOutput) ToCheckSettingsGrpcPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcPtrOutput {
	return o
}

func (o CheckSettingsGrpcPtrOutput) Elem() CheckSettingsGrpcOutput {
	return o.ApplyT(func(v *CheckSettingsGrpc) CheckSettingsGrpc {
		if v != nil {
			return *v
		}
		var ret CheckSettingsGrpc
		return ret
	}).(CheckSettingsGrpcOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsGrpcPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpc) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// gRPC service.
func (o CheckSettingsGrpcPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpc) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o CheckSettingsGrpcPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpc) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o CheckSettingsGrpcPtrOutput) TlsConfig() CheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpc) *CheckSettingsGrpcTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(CheckSettingsGrpcTlsConfigPtrOutput)
}

type CheckSettingsGrpcTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// CheckSettingsGrpcTlsConfigInput is an input type that accepts CheckSettingsGrpcTlsConfigArgs and CheckSettingsGrpcTlsConfigOutput values.
// You can construct a concrete instance of `CheckSettingsGrpcTlsConfigInput` via:
//
//	CheckSettingsGrpcTlsConfigArgs{...}
type CheckSettingsGrpcTlsConfigInput interface {
	pulumi.Input

	ToCheckSettingsGrpcTlsConfigOutput() CheckSettingsGrpcTlsConfigOutput
	ToCheckSettingsGrpcTlsConfigOutputWithContext(context.Context) CheckSettingsGrpcTlsConfigOutput
}

type CheckSettingsGrpcTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (CheckSettingsGrpcTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (i CheckSettingsGrpcTlsConfigArgs) ToCheckSettingsGrpcTlsConfigOutput() CheckSettingsGrpcTlsConfigOutput {
	return i.ToCheckSettingsGrpcTlsConfigOutputWithContext(context.Background())
}

func (i CheckSettingsGrpcTlsConfigArgs) ToCheckSettingsGrpcTlsConfigOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcTlsConfigOutput)
}

func (i CheckSettingsGrpcTlsConfigArgs) ToCheckSettingsGrpcTlsConfigPtrOutput() CheckSettingsGrpcTlsConfigPtrOutput {
	return i.ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (i CheckSettingsGrpcTlsConfigArgs) ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcTlsConfigOutput).ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx)
}

// CheckSettingsGrpcTlsConfigPtrInput is an input type that accepts CheckSettingsGrpcTlsConfigArgs, CheckSettingsGrpcTlsConfigPtr and CheckSettingsGrpcTlsConfigPtrOutput values.
// You can construct a concrete instance of `CheckSettingsGrpcTlsConfigPtrInput` via:
//
//	        CheckSettingsGrpcTlsConfigArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsGrpcTlsConfigPtrInput interface {
	pulumi.Input

	ToCheckSettingsGrpcTlsConfigPtrOutput() CheckSettingsGrpcTlsConfigPtrOutput
	ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Context) CheckSettingsGrpcTlsConfigPtrOutput
}

type checkSettingsGrpcTlsConfigPtrType CheckSettingsGrpcTlsConfigArgs

func CheckSettingsGrpcTlsConfigPtr(v *CheckSettingsGrpcTlsConfigArgs) CheckSettingsGrpcTlsConfigPtrInput {
	return (*checkSettingsGrpcTlsConfigPtrType)(v)
}

func (*checkSettingsGrpcTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (i *checkSettingsGrpcTlsConfigPtrType) ToCheckSettingsGrpcTlsConfigPtrOutput() CheckSettingsGrpcTlsConfigPtrOutput {
	return i.ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (i *checkSettingsGrpcTlsConfigPtrType) ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsGrpcTlsConfigPtrOutput)
}

type CheckSettingsGrpcTlsConfigOutput struct{ *pulumi.OutputState }

func (CheckSettingsGrpcTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (o CheckSettingsGrpcTlsConfigOutput) ToCheckSettingsGrpcTlsConfigOutput() CheckSettingsGrpcTlsConfigOutput {
	return o
}

func (o CheckSettingsGrpcTlsConfigOutput) ToCheckSettingsGrpcTlsConfigOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigOutput {
	return o
}

func (o CheckSettingsGrpcTlsConfigOutput) ToCheckSettingsGrpcTlsConfigPtrOutput() CheckSettingsGrpcTlsConfigPtrOutput {
	return o.ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(context.Background())
}

func (o CheckSettingsGrpcTlsConfigOutput) ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsGrpcTlsConfig) *CheckSettingsGrpcTlsConfig {
		return &v
	}).(CheckSettingsGrpcTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsGrpcTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpcTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsGrpcTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpcTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsGrpcTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpcTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsGrpcTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpcTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsGrpcTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsGrpcTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type CheckSettingsGrpcTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsGrpcTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsGrpcTlsConfig)(nil)).Elem()
}

func (o CheckSettingsGrpcTlsConfigPtrOutput) ToCheckSettingsGrpcTlsConfigPtrOutput() CheckSettingsGrpcTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsGrpcTlsConfigPtrOutput) ToCheckSettingsGrpcTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsGrpcTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsGrpcTlsConfigPtrOutput) Elem() CheckSettingsGrpcTlsConfigOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) CheckSettingsGrpcTlsConfig {
		if v != nil {
			return *v
		}
		var ret CheckSettingsGrpcTlsConfig
		return ret
	}).(CheckSettingsGrpcTlsConfigOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsGrpcTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsGrpcTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsGrpcTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsGrpcTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsGrpcTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsGrpcTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsHttp struct {
	// Basic auth settings.
	BasicAuth *CheckSettingsHttpBasicAuth `pulumi:"basicAuth"`
	// Token for use with bearer authorization header.
	BearerToken *string `pulumi:"bearerToken"`
	// The body of the HTTP request used in probe.
	Body *string `pulumi:"body"`
	// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
	CacheBustingQueryParamName *string `pulumi:"cacheBustingQueryParamName"`
	// Check fails if the response body is not compressed using this compression algorithm. One of `none`, `identity`, `br`, `gzip`, `deflate`.
	Compression *string `pulumi:"compression"`
	// List of regexes. If any match the response body, the check will fail.
	FailIfBodyMatchesRegexps []string `pulumi:"failIfBodyMatchesRegexps"`
	// List of regexes. If any do not match the response body, the check will fail.
	FailIfBodyNotMatchesRegexps []string `pulumi:"failIfBodyNotMatchesRegexps"`
	// Check fails if headers match.
	FailIfHeaderMatchesRegexps []CheckSettingsHttpFailIfHeaderMatchesRegexp `pulumi:"failIfHeaderMatchesRegexps"`
	// Check fails if headers do not match.
	FailIfHeaderNotMatchesRegexps []CheckSettingsHttpFailIfHeaderNotMatchesRegexp `pulumi:"failIfHeaderNotMatchesRegexps"`
	// Fail if SSL is not present. Defaults to `false`.
	FailIfNotSsl *bool `pulumi:"failIfNotSsl"`
	// Fail if SSL is present. Defaults to `false`.
	FailIfSsl *bool `pulumi:"failIfSsl"`
	// The HTTP headers set for the probe.
	Headers []string `pulumi:"headers"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
	Method *string `pulumi:"method"`
	// Do not follow redirects. Defaults to `false`.
	NoFollowRedirects *bool `pulumi:"noFollowRedirects"`
	// The HTTP headers sent to the proxy URL
	ProxyConnectHeaders []string `pulumi:"proxyConnectHeaders"`
	// Proxy URL.
	ProxyUrl *string `pulumi:"proxyUrl"`
	// TLS config.
	TlsConfig *CheckSettingsHttpTlsConfig `pulumi:"tlsConfig"`
	// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
	ValidHttpVersions []string `pulumi:"validHttpVersions"`
	// Accepted status codes. If unset, defaults to 2xx.
	ValidStatusCodes []int `pulumi:"validStatusCodes"`
}

// CheckSettingsHttpInput is an input type that accepts CheckSettingsHttpArgs and CheckSettingsHttpOutput values.
// You can construct a concrete instance of `CheckSettingsHttpInput` via:
//
//	CheckSettingsHttpArgs{...}
type CheckSettingsHttpInput interface {
	pulumi.Input

	ToCheckSettingsHttpOutput() CheckSettingsHttpOutput
	ToCheckSettingsHttpOutputWithContext(context.Context) CheckSettingsHttpOutput
}

type CheckSettingsHttpArgs struct {
	// Basic auth settings.
	BasicAuth CheckSettingsHttpBasicAuthPtrInput `pulumi:"basicAuth"`
	// Token for use with bearer authorization header.
	BearerToken pulumi.StringPtrInput `pulumi:"bearerToken"`
	// The body of the HTTP request used in probe.
	Body pulumi.StringPtrInput `pulumi:"body"`
	// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
	CacheBustingQueryParamName pulumi.StringPtrInput `pulumi:"cacheBustingQueryParamName"`
	// Check fails if the response body is not compressed using this compression algorithm. One of `none`, `identity`, `br`, `gzip`, `deflate`.
	Compression pulumi.StringPtrInput `pulumi:"compression"`
	// List of regexes. If any match the response body, the check will fail.
	FailIfBodyMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfBodyMatchesRegexps"`
	// List of regexes. If any do not match the response body, the check will fail.
	FailIfBodyNotMatchesRegexps pulumi.StringArrayInput `pulumi:"failIfBodyNotMatchesRegexps"`
	// Check fails if headers match.
	FailIfHeaderMatchesRegexps CheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput `pulumi:"failIfHeaderMatchesRegexps"`
	// Check fails if headers do not match.
	FailIfHeaderNotMatchesRegexps CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput `pulumi:"failIfHeaderNotMatchesRegexps"`
	// Fail if SSL is not present. Defaults to `false`.
	FailIfNotSsl pulumi.BoolPtrInput `pulumi:"failIfNotSsl"`
	// Fail if SSL is present. Defaults to `false`.
	FailIfSsl pulumi.BoolPtrInput `pulumi:"failIfSsl"`
	// The HTTP headers set for the probe.
	Headers pulumi.StringArrayInput `pulumi:"headers"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// Do not follow redirects. Defaults to `false`.
	NoFollowRedirects pulumi.BoolPtrInput `pulumi:"noFollowRedirects"`
	// The HTTP headers sent to the proxy URL
	ProxyConnectHeaders pulumi.StringArrayInput `pulumi:"proxyConnectHeaders"`
	// Proxy URL.
	ProxyUrl pulumi.StringPtrInput `pulumi:"proxyUrl"`
	// TLS config.
	TlsConfig CheckSettingsHttpTlsConfigPtrInput `pulumi:"tlsConfig"`
	// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
	ValidHttpVersions pulumi.StringArrayInput `pulumi:"validHttpVersions"`
	// Accepted status codes. If unset, defaults to 2xx.
	ValidStatusCodes pulumi.IntArrayInput `pulumi:"validStatusCodes"`
}

func (CheckSettingsHttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttp)(nil)).Elem()
}

func (i CheckSettingsHttpArgs) ToCheckSettingsHttpOutput() CheckSettingsHttpOutput {
	return i.ToCheckSettingsHttpOutputWithContext(context.Background())
}

func (i CheckSettingsHttpArgs) ToCheckSettingsHttpOutputWithContext(ctx context.Context) CheckSettingsHttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpOutput)
}

func (i CheckSettingsHttpArgs) ToCheckSettingsHttpPtrOutput() CheckSettingsHttpPtrOutput {
	return i.ToCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i CheckSettingsHttpArgs) ToCheckSettingsHttpPtrOutputWithContext(ctx context.Context) CheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpOutput).ToCheckSettingsHttpPtrOutputWithContext(ctx)
}

// CheckSettingsHttpPtrInput is an input type that accepts CheckSettingsHttpArgs, CheckSettingsHttpPtr and CheckSettingsHttpPtrOutput values.
// You can construct a concrete instance of `CheckSettingsHttpPtrInput` via:
//
//	        CheckSettingsHttpArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsHttpPtrInput interface {
	pulumi.Input

	ToCheckSettingsHttpPtrOutput() CheckSettingsHttpPtrOutput
	ToCheckSettingsHttpPtrOutputWithContext(context.Context) CheckSettingsHttpPtrOutput
}

type checkSettingsHttpPtrType CheckSettingsHttpArgs

func CheckSettingsHttpPtr(v *CheckSettingsHttpArgs) CheckSettingsHttpPtrInput {
	return (*checkSettingsHttpPtrType)(v)
}

func (*checkSettingsHttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttp)(nil)).Elem()
}

func (i *checkSettingsHttpPtrType) ToCheckSettingsHttpPtrOutput() CheckSettingsHttpPtrOutput {
	return i.ToCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (i *checkSettingsHttpPtrType) ToCheckSettingsHttpPtrOutputWithContext(ctx context.Context) CheckSettingsHttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpPtrOutput)
}

type CheckSettingsHttpOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttp)(nil)).Elem()
}

func (o CheckSettingsHttpOutput) ToCheckSettingsHttpOutput() CheckSettingsHttpOutput {
	return o
}

func (o CheckSettingsHttpOutput) ToCheckSettingsHttpOutputWithContext(ctx context.Context) CheckSettingsHttpOutput {
	return o
}

func (o CheckSettingsHttpOutput) ToCheckSettingsHttpPtrOutput() CheckSettingsHttpPtrOutput {
	return o.ToCheckSettingsHttpPtrOutputWithContext(context.Background())
}

func (o CheckSettingsHttpOutput) ToCheckSettingsHttpPtrOutputWithContext(ctx context.Context) CheckSettingsHttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsHttp) *CheckSettingsHttp {
		return &v
	}).(CheckSettingsHttpPtrOutput)
}

// Basic auth settings.
func (o CheckSettingsHttpOutput) BasicAuth() CheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *CheckSettingsHttpBasicAuth { return v.BasicAuth }).(CheckSettingsHttpBasicAuthPtrOutput)
}

// Token for use with bearer authorization header.
func (o CheckSettingsHttpOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.BearerToken }).(pulumi.StringPtrOutput)
}

// The body of the HTTP request used in probe.
func (o CheckSettingsHttpOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
func (o CheckSettingsHttpOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.CacheBustingQueryParamName }).(pulumi.StringPtrOutput)
}

// Check fails if the response body is not compressed using this compression algorithm. One of `none`, `identity`, `br`, `gzip`, `deflate`.
func (o CheckSettingsHttpOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.Compression }).(pulumi.StringPtrOutput)
}

// List of regexes. If any match the response body, the check will fail.
func (o CheckSettingsHttpOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []string { return v.FailIfBodyMatchesRegexps }).(pulumi.StringArrayOutput)
}

// List of regexes. If any do not match the response body, the check will fail.
func (o CheckSettingsHttpOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []string { return v.FailIfBodyNotMatchesRegexps }).(pulumi.StringArrayOutput)
}

// Check fails if headers match.
func (o CheckSettingsHttpOutput) FailIfHeaderMatchesRegexps() CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []CheckSettingsHttpFailIfHeaderMatchesRegexp {
		return v.FailIfHeaderMatchesRegexps
	}).(CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

// Check fails if headers do not match.
func (o CheckSettingsHttpOutput) FailIfHeaderNotMatchesRegexps() CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []CheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return v.FailIfHeaderNotMatchesRegexps
	}).(CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

// Fail if SSL is not present. Defaults to `false`.
func (o CheckSettingsHttpOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *bool { return v.FailIfNotSsl }).(pulumi.BoolPtrOutput)
}

// Fail if SSL is present. Defaults to `false`.
func (o CheckSettingsHttpOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *bool { return v.FailIfSsl }).(pulumi.BoolPtrOutput)
}

// The HTTP headers set for the probe.
func (o CheckSettingsHttpOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []string { return v.Headers }).(pulumi.StringArrayOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsHttpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
func (o CheckSettingsHttpOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// Do not follow redirects. Defaults to `false`.
func (o CheckSettingsHttpOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *bool { return v.NoFollowRedirects }).(pulumi.BoolPtrOutput)
}

// The HTTP headers sent to the proxy URL
func (o CheckSettingsHttpOutput) ProxyConnectHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []string { return v.ProxyConnectHeaders }).(pulumi.StringArrayOutput)
}

// Proxy URL.
func (o CheckSettingsHttpOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

// TLS config.
func (o CheckSettingsHttpOutput) TlsConfig() CheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttp) *CheckSettingsHttpTlsConfig { return v.TlsConfig }).(CheckSettingsHttpTlsConfigPtrOutput)
}

// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
func (o CheckSettingsHttpOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []string { return v.ValidHttpVersions }).(pulumi.StringArrayOutput)
}

// Accepted status codes. If unset, defaults to 2xx.
func (o CheckSettingsHttpOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v CheckSettingsHttp) []int { return v.ValidStatusCodes }).(pulumi.IntArrayOutput)
}

type CheckSettingsHttpPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttp)(nil)).Elem()
}

func (o CheckSettingsHttpPtrOutput) ToCheckSettingsHttpPtrOutput() CheckSettingsHttpPtrOutput {
	return o
}

func (o CheckSettingsHttpPtrOutput) ToCheckSettingsHttpPtrOutputWithContext(ctx context.Context) CheckSettingsHttpPtrOutput {
	return o
}

func (o CheckSettingsHttpPtrOutput) Elem() CheckSettingsHttpOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) CheckSettingsHttp {
		if v != nil {
			return *v
		}
		var ret CheckSettingsHttp
		return ret
	}).(CheckSettingsHttpOutput)
}

// Basic auth settings.
func (o CheckSettingsHttpPtrOutput) BasicAuth() CheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *CheckSettingsHttpBasicAuth {
		if v == nil {
			return nil
		}
		return v.BasicAuth
	}).(CheckSettingsHttpBasicAuthPtrOutput)
}

// Token for use with bearer authorization header.
func (o CheckSettingsHttpPtrOutput) BearerToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.BearerToken
	}).(pulumi.StringPtrOutput)
}

// The body of the HTTP request used in probe.
func (o CheckSettingsHttpPtrOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Body
	}).(pulumi.StringPtrOutput)
}

// The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.
func (o CheckSettingsHttpPtrOutput) CacheBustingQueryParamName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.CacheBustingQueryParamName
	}).(pulumi.StringPtrOutput)
}

// Check fails if the response body is not compressed using this compression algorithm. One of `none`, `identity`, `br`, `gzip`, `deflate`.
func (o CheckSettingsHttpPtrOutput) Compression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Compression
	}).(pulumi.StringPtrOutput)
}

// List of regexes. If any match the response body, the check will fail.
func (o CheckSettingsHttpPtrOutput) FailIfBodyMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// List of regexes. If any do not match the response body, the check will fail.
func (o CheckSettingsHttpPtrOutput) FailIfBodyNotMatchesRegexps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.FailIfBodyNotMatchesRegexps
	}).(pulumi.StringArrayOutput)
}

// Check fails if headers match.
func (o CheckSettingsHttpPtrOutput) FailIfHeaderMatchesRegexps() CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []CheckSettingsHttpFailIfHeaderMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderMatchesRegexps
	}).(CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

// Check fails if headers do not match.
func (o CheckSettingsHttpPtrOutput) FailIfHeaderNotMatchesRegexps() CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []CheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		if v == nil {
			return nil
		}
		return v.FailIfHeaderNotMatchesRegexps
	}).(CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

// Fail if SSL is not present. Defaults to `false`.
func (o CheckSettingsHttpPtrOutput) FailIfNotSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfNotSsl
	}).(pulumi.BoolPtrOutput)
}

// Fail if SSL is present. Defaults to `false`.
func (o CheckSettingsHttpPtrOutput) FailIfSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.FailIfSsl
	}).(pulumi.BoolPtrOutput)
}

// The HTTP headers set for the probe.
func (o CheckSettingsHttpPtrOutput) Headers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(pulumi.StringArrayOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsHttpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE` Defaults to `GET`.
func (o CheckSettingsHttpPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// Do not follow redirects. Defaults to `false`.
func (o CheckSettingsHttpPtrOutput) NoFollowRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *bool {
		if v == nil {
			return nil
		}
		return v.NoFollowRedirects
	}).(pulumi.BoolPtrOutput)
}

// The HTTP headers sent to the proxy URL
func (o CheckSettingsHttpPtrOutput) ProxyConnectHeaders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.ProxyConnectHeaders
	}).(pulumi.StringArrayOutput)
}

// Proxy URL.
func (o CheckSettingsHttpPtrOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUrl
	}).(pulumi.StringPtrOutput)
}

// TLS config.
func (o CheckSettingsHttpPtrOutput) TlsConfig() CheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) *CheckSettingsHttpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(CheckSettingsHttpTlsConfigPtrOutput)
}

// List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`
func (o CheckSettingsHttpPtrOutput) ValidHttpVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []string {
		if v == nil {
			return nil
		}
		return v.ValidHttpVersions
	}).(pulumi.StringArrayOutput)
}

// Accepted status codes. If unset, defaults to 2xx.
func (o CheckSettingsHttpPtrOutput) ValidStatusCodes() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *CheckSettingsHttp) []int {
		if v == nil {
			return nil
		}
		return v.ValidStatusCodes
	}).(pulumi.IntArrayOutput)
}

type CheckSettingsHttpBasicAuth struct {
	// Basic auth password.
	Password string `pulumi:"password"`
	// Basic auth username.
	Username string `pulumi:"username"`
}

// CheckSettingsHttpBasicAuthInput is an input type that accepts CheckSettingsHttpBasicAuthArgs and CheckSettingsHttpBasicAuthOutput values.
// You can construct a concrete instance of `CheckSettingsHttpBasicAuthInput` via:
//
//	CheckSettingsHttpBasicAuthArgs{...}
type CheckSettingsHttpBasicAuthInput interface {
	pulumi.Input

	ToCheckSettingsHttpBasicAuthOutput() CheckSettingsHttpBasicAuthOutput
	ToCheckSettingsHttpBasicAuthOutputWithContext(context.Context) CheckSettingsHttpBasicAuthOutput
}

type CheckSettingsHttpBasicAuthArgs struct {
	// Basic auth password.
	Password pulumi.StringInput `pulumi:"password"`
	// Basic auth username.
	Username pulumi.StringInput `pulumi:"username"`
}

func (CheckSettingsHttpBasicAuthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i CheckSettingsHttpBasicAuthArgs) ToCheckSettingsHttpBasicAuthOutput() CheckSettingsHttpBasicAuthOutput {
	return i.ToCheckSettingsHttpBasicAuthOutputWithContext(context.Background())
}

func (i CheckSettingsHttpBasicAuthArgs) ToCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpBasicAuthOutput)
}

func (i CheckSettingsHttpBasicAuthArgs) ToCheckSettingsHttpBasicAuthPtrOutput() CheckSettingsHttpBasicAuthPtrOutput {
	return i.ToCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i CheckSettingsHttpBasicAuthArgs) ToCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpBasicAuthOutput).ToCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx)
}

// CheckSettingsHttpBasicAuthPtrInput is an input type that accepts CheckSettingsHttpBasicAuthArgs, CheckSettingsHttpBasicAuthPtr and CheckSettingsHttpBasicAuthPtrOutput values.
// You can construct a concrete instance of `CheckSettingsHttpBasicAuthPtrInput` via:
//
//	        CheckSettingsHttpBasicAuthArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsHttpBasicAuthPtrInput interface {
	pulumi.Input

	ToCheckSettingsHttpBasicAuthPtrOutput() CheckSettingsHttpBasicAuthPtrOutput
	ToCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Context) CheckSettingsHttpBasicAuthPtrOutput
}

type checkSettingsHttpBasicAuthPtrType CheckSettingsHttpBasicAuthArgs

func CheckSettingsHttpBasicAuthPtr(v *CheckSettingsHttpBasicAuthArgs) CheckSettingsHttpBasicAuthPtrInput {
	return (*checkSettingsHttpBasicAuthPtrType)(v)
}

func (*checkSettingsHttpBasicAuthPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (i *checkSettingsHttpBasicAuthPtrType) ToCheckSettingsHttpBasicAuthPtrOutput() CheckSettingsHttpBasicAuthPtrOutput {
	return i.ToCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (i *checkSettingsHttpBasicAuthPtrType) ToCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpBasicAuthPtrOutput)
}

type CheckSettingsHttpBasicAuthOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpBasicAuthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o CheckSettingsHttpBasicAuthOutput) ToCheckSettingsHttpBasicAuthOutput() CheckSettingsHttpBasicAuthOutput {
	return o
}

func (o CheckSettingsHttpBasicAuthOutput) ToCheckSettingsHttpBasicAuthOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthOutput {
	return o
}

func (o CheckSettingsHttpBasicAuthOutput) ToCheckSettingsHttpBasicAuthPtrOutput() CheckSettingsHttpBasicAuthPtrOutput {
	return o.ToCheckSettingsHttpBasicAuthPtrOutputWithContext(context.Background())
}

func (o CheckSettingsHttpBasicAuthOutput) ToCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsHttpBasicAuth) *CheckSettingsHttpBasicAuth {
		return &v
	}).(CheckSettingsHttpBasicAuthPtrOutput)
}

// Basic auth password.
func (o CheckSettingsHttpBasicAuthOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpBasicAuth) string { return v.Password }).(pulumi.StringOutput)
}

// Basic auth username.
func (o CheckSettingsHttpBasicAuthOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpBasicAuth) string { return v.Username }).(pulumi.StringOutput)
}

type CheckSettingsHttpBasicAuthPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpBasicAuthPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttpBasicAuth)(nil)).Elem()
}

func (o CheckSettingsHttpBasicAuthPtrOutput) ToCheckSettingsHttpBasicAuthPtrOutput() CheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o CheckSettingsHttpBasicAuthPtrOutput) ToCheckSettingsHttpBasicAuthPtrOutputWithContext(ctx context.Context) CheckSettingsHttpBasicAuthPtrOutput {
	return o
}

func (o CheckSettingsHttpBasicAuthPtrOutput) Elem() CheckSettingsHttpBasicAuthOutput {
	return o.ApplyT(func(v *CheckSettingsHttpBasicAuth) CheckSettingsHttpBasicAuth {
		if v != nil {
			return *v
		}
		var ret CheckSettingsHttpBasicAuth
		return ret
	}).(CheckSettingsHttpBasicAuthOutput)
}

// Basic auth password.
func (o CheckSettingsHttpBasicAuthPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Password
	}).(pulumi.StringPtrOutput)
}

// Basic auth username.
func (o CheckSettingsHttpBasicAuthPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpBasicAuth) *string {
		if v == nil {
			return nil
		}
		return &v.Username
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsHttpFailIfHeaderMatchesRegexp struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Header name.
	Header string `pulumi:"header"`
	// Regex that header value should match.
	Regexp string `pulumi:"regexp"`
}

// CheckSettingsHttpFailIfHeaderMatchesRegexpInput is an input type that accepts CheckSettingsHttpFailIfHeaderMatchesRegexpArgs and CheckSettingsHttpFailIfHeaderMatchesRegexpOutput values.
// You can construct a concrete instance of `CheckSettingsHttpFailIfHeaderMatchesRegexpInput` via:
//
//	CheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...}
type CheckSettingsHttpFailIfHeaderMatchesRegexpInput interface {
	pulumi.Input

	ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpOutput
	ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpOutput
}

type CheckSettingsHttpFailIfHeaderMatchesRegexpArgs struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	// Header name.
	Header pulumi.StringInput `pulumi:"header"`
	// Regex that header value should match.
	Regexp pulumi.StringInput `pulumi:"regexp"`
}

func (CheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i CheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return i.ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(context.Background())
}

func (i CheckSettingsHttpFailIfHeaderMatchesRegexpArgs) ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

// CheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput is an input type that accepts CheckSettingsHttpFailIfHeaderMatchesRegexpArray and CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `CheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput` via:
//
//	CheckSettingsHttpFailIfHeaderMatchesRegexpArray{ CheckSettingsHttpFailIfHeaderMatchesRegexpArgs{...} }
type CheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput interface {
	pulumi.Input

	ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
	ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput
}

type CheckSettingsHttpFailIfHeaderMatchesRegexpArray []CheckSettingsHttpFailIfHeaderMatchesRegexpInput

func (CheckSettingsHttpFailIfHeaderMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (i CheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return i.ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i CheckSettingsHttpFailIfHeaderMatchesRegexpArray) ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput)
}

type CheckSettingsHttpFailIfHeaderMatchesRegexpOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) ToCheckSettingsHttpFailIfHeaderMatchesRegexpOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return o
}

// Allow header to be missing from responses. Defaults to `false`.
func (o CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

// Header name.
func (o CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

// Regex that header value should match.
func (o CheckSettingsHttpFailIfHeaderMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsHttpFailIfHeaderMatchesRegexp)(nil)).Elem()
}

func (o CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) ToCheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput) Index(i pulumi.IntInput) CheckSettingsHttpFailIfHeaderMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsHttpFailIfHeaderMatchesRegexp {
		return vs[0].([]CheckSettingsHttpFailIfHeaderMatchesRegexp)[vs[1].(int)]
	}).(CheckSettingsHttpFailIfHeaderMatchesRegexpOutput)
}

type CheckSettingsHttpFailIfHeaderNotMatchesRegexp struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing *bool `pulumi:"allowMissing"`
	// Header name.
	Header string `pulumi:"header"`
	// Regex that header value should match.
	Regexp string `pulumi:"regexp"`
}

// CheckSettingsHttpFailIfHeaderNotMatchesRegexpInput is an input type that accepts CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs and CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput values.
// You can construct a concrete instance of `CheckSettingsHttpFailIfHeaderNotMatchesRegexpInput` via:
//
//	CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...}
type CheckSettingsHttpFailIfHeaderNotMatchesRegexpInput interface {
	pulumi.Input

	ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
	ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput
}

type CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs struct {
	// Allow header to be missing from responses. Defaults to `false`.
	AllowMissing pulumi.BoolPtrInput `pulumi:"allowMissing"`
	// Header name.
	Header pulumi.StringInput `pulumi:"header"`
	// Regex that header value should match.
	Regexp pulumi.StringInput `pulumi:"regexp"`
}

func (CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return i.ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(context.Background())
}

func (i CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

// CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput is an input type that accepts CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray and CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput values.
// You can construct a concrete instance of `CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput` via:
//
//	CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{ CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{...} }
type CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput interface {
	pulumi.Input

	ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
	ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput
}

type CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray []CheckSettingsHttpFailIfHeaderNotMatchesRegexpInput

func (CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (i CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return i.ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(context.Background())
}

func (i CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput)
}

type CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return o
}

// Allow header to be missing from responses. Defaults to `false`.
func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) AllowMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderNotMatchesRegexp) *bool { return v.AllowMissing }).(pulumi.BoolPtrOutput)
}

// Header name.
func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Header() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Header }).(pulumi.StringOutput)
}

// Regex that header value should match.
func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput) Regexp() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsHttpFailIfHeaderNotMatchesRegexp) string { return v.Regexp }).(pulumi.StringOutput)
}

type CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsHttpFailIfHeaderNotMatchesRegexp)(nil)).Elem()
}

func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput() CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) ToCheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutputWithContext(ctx context.Context) CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput {
	return o
}

func (o CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput) Index(i pulumi.IntInput) CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsHttpFailIfHeaderNotMatchesRegexp {
		return vs[0].([]CheckSettingsHttpFailIfHeaderNotMatchesRegexp)[vs[1].(int)]
	}).(CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput)
}

type CheckSettingsHttpTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// CheckSettingsHttpTlsConfigInput is an input type that accepts CheckSettingsHttpTlsConfigArgs and CheckSettingsHttpTlsConfigOutput values.
// You can construct a concrete instance of `CheckSettingsHttpTlsConfigInput` via:
//
//	CheckSettingsHttpTlsConfigArgs{...}
type CheckSettingsHttpTlsConfigInput interface {
	pulumi.Input

	ToCheckSettingsHttpTlsConfigOutput() CheckSettingsHttpTlsConfigOutput
	ToCheckSettingsHttpTlsConfigOutputWithContext(context.Context) CheckSettingsHttpTlsConfigOutput
}

type CheckSettingsHttpTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (CheckSettingsHttpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i CheckSettingsHttpTlsConfigArgs) ToCheckSettingsHttpTlsConfigOutput() CheckSettingsHttpTlsConfigOutput {
	return i.ToCheckSettingsHttpTlsConfigOutputWithContext(context.Background())
}

func (i CheckSettingsHttpTlsConfigArgs) ToCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpTlsConfigOutput)
}

func (i CheckSettingsHttpTlsConfigArgs) ToCheckSettingsHttpTlsConfigPtrOutput() CheckSettingsHttpTlsConfigPtrOutput {
	return i.ToCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i CheckSettingsHttpTlsConfigArgs) ToCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpTlsConfigOutput).ToCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx)
}

// CheckSettingsHttpTlsConfigPtrInput is an input type that accepts CheckSettingsHttpTlsConfigArgs, CheckSettingsHttpTlsConfigPtr and CheckSettingsHttpTlsConfigPtrOutput values.
// You can construct a concrete instance of `CheckSettingsHttpTlsConfigPtrInput` via:
//
//	        CheckSettingsHttpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsHttpTlsConfigPtrInput interface {
	pulumi.Input

	ToCheckSettingsHttpTlsConfigPtrOutput() CheckSettingsHttpTlsConfigPtrOutput
	ToCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Context) CheckSettingsHttpTlsConfigPtrOutput
}

type checkSettingsHttpTlsConfigPtrType CheckSettingsHttpTlsConfigArgs

func CheckSettingsHttpTlsConfigPtr(v *CheckSettingsHttpTlsConfigArgs) CheckSettingsHttpTlsConfigPtrInput {
	return (*checkSettingsHttpTlsConfigPtrType)(v)
}

func (*checkSettingsHttpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (i *checkSettingsHttpTlsConfigPtrType) ToCheckSettingsHttpTlsConfigPtrOutput() CheckSettingsHttpTlsConfigPtrOutput {
	return i.ToCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *checkSettingsHttpTlsConfigPtrType) ToCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsHttpTlsConfigPtrOutput)
}

type CheckSettingsHttpTlsConfigOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o CheckSettingsHttpTlsConfigOutput) ToCheckSettingsHttpTlsConfigOutput() CheckSettingsHttpTlsConfigOutput {
	return o
}

func (o CheckSettingsHttpTlsConfigOutput) ToCheckSettingsHttpTlsConfigOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigOutput {
	return o
}

func (o CheckSettingsHttpTlsConfigOutput) ToCheckSettingsHttpTlsConfigPtrOutput() CheckSettingsHttpTlsConfigPtrOutput {
	return o.ToCheckSettingsHttpTlsConfigPtrOutputWithContext(context.Background())
}

func (o CheckSettingsHttpTlsConfigOutput) ToCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsHttpTlsConfig) *CheckSettingsHttpTlsConfig {
		return &v
	}).(CheckSettingsHttpTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsHttpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsHttpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsHttpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsHttpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsHttpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsHttpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type CheckSettingsHttpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsHttpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsHttpTlsConfig)(nil)).Elem()
}

func (o CheckSettingsHttpTlsConfigPtrOutput) ToCheckSettingsHttpTlsConfigPtrOutput() CheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsHttpTlsConfigPtrOutput) ToCheckSettingsHttpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsHttpTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsHttpTlsConfigPtrOutput) Elem() CheckSettingsHttpTlsConfigOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) CheckSettingsHttpTlsConfig {
		if v != nil {
			return *v
		}
		var ret CheckSettingsHttpTlsConfig
		return ret
	}).(CheckSettingsHttpTlsConfigOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsHttpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsHttpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsHttpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsHttpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsHttpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsHttpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsMultihttp struct {
	Entries []CheckSettingsMultihttpEntry `pulumi:"entries"`
}

// CheckSettingsMultihttpInput is an input type that accepts CheckSettingsMultihttpArgs and CheckSettingsMultihttpOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpInput` via:
//
//	CheckSettingsMultihttpArgs{...}
type CheckSettingsMultihttpInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpOutput() CheckSettingsMultihttpOutput
	ToCheckSettingsMultihttpOutputWithContext(context.Context) CheckSettingsMultihttpOutput
}

type CheckSettingsMultihttpArgs struct {
	Entries CheckSettingsMultihttpEntryArrayInput `pulumi:"entries"`
}

func (CheckSettingsMultihttpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttp)(nil)).Elem()
}

func (i CheckSettingsMultihttpArgs) ToCheckSettingsMultihttpOutput() CheckSettingsMultihttpOutput {
	return i.ToCheckSettingsMultihttpOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpArgs) ToCheckSettingsMultihttpOutputWithContext(ctx context.Context) CheckSettingsMultihttpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpOutput)
}

func (i CheckSettingsMultihttpArgs) ToCheckSettingsMultihttpPtrOutput() CheckSettingsMultihttpPtrOutput {
	return i.ToCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpArgs) ToCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpOutput).ToCheckSettingsMultihttpPtrOutputWithContext(ctx)
}

// CheckSettingsMultihttpPtrInput is an input type that accepts CheckSettingsMultihttpArgs, CheckSettingsMultihttpPtr and CheckSettingsMultihttpPtrOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpPtrInput` via:
//
//	        CheckSettingsMultihttpArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsMultihttpPtrInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpPtrOutput() CheckSettingsMultihttpPtrOutput
	ToCheckSettingsMultihttpPtrOutputWithContext(context.Context) CheckSettingsMultihttpPtrOutput
}

type checkSettingsMultihttpPtrType CheckSettingsMultihttpArgs

func CheckSettingsMultihttpPtr(v *CheckSettingsMultihttpArgs) CheckSettingsMultihttpPtrInput {
	return (*checkSettingsMultihttpPtrType)(v)
}

func (*checkSettingsMultihttpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsMultihttp)(nil)).Elem()
}

func (i *checkSettingsMultihttpPtrType) ToCheckSettingsMultihttpPtrOutput() CheckSettingsMultihttpPtrOutput {
	return i.ToCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (i *checkSettingsMultihttpPtrType) ToCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpPtrOutput)
}

type CheckSettingsMultihttpOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttp)(nil)).Elem()
}

func (o CheckSettingsMultihttpOutput) ToCheckSettingsMultihttpOutput() CheckSettingsMultihttpOutput {
	return o
}

func (o CheckSettingsMultihttpOutput) ToCheckSettingsMultihttpOutputWithContext(ctx context.Context) CheckSettingsMultihttpOutput {
	return o
}

func (o CheckSettingsMultihttpOutput) ToCheckSettingsMultihttpPtrOutput() CheckSettingsMultihttpPtrOutput {
	return o.ToCheckSettingsMultihttpPtrOutputWithContext(context.Background())
}

func (o CheckSettingsMultihttpOutput) ToCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsMultihttp) *CheckSettingsMultihttp {
		return &v
	}).(CheckSettingsMultihttpPtrOutput)
}

func (o CheckSettingsMultihttpOutput) Entries() CheckSettingsMultihttpEntryArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttp) []CheckSettingsMultihttpEntry { return v.Entries }).(CheckSettingsMultihttpEntryArrayOutput)
}

type CheckSettingsMultihttpPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsMultihttp)(nil)).Elem()
}

func (o CheckSettingsMultihttpPtrOutput) ToCheckSettingsMultihttpPtrOutput() CheckSettingsMultihttpPtrOutput {
	return o
}

func (o CheckSettingsMultihttpPtrOutput) ToCheckSettingsMultihttpPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpPtrOutput {
	return o
}

func (o CheckSettingsMultihttpPtrOutput) Elem() CheckSettingsMultihttpOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttp) CheckSettingsMultihttp {
		if v != nil {
			return *v
		}
		var ret CheckSettingsMultihttp
		return ret
	}).(CheckSettingsMultihttpOutput)
}

func (o CheckSettingsMultihttpPtrOutput) Entries() CheckSettingsMultihttpEntryArrayOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttp) []CheckSettingsMultihttpEntry {
		if v == nil {
			return nil
		}
		return v.Entries
	}).(CheckSettingsMultihttpEntryArrayOutput)
}

type CheckSettingsMultihttpEntry struct {
	// Assertions to make on the request response
	Assertions []CheckSettingsMultihttpEntryAssertion `pulumi:"assertions"`
	// An individual MultiHTTP request
	Request *CheckSettingsMultihttpEntryRequest `pulumi:"request"`
	// Variables to extract from the request response
	Variables []CheckSettingsMultihttpEntryVariable `pulumi:"variables"`
}

// CheckSettingsMultihttpEntryInput is an input type that accepts CheckSettingsMultihttpEntryArgs and CheckSettingsMultihttpEntryOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryInput` via:
//
//	CheckSettingsMultihttpEntryArgs{...}
type CheckSettingsMultihttpEntryInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryOutput() CheckSettingsMultihttpEntryOutput
	ToCheckSettingsMultihttpEntryOutputWithContext(context.Context) CheckSettingsMultihttpEntryOutput
}

type CheckSettingsMultihttpEntryArgs struct {
	// Assertions to make on the request response
	Assertions CheckSettingsMultihttpEntryAssertionArrayInput `pulumi:"assertions"`
	// An individual MultiHTTP request
	Request CheckSettingsMultihttpEntryRequestPtrInput `pulumi:"request"`
	// Variables to extract from the request response
	Variables CheckSettingsMultihttpEntryVariableArrayInput `pulumi:"variables"`
}

func (CheckSettingsMultihttpEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntry)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryArgs) ToCheckSettingsMultihttpEntryOutput() CheckSettingsMultihttpEntryOutput {
	return i.ToCheckSettingsMultihttpEntryOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryArgs) ToCheckSettingsMultihttpEntryOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryOutput)
}

// CheckSettingsMultihttpEntryArrayInput is an input type that accepts CheckSettingsMultihttpEntryArray and CheckSettingsMultihttpEntryArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryArrayInput` via:
//
//	CheckSettingsMultihttpEntryArray{ CheckSettingsMultihttpEntryArgs{...} }
type CheckSettingsMultihttpEntryArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryArrayOutput() CheckSettingsMultihttpEntryArrayOutput
	ToCheckSettingsMultihttpEntryArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryArrayOutput
}

type CheckSettingsMultihttpEntryArray []CheckSettingsMultihttpEntryInput

func (CheckSettingsMultihttpEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntry)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryArray) ToCheckSettingsMultihttpEntryArrayOutput() CheckSettingsMultihttpEntryArrayOutput {
	return i.ToCheckSettingsMultihttpEntryArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryArray) ToCheckSettingsMultihttpEntryArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryArrayOutput)
}

type CheckSettingsMultihttpEntryOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntry)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryOutput) ToCheckSettingsMultihttpEntryOutput() CheckSettingsMultihttpEntryOutput {
	return o
}

func (o CheckSettingsMultihttpEntryOutput) ToCheckSettingsMultihttpEntryOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryOutput {
	return o
}

// Assertions to make on the request response
func (o CheckSettingsMultihttpEntryOutput) Assertions() CheckSettingsMultihttpEntryAssertionArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntry) []CheckSettingsMultihttpEntryAssertion { return v.Assertions }).(CheckSettingsMultihttpEntryAssertionArrayOutput)
}

// An individual MultiHTTP request
func (o CheckSettingsMultihttpEntryOutput) Request() CheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntry) *CheckSettingsMultihttpEntryRequest { return v.Request }).(CheckSettingsMultihttpEntryRequestPtrOutput)
}

// Variables to extract from the request response
func (o CheckSettingsMultihttpEntryOutput) Variables() CheckSettingsMultihttpEntryVariableArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntry) []CheckSettingsMultihttpEntryVariable { return v.Variables }).(CheckSettingsMultihttpEntryVariableArrayOutput)
}

type CheckSettingsMultihttpEntryArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntry)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryArrayOutput) ToCheckSettingsMultihttpEntryArrayOutput() CheckSettingsMultihttpEntryArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryArrayOutput) ToCheckSettingsMultihttpEntryArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntry {
		return vs[0].([]CheckSettingsMultihttpEntry)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryOutput)
}

type CheckSettingsMultihttpEntryAssertion struct {
	// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
	Condition *string `pulumi:"condition"`
	// The expression of the assertion. Should start with $.
	Expression *string `pulumi:"expression"`
	// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
	Subject *string `pulumi:"subject"`
	// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
	Type string `pulumi:"type"`
	// The value of the assertion
	Value *string `pulumi:"value"`
}

// CheckSettingsMultihttpEntryAssertionInput is an input type that accepts CheckSettingsMultihttpEntryAssertionArgs and CheckSettingsMultihttpEntryAssertionOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryAssertionInput` via:
//
//	CheckSettingsMultihttpEntryAssertionArgs{...}
type CheckSettingsMultihttpEntryAssertionInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryAssertionOutput() CheckSettingsMultihttpEntryAssertionOutput
	ToCheckSettingsMultihttpEntryAssertionOutputWithContext(context.Context) CheckSettingsMultihttpEntryAssertionOutput
}

type CheckSettingsMultihttpEntryAssertionArgs struct {
	// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The expression of the assertion. Should start with $.
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
	Type pulumi.StringInput `pulumi:"type"`
	// The value of the assertion
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (CheckSettingsMultihttpEntryAssertionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryAssertionArgs) ToCheckSettingsMultihttpEntryAssertionOutput() CheckSettingsMultihttpEntryAssertionOutput {
	return i.ToCheckSettingsMultihttpEntryAssertionOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryAssertionArgs) ToCheckSettingsMultihttpEntryAssertionOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryAssertionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryAssertionOutput)
}

// CheckSettingsMultihttpEntryAssertionArrayInput is an input type that accepts CheckSettingsMultihttpEntryAssertionArray and CheckSettingsMultihttpEntryAssertionArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryAssertionArrayInput` via:
//
//	CheckSettingsMultihttpEntryAssertionArray{ CheckSettingsMultihttpEntryAssertionArgs{...} }
type CheckSettingsMultihttpEntryAssertionArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryAssertionArrayOutput() CheckSettingsMultihttpEntryAssertionArrayOutput
	ToCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryAssertionArrayOutput
}

type CheckSettingsMultihttpEntryAssertionArray []CheckSettingsMultihttpEntryAssertionInput

func (CheckSettingsMultihttpEntryAssertionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryAssertionArray) ToCheckSettingsMultihttpEntryAssertionArrayOutput() CheckSettingsMultihttpEntryAssertionArrayOutput {
	return i.ToCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryAssertionArray) ToCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryAssertionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryAssertionArrayOutput)
}

type CheckSettingsMultihttpEntryAssertionOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryAssertionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryAssertionOutput) ToCheckSettingsMultihttpEntryAssertionOutput() CheckSettingsMultihttpEntryAssertionOutput {
	return o
}

func (o CheckSettingsMultihttpEntryAssertionOutput) ToCheckSettingsMultihttpEntryAssertionOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryAssertionOutput {
	return o
}

// The condition of the assertion: NOT*CONTAINS, EQUALS, STARTS*WITH, ENDS*WITH, TYPE*OF, CONTAINS
func (o CheckSettingsMultihttpEntryAssertionOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryAssertion) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The expression of the assertion. Should start with $.
func (o CheckSettingsMultihttpEntryAssertionOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryAssertion) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The subject of the assertion: RESPONSE*HEADERS, HTTP*STATUS*CODE, RESPONSE*BODY
func (o CheckSettingsMultihttpEntryAssertionOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryAssertion) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The type of assertion to make: TEXT, JSON*PATH*VALUE, JSON*PATH*ASSERTION, REGEX_ASSERTION
func (o CheckSettingsMultihttpEntryAssertionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryAssertion) string { return v.Type }).(pulumi.StringOutput)
}

// The value of the assertion
func (o CheckSettingsMultihttpEntryAssertionOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryAssertion) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type CheckSettingsMultihttpEntryAssertionArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryAssertionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryAssertion)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryAssertionArrayOutput) ToCheckSettingsMultihttpEntryAssertionArrayOutput() CheckSettingsMultihttpEntryAssertionArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryAssertionArrayOutput) ToCheckSettingsMultihttpEntryAssertionArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryAssertionArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryAssertionArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryAssertionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntryAssertion {
		return vs[0].([]CheckSettingsMultihttpEntryAssertion)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryAssertionOutput)
}

type CheckSettingsMultihttpEntryRequest struct {
	// The body of the HTTP request used in probe.
	Bodies []CheckSettingsMultihttpEntryRequestBody `pulumi:"bodies"`
	// The headers to send with the request
	Headers []CheckSettingsMultihttpEntryRequestHeader `pulumi:"headers"`
	// The HTTP method to use
	Method string `pulumi:"method"`
	// Query fields to send with the request
	QueryFields []CheckSettingsMultihttpEntryRequestQueryField `pulumi:"queryFields"`
	// The URL for the request
	Url string `pulumi:"url"`
}

// CheckSettingsMultihttpEntryRequestInput is an input type that accepts CheckSettingsMultihttpEntryRequestArgs and CheckSettingsMultihttpEntryRequestOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestInput` via:
//
//	CheckSettingsMultihttpEntryRequestArgs{...}
type CheckSettingsMultihttpEntryRequestInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestOutput() CheckSettingsMultihttpEntryRequestOutput
	ToCheckSettingsMultihttpEntryRequestOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestOutput
}

type CheckSettingsMultihttpEntryRequestArgs struct {
	// The body of the HTTP request used in probe.
	Bodies CheckSettingsMultihttpEntryRequestBodyArrayInput `pulumi:"bodies"`
	// The headers to send with the request
	Headers CheckSettingsMultihttpEntryRequestHeaderArrayInput `pulumi:"headers"`
	// The HTTP method to use
	Method pulumi.StringInput `pulumi:"method"`
	// Query fields to send with the request
	QueryFields CheckSettingsMultihttpEntryRequestQueryFieldArrayInput `pulumi:"queryFields"`
	// The URL for the request
	Url pulumi.StringInput `pulumi:"url"`
}

func (CheckSettingsMultihttpEntryRequestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestArgs) ToCheckSettingsMultihttpEntryRequestOutput() CheckSettingsMultihttpEntryRequestOutput {
	return i.ToCheckSettingsMultihttpEntryRequestOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestArgs) ToCheckSettingsMultihttpEntryRequestOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestOutput)
}

func (i CheckSettingsMultihttpEntryRequestArgs) ToCheckSettingsMultihttpEntryRequestPtrOutput() CheckSettingsMultihttpEntryRequestPtrOutput {
	return i.ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestArgs) ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestOutput).ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx)
}

// CheckSettingsMultihttpEntryRequestPtrInput is an input type that accepts CheckSettingsMultihttpEntryRequestArgs, CheckSettingsMultihttpEntryRequestPtr and CheckSettingsMultihttpEntryRequestPtrOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestPtrInput` via:
//
//	        CheckSettingsMultihttpEntryRequestArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsMultihttpEntryRequestPtrInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestPtrOutput() CheckSettingsMultihttpEntryRequestPtrOutput
	ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestPtrOutput
}

type checkSettingsMultihttpEntryRequestPtrType CheckSettingsMultihttpEntryRequestArgs

func CheckSettingsMultihttpEntryRequestPtr(v *CheckSettingsMultihttpEntryRequestArgs) CheckSettingsMultihttpEntryRequestPtrInput {
	return (*checkSettingsMultihttpEntryRequestPtrType)(v)
}

func (*checkSettingsMultihttpEntryRequestPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (i *checkSettingsMultihttpEntryRequestPtrType) ToCheckSettingsMultihttpEntryRequestPtrOutput() CheckSettingsMultihttpEntryRequestPtrOutput {
	return i.ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (i *checkSettingsMultihttpEntryRequestPtrType) ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestPtrOutput)
}

type CheckSettingsMultihttpEntryRequestOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestOutput) ToCheckSettingsMultihttpEntryRequestOutput() CheckSettingsMultihttpEntryRequestOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestOutput) ToCheckSettingsMultihttpEntryRequestOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestOutput) ToCheckSettingsMultihttpEntryRequestPtrOutput() CheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(context.Background())
}

func (o CheckSettingsMultihttpEntryRequestOutput) ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsMultihttpEntryRequest) *CheckSettingsMultihttpEntryRequest {
		return &v
	}).(CheckSettingsMultihttpEntryRequestPtrOutput)
}

// The body of the HTTP request used in probe.
func (o CheckSettingsMultihttpEntryRequestOutput) Bodies() CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestBody { return v.Bodies }).(CheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

// The headers to send with the request
func (o CheckSettingsMultihttpEntryRequestOutput) Headers() CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestHeader {
		return v.Headers
	}).(CheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

// The HTTP method to use
func (o CheckSettingsMultihttpEntryRequestOutput) Method() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequest) string { return v.Method }).(pulumi.StringOutput)
}

// Query fields to send with the request
func (o CheckSettingsMultihttpEntryRequestOutput) QueryFields() CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestQueryField {
		return v.QueryFields
	}).(CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

// The URL for the request
func (o CheckSettingsMultihttpEntryRequestOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequest) string { return v.Url }).(pulumi.StringOutput)
}

type CheckSettingsMultihttpEntryRequestPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsMultihttpEntryRequest)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestPtrOutput) ToCheckSettingsMultihttpEntryRequestPtrOutput() CheckSettingsMultihttpEntryRequestPtrOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestPtrOutput) ToCheckSettingsMultihttpEntryRequestPtrOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestPtrOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestPtrOutput) Elem() CheckSettingsMultihttpEntryRequestOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) CheckSettingsMultihttpEntryRequest {
		if v != nil {
			return *v
		}
		var ret CheckSettingsMultihttpEntryRequest
		return ret
	}).(CheckSettingsMultihttpEntryRequestOutput)
}

// The body of the HTTP request used in probe.
func (o CheckSettingsMultihttpEntryRequestPtrOutput) Bodies() CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestBody {
		if v == nil {
			return nil
		}
		return v.Bodies
	}).(CheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

// The headers to send with the request
func (o CheckSettingsMultihttpEntryRequestPtrOutput) Headers() CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestHeader {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(CheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

// The HTTP method to use
func (o CheckSettingsMultihttpEntryRequestPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Method
	}).(pulumi.StringPtrOutput)
}

// Query fields to send with the request
func (o CheckSettingsMultihttpEntryRequestPtrOutput) QueryFields() CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) []CheckSettingsMultihttpEntryRequestQueryField {
		if v == nil {
			return nil
		}
		return v.QueryFields
	}).(CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

// The URL for the request
func (o CheckSettingsMultihttpEntryRequestPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsMultihttpEntryRequest) *string {
		if v == nil {
			return nil
		}
		return &v.Url
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsMultihttpEntryRequestBody struct {
	// The content encoding of the body
	ContentEncoding *string `pulumi:"contentEncoding"`
	// The content type of the body
	ContentType *string `pulumi:"contentType"`
	// The body payload
	Payload *string `pulumi:"payload"`
}

// CheckSettingsMultihttpEntryRequestBodyInput is an input type that accepts CheckSettingsMultihttpEntryRequestBodyArgs and CheckSettingsMultihttpEntryRequestBodyOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestBodyInput` via:
//
//	CheckSettingsMultihttpEntryRequestBodyArgs{...}
type CheckSettingsMultihttpEntryRequestBodyInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestBodyOutput() CheckSettingsMultihttpEntryRequestBodyOutput
	ToCheckSettingsMultihttpEntryRequestBodyOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestBodyOutput
}

type CheckSettingsMultihttpEntryRequestBodyArgs struct {
	// The content encoding of the body
	ContentEncoding pulumi.StringPtrInput `pulumi:"contentEncoding"`
	// The content type of the body
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The body payload
	Payload pulumi.StringPtrInput `pulumi:"payload"`
}

func (CheckSettingsMultihttpEntryRequestBodyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestBodyArgs) ToCheckSettingsMultihttpEntryRequestBodyOutput() CheckSettingsMultihttpEntryRequestBodyOutput {
	return i.ToCheckSettingsMultihttpEntryRequestBodyOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestBodyArgs) ToCheckSettingsMultihttpEntryRequestBodyOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestBodyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestBodyOutput)
}

// CheckSettingsMultihttpEntryRequestBodyArrayInput is an input type that accepts CheckSettingsMultihttpEntryRequestBodyArray and CheckSettingsMultihttpEntryRequestBodyArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestBodyArrayInput` via:
//
//	CheckSettingsMultihttpEntryRequestBodyArray{ CheckSettingsMultihttpEntryRequestBodyArgs{...} }
type CheckSettingsMultihttpEntryRequestBodyArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestBodyArrayOutput() CheckSettingsMultihttpEntryRequestBodyArrayOutput
	ToCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestBodyArrayOutput
}

type CheckSettingsMultihttpEntryRequestBodyArray []CheckSettingsMultihttpEntryRequestBodyInput

func (CheckSettingsMultihttpEntryRequestBodyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestBodyArray) ToCheckSettingsMultihttpEntryRequestBodyArrayOutput() CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return i.ToCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestBodyArray) ToCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestBodyArrayOutput)
}

type CheckSettingsMultihttpEntryRequestBodyOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestBodyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestBodyOutput) ToCheckSettingsMultihttpEntryRequestBodyOutput() CheckSettingsMultihttpEntryRequestBodyOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestBodyOutput) ToCheckSettingsMultihttpEntryRequestBodyOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestBodyOutput {
	return o
}

// The content encoding of the body
func (o CheckSettingsMultihttpEntryRequestBodyOutput) ContentEncoding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestBody) *string { return v.ContentEncoding }).(pulumi.StringPtrOutput)
}

// The content type of the body
func (o CheckSettingsMultihttpEntryRequestBodyOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestBody) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The body payload
func (o CheckSettingsMultihttpEntryRequestBodyOutput) Payload() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestBody) *string { return v.Payload }).(pulumi.StringPtrOutput)
}

type CheckSettingsMultihttpEntryRequestBodyArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestBodyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestBody)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestBodyArrayOutput) ToCheckSettingsMultihttpEntryRequestBodyArrayOutput() CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestBodyArrayOutput) ToCheckSettingsMultihttpEntryRequestBodyArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestBodyArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestBodyArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryRequestBodyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntryRequestBody {
		return vs[0].([]CheckSettingsMultihttpEntryRequestBody)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryRequestBodyOutput)
}

type CheckSettingsMultihttpEntryRequestHeader struct {
	// Name of the header to send
	Name string `pulumi:"name"`
	// Value of the header to send
	Value string `pulumi:"value"`
}

// CheckSettingsMultihttpEntryRequestHeaderInput is an input type that accepts CheckSettingsMultihttpEntryRequestHeaderArgs and CheckSettingsMultihttpEntryRequestHeaderOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestHeaderInput` via:
//
//	CheckSettingsMultihttpEntryRequestHeaderArgs{...}
type CheckSettingsMultihttpEntryRequestHeaderInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestHeaderOutput() CheckSettingsMultihttpEntryRequestHeaderOutput
	ToCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestHeaderOutput
}

type CheckSettingsMultihttpEntryRequestHeaderArgs struct {
	// Name of the header to send
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the header to send
	Value pulumi.StringInput `pulumi:"value"`
}

func (CheckSettingsMultihttpEntryRequestHeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestHeaderArgs) ToCheckSettingsMultihttpEntryRequestHeaderOutput() CheckSettingsMultihttpEntryRequestHeaderOutput {
	return i.ToCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestHeaderArgs) ToCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestHeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestHeaderOutput)
}

// CheckSettingsMultihttpEntryRequestHeaderArrayInput is an input type that accepts CheckSettingsMultihttpEntryRequestHeaderArray and CheckSettingsMultihttpEntryRequestHeaderArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestHeaderArrayInput` via:
//
//	CheckSettingsMultihttpEntryRequestHeaderArray{ CheckSettingsMultihttpEntryRequestHeaderArgs{...} }
type CheckSettingsMultihttpEntryRequestHeaderArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestHeaderArrayOutput() CheckSettingsMultihttpEntryRequestHeaderArrayOutput
	ToCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestHeaderArrayOutput
}

type CheckSettingsMultihttpEntryRequestHeaderArray []CheckSettingsMultihttpEntryRequestHeaderInput

func (CheckSettingsMultihttpEntryRequestHeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestHeaderArray) ToCheckSettingsMultihttpEntryRequestHeaderArrayOutput() CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return i.ToCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestHeaderArray) ToCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestHeaderArrayOutput)
}

type CheckSettingsMultihttpEntryRequestHeaderOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestHeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestHeaderOutput) ToCheckSettingsMultihttpEntryRequestHeaderOutput() CheckSettingsMultihttpEntryRequestHeaderOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestHeaderOutput) ToCheckSettingsMultihttpEntryRequestHeaderOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestHeaderOutput {
	return o
}

// Name of the header to send
func (o CheckSettingsMultihttpEntryRequestHeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestHeader) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the header to send
func (o CheckSettingsMultihttpEntryRequestHeaderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestHeader) string { return v.Value }).(pulumi.StringOutput)
}

type CheckSettingsMultihttpEntryRequestHeaderArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestHeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestHeader)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestHeaderArrayOutput) ToCheckSettingsMultihttpEntryRequestHeaderArrayOutput() CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestHeaderArrayOutput) ToCheckSettingsMultihttpEntryRequestHeaderArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestHeaderArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestHeaderArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryRequestHeaderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntryRequestHeader {
		return vs[0].([]CheckSettingsMultihttpEntryRequestHeader)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryRequestHeaderOutput)
}

type CheckSettingsMultihttpEntryRequestQueryField struct {
	// Name of the query field to send
	Name string `pulumi:"name"`
	// Value of the query field to send
	Value string `pulumi:"value"`
}

// CheckSettingsMultihttpEntryRequestQueryFieldInput is an input type that accepts CheckSettingsMultihttpEntryRequestQueryFieldArgs and CheckSettingsMultihttpEntryRequestQueryFieldOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestQueryFieldInput` via:
//
//	CheckSettingsMultihttpEntryRequestQueryFieldArgs{...}
type CheckSettingsMultihttpEntryRequestQueryFieldInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestQueryFieldOutput() CheckSettingsMultihttpEntryRequestQueryFieldOutput
	ToCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestQueryFieldOutput
}

type CheckSettingsMultihttpEntryRequestQueryFieldArgs struct {
	// Name of the query field to send
	Name pulumi.StringInput `pulumi:"name"`
	// Value of the query field to send
	Value pulumi.StringInput `pulumi:"value"`
}

func (CheckSettingsMultihttpEntryRequestQueryFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestQueryFieldArgs) ToCheckSettingsMultihttpEntryRequestQueryFieldOutput() CheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return i.ToCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestQueryFieldArgs) ToCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestQueryFieldOutput)
}

// CheckSettingsMultihttpEntryRequestQueryFieldArrayInput is an input type that accepts CheckSettingsMultihttpEntryRequestQueryFieldArray and CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryRequestQueryFieldArrayInput` via:
//
//	CheckSettingsMultihttpEntryRequestQueryFieldArray{ CheckSettingsMultihttpEntryRequestQueryFieldArgs{...} }
type CheckSettingsMultihttpEntryRequestQueryFieldArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput
	ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput
}

type CheckSettingsMultihttpEntryRequestQueryFieldArray []CheckSettingsMultihttpEntryRequestQueryFieldInput

func (CheckSettingsMultihttpEntryRequestQueryFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryRequestQueryFieldArray) ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return i.ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryRequestQueryFieldArray) ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput)
}

type CheckSettingsMultihttpEntryRequestQueryFieldOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestQueryFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestQueryFieldOutput) ToCheckSettingsMultihttpEntryRequestQueryFieldOutput() CheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestQueryFieldOutput) ToCheckSettingsMultihttpEntryRequestQueryFieldOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return o
}

// Name of the query field to send
func (o CheckSettingsMultihttpEntryRequestQueryFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestQueryField) string { return v.Name }).(pulumi.StringOutput)
}

// Value of the query field to send
func (o CheckSettingsMultihttpEntryRequestQueryFieldOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryRequestQueryField) string { return v.Value }).(pulumi.StringOutput)
}

type CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryRequestQueryField)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutput() CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) ToCheckSettingsMultihttpEntryRequestQueryFieldArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryRequestQueryFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntryRequestQueryField {
		return vs[0].([]CheckSettingsMultihttpEntryRequestQueryField)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryRequestQueryFieldOutput)
}

type CheckSettingsMultihttpEntryVariable struct {
	// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
	Attribute *string `pulumi:"attribute"`
	// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
	Expression *string `pulumi:"expression"`
	// The name of the variable to extract
	Name *string `pulumi:"name"`
	// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
	Type string `pulumi:"type"`
}

// CheckSettingsMultihttpEntryVariableInput is an input type that accepts CheckSettingsMultihttpEntryVariableArgs and CheckSettingsMultihttpEntryVariableOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryVariableInput` via:
//
//	CheckSettingsMultihttpEntryVariableArgs{...}
type CheckSettingsMultihttpEntryVariableInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryVariableOutput() CheckSettingsMultihttpEntryVariableOutput
	ToCheckSettingsMultihttpEntryVariableOutputWithContext(context.Context) CheckSettingsMultihttpEntryVariableOutput
}

type CheckSettingsMultihttpEntryVariableArgs struct {
	// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
	Attribute pulumi.StringPtrInput `pulumi:"attribute"`
	// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
	Expression pulumi.StringPtrInput `pulumi:"expression"`
	// The name of the variable to extract
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
	Type pulumi.StringInput `pulumi:"type"`
}

func (CheckSettingsMultihttpEntryVariableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryVariableArgs) ToCheckSettingsMultihttpEntryVariableOutput() CheckSettingsMultihttpEntryVariableOutput {
	return i.ToCheckSettingsMultihttpEntryVariableOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryVariableArgs) ToCheckSettingsMultihttpEntryVariableOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryVariableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryVariableOutput)
}

// CheckSettingsMultihttpEntryVariableArrayInput is an input type that accepts CheckSettingsMultihttpEntryVariableArray and CheckSettingsMultihttpEntryVariableArrayOutput values.
// You can construct a concrete instance of `CheckSettingsMultihttpEntryVariableArrayInput` via:
//
//	CheckSettingsMultihttpEntryVariableArray{ CheckSettingsMultihttpEntryVariableArgs{...} }
type CheckSettingsMultihttpEntryVariableArrayInput interface {
	pulumi.Input

	ToCheckSettingsMultihttpEntryVariableArrayOutput() CheckSettingsMultihttpEntryVariableArrayOutput
	ToCheckSettingsMultihttpEntryVariableArrayOutputWithContext(context.Context) CheckSettingsMultihttpEntryVariableArrayOutput
}

type CheckSettingsMultihttpEntryVariableArray []CheckSettingsMultihttpEntryVariableInput

func (CheckSettingsMultihttpEntryVariableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (i CheckSettingsMultihttpEntryVariableArray) ToCheckSettingsMultihttpEntryVariableArrayOutput() CheckSettingsMultihttpEntryVariableArrayOutput {
	return i.ToCheckSettingsMultihttpEntryVariableArrayOutputWithContext(context.Background())
}

func (i CheckSettingsMultihttpEntryVariableArray) ToCheckSettingsMultihttpEntryVariableArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryVariableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsMultihttpEntryVariableArrayOutput)
}

type CheckSettingsMultihttpEntryVariableOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryVariableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryVariableOutput) ToCheckSettingsMultihttpEntryVariableOutput() CheckSettingsMultihttpEntryVariableOutput {
	return o
}

func (o CheckSettingsMultihttpEntryVariableOutput) ToCheckSettingsMultihttpEntryVariableOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryVariableOutput {
	return o
}

// The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR
func (o CheckSettingsMultihttpEntryVariableOutput) Attribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryVariable) *string { return v.Attribute }).(pulumi.StringPtrOutput)
}

// The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX
func (o CheckSettingsMultihttpEntryVariableOutput) Expression() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryVariable) *string { return v.Expression }).(pulumi.StringPtrOutput)
}

// The name of the variable to extract
func (o CheckSettingsMultihttpEntryVariableOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryVariable) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The method of finding the variable value to extract. JSON*PATH, REGEX, CSS*SELECTOR
func (o CheckSettingsMultihttpEntryVariableOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsMultihttpEntryVariable) string { return v.Type }).(pulumi.StringOutput)
}

type CheckSettingsMultihttpEntryVariableArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsMultihttpEntryVariableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsMultihttpEntryVariable)(nil)).Elem()
}

func (o CheckSettingsMultihttpEntryVariableArrayOutput) ToCheckSettingsMultihttpEntryVariableArrayOutput() CheckSettingsMultihttpEntryVariableArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryVariableArrayOutput) ToCheckSettingsMultihttpEntryVariableArrayOutputWithContext(ctx context.Context) CheckSettingsMultihttpEntryVariableArrayOutput {
	return o
}

func (o CheckSettingsMultihttpEntryVariableArrayOutput) Index(i pulumi.IntInput) CheckSettingsMultihttpEntryVariableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsMultihttpEntryVariable {
		return vs[0].([]CheckSettingsMultihttpEntryVariable)[vs[1].(int)]
	}).(CheckSettingsMultihttpEntryVariableOutput)
}

type CheckSettingsPing struct {
	// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
	DontFragment *bool `pulumi:"dontFragment"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// Payload size. Defaults to `0`.
	PayloadSize *int `pulumi:"payloadSize"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
}

// CheckSettingsPingInput is an input type that accepts CheckSettingsPingArgs and CheckSettingsPingOutput values.
// You can construct a concrete instance of `CheckSettingsPingInput` via:
//
//	CheckSettingsPingArgs{...}
type CheckSettingsPingInput interface {
	pulumi.Input

	ToCheckSettingsPingOutput() CheckSettingsPingOutput
	ToCheckSettingsPingOutputWithContext(context.Context) CheckSettingsPingOutput
}

type CheckSettingsPingArgs struct {
	// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
	DontFragment pulumi.BoolPtrInput `pulumi:"dontFragment"`
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// Payload size. Defaults to `0`.
	PayloadSize pulumi.IntPtrInput `pulumi:"payloadSize"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
}

func (CheckSettingsPingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsPing)(nil)).Elem()
}

func (i CheckSettingsPingArgs) ToCheckSettingsPingOutput() CheckSettingsPingOutput {
	return i.ToCheckSettingsPingOutputWithContext(context.Background())
}

func (i CheckSettingsPingArgs) ToCheckSettingsPingOutputWithContext(ctx context.Context) CheckSettingsPingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsPingOutput)
}

func (i CheckSettingsPingArgs) ToCheckSettingsPingPtrOutput() CheckSettingsPingPtrOutput {
	return i.ToCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i CheckSettingsPingArgs) ToCheckSettingsPingPtrOutputWithContext(ctx context.Context) CheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsPingOutput).ToCheckSettingsPingPtrOutputWithContext(ctx)
}

// CheckSettingsPingPtrInput is an input type that accepts CheckSettingsPingArgs, CheckSettingsPingPtr and CheckSettingsPingPtrOutput values.
// You can construct a concrete instance of `CheckSettingsPingPtrInput` via:
//
//	        CheckSettingsPingArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsPingPtrInput interface {
	pulumi.Input

	ToCheckSettingsPingPtrOutput() CheckSettingsPingPtrOutput
	ToCheckSettingsPingPtrOutputWithContext(context.Context) CheckSettingsPingPtrOutput
}

type checkSettingsPingPtrType CheckSettingsPingArgs

func CheckSettingsPingPtr(v *CheckSettingsPingArgs) CheckSettingsPingPtrInput {
	return (*checkSettingsPingPtrType)(v)
}

func (*checkSettingsPingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsPing)(nil)).Elem()
}

func (i *checkSettingsPingPtrType) ToCheckSettingsPingPtrOutput() CheckSettingsPingPtrOutput {
	return i.ToCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (i *checkSettingsPingPtrType) ToCheckSettingsPingPtrOutputWithContext(ctx context.Context) CheckSettingsPingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsPingPtrOutput)
}

type CheckSettingsPingOutput struct{ *pulumi.OutputState }

func (CheckSettingsPingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsPing)(nil)).Elem()
}

func (o CheckSettingsPingOutput) ToCheckSettingsPingOutput() CheckSettingsPingOutput {
	return o
}

func (o CheckSettingsPingOutput) ToCheckSettingsPingOutputWithContext(ctx context.Context) CheckSettingsPingOutput {
	return o
}

func (o CheckSettingsPingOutput) ToCheckSettingsPingPtrOutput() CheckSettingsPingPtrOutput {
	return o.ToCheckSettingsPingPtrOutputWithContext(context.Background())
}

func (o CheckSettingsPingOutput) ToCheckSettingsPingPtrOutputWithContext(ctx context.Context) CheckSettingsPingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsPing) *CheckSettingsPing {
		return &v
	}).(CheckSettingsPingPtrOutput)
}

// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
func (o CheckSettingsPingOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsPing) *bool { return v.DontFragment }).(pulumi.BoolPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsPingOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsPing) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// Payload size. Defaults to `0`.
func (o CheckSettingsPingOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckSettingsPing) *int { return v.PayloadSize }).(pulumi.IntPtrOutput)
}

// Source IP address.
func (o CheckSettingsPingOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsPing) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

type CheckSettingsPingPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsPingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsPing)(nil)).Elem()
}

func (o CheckSettingsPingPtrOutput) ToCheckSettingsPingPtrOutput() CheckSettingsPingPtrOutput {
	return o
}

func (o CheckSettingsPingPtrOutput) ToCheckSettingsPingPtrOutputWithContext(ctx context.Context) CheckSettingsPingPtrOutput {
	return o
}

func (o CheckSettingsPingPtrOutput) Elem() CheckSettingsPingOutput {
	return o.ApplyT(func(v *CheckSettingsPing) CheckSettingsPing {
		if v != nil {
			return *v
		}
		var ret CheckSettingsPing
		return ret
	}).(CheckSettingsPingOutput)
}

// Set the DF-bit in the IP-header. Only works with ipV4. Defaults to `false`.
func (o CheckSettingsPingPtrOutput) DontFragment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsPing) *bool {
		if v == nil {
			return nil
		}
		return v.DontFragment
	}).(pulumi.BoolPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsPingPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// Payload size. Defaults to `0`.
func (o CheckSettingsPingPtrOutput) PayloadSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckSettingsPing) *int {
		if v == nil {
			return nil
		}
		return v.PayloadSize
	}).(pulumi.IntPtrOutput)
}

// Source IP address.
func (o CheckSettingsPingPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsPing) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsScripted struct {
	Script string `pulumi:"script"`
}

// CheckSettingsScriptedInput is an input type that accepts CheckSettingsScriptedArgs and CheckSettingsScriptedOutput values.
// You can construct a concrete instance of `CheckSettingsScriptedInput` via:
//
//	CheckSettingsScriptedArgs{...}
type CheckSettingsScriptedInput interface {
	pulumi.Input

	ToCheckSettingsScriptedOutput() CheckSettingsScriptedOutput
	ToCheckSettingsScriptedOutputWithContext(context.Context) CheckSettingsScriptedOutput
}

type CheckSettingsScriptedArgs struct {
	Script pulumi.StringInput `pulumi:"script"`
}

func (CheckSettingsScriptedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsScripted)(nil)).Elem()
}

func (i CheckSettingsScriptedArgs) ToCheckSettingsScriptedOutput() CheckSettingsScriptedOutput {
	return i.ToCheckSettingsScriptedOutputWithContext(context.Background())
}

func (i CheckSettingsScriptedArgs) ToCheckSettingsScriptedOutputWithContext(ctx context.Context) CheckSettingsScriptedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsScriptedOutput)
}

func (i CheckSettingsScriptedArgs) ToCheckSettingsScriptedPtrOutput() CheckSettingsScriptedPtrOutput {
	return i.ToCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (i CheckSettingsScriptedArgs) ToCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) CheckSettingsScriptedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsScriptedOutput).ToCheckSettingsScriptedPtrOutputWithContext(ctx)
}

// CheckSettingsScriptedPtrInput is an input type that accepts CheckSettingsScriptedArgs, CheckSettingsScriptedPtr and CheckSettingsScriptedPtrOutput values.
// You can construct a concrete instance of `CheckSettingsScriptedPtrInput` via:
//
//	        CheckSettingsScriptedArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsScriptedPtrInput interface {
	pulumi.Input

	ToCheckSettingsScriptedPtrOutput() CheckSettingsScriptedPtrOutput
	ToCheckSettingsScriptedPtrOutputWithContext(context.Context) CheckSettingsScriptedPtrOutput
}

type checkSettingsScriptedPtrType CheckSettingsScriptedArgs

func CheckSettingsScriptedPtr(v *CheckSettingsScriptedArgs) CheckSettingsScriptedPtrInput {
	return (*checkSettingsScriptedPtrType)(v)
}

func (*checkSettingsScriptedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsScripted)(nil)).Elem()
}

func (i *checkSettingsScriptedPtrType) ToCheckSettingsScriptedPtrOutput() CheckSettingsScriptedPtrOutput {
	return i.ToCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (i *checkSettingsScriptedPtrType) ToCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) CheckSettingsScriptedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsScriptedPtrOutput)
}

type CheckSettingsScriptedOutput struct{ *pulumi.OutputState }

func (CheckSettingsScriptedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsScripted)(nil)).Elem()
}

func (o CheckSettingsScriptedOutput) ToCheckSettingsScriptedOutput() CheckSettingsScriptedOutput {
	return o
}

func (o CheckSettingsScriptedOutput) ToCheckSettingsScriptedOutputWithContext(ctx context.Context) CheckSettingsScriptedOutput {
	return o
}

func (o CheckSettingsScriptedOutput) ToCheckSettingsScriptedPtrOutput() CheckSettingsScriptedPtrOutput {
	return o.ToCheckSettingsScriptedPtrOutputWithContext(context.Background())
}

func (o CheckSettingsScriptedOutput) ToCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) CheckSettingsScriptedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsScripted) *CheckSettingsScripted {
		return &v
	}).(CheckSettingsScriptedPtrOutput)
}

func (o CheckSettingsScriptedOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsScripted) string { return v.Script }).(pulumi.StringOutput)
}

type CheckSettingsScriptedPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsScriptedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsScripted)(nil)).Elem()
}

func (o CheckSettingsScriptedPtrOutput) ToCheckSettingsScriptedPtrOutput() CheckSettingsScriptedPtrOutput {
	return o
}

func (o CheckSettingsScriptedPtrOutput) ToCheckSettingsScriptedPtrOutputWithContext(ctx context.Context) CheckSettingsScriptedPtrOutput {
	return o
}

func (o CheckSettingsScriptedPtrOutput) Elem() CheckSettingsScriptedOutput {
	return o.ApplyT(func(v *CheckSettingsScripted) CheckSettingsScripted {
		if v != nil {
			return *v
		}
		var ret CheckSettingsScripted
		return ret
	}).(CheckSettingsScriptedOutput)
}

func (o CheckSettingsScriptedPtrOutput) Script() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsScripted) *string {
		if v == nil {
			return nil
		}
		return &v.Script
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsTcp struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion *string `pulumi:"ipVersion"`
	// The query sent in the TCP probe and the expected associated response.
	QueryResponses []CheckSettingsTcpQueryResponse `pulumi:"queryResponses"`
	// Source IP address.
	SourceIpAddress *string `pulumi:"sourceIpAddress"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls *bool `pulumi:"tls"`
	// TLS config.
	TlsConfig *CheckSettingsTcpTlsConfig `pulumi:"tlsConfig"`
}

// CheckSettingsTcpInput is an input type that accepts CheckSettingsTcpArgs and CheckSettingsTcpOutput values.
// You can construct a concrete instance of `CheckSettingsTcpInput` via:
//
//	CheckSettingsTcpArgs{...}
type CheckSettingsTcpInput interface {
	pulumi.Input

	ToCheckSettingsTcpOutput() CheckSettingsTcpOutput
	ToCheckSettingsTcpOutputWithContext(context.Context) CheckSettingsTcpOutput
}

type CheckSettingsTcpArgs struct {
	// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
	IpVersion pulumi.StringPtrInput `pulumi:"ipVersion"`
	// The query sent in the TCP probe and the expected associated response.
	QueryResponses CheckSettingsTcpQueryResponseArrayInput `pulumi:"queryResponses"`
	// Source IP address.
	SourceIpAddress pulumi.StringPtrInput `pulumi:"sourceIpAddress"`
	// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
	Tls pulumi.BoolPtrInput `pulumi:"tls"`
	// TLS config.
	TlsConfig CheckSettingsTcpTlsConfigPtrInput `pulumi:"tlsConfig"`
}

func (CheckSettingsTcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcp)(nil)).Elem()
}

func (i CheckSettingsTcpArgs) ToCheckSettingsTcpOutput() CheckSettingsTcpOutput {
	return i.ToCheckSettingsTcpOutputWithContext(context.Background())
}

func (i CheckSettingsTcpArgs) ToCheckSettingsTcpOutputWithContext(ctx context.Context) CheckSettingsTcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpOutput)
}

func (i CheckSettingsTcpArgs) ToCheckSettingsTcpPtrOutput() CheckSettingsTcpPtrOutput {
	return i.ToCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i CheckSettingsTcpArgs) ToCheckSettingsTcpPtrOutputWithContext(ctx context.Context) CheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpOutput).ToCheckSettingsTcpPtrOutputWithContext(ctx)
}

// CheckSettingsTcpPtrInput is an input type that accepts CheckSettingsTcpArgs, CheckSettingsTcpPtr and CheckSettingsTcpPtrOutput values.
// You can construct a concrete instance of `CheckSettingsTcpPtrInput` via:
//
//	        CheckSettingsTcpArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsTcpPtrInput interface {
	pulumi.Input

	ToCheckSettingsTcpPtrOutput() CheckSettingsTcpPtrOutput
	ToCheckSettingsTcpPtrOutputWithContext(context.Context) CheckSettingsTcpPtrOutput
}

type checkSettingsTcpPtrType CheckSettingsTcpArgs

func CheckSettingsTcpPtr(v *CheckSettingsTcpArgs) CheckSettingsTcpPtrInput {
	return (*checkSettingsTcpPtrType)(v)
}

func (*checkSettingsTcpPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTcp)(nil)).Elem()
}

func (i *checkSettingsTcpPtrType) ToCheckSettingsTcpPtrOutput() CheckSettingsTcpPtrOutput {
	return i.ToCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (i *checkSettingsTcpPtrType) ToCheckSettingsTcpPtrOutputWithContext(ctx context.Context) CheckSettingsTcpPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpPtrOutput)
}

type CheckSettingsTcpOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcp)(nil)).Elem()
}

func (o CheckSettingsTcpOutput) ToCheckSettingsTcpOutput() CheckSettingsTcpOutput {
	return o
}

func (o CheckSettingsTcpOutput) ToCheckSettingsTcpOutputWithContext(ctx context.Context) CheckSettingsTcpOutput {
	return o
}

func (o CheckSettingsTcpOutput) ToCheckSettingsTcpPtrOutput() CheckSettingsTcpPtrOutput {
	return o.ToCheckSettingsTcpPtrOutputWithContext(context.Background())
}

func (o CheckSettingsTcpOutput) ToCheckSettingsTcpPtrOutputWithContext(ctx context.Context) CheckSettingsTcpPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsTcp) *CheckSettingsTcp {
		return &v
	}).(CheckSettingsTcpPtrOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsTcpOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcp) *string { return v.IpVersion }).(pulumi.StringPtrOutput)
}

// The query sent in the TCP probe and the expected associated response.
func (o CheckSettingsTcpOutput) QueryResponses() CheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v CheckSettingsTcp) []CheckSettingsTcpQueryResponse { return v.QueryResponses }).(CheckSettingsTcpQueryResponseArrayOutput)
}

// Source IP address.
func (o CheckSettingsTcpOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcp) *string { return v.SourceIpAddress }).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o CheckSettingsTcpOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcp) *bool { return v.Tls }).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o CheckSettingsTcpOutput) TlsConfig() CheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcp) *CheckSettingsTcpTlsConfig { return v.TlsConfig }).(CheckSettingsTcpTlsConfigPtrOutput)
}

type CheckSettingsTcpPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTcp)(nil)).Elem()
}

func (o CheckSettingsTcpPtrOutput) ToCheckSettingsTcpPtrOutput() CheckSettingsTcpPtrOutput {
	return o
}

func (o CheckSettingsTcpPtrOutput) ToCheckSettingsTcpPtrOutputWithContext(ctx context.Context) CheckSettingsTcpPtrOutput {
	return o
}

func (o CheckSettingsTcpPtrOutput) Elem() CheckSettingsTcpOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) CheckSettingsTcp {
		if v != nil {
			return *v
		}
		var ret CheckSettingsTcp
		return ret
	}).(CheckSettingsTcpOutput)
}

// Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available. Defaults to `V4`.
func (o CheckSettingsTcpPtrOutput) IpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.IpVersion
	}).(pulumi.StringPtrOutput)
}

// The query sent in the TCP probe and the expected associated response.
func (o CheckSettingsTcpPtrOutput) QueryResponses() CheckSettingsTcpQueryResponseArrayOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) []CheckSettingsTcpQueryResponse {
		if v == nil {
			return nil
		}
		return v.QueryResponses
	}).(CheckSettingsTcpQueryResponseArrayOutput)
}

// Source IP address.
func (o CheckSettingsTcpPtrOutput) SourceIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) *string {
		if v == nil {
			return nil
		}
		return v.SourceIpAddress
	}).(pulumi.StringPtrOutput)
}

// Whether or not TLS is used when the connection is initiated. Defaults to `false`.
func (o CheckSettingsTcpPtrOutput) Tls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) *bool {
		if v == nil {
			return nil
		}
		return v.Tls
	}).(pulumi.BoolPtrOutput)
}

// TLS config.
func (o CheckSettingsTcpPtrOutput) TlsConfig() CheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcp) *CheckSettingsTcpTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(CheckSettingsTcpTlsConfigPtrOutput)
}

type CheckSettingsTcpQueryResponse struct {
	// Response to expect.
	Expect string `pulumi:"expect"`
	// Data to send.
	Send string `pulumi:"send"`
	// Upgrade TCP connection to TLS. Defaults to `false`.
	StartTls *bool `pulumi:"startTls"`
}

// CheckSettingsTcpQueryResponseInput is an input type that accepts CheckSettingsTcpQueryResponseArgs and CheckSettingsTcpQueryResponseOutput values.
// You can construct a concrete instance of `CheckSettingsTcpQueryResponseInput` via:
//
//	CheckSettingsTcpQueryResponseArgs{...}
type CheckSettingsTcpQueryResponseInput interface {
	pulumi.Input

	ToCheckSettingsTcpQueryResponseOutput() CheckSettingsTcpQueryResponseOutput
	ToCheckSettingsTcpQueryResponseOutputWithContext(context.Context) CheckSettingsTcpQueryResponseOutput
}

type CheckSettingsTcpQueryResponseArgs struct {
	// Response to expect.
	Expect pulumi.StringInput `pulumi:"expect"`
	// Data to send.
	Send pulumi.StringInput `pulumi:"send"`
	// Upgrade TCP connection to TLS. Defaults to `false`.
	StartTls pulumi.BoolPtrInput `pulumi:"startTls"`
}

func (CheckSettingsTcpQueryResponseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i CheckSettingsTcpQueryResponseArgs) ToCheckSettingsTcpQueryResponseOutput() CheckSettingsTcpQueryResponseOutput {
	return i.ToCheckSettingsTcpQueryResponseOutputWithContext(context.Background())
}

func (i CheckSettingsTcpQueryResponseArgs) ToCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) CheckSettingsTcpQueryResponseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpQueryResponseOutput)
}

// CheckSettingsTcpQueryResponseArrayInput is an input type that accepts CheckSettingsTcpQueryResponseArray and CheckSettingsTcpQueryResponseArrayOutput values.
// You can construct a concrete instance of `CheckSettingsTcpQueryResponseArrayInput` via:
//
//	CheckSettingsTcpQueryResponseArray{ CheckSettingsTcpQueryResponseArgs{...} }
type CheckSettingsTcpQueryResponseArrayInput interface {
	pulumi.Input

	ToCheckSettingsTcpQueryResponseArrayOutput() CheckSettingsTcpQueryResponseArrayOutput
	ToCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Context) CheckSettingsTcpQueryResponseArrayOutput
}

type CheckSettingsTcpQueryResponseArray []CheckSettingsTcpQueryResponseInput

func (CheckSettingsTcpQueryResponseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (i CheckSettingsTcpQueryResponseArray) ToCheckSettingsTcpQueryResponseArrayOutput() CheckSettingsTcpQueryResponseArrayOutput {
	return i.ToCheckSettingsTcpQueryResponseArrayOutputWithContext(context.Background())
}

func (i CheckSettingsTcpQueryResponseArray) ToCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) CheckSettingsTcpQueryResponseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpQueryResponseArrayOutput)
}

type CheckSettingsTcpQueryResponseOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpQueryResponseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o CheckSettingsTcpQueryResponseOutput) ToCheckSettingsTcpQueryResponseOutput() CheckSettingsTcpQueryResponseOutput {
	return o
}

func (o CheckSettingsTcpQueryResponseOutput) ToCheckSettingsTcpQueryResponseOutputWithContext(ctx context.Context) CheckSettingsTcpQueryResponseOutput {
	return o
}

// Response to expect.
func (o CheckSettingsTcpQueryResponseOutput) Expect() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsTcpQueryResponse) string { return v.Expect }).(pulumi.StringOutput)
}

// Data to send.
func (o CheckSettingsTcpQueryResponseOutput) Send() pulumi.StringOutput {
	return o.ApplyT(func(v CheckSettingsTcpQueryResponse) string { return v.Send }).(pulumi.StringOutput)
}

// Upgrade TCP connection to TLS. Defaults to `false`.
func (o CheckSettingsTcpQueryResponseOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpQueryResponse) *bool { return v.StartTls }).(pulumi.BoolPtrOutput)
}

type CheckSettingsTcpQueryResponseArrayOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpQueryResponseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CheckSettingsTcpQueryResponse)(nil)).Elem()
}

func (o CheckSettingsTcpQueryResponseArrayOutput) ToCheckSettingsTcpQueryResponseArrayOutput() CheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o CheckSettingsTcpQueryResponseArrayOutput) ToCheckSettingsTcpQueryResponseArrayOutputWithContext(ctx context.Context) CheckSettingsTcpQueryResponseArrayOutput {
	return o
}

func (o CheckSettingsTcpQueryResponseArrayOutput) Index(i pulumi.IntInput) CheckSettingsTcpQueryResponseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CheckSettingsTcpQueryResponse {
		return vs[0].([]CheckSettingsTcpQueryResponse)[vs[1].(int)]
	}).(CheckSettingsTcpQueryResponseOutput)
}

type CheckSettingsTcpTlsConfig struct {
	// CA certificate in PEM format.
	CaCert *string `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert *string `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey *string `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName *string `pulumi:"serverName"`
}

// CheckSettingsTcpTlsConfigInput is an input type that accepts CheckSettingsTcpTlsConfigArgs and CheckSettingsTcpTlsConfigOutput values.
// You can construct a concrete instance of `CheckSettingsTcpTlsConfigInput` via:
//
//	CheckSettingsTcpTlsConfigArgs{...}
type CheckSettingsTcpTlsConfigInput interface {
	pulumi.Input

	ToCheckSettingsTcpTlsConfigOutput() CheckSettingsTcpTlsConfigOutput
	ToCheckSettingsTcpTlsConfigOutputWithContext(context.Context) CheckSettingsTcpTlsConfigOutput
}

type CheckSettingsTcpTlsConfigArgs struct {
	// CA certificate in PEM format.
	CaCert pulumi.StringPtrInput `pulumi:"caCert"`
	// Client certificate in PEM format.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// Client key in PEM format.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Disable target certificate validation. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
	// Used to verify the hostname for the targets.
	ServerName pulumi.StringPtrInput `pulumi:"serverName"`
}

func (CheckSettingsTcpTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i CheckSettingsTcpTlsConfigArgs) ToCheckSettingsTcpTlsConfigOutput() CheckSettingsTcpTlsConfigOutput {
	return i.ToCheckSettingsTcpTlsConfigOutputWithContext(context.Background())
}

func (i CheckSettingsTcpTlsConfigArgs) ToCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpTlsConfigOutput)
}

func (i CheckSettingsTcpTlsConfigArgs) ToCheckSettingsTcpTlsConfigPtrOutput() CheckSettingsTcpTlsConfigPtrOutput {
	return i.ToCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i CheckSettingsTcpTlsConfigArgs) ToCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpTlsConfigOutput).ToCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx)
}

// CheckSettingsTcpTlsConfigPtrInput is an input type that accepts CheckSettingsTcpTlsConfigArgs, CheckSettingsTcpTlsConfigPtr and CheckSettingsTcpTlsConfigPtrOutput values.
// You can construct a concrete instance of `CheckSettingsTcpTlsConfigPtrInput` via:
//
//	        CheckSettingsTcpTlsConfigArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsTcpTlsConfigPtrInput interface {
	pulumi.Input

	ToCheckSettingsTcpTlsConfigPtrOutput() CheckSettingsTcpTlsConfigPtrOutput
	ToCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Context) CheckSettingsTcpTlsConfigPtrOutput
}

type checkSettingsTcpTlsConfigPtrType CheckSettingsTcpTlsConfigArgs

func CheckSettingsTcpTlsConfigPtr(v *CheckSettingsTcpTlsConfigArgs) CheckSettingsTcpTlsConfigPtrInput {
	return (*checkSettingsTcpTlsConfigPtrType)(v)
}

func (*checkSettingsTcpTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (i *checkSettingsTcpTlsConfigPtrType) ToCheckSettingsTcpTlsConfigPtrOutput() CheckSettingsTcpTlsConfigPtrOutput {
	return i.ToCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (i *checkSettingsTcpTlsConfigPtrType) ToCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTcpTlsConfigPtrOutput)
}

type CheckSettingsTcpTlsConfigOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o CheckSettingsTcpTlsConfigOutput) ToCheckSettingsTcpTlsConfigOutput() CheckSettingsTcpTlsConfigOutput {
	return o
}

func (o CheckSettingsTcpTlsConfigOutput) ToCheckSettingsTcpTlsConfigOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigOutput {
	return o
}

func (o CheckSettingsTcpTlsConfigOutput) ToCheckSettingsTcpTlsConfigPtrOutput() CheckSettingsTcpTlsConfigPtrOutput {
	return o.ToCheckSettingsTcpTlsConfigPtrOutputWithContext(context.Background())
}

func (o CheckSettingsTcpTlsConfigOutput) ToCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsTcpTlsConfig) *CheckSettingsTcpTlsConfig {
		return &v
	}).(CheckSettingsTcpTlsConfigPtrOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsTcpTlsConfigOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpTlsConfig) *string { return v.CaCert }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsTcpTlsConfigOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpTlsConfig) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsTcpTlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpTlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsTcpTlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpTlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsTcpTlsConfigOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CheckSettingsTcpTlsConfig) *string { return v.ServerName }).(pulumi.StringPtrOutput)
}

type CheckSettingsTcpTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsTcpTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTcpTlsConfig)(nil)).Elem()
}

func (o CheckSettingsTcpTlsConfigPtrOutput) ToCheckSettingsTcpTlsConfigPtrOutput() CheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsTcpTlsConfigPtrOutput) ToCheckSettingsTcpTlsConfigPtrOutputWithContext(ctx context.Context) CheckSettingsTcpTlsConfigPtrOutput {
	return o
}

func (o CheckSettingsTcpTlsConfigPtrOutput) Elem() CheckSettingsTcpTlsConfigOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) CheckSettingsTcpTlsConfig {
		if v != nil {
			return *v
		}
		var ret CheckSettingsTcpTlsConfig
		return ret
	}).(CheckSettingsTcpTlsConfigOutput)
}

// CA certificate in PEM format.
func (o CheckSettingsTcpTlsConfigPtrOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCert
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format.
func (o CheckSettingsTcpTlsConfigPtrOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCert
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format.
func (o CheckSettingsTcpTlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Disable target certificate validation. Defaults to `false`.
func (o CheckSettingsTcpTlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

// Used to verify the hostname for the targets.
func (o CheckSettingsTcpTlsConfigPtrOutput) ServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTcpTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ServerName
	}).(pulumi.StringPtrOutput)
}

type CheckSettingsTraceroute struct {
	// Maximum TTL for the trace Defaults to `64`.
	MaxHops *int `pulumi:"maxHops"`
	// Maximum number of hosts to travers that give no response Defaults to `15`.
	MaxUnknownHops *int `pulumi:"maxUnknownHops"`
	// Reverse lookup hostnames from IP addresses Defaults to `true`.
	PtrLookup *bool `pulumi:"ptrLookup"`
}

// CheckSettingsTracerouteInput is an input type that accepts CheckSettingsTracerouteArgs and CheckSettingsTracerouteOutput values.
// You can construct a concrete instance of `CheckSettingsTracerouteInput` via:
//
//	CheckSettingsTracerouteArgs{...}
type CheckSettingsTracerouteInput interface {
	pulumi.Input

	ToCheckSettingsTracerouteOutput() CheckSettingsTracerouteOutput
	ToCheckSettingsTracerouteOutputWithContext(context.Context) CheckSettingsTracerouteOutput
}

type CheckSettingsTracerouteArgs struct {
	// Maximum TTL for the trace Defaults to `64`.
	MaxHops pulumi.IntPtrInput `pulumi:"maxHops"`
	// Maximum number of hosts to travers that give no response Defaults to `15`.
	MaxUnknownHops pulumi.IntPtrInput `pulumi:"maxUnknownHops"`
	// Reverse lookup hostnames from IP addresses Defaults to `true`.
	PtrLookup pulumi.BoolPtrInput `pulumi:"ptrLookup"`
}

func (CheckSettingsTracerouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTraceroute)(nil)).Elem()
}

func (i CheckSettingsTracerouteArgs) ToCheckSettingsTracerouteOutput() CheckSettingsTracerouteOutput {
	return i.ToCheckSettingsTracerouteOutputWithContext(context.Background())
}

func (i CheckSettingsTracerouteArgs) ToCheckSettingsTracerouteOutputWithContext(ctx context.Context) CheckSettingsTracerouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTracerouteOutput)
}

func (i CheckSettingsTracerouteArgs) ToCheckSettingsTraceroutePtrOutput() CheckSettingsTraceroutePtrOutput {
	return i.ToCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i CheckSettingsTracerouteArgs) ToCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) CheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTracerouteOutput).ToCheckSettingsTraceroutePtrOutputWithContext(ctx)
}

// CheckSettingsTraceroutePtrInput is an input type that accepts CheckSettingsTracerouteArgs, CheckSettingsTraceroutePtr and CheckSettingsTraceroutePtrOutput values.
// You can construct a concrete instance of `CheckSettingsTraceroutePtrInput` via:
//
//	        CheckSettingsTracerouteArgs{...}
//
//	or:
//
//	        nil
type CheckSettingsTraceroutePtrInput interface {
	pulumi.Input

	ToCheckSettingsTraceroutePtrOutput() CheckSettingsTraceroutePtrOutput
	ToCheckSettingsTraceroutePtrOutputWithContext(context.Context) CheckSettingsTraceroutePtrOutput
}

type checkSettingsTraceroutePtrType CheckSettingsTracerouteArgs

func CheckSettingsTraceroutePtr(v *CheckSettingsTracerouteArgs) CheckSettingsTraceroutePtrInput {
	return (*checkSettingsTraceroutePtrType)(v)
}

func (*checkSettingsTraceroutePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTraceroute)(nil)).Elem()
}

func (i *checkSettingsTraceroutePtrType) ToCheckSettingsTraceroutePtrOutput() CheckSettingsTraceroutePtrOutput {
	return i.ToCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (i *checkSettingsTraceroutePtrType) ToCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) CheckSettingsTraceroutePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CheckSettingsTraceroutePtrOutput)
}

type CheckSettingsTracerouteOutput struct{ *pulumi.OutputState }

func (CheckSettingsTracerouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CheckSettingsTraceroute)(nil)).Elem()
}

func (o CheckSettingsTracerouteOutput) ToCheckSettingsTracerouteOutput() CheckSettingsTracerouteOutput {
	return o
}

func (o CheckSettingsTracerouteOutput) ToCheckSettingsTracerouteOutputWithContext(ctx context.Context) CheckSettingsTracerouteOutput {
	return o
}

func (o CheckSettingsTracerouteOutput) ToCheckSettingsTraceroutePtrOutput() CheckSettingsTraceroutePtrOutput {
	return o.ToCheckSettingsTraceroutePtrOutputWithContext(context.Background())
}

func (o CheckSettingsTracerouteOutput) ToCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) CheckSettingsTraceroutePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CheckSettingsTraceroute) *CheckSettingsTraceroute {
		return &v
	}).(CheckSettingsTraceroutePtrOutput)
}

// Maximum TTL for the trace Defaults to `64`.
func (o CheckSettingsTracerouteOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckSettingsTraceroute) *int { return v.MaxHops }).(pulumi.IntPtrOutput)
}

// Maximum number of hosts to travers that give no response Defaults to `15`.
func (o CheckSettingsTracerouteOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CheckSettingsTraceroute) *int { return v.MaxUnknownHops }).(pulumi.IntPtrOutput)
}

// Reverse lookup hostnames from IP addresses Defaults to `true`.
func (o CheckSettingsTracerouteOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CheckSettingsTraceroute) *bool { return v.PtrLookup }).(pulumi.BoolPtrOutput)
}

type CheckSettingsTraceroutePtrOutput struct{ *pulumi.OutputState }

func (CheckSettingsTraceroutePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CheckSettingsTraceroute)(nil)).Elem()
}

func (o CheckSettingsTraceroutePtrOutput) ToCheckSettingsTraceroutePtrOutput() CheckSettingsTraceroutePtrOutput {
	return o
}

func (o CheckSettingsTraceroutePtrOutput) ToCheckSettingsTraceroutePtrOutputWithContext(ctx context.Context) CheckSettingsTraceroutePtrOutput {
	return o
}

func (o CheckSettingsTraceroutePtrOutput) Elem() CheckSettingsTracerouteOutput {
	return o.ApplyT(func(v *CheckSettingsTraceroute) CheckSettingsTraceroute {
		if v != nil {
			return *v
		}
		var ret CheckSettingsTraceroute
		return ret
	}).(CheckSettingsTracerouteOutput)
}

// Maximum TTL for the trace Defaults to `64`.
func (o CheckSettingsTraceroutePtrOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxHops
	}).(pulumi.IntPtrOutput)
}

// Maximum number of hosts to travers that give no response Defaults to `15`.
func (o CheckSettingsTraceroutePtrOutput) MaxUnknownHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTraceroute) *int {
		if v == nil {
			return nil
		}
		return v.MaxUnknownHops
	}).(pulumi.IntPtrOutput)
}

// Reverse lookup hostnames from IP addresses Defaults to `true`.
func (o CheckSettingsTraceroutePtrOutput) PtrLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CheckSettingsTraceroute) *bool {
		if v == nil {
			return nil
		}
		return v.PtrLookup
	}).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsInput)(nil)).Elem(), CheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsPtrInput)(nil)).Elem(), CheckSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsBrowserInput)(nil)).Elem(), CheckSettingsBrowserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsBrowserPtrInput)(nil)).Elem(), CheckSettingsBrowserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsInput)(nil)).Elem(), CheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsPtrInput)(nil)).Elem(), CheckSettingsDnsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAdditionalRrInput)(nil)).Elem(), CheckSettingsDnsValidateAdditionalRrArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAdditionalRrArrayInput)(nil)).Elem(), CheckSettingsDnsValidateAdditionalRrArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAnswerRrsInput)(nil)).Elem(), CheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAnswerRrsPtrInput)(nil)).Elem(), CheckSettingsDnsValidateAnswerRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAuthorityRrsInput)(nil)).Elem(), CheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsDnsValidateAuthorityRrsPtrInput)(nil)).Elem(), CheckSettingsDnsValidateAuthorityRrsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsGrpcInput)(nil)).Elem(), CheckSettingsGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsGrpcPtrInput)(nil)).Elem(), CheckSettingsGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsGrpcTlsConfigInput)(nil)).Elem(), CheckSettingsGrpcTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsGrpcTlsConfigPtrInput)(nil)).Elem(), CheckSettingsGrpcTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpInput)(nil)).Elem(), CheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpPtrInput)(nil)).Elem(), CheckSettingsHttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpBasicAuthInput)(nil)).Elem(), CheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpBasicAuthPtrInput)(nil)).Elem(), CheckSettingsHttpBasicAuthArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpFailIfHeaderMatchesRegexpInput)(nil)).Elem(), CheckSettingsHttpFailIfHeaderMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpFailIfHeaderMatchesRegexpArrayInput)(nil)).Elem(), CheckSettingsHttpFailIfHeaderMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpFailIfHeaderNotMatchesRegexpInput)(nil)).Elem(), CheckSettingsHttpFailIfHeaderNotMatchesRegexpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayInput)(nil)).Elem(), CheckSettingsHttpFailIfHeaderNotMatchesRegexpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpTlsConfigInput)(nil)).Elem(), CheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsHttpTlsConfigPtrInput)(nil)).Elem(), CheckSettingsHttpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpInput)(nil)).Elem(), CheckSettingsMultihttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpPtrInput)(nil)).Elem(), CheckSettingsMultihttpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryInput)(nil)).Elem(), CheckSettingsMultihttpEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryAssertionInput)(nil)).Elem(), CheckSettingsMultihttpEntryAssertionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryAssertionArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryAssertionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestPtrInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestBodyInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestBodyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestBodyArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestBodyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestHeaderInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestHeaderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestHeaderArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestHeaderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestQueryFieldInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestQueryFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryRequestQueryFieldArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryRequestQueryFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryVariableInput)(nil)).Elem(), CheckSettingsMultihttpEntryVariableArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsMultihttpEntryVariableArrayInput)(nil)).Elem(), CheckSettingsMultihttpEntryVariableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsPingInput)(nil)).Elem(), CheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsPingPtrInput)(nil)).Elem(), CheckSettingsPingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsScriptedInput)(nil)).Elem(), CheckSettingsScriptedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsScriptedPtrInput)(nil)).Elem(), CheckSettingsScriptedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpInput)(nil)).Elem(), CheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpPtrInput)(nil)).Elem(), CheckSettingsTcpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpQueryResponseInput)(nil)).Elem(), CheckSettingsTcpQueryResponseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpQueryResponseArrayInput)(nil)).Elem(), CheckSettingsTcpQueryResponseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpTlsConfigInput)(nil)).Elem(), CheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTcpTlsConfigPtrInput)(nil)).Elem(), CheckSettingsTcpTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTracerouteInput)(nil)).Elem(), CheckSettingsTracerouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CheckSettingsTraceroutePtrInput)(nil)).Elem(), CheckSettingsTracerouteArgs{})
	pulumi.RegisterOutputType(CheckSettingsOutput{})
	pulumi.RegisterOutputType(CheckSettingsPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsBrowserOutput{})
	pulumi.RegisterOutputType(CheckSettingsBrowserPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAdditionalRrOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAdditionalRrArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAnswerRrsOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAnswerRrsPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAuthorityRrsOutput{})
	pulumi.RegisterOutputType(CheckSettingsDnsValidateAuthorityRrsPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsGrpcOutput{})
	pulumi.RegisterOutputType(CheckSettingsGrpcPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsGrpcTlsConfigOutput{})
	pulumi.RegisterOutputType(CheckSettingsGrpcTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpBasicAuthOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpBasicAuthPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpFailIfHeaderMatchesRegexpOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpFailIfHeaderMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpFailIfHeaderNotMatchesRegexpOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpFailIfHeaderNotMatchesRegexpArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpTlsConfigOutput{})
	pulumi.RegisterOutputType(CheckSettingsHttpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryAssertionOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryAssertionArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestBodyOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestBodyArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestHeaderOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestHeaderArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestQueryFieldOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryRequestQueryFieldArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryVariableOutput{})
	pulumi.RegisterOutputType(CheckSettingsMultihttpEntryVariableArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsPingOutput{})
	pulumi.RegisterOutputType(CheckSettingsPingPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsScriptedOutput{})
	pulumi.RegisterOutputType(CheckSettingsScriptedPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpQueryResponseOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpQueryResponseArrayOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpTlsConfigOutput{})
	pulumi.RegisterOutputType(CheckSettingsTcpTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(CheckSettingsTracerouteOutput{})
	pulumi.RegisterOutputType(CheckSettingsTraceroutePtrOutput{})
}
