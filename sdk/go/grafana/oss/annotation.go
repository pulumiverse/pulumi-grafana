// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/build-dashboards/annotate-visualizations/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/annotations/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oss.NewAnnotation(ctx, "test", &oss.AnnotationArgs{
//				Text: pulumi.String("basic text"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:oss/annotation:Annotation name "{{ id }}"
// ```
//
// ```sh
// $ pulumi import grafana:oss/annotation:Annotation name "{{ orgID }}:{{ id }}"
// ```
type Annotation struct {
	pulumi.CustomResourceState

	// The UID of the dashboard on which to create the annotation.
	DashboardUid pulumi.StringPtrOutput `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumi.IntPtrOutput `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The text to associate with the annotation.
	Text pulumi.StringOutput `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumi.StringOutput `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumi.StringOutput `pulumi:"timeEnd"`
}

// NewAnnotation registers a new resource with the given unique name, arguments, and options.
func NewAnnotation(ctx *pulumi.Context,
	name string, args *AnnotationArgs, opts ...pulumi.ResourceOption) (*Annotation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Text == nil {
		return nil, errors.New("invalid value for required argument 'Text'")
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("grafana:index/annotation:Annotation"),
		},
	})
	opts = append(opts, aliases)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Annotation
	err := ctx.RegisterResource("grafana:oss/annotation:Annotation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnnotation gets an existing Annotation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnnotation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnnotationState, opts ...pulumi.ResourceOption) (*Annotation, error) {
	var resource Annotation
	err := ctx.ReadResource("grafana:oss/annotation:Annotation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Annotation resources.
type annotationState struct {
	// The UID of the dashboard on which to create the annotation.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId *int `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags []string `pulumi:"tags"`
	// The text to associate with the annotation.
	Text *string `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time *string `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd *string `pulumi:"timeEnd"`
}

type AnnotationState struct {
	// The UID of the dashboard on which to create the annotation.
	DashboardUid pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumi.IntPtrInput
	// The tags to associate with the annotation.
	Tags pulumi.StringArrayInput
	// The text to associate with the annotation.
	Text pulumi.StringPtrInput
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumi.StringPtrInput
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumi.StringPtrInput
}

func (AnnotationState) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationState)(nil)).Elem()
}

type annotationArgs struct {
	// The UID of the dashboard on which to create the annotation.
	DashboardUid *string `pulumi:"dashboardUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The ID of the dashboard panel on which to create the annotation.
	PanelId *int `pulumi:"panelId"`
	// The tags to associate with the annotation.
	Tags []string `pulumi:"tags"`
	// The text to associate with the annotation.
	Text string `pulumi:"text"`
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time *string `pulumi:"time"`
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd *string `pulumi:"timeEnd"`
}

// The set of arguments for constructing a Annotation resource.
type AnnotationArgs struct {
	// The UID of the dashboard on which to create the annotation.
	DashboardUid pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// The ID of the dashboard panel on which to create the annotation.
	PanelId pulumi.IntPtrInput
	// The tags to associate with the annotation.
	Tags pulumi.StringArrayInput
	// The text to associate with the annotation.
	Text pulumi.StringInput
	// The RFC 3339-formatted time string indicating the annotation's time.
	Time pulumi.StringPtrInput
	// The RFC 3339-formatted time string indicating the annotation's end time.
	TimeEnd pulumi.StringPtrInput
}

func (AnnotationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*annotationArgs)(nil)).Elem()
}

type AnnotationInput interface {
	pulumi.Input

	ToAnnotationOutput() AnnotationOutput
	ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput
}

func (*Annotation) ElementType() reflect.Type {
	return reflect.TypeOf((**Annotation)(nil)).Elem()
}

func (i *Annotation) ToAnnotationOutput() AnnotationOutput {
	return i.ToAnnotationOutputWithContext(context.Background())
}

func (i *Annotation) ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationOutput)
}

// AnnotationArrayInput is an input type that accepts AnnotationArray and AnnotationArrayOutput values.
// You can construct a concrete instance of `AnnotationArrayInput` via:
//
//	AnnotationArray{ AnnotationArgs{...} }
type AnnotationArrayInput interface {
	pulumi.Input

	ToAnnotationArrayOutput() AnnotationArrayOutput
	ToAnnotationArrayOutputWithContext(context.Context) AnnotationArrayOutput
}

type AnnotationArray []AnnotationInput

func (AnnotationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Annotation)(nil)).Elem()
}

func (i AnnotationArray) ToAnnotationArrayOutput() AnnotationArrayOutput {
	return i.ToAnnotationArrayOutputWithContext(context.Background())
}

func (i AnnotationArray) ToAnnotationArrayOutputWithContext(ctx context.Context) AnnotationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationArrayOutput)
}

// AnnotationMapInput is an input type that accepts AnnotationMap and AnnotationMapOutput values.
// You can construct a concrete instance of `AnnotationMapInput` via:
//
//	AnnotationMap{ "key": AnnotationArgs{...} }
type AnnotationMapInput interface {
	pulumi.Input

	ToAnnotationMapOutput() AnnotationMapOutput
	ToAnnotationMapOutputWithContext(context.Context) AnnotationMapOutput
}

type AnnotationMap map[string]AnnotationInput

func (AnnotationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Annotation)(nil)).Elem()
}

func (i AnnotationMap) ToAnnotationMapOutput() AnnotationMapOutput {
	return i.ToAnnotationMapOutputWithContext(context.Background())
}

func (i AnnotationMap) ToAnnotationMapOutputWithContext(ctx context.Context) AnnotationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationMapOutput)
}

type AnnotationOutput struct{ *pulumi.OutputState }

func (AnnotationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Annotation)(nil)).Elem()
}

func (o AnnotationOutput) ToAnnotationOutput() AnnotationOutput {
	return o
}

func (o AnnotationOutput) ToAnnotationOutputWithContext(ctx context.Context) AnnotationOutput {
	return o
}

// The UID of the dashboard on which to create the annotation.
func (o AnnotationOutput) DashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringPtrOutput { return v.DashboardUid }).(pulumi.StringPtrOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o AnnotationOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The ID of the dashboard panel on which to create the annotation.
func (o AnnotationOutput) PanelId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Annotation) pulumi.IntPtrOutput { return v.PanelId }).(pulumi.IntPtrOutput)
}

// The tags to associate with the annotation.
func (o AnnotationOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The text to associate with the annotation.
func (o AnnotationOutput) Text() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Text }).(pulumi.StringOutput)
}

// The RFC 3339-formatted time string indicating the annotation's time.
func (o AnnotationOutput) Time() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.Time }).(pulumi.StringOutput)
}

// The RFC 3339-formatted time string indicating the annotation's end time.
func (o AnnotationOutput) TimeEnd() pulumi.StringOutput {
	return o.ApplyT(func(v *Annotation) pulumi.StringOutput { return v.TimeEnd }).(pulumi.StringOutput)
}

type AnnotationArrayOutput struct{ *pulumi.OutputState }

func (AnnotationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Annotation)(nil)).Elem()
}

func (o AnnotationArrayOutput) ToAnnotationArrayOutput() AnnotationArrayOutput {
	return o
}

func (o AnnotationArrayOutput) ToAnnotationArrayOutputWithContext(ctx context.Context) AnnotationArrayOutput {
	return o
}

func (o AnnotationArrayOutput) Index(i pulumi.IntInput) AnnotationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Annotation {
		return vs[0].([]*Annotation)[vs[1].(int)]
	}).(AnnotationOutput)
}

type AnnotationMapOutput struct{ *pulumi.OutputState }

func (AnnotationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Annotation)(nil)).Elem()
}

func (o AnnotationMapOutput) ToAnnotationMapOutput() AnnotationMapOutput {
	return o
}

func (o AnnotationMapOutput) ToAnnotationMapOutputWithContext(ctx context.Context) AnnotationMapOutput {
	return o
}

func (o AnnotationMapOutput) MapIndex(k pulumi.StringInput) AnnotationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Annotation {
		return vs[0].(map[string]*Annotation)[vs[1].(string)]
	}).(AnnotationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationInput)(nil)).Elem(), &Annotation{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationArrayInput)(nil)).Elem(), AnnotationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationMapInput)(nil)).Elem(), AnnotationMap{})
	pulumi.RegisterOutputType(AnnotationOutput{})
	pulumi.RegisterOutputType(AnnotationArrayOutput{})
	pulumi.RegisterOutputType(AnnotationMapOutput{})
}
