// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/grafana/latest/dashboards/create-manage-playlists/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/playlist/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := oss.NewPlaylist(ctx, "test", &oss.PlaylistArgs{
//				Name:     pulumi.String("My Playlist!"),
//				Interval: pulumi.String("5m"),
//				Items: oss.PlaylistItemArray{
//					&oss.PlaylistItemArgs{
//						Order: pulumi.Int(2),
//						Title: pulumi.String("Terraform Dashboard By Tag"),
//						Type:  pulumi.String("dashboard_by_tag"),
//						Value: pulumi.String("terraform"),
//					},
//					&oss.PlaylistItemArgs{
//						Order: pulumi.Int(1),
//						Title: pulumi.String("Terraform Dashboard By UID"),
//						Type:  pulumi.String("dashboard_by_uid"),
//						Value: pulumi.String("cIBgcSjkk"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:oss/playlist:Playlist name "{{ uid }}"
// ```
//
// ```sh
// $ pulumi import grafana:oss/playlist:Playlist name "{{ orgID }}:{{ uid }}"
// ```
type Playlist struct {
	pulumi.CustomResourceState

	Interval pulumi.StringOutput     `pulumi:"interval"`
	Items    PlaylistItemArrayOutput `pulumi:"items"`
	// The name of the playlist.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
}

// NewPlaylist registers a new resource with the given unique name, arguments, and options.
func NewPlaylist(ctx *pulumi.Context,
	name string, args *PlaylistArgs, opts ...pulumi.ResourceOption) (*Playlist, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Playlist
	err := ctx.RegisterResource("grafana:oss/playlist:Playlist", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaylist gets an existing Playlist resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaylist(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaylistState, opts ...pulumi.ResourceOption) (*Playlist, error) {
	var resource Playlist
	err := ctx.ReadResource("grafana:oss/playlist:Playlist", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Playlist resources.
type playlistState struct {
	Interval *string        `pulumi:"interval"`
	Items    []PlaylistItem `pulumi:"items"`
	// The name of the playlist.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

type PlaylistState struct {
	Interval pulumi.StringPtrInput
	Items    PlaylistItemArrayInput
	// The name of the playlist.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (PlaylistState) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistState)(nil)).Elem()
}

type playlistArgs struct {
	Interval string         `pulumi:"interval"`
	Items    []PlaylistItem `pulumi:"items"`
	// The name of the playlist.
	Name *string `pulumi:"name"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
}

// The set of arguments for constructing a Playlist resource.
type PlaylistArgs struct {
	Interval pulumi.StringInput
	Items    PlaylistItemArrayInput
	// The name of the playlist.
	Name pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
}

func (PlaylistArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playlistArgs)(nil)).Elem()
}

type PlaylistInput interface {
	pulumi.Input

	ToPlaylistOutput() PlaylistOutput
	ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput
}

func (*Playlist) ElementType() reflect.Type {
	return reflect.TypeOf((**Playlist)(nil)).Elem()
}

func (i *Playlist) ToPlaylistOutput() PlaylistOutput {
	return i.ToPlaylistOutputWithContext(context.Background())
}

func (i *Playlist) ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistOutput)
}

// PlaylistArrayInput is an input type that accepts PlaylistArray and PlaylistArrayOutput values.
// You can construct a concrete instance of `PlaylistArrayInput` via:
//
//	PlaylistArray{ PlaylistArgs{...} }
type PlaylistArrayInput interface {
	pulumi.Input

	ToPlaylistArrayOutput() PlaylistArrayOutput
	ToPlaylistArrayOutputWithContext(context.Context) PlaylistArrayOutput
}

type PlaylistArray []PlaylistInput

func (PlaylistArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playlist)(nil)).Elem()
}

func (i PlaylistArray) ToPlaylistArrayOutput() PlaylistArrayOutput {
	return i.ToPlaylistArrayOutputWithContext(context.Background())
}

func (i PlaylistArray) ToPlaylistArrayOutputWithContext(ctx context.Context) PlaylistArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistArrayOutput)
}

// PlaylistMapInput is an input type that accepts PlaylistMap and PlaylistMapOutput values.
// You can construct a concrete instance of `PlaylistMapInput` via:
//
//	PlaylistMap{ "key": PlaylistArgs{...} }
type PlaylistMapInput interface {
	pulumi.Input

	ToPlaylistMapOutput() PlaylistMapOutput
	ToPlaylistMapOutputWithContext(context.Context) PlaylistMapOutput
}

type PlaylistMap map[string]PlaylistInput

func (PlaylistMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playlist)(nil)).Elem()
}

func (i PlaylistMap) ToPlaylistMapOutput() PlaylistMapOutput {
	return i.ToPlaylistMapOutputWithContext(context.Background())
}

func (i PlaylistMap) ToPlaylistMapOutputWithContext(ctx context.Context) PlaylistMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistMapOutput)
}

type PlaylistOutput struct{ *pulumi.OutputState }

func (PlaylistOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Playlist)(nil)).Elem()
}

func (o PlaylistOutput) ToPlaylistOutput() PlaylistOutput {
	return o
}

func (o PlaylistOutput) ToPlaylistOutputWithContext(ctx context.Context) PlaylistOutput {
	return o
}

func (o PlaylistOutput) Interval() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.Interval }).(pulumi.StringOutput)
}

func (o PlaylistOutput) Items() PlaylistItemArrayOutput {
	return o.ApplyT(func(v *Playlist) PlaylistItemArrayOutput { return v.Items }).(PlaylistItemArrayOutput)
}

// The name of the playlist.
func (o PlaylistOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o PlaylistOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Playlist) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

type PlaylistArrayOutput struct{ *pulumi.OutputState }

func (PlaylistArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playlist)(nil)).Elem()
}

func (o PlaylistArrayOutput) ToPlaylistArrayOutput() PlaylistArrayOutput {
	return o
}

func (o PlaylistArrayOutput) ToPlaylistArrayOutputWithContext(ctx context.Context) PlaylistArrayOutput {
	return o
}

func (o PlaylistArrayOutput) Index(i pulumi.IntInput) PlaylistOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Playlist {
		return vs[0].([]*Playlist)[vs[1].(int)]
	}).(PlaylistOutput)
}

type PlaylistMapOutput struct{ *pulumi.OutputState }

func (PlaylistMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playlist)(nil)).Elem()
}

func (o PlaylistMapOutput) ToPlaylistMapOutput() PlaylistMapOutput {
	return o
}

func (o PlaylistMapOutput) ToPlaylistMapOutputWithContext(ctx context.Context) PlaylistMapOutput {
	return o
}

func (o PlaylistMapOutput) MapIndex(k pulumi.StringInput) PlaylistOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Playlist {
		return vs[0].(map[string]*Playlist)[vs[1].(string)]
	}).(PlaylistOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistInput)(nil)).Elem(), &Playlist{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistArrayInput)(nil)).Elem(), PlaylistArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistMapInput)(nil)).Elem(), PlaylistMap{})
	pulumi.RegisterOutputType(PlaylistOutput{})
	pulumi.RegisterOutputType(PlaylistArrayOutput{})
	pulumi.RegisterOutputType(PlaylistMapOutput{})
}
