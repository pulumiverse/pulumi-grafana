// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Manages the entire set of permissions for a folder. Permissions that aren't specified when applying this resource will be removed.
// * [Official documentation](https://grafana.com/docs/grafana/latest/administration/roles-and-permissions/access-control/)
// * [HTTP API](https://grafana.com/docs/grafana/latest/developers/http_api/folder_permissions/)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/oss"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			team, err := oss.NewTeam(ctx, "team", &oss.TeamArgs{
//				Name: pulumi.String("Team Name"),
//			})
//			if err != nil {
//				return err
//			}
//			user, err := oss.NewUser(ctx, "user", &oss.UserArgs{
//				Email:    pulumi.String("user.name@example.com"),
//				Login:    pulumi.String("user.name"),
//				Password: pulumi.String("my-password"),
//			})
//			if err != nil {
//				return err
//			}
//			collection, err := oss.NewFolder(ctx, "collection", &oss.FolderArgs{
//				Title: pulumi.String("Folder Title"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = oss.NewFolderPermission(ctx, "collectionPermission", &oss.FolderPermissionArgs{
//				FolderUid: collection.Uid,
//				Permissions: oss.FolderPermissionPermissionArray{
//					&oss.FolderPermissionPermissionArgs{
//						Role:       pulumi.String("Editor"),
//						Permission: pulumi.String("Edit"),
//					},
//					&oss.FolderPermissionPermissionArgs{
//						TeamId:     team.ID(),
//						Permission: pulumi.String("View"),
//					},
//					&oss.FolderPermissionPermissionArgs{
//						UserId:     user.ID(),
//						Permission: pulumi.String("Admin"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:oss/folderPermission:FolderPermission name "{{ folderUID }}"
// ```
//
// ```sh
// $ pulumi import grafana:oss/folderPermission:FolderPermission name "{{ orgID }}:{{ folderUID }}"
// ```
type FolderPermission struct {
	pulumi.CustomResourceState

	// The UID of the folder.
	FolderUid pulumi.StringOutput `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayOutput `pulumi:"permissions"`
}

// NewFolderPermission registers a new resource with the given unique name, arguments, and options.
func NewFolderPermission(ctx *pulumi.Context,
	name string, args *FolderPermissionArgs, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderUid == nil {
		return nil, errors.New("invalid value for required argument 'FolderUid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FolderPermission
	err := ctx.RegisterResource("grafana:oss/folderPermission:FolderPermission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFolderPermission gets an existing FolderPermission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFolderPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FolderPermissionState, opts ...pulumi.ResourceOption) (*FolderPermission, error) {
	var resource FolderPermission
	err := ctx.ReadResource("grafana:oss/folderPermission:FolderPermission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FolderPermission resources.
type folderPermissionState struct {
	// The UID of the folder.
	FolderUid *string `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

type FolderPermissionState struct {
	// The UID of the folder.
	FolderUid pulumi.StringPtrInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayInput
}

func (FolderPermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionState)(nil)).Elem()
}

type folderPermissionArgs struct {
	// The UID of the folder.
	FolderUid string `pulumi:"folderUid"`
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId *string `pulumi:"orgId"`
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions []FolderPermissionPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a FolderPermission resource.
type FolderPermissionArgs struct {
	// The UID of the folder.
	FolderUid pulumi.StringInput
	// The Organization ID. If not set, the Org ID defined in the provider block will be used.
	OrgId pulumi.StringPtrInput
	// The permission items to add/update. Items that are omitted from the list will be removed.
	Permissions FolderPermissionPermissionArrayInput
}

func (FolderPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*folderPermissionArgs)(nil)).Elem()
}

type FolderPermissionInput interface {
	pulumi.Input

	ToFolderPermissionOutput() FolderPermissionOutput
	ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput
}

func (*FolderPermission) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPermission)(nil)).Elem()
}

func (i *FolderPermission) ToFolderPermissionOutput() FolderPermissionOutput {
	return i.ToFolderPermissionOutputWithContext(context.Background())
}

func (i *FolderPermission) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionOutput)
}

// FolderPermissionArrayInput is an input type that accepts FolderPermissionArray and FolderPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionArrayInput` via:
//
//	FolderPermissionArray{ FolderPermissionArgs{...} }
type FolderPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionArrayOutput() FolderPermissionArrayOutput
	ToFolderPermissionArrayOutputWithContext(context.Context) FolderPermissionArrayOutput
}

type FolderPermissionArray []FolderPermissionInput

func (FolderPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderPermission)(nil)).Elem()
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return i.ToFolderPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionArray) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionArrayOutput)
}

// FolderPermissionMapInput is an input type that accepts FolderPermissionMap and FolderPermissionMapOutput values.
// You can construct a concrete instance of `FolderPermissionMapInput` via:
//
//	FolderPermissionMap{ "key": FolderPermissionArgs{...} }
type FolderPermissionMapInput interface {
	pulumi.Input

	ToFolderPermissionMapOutput() FolderPermissionMapOutput
	ToFolderPermissionMapOutputWithContext(context.Context) FolderPermissionMapOutput
}

type FolderPermissionMap map[string]FolderPermissionInput

func (FolderPermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderPermission)(nil)).Elem()
}

func (i FolderPermissionMap) ToFolderPermissionMapOutput() FolderPermissionMapOutput {
	return i.ToFolderPermissionMapOutputWithContext(context.Background())
}

func (i FolderPermissionMap) ToFolderPermissionMapOutputWithContext(ctx context.Context) FolderPermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionMapOutput)
}

type FolderPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FolderPermission)(nil)).Elem()
}

func (o FolderPermissionOutput) ToFolderPermissionOutput() FolderPermissionOutput {
	return o
}

func (o FolderPermissionOutput) ToFolderPermissionOutputWithContext(ctx context.Context) FolderPermissionOutput {
	return o
}

// The UID of the folder.
func (o FolderPermissionOutput) FolderUid() pulumi.StringOutput {
	return o.ApplyT(func(v *FolderPermission) pulumi.StringOutput { return v.FolderUid }).(pulumi.StringOutput)
}

// The Organization ID. If not set, the Org ID defined in the provider block will be used.
func (o FolderPermissionOutput) OrgId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FolderPermission) pulumi.StringPtrOutput { return v.OrgId }).(pulumi.StringPtrOutput)
}

// The permission items to add/update. Items that are omitted from the list will be removed.
func (o FolderPermissionOutput) Permissions() FolderPermissionPermissionArrayOutput {
	return o.ApplyT(func(v *FolderPermission) FolderPermissionPermissionArrayOutput { return v.Permissions }).(FolderPermissionPermissionArrayOutput)
}

type FolderPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutput() FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) ToFolderPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionArrayOutput {
	return o
}

func (o FolderPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FolderPermission {
		return vs[0].([]*FolderPermission)[vs[1].(int)]
	}).(FolderPermissionOutput)
}

type FolderPermissionMapOutput struct{ *pulumi.OutputState }

func (FolderPermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FolderPermission)(nil)).Elem()
}

func (o FolderPermissionMapOutput) ToFolderPermissionMapOutput() FolderPermissionMapOutput {
	return o
}

func (o FolderPermissionMapOutput) ToFolderPermissionMapOutputWithContext(ctx context.Context) FolderPermissionMapOutput {
	return o
}

func (o FolderPermissionMapOutput) MapIndex(k pulumi.StringInput) FolderPermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FolderPermission {
		return vs[0].(map[string]*FolderPermission)[vs[1].(string)]
	}).(FolderPermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionInput)(nil)).Elem(), &FolderPermission{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionArrayInput)(nil)).Elem(), FolderPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionMapInput)(nil)).Elem(), FolderPermissionMap{})
	pulumi.RegisterOutputType(FolderPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionArrayOutput{})
	pulumi.RegisterOutputType(FolderPermissionMapOutput{})
}
