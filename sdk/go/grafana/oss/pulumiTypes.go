// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package oss

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type DashboardPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// DashboardPermissionPermissionInput is an input type that accepts DashboardPermissionPermissionArgs and DashboardPermissionPermissionOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionInput` via:
//
//	DashboardPermissionPermissionArgs{...}
type DashboardPermissionPermissionInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput
	ToDashboardPermissionPermissionOutputWithContext(context.Context) DashboardPermissionPermissionOutput
}

type DashboardPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (DashboardPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return i.ToDashboardPermissionPermissionOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArgs) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionOutput)
}

// DashboardPermissionPermissionArrayInput is an input type that accepts DashboardPermissionPermissionArray and DashboardPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `DashboardPermissionPermissionArrayInput` via:
//
//	DashboardPermissionPermissionArray{ DashboardPermissionPermissionArgs{...} }
type DashboardPermissionPermissionArrayInput interface {
	pulumi.Input

	ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput
	ToDashboardPermissionPermissionArrayOutputWithContext(context.Context) DashboardPermissionPermissionArrayOutput
}

type DashboardPermissionPermissionArray []DashboardPermissionPermissionInput

func (DashboardPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return i.ToDashboardPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i DashboardPermissionPermissionArray) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPermissionPermissionArrayOutput)
}

type DashboardPermissionPermissionOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutput() DashboardPermissionPermissionOutput {
	return o
}

func (o DashboardPermissionPermissionOutput) ToDashboardPermissionPermissionOutputWithContext(ctx context.Context) DashboardPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o DashboardPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o DashboardPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o DashboardPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DashboardPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type DashboardPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (DashboardPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DashboardPermissionPermission)(nil)).Elem()
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutput() DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) ToDashboardPermissionPermissionArrayOutputWithContext(ctx context.Context) DashboardPermissionPermissionArrayOutput {
	return o
}

func (o DashboardPermissionPermissionArrayOutput) Index(i pulumi.IntInput) DashboardPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DashboardPermissionPermission {
		return vs[0].([]DashboardPermissionPermission)[vs[1].(int)]
	}).(DashboardPermissionPermissionOutput)
}

type FolderPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role *string `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// FolderPermissionPermissionInput is an input type that accepts FolderPermissionPermissionArgs and FolderPermissionPermissionOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionInput` via:
//
//	FolderPermissionPermissionArgs{...}
type FolderPermissionPermissionInput interface {
	pulumi.Input

	ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput
	ToFolderPermissionPermissionOutputWithContext(context.Context) FolderPermissionPermissionOutput
}

type FolderPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (FolderPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return i.ToFolderPermissionPermissionOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArgs) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionOutput)
}

// FolderPermissionPermissionArrayInput is an input type that accepts FolderPermissionPermissionArray and FolderPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `FolderPermissionPermissionArrayInput` via:
//
//	FolderPermissionPermissionArray{ FolderPermissionPermissionArgs{...} }
type FolderPermissionPermissionArrayInput interface {
	pulumi.Input

	ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput
	ToFolderPermissionPermissionArrayOutputWithContext(context.Context) FolderPermissionPermissionArrayOutput
}

type FolderPermissionPermissionArray []FolderPermissionPermissionInput

func (FolderPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return i.ToFolderPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i FolderPermissionPermissionArray) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FolderPermissionPermissionArrayOutput)
}

type FolderPermissionPermissionOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutput() FolderPermissionPermissionOutput {
	return o
}

func (o FolderPermissionPermissionOutput) ToFolderPermissionPermissionOutputWithContext(ctx context.Context) FolderPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o FolderPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v FolderPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`.
func (o FolderPermissionPermissionOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o FolderPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FolderPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type FolderPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (FolderPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]FolderPermissionPermission)(nil)).Elem()
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutput() FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) ToFolderPermissionPermissionArrayOutputWithContext(ctx context.Context) FolderPermissionPermissionArrayOutput {
	return o
}

func (o FolderPermissionPermissionArrayOutput) Index(i pulumi.IntInput) FolderPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) FolderPermissionPermission {
		return vs[0].([]FolderPermissionPermission)[vs[1].(int)]
	}).(FolderPermissionPermissionOutput)
}

type PlaylistItem struct {
	Id    *string `pulumi:"id"`
	Order int     `pulumi:"order"`
	Title string  `pulumi:"title"`
	Type  *string `pulumi:"type"`
	Value *string `pulumi:"value"`
}

// PlaylistItemInput is an input type that accepts PlaylistItemArgs and PlaylistItemOutput values.
// You can construct a concrete instance of `PlaylistItemInput` via:
//
//	PlaylistItemArgs{...}
type PlaylistItemInput interface {
	pulumi.Input

	ToPlaylistItemOutput() PlaylistItemOutput
	ToPlaylistItemOutputWithContext(context.Context) PlaylistItemOutput
}

type PlaylistItemArgs struct {
	Id    pulumi.StringPtrInput `pulumi:"id"`
	Order pulumi.IntInput       `pulumi:"order"`
	Title pulumi.StringInput    `pulumi:"title"`
	Type  pulumi.StringPtrInput `pulumi:"type"`
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (PlaylistItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArgs) ToPlaylistItemOutput() PlaylistItemOutput {
	return i.ToPlaylistItemOutputWithContext(context.Background())
}

func (i PlaylistItemArgs) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemOutput)
}

// PlaylistItemArrayInput is an input type that accepts PlaylistItemArray and PlaylistItemArrayOutput values.
// You can construct a concrete instance of `PlaylistItemArrayInput` via:
//
//	PlaylistItemArray{ PlaylistItemArgs{...} }
type PlaylistItemArrayInput interface {
	pulumi.Input

	ToPlaylistItemArrayOutput() PlaylistItemArrayOutput
	ToPlaylistItemArrayOutputWithContext(context.Context) PlaylistItemArrayOutput
}

type PlaylistItemArray []PlaylistItemInput

func (PlaylistItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return i.ToPlaylistItemArrayOutputWithContext(context.Background())
}

func (i PlaylistItemArray) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaylistItemArrayOutput)
}

type PlaylistItemOutput struct{ *pulumi.OutputState }

func (PlaylistItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemOutput) ToPlaylistItemOutput() PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) ToPlaylistItemOutputWithContext(ctx context.Context) PlaylistItemOutput {
	return o
}

func (o PlaylistItemOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v PlaylistItem) int { return v.Order }).(pulumi.IntOutput)
}

func (o PlaylistItemOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v PlaylistItem) string { return v.Title }).(pulumi.StringOutput)
}

func (o PlaylistItemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func (o PlaylistItemOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PlaylistItem) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type PlaylistItemArrayOutput struct{ *pulumi.OutputState }

func (PlaylistItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PlaylistItem)(nil)).Elem()
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutput() PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) ToPlaylistItemArrayOutputWithContext(ctx context.Context) PlaylistItemArrayOutput {
	return o
}

func (o PlaylistItemArrayOutput) Index(i pulumi.IntInput) PlaylistItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PlaylistItem {
		return vs[0].([]PlaylistItem)[vs[1].(int)]
	}).(PlaylistItemOutput)
}

type ServiceAccountPermissionPermission struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission string `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId *string `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId *string `pulumi:"userId"`
}

// ServiceAccountPermissionPermissionInput is an input type that accepts ServiceAccountPermissionPermissionArgs and ServiceAccountPermissionPermissionOutput values.
// You can construct a concrete instance of `ServiceAccountPermissionPermissionInput` via:
//
//	ServiceAccountPermissionPermissionArgs{...}
type ServiceAccountPermissionPermissionInput interface {
	pulumi.Input

	ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput
	ToServiceAccountPermissionPermissionOutputWithContext(context.Context) ServiceAccountPermissionPermissionOutput
}

type ServiceAccountPermissionPermissionArgs struct {
	// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
	Permission pulumi.StringInput `pulumi:"permission"`
	// ID of the team to manage permissions for. Defaults to `0`.
	TeamId pulumi.StringPtrInput `pulumi:"teamId"`
	// ID of the user or service account to manage permissions for. Defaults to `0`.
	UserId pulumi.StringPtrInput `pulumi:"userId"`
}

func (ServiceAccountPermissionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return i.ToServiceAccountPermissionPermissionOutputWithContext(context.Background())
}

func (i ServiceAccountPermissionPermissionArgs) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPermissionPermissionOutput)
}

// ServiceAccountPermissionPermissionArrayInput is an input type that accepts ServiceAccountPermissionPermissionArray and ServiceAccountPermissionPermissionArrayOutput values.
// You can construct a concrete instance of `ServiceAccountPermissionPermissionArrayInput` via:
//
//	ServiceAccountPermissionPermissionArray{ ServiceAccountPermissionPermissionArgs{...} }
type ServiceAccountPermissionPermissionArrayInput interface {
	pulumi.Input

	ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput
	ToServiceAccountPermissionPermissionArrayOutputWithContext(context.Context) ServiceAccountPermissionPermissionArrayOutput
}

type ServiceAccountPermissionPermissionArray []ServiceAccountPermissionPermissionInput

func (ServiceAccountPermissionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountPermissionPermission)(nil)).Elem()
}

func (i ServiceAccountPermissionPermissionArray) ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput {
	return i.ToServiceAccountPermissionPermissionArrayOutputWithContext(context.Background())
}

func (i ServiceAccountPermissionPermissionArray) ToServiceAccountPermissionPermissionArrayOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceAccountPermissionPermissionArrayOutput)
}

type ServiceAccountPermissionPermissionOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceAccountPermissionPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutput() ServiceAccountPermissionPermissionOutput {
	return o
}

func (o ServiceAccountPermissionPermissionOutput) ToServiceAccountPermissionPermissionOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionOutput {
	return o
}

// Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.
func (o ServiceAccountPermissionPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// ID of the team to manage permissions for. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) TeamId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) *string { return v.TeamId }).(pulumi.StringPtrOutput)
}

// ID of the user or service account to manage permissions for. Defaults to `0`.
func (o ServiceAccountPermissionPermissionOutput) UserId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServiceAccountPermissionPermission) *string { return v.UserId }).(pulumi.StringPtrOutput)
}

type ServiceAccountPermissionPermissionArrayOutput struct{ *pulumi.OutputState }

func (ServiceAccountPermissionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceAccountPermissionPermission)(nil)).Elem()
}

func (o ServiceAccountPermissionPermissionArrayOutput) ToServiceAccountPermissionPermissionArrayOutput() ServiceAccountPermissionPermissionArrayOutput {
	return o
}

func (o ServiceAccountPermissionPermissionArrayOutput) ToServiceAccountPermissionPermissionArrayOutputWithContext(ctx context.Context) ServiceAccountPermissionPermissionArrayOutput {
	return o
}

func (o ServiceAccountPermissionPermissionArrayOutput) Index(i pulumi.IntInput) ServiceAccountPermissionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceAccountPermissionPermission {
		return vs[0].([]ServiceAccountPermissionPermission)[vs[1].(int)]
	}).(ServiceAccountPermissionPermissionOutput)
}

type SsoSettingsLdapSettings struct {
	// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	AllowSignUp *bool `pulumi:"allowSignUp"`
	// The LDAP configuration.
	Config SsoSettingsLdapSettingsConfig `pulumi:"config"`
	// Define whether this configuration is enabled for LDAP. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Prevent synchronizing users’ organization roles from LDAP.
	SkipOrgRoleSync *bool `pulumi:"skipOrgRoleSync"`
}

// SsoSettingsLdapSettingsInput is an input type that accepts SsoSettingsLdapSettingsArgs and SsoSettingsLdapSettingsOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsInput` via:
//
//	SsoSettingsLdapSettingsArgs{...}
type SsoSettingsLdapSettingsInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsOutput() SsoSettingsLdapSettingsOutput
	ToSsoSettingsLdapSettingsOutputWithContext(context.Context) SsoSettingsLdapSettingsOutput
}

type SsoSettingsLdapSettingsArgs struct {
	// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
	AllowSignUp pulumi.BoolPtrInput `pulumi:"allowSignUp"`
	// The LDAP configuration.
	Config SsoSettingsLdapSettingsConfigInput `pulumi:"config"`
	// Define whether this configuration is enabled for LDAP. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// Prevent synchronizing users’ organization roles from LDAP.
	SkipOrgRoleSync pulumi.BoolPtrInput `pulumi:"skipOrgRoleSync"`
}

func (SsoSettingsLdapSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettings)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsArgs) ToSsoSettingsLdapSettingsOutput() SsoSettingsLdapSettingsOutput {
	return i.ToSsoSettingsLdapSettingsOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsArgs) ToSsoSettingsLdapSettingsOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsOutput)
}

func (i SsoSettingsLdapSettingsArgs) ToSsoSettingsLdapSettingsPtrOutput() SsoSettingsLdapSettingsPtrOutput {
	return i.ToSsoSettingsLdapSettingsPtrOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsArgs) ToSsoSettingsLdapSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsOutput).ToSsoSettingsLdapSettingsPtrOutputWithContext(ctx)
}

// SsoSettingsLdapSettingsPtrInput is an input type that accepts SsoSettingsLdapSettingsArgs, SsoSettingsLdapSettingsPtr and SsoSettingsLdapSettingsPtrOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsPtrInput` via:
//
//	        SsoSettingsLdapSettingsArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsLdapSettingsPtrInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsPtrOutput() SsoSettingsLdapSettingsPtrOutput
	ToSsoSettingsLdapSettingsPtrOutputWithContext(context.Context) SsoSettingsLdapSettingsPtrOutput
}

type ssoSettingsLdapSettingsPtrType SsoSettingsLdapSettingsArgs

func SsoSettingsLdapSettingsPtr(v *SsoSettingsLdapSettingsArgs) SsoSettingsLdapSettingsPtrInput {
	return (*ssoSettingsLdapSettingsPtrType)(v)
}

func (*ssoSettingsLdapSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsLdapSettings)(nil)).Elem()
}

func (i *ssoSettingsLdapSettingsPtrType) ToSsoSettingsLdapSettingsPtrOutput() SsoSettingsLdapSettingsPtrOutput {
	return i.ToSsoSettingsLdapSettingsPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsLdapSettingsPtrType) ToSsoSettingsLdapSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsPtrOutput)
}

type SsoSettingsLdapSettingsOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettings)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsOutput) ToSsoSettingsLdapSettingsOutput() SsoSettingsLdapSettingsOutput {
	return o
}

func (o SsoSettingsLdapSettingsOutput) ToSsoSettingsLdapSettingsOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsOutput {
	return o
}

func (o SsoSettingsLdapSettingsOutput) ToSsoSettingsLdapSettingsPtrOutput() SsoSettingsLdapSettingsPtrOutput {
	return o.ToSsoSettingsLdapSettingsPtrOutputWithContext(context.Background())
}

func (o SsoSettingsLdapSettingsOutput) ToSsoSettingsLdapSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsLdapSettings) *SsoSettingsLdapSettings {
		return &v
	}).(SsoSettingsLdapSettingsPtrOutput)
}

// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
func (o SsoSettingsLdapSettingsOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettings) *bool { return v.AllowSignUp }).(pulumi.BoolPtrOutput)
}

// The LDAP configuration.
func (o SsoSettingsLdapSettingsOutput) Config() SsoSettingsLdapSettingsConfigOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettings) SsoSettingsLdapSettingsConfig { return v.Config }).(SsoSettingsLdapSettingsConfigOutput)
}

// Define whether this configuration is enabled for LDAP. Defaults to `true`.
func (o SsoSettingsLdapSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from LDAP.
func (o SsoSettingsLdapSettingsOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettings) *bool { return v.SkipOrgRoleSync }).(pulumi.BoolPtrOutput)
}

type SsoSettingsLdapSettingsPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsLdapSettings)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsPtrOutput) ToSsoSettingsLdapSettingsPtrOutput() SsoSettingsLdapSettingsPtrOutput {
	return o
}

func (o SsoSettingsLdapSettingsPtrOutput) ToSsoSettingsLdapSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsPtrOutput {
	return o
}

func (o SsoSettingsLdapSettingsPtrOutput) Elem() SsoSettingsLdapSettingsOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettings) SsoSettingsLdapSettings {
		if v != nil {
			return *v
		}
		var ret SsoSettingsLdapSettings
		return ret
	}).(SsoSettingsLdapSettingsOutput)
}

// Whether to allow new Grafana user creation through LDAP login. If set to false, then only existing Grafana users can log in with LDAP.
func (o SsoSettingsLdapSettingsPtrOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSignUp
	}).(pulumi.BoolPtrOutput)
}

// The LDAP configuration.
func (o SsoSettingsLdapSettingsPtrOutput) Config() SsoSettingsLdapSettingsConfigPtrOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettings) *SsoSettingsLdapSettingsConfig {
		if v == nil {
			return nil
		}
		return &v.Config
	}).(SsoSettingsLdapSettingsConfigPtrOutput)
}

// Define whether this configuration is enabled for LDAP. Defaults to `true`.
func (o SsoSettingsLdapSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from LDAP.
func (o SsoSettingsLdapSettingsPtrOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOrgRoleSync
	}).(pulumi.BoolPtrOutput)
}

type SsoSettingsLdapSettingsConfig struct {
	// The LDAP servers configuration.
	Servers []SsoSettingsLdapSettingsConfigServer `pulumi:"servers"`
}

// SsoSettingsLdapSettingsConfigInput is an input type that accepts SsoSettingsLdapSettingsConfigArgs and SsoSettingsLdapSettingsConfigOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigInput` via:
//
//	SsoSettingsLdapSettingsConfigArgs{...}
type SsoSettingsLdapSettingsConfigInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigOutput() SsoSettingsLdapSettingsConfigOutput
	ToSsoSettingsLdapSettingsConfigOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigOutput
}

type SsoSettingsLdapSettingsConfigArgs struct {
	// The LDAP servers configuration.
	Servers SsoSettingsLdapSettingsConfigServerArrayInput `pulumi:"servers"`
}

func (SsoSettingsLdapSettingsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfig)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsConfigArgs) ToSsoSettingsLdapSettingsConfigOutput() SsoSettingsLdapSettingsConfigOutput {
	return i.ToSsoSettingsLdapSettingsConfigOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigArgs) ToSsoSettingsLdapSettingsConfigOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigOutput)
}

func (i SsoSettingsLdapSettingsConfigArgs) ToSsoSettingsLdapSettingsConfigPtrOutput() SsoSettingsLdapSettingsConfigPtrOutput {
	return i.ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigArgs) ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigOutput).ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(ctx)
}

// SsoSettingsLdapSettingsConfigPtrInput is an input type that accepts SsoSettingsLdapSettingsConfigArgs, SsoSettingsLdapSettingsConfigPtr and SsoSettingsLdapSettingsConfigPtrOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigPtrInput` via:
//
//	        SsoSettingsLdapSettingsConfigArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsLdapSettingsConfigPtrInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigPtrOutput() SsoSettingsLdapSettingsConfigPtrOutput
	ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigPtrOutput
}

type ssoSettingsLdapSettingsConfigPtrType SsoSettingsLdapSettingsConfigArgs

func SsoSettingsLdapSettingsConfigPtr(v *SsoSettingsLdapSettingsConfigArgs) SsoSettingsLdapSettingsConfigPtrInput {
	return (*ssoSettingsLdapSettingsConfigPtrType)(v)
}

func (*ssoSettingsLdapSettingsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsLdapSettingsConfig)(nil)).Elem()
}

func (i *ssoSettingsLdapSettingsConfigPtrType) ToSsoSettingsLdapSettingsConfigPtrOutput() SsoSettingsLdapSettingsConfigPtrOutput {
	return i.ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsLdapSettingsConfigPtrType) ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigPtrOutput)
}

type SsoSettingsLdapSettingsConfigOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfig)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigOutput) ToSsoSettingsLdapSettingsConfigOutput() SsoSettingsLdapSettingsConfigOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigOutput) ToSsoSettingsLdapSettingsConfigOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigOutput) ToSsoSettingsLdapSettingsConfigPtrOutput() SsoSettingsLdapSettingsConfigPtrOutput {
	return o.ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(context.Background())
}

func (o SsoSettingsLdapSettingsConfigOutput) ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsLdapSettingsConfig) *SsoSettingsLdapSettingsConfig {
		return &v
	}).(SsoSettingsLdapSettingsConfigPtrOutput)
}

// The LDAP servers configuration.
func (o SsoSettingsLdapSettingsConfigOutput) Servers() SsoSettingsLdapSettingsConfigServerArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfig) []SsoSettingsLdapSettingsConfigServer { return v.Servers }).(SsoSettingsLdapSettingsConfigServerArrayOutput)
}

type SsoSettingsLdapSettingsConfigPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsLdapSettingsConfig)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigPtrOutput) ToSsoSettingsLdapSettingsConfigPtrOutput() SsoSettingsLdapSettingsConfigPtrOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigPtrOutput) ToSsoSettingsLdapSettingsConfigPtrOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigPtrOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigPtrOutput) Elem() SsoSettingsLdapSettingsConfigOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettingsConfig) SsoSettingsLdapSettingsConfig {
		if v != nil {
			return *v
		}
		var ret SsoSettingsLdapSettingsConfig
		return ret
	}).(SsoSettingsLdapSettingsConfigOutput)
}

// The LDAP servers configuration.
func (o SsoSettingsLdapSettingsConfigPtrOutput) Servers() SsoSettingsLdapSettingsConfigServerArrayOutput {
	return o.ApplyT(func(v *SsoSettingsLdapSettingsConfig) []SsoSettingsLdapSettingsConfigServer {
		if v == nil {
			return nil
		}
		return v.Servers
	}).(SsoSettingsLdapSettingsConfigServerArrayOutput)
}

type SsoSettingsLdapSettingsConfigServer struct {
	// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	Attributes map[string]string `pulumi:"attributes"`
	// The search user bind DN.
	BindDn *string `pulumi:"bindDn"`
	// The search user bind password.
	BindPassword *string `pulumi:"bindPassword"`
	// The path to the client certificate.
	ClientCert *string `pulumi:"clientCert"`
	// The Base64 encoded value of the client certificate.
	ClientCertValue *string `pulumi:"clientCertValue"`
	// The path to the client private key.
	ClientKey *string `pulumi:"clientKey"`
	// The Base64 encoded value of the client private key.
	ClientKeyValue *string `pulumi:"clientKeyValue"`
	// For mapping an LDAP group to a Grafana organization and role.
	GroupMappings []SsoSettingsLdapSettingsConfigServerGroupMapping `pulumi:"groupMappings"`
	// An array of the base DNs to search through for groups. Typically uses ou=groups.
	GroupSearchBaseDns []string `pulumi:"groupSearchBaseDns"`
	// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	GroupSearchFilter *string `pulumi:"groupSearchFilter"`
	// The %s in the search filter will be replaced with the attribute defined in this field.
	GroupSearchFilterUserAttribute *string `pulumi:"groupSearchFilterUserAttribute"`
	// The LDAP server host.
	Host string `pulumi:"host"`
	// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// The LDAP server port.
	Port *int `pulumi:"port"`
	// The path to the root CA certificate.
	RootCaCert *string `pulumi:"rootCaCert"`
	// The Base64 encoded values of the root CA certificates.
	RootCaCertValues []string `pulumi:"rootCaCertValues"`
	// An array of base DNs to search through.
	SearchBaseDns []string `pulumi:"searchBaseDns"`
	// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	SearchFilter string `pulumi:"searchFilter"`
	// If set to true, the SSL cert validation will be skipped.
	SslSkipVerify *bool `pulumi:"sslSkipVerify"`
	// If set to true, use LDAP with STARTTLS instead of LDAPS.
	StartTls *bool `pulumi:"startTls"`
	// The timeout in seconds for connecting to the LDAP host.
	Timeout *int `pulumi:"timeout"`
	// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	TlsCiphers []string `pulumi:"tlsCiphers"`
	// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	UseSsl *bool `pulumi:"useSsl"`
}

// SsoSettingsLdapSettingsConfigServerInput is an input type that accepts SsoSettingsLdapSettingsConfigServerArgs and SsoSettingsLdapSettingsConfigServerOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigServerInput` via:
//
//	SsoSettingsLdapSettingsConfigServerArgs{...}
type SsoSettingsLdapSettingsConfigServerInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigServerOutput() SsoSettingsLdapSettingsConfigServerOutput
	ToSsoSettingsLdapSettingsConfigServerOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigServerOutput
}

type SsoSettingsLdapSettingsConfigServerArgs struct {
	// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
	Attributes pulumi.StringMapInput `pulumi:"attributes"`
	// The search user bind DN.
	BindDn pulumi.StringPtrInput `pulumi:"bindDn"`
	// The search user bind password.
	BindPassword pulumi.StringPtrInput `pulumi:"bindPassword"`
	// The path to the client certificate.
	ClientCert pulumi.StringPtrInput `pulumi:"clientCert"`
	// The Base64 encoded value of the client certificate.
	ClientCertValue pulumi.StringPtrInput `pulumi:"clientCertValue"`
	// The path to the client private key.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// The Base64 encoded value of the client private key.
	ClientKeyValue pulumi.StringPtrInput `pulumi:"clientKeyValue"`
	// For mapping an LDAP group to a Grafana organization and role.
	GroupMappings SsoSettingsLdapSettingsConfigServerGroupMappingArrayInput `pulumi:"groupMappings"`
	// An array of the base DNs to search through for groups. Typically uses ou=groups.
	GroupSearchBaseDns pulumi.StringArrayInput `pulumi:"groupSearchBaseDns"`
	// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
	GroupSearchFilter pulumi.StringPtrInput `pulumi:"groupSearchFilter"`
	// The %s in the search filter will be replaced with the attribute defined in this field.
	GroupSearchFilterUserAttribute pulumi.StringPtrInput `pulumi:"groupSearchFilterUserAttribute"`
	// The LDAP server host.
	Host pulumi.StringInput `pulumi:"host"`
	// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// The LDAP server port.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// The path to the root CA certificate.
	RootCaCert pulumi.StringPtrInput `pulumi:"rootCaCert"`
	// The Base64 encoded values of the root CA certificates.
	RootCaCertValues pulumi.StringArrayInput `pulumi:"rootCaCertValues"`
	// An array of base DNs to search through.
	SearchBaseDns pulumi.StringArrayInput `pulumi:"searchBaseDns"`
	// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
	SearchFilter pulumi.StringInput `pulumi:"searchFilter"`
	// If set to true, the SSL cert validation will be skipped.
	SslSkipVerify pulumi.BoolPtrInput `pulumi:"sslSkipVerify"`
	// If set to true, use LDAP with STARTTLS instead of LDAPS.
	StartTls pulumi.BoolPtrInput `pulumi:"startTls"`
	// The timeout in seconds for connecting to the LDAP host.
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
	TlsCiphers pulumi.StringArrayInput `pulumi:"tlsCiphers"`
	// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
}

func (SsoSettingsLdapSettingsConfigServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfigServer)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsConfigServerArgs) ToSsoSettingsLdapSettingsConfigServerOutput() SsoSettingsLdapSettingsConfigServerOutput {
	return i.ToSsoSettingsLdapSettingsConfigServerOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigServerArgs) ToSsoSettingsLdapSettingsConfigServerOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigServerOutput)
}

// SsoSettingsLdapSettingsConfigServerArrayInput is an input type that accepts SsoSettingsLdapSettingsConfigServerArray and SsoSettingsLdapSettingsConfigServerArrayOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigServerArrayInput` via:
//
//	SsoSettingsLdapSettingsConfigServerArray{ SsoSettingsLdapSettingsConfigServerArgs{...} }
type SsoSettingsLdapSettingsConfigServerArrayInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigServerArrayOutput() SsoSettingsLdapSettingsConfigServerArrayOutput
	ToSsoSettingsLdapSettingsConfigServerArrayOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigServerArrayOutput
}

type SsoSettingsLdapSettingsConfigServerArray []SsoSettingsLdapSettingsConfigServerInput

func (SsoSettingsLdapSettingsConfigServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsoSettingsLdapSettingsConfigServer)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsConfigServerArray) ToSsoSettingsLdapSettingsConfigServerArrayOutput() SsoSettingsLdapSettingsConfigServerArrayOutput {
	return i.ToSsoSettingsLdapSettingsConfigServerArrayOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigServerArray) ToSsoSettingsLdapSettingsConfigServerArrayOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigServerArrayOutput)
}

type SsoSettingsLdapSettingsConfigServerOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfigServer)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigServerOutput) ToSsoSettingsLdapSettingsConfigServerOutput() SsoSettingsLdapSettingsConfigServerOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerOutput) ToSsoSettingsLdapSettingsConfigServerOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerOutput {
	return o
}

// The LDAP server attributes. The following attributes can be configured: email, member_of, name, surname, username.
func (o SsoSettingsLdapSettingsConfigServerOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) map[string]string { return v.Attributes }).(pulumi.StringMapOutput)
}

// The search user bind DN.
func (o SsoSettingsLdapSettingsConfigServerOutput) BindDn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.BindDn }).(pulumi.StringPtrOutput)
}

// The search user bind password.
func (o SsoSettingsLdapSettingsConfigServerOutput) BindPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.BindPassword }).(pulumi.StringPtrOutput)
}

// The path to the client certificate.
func (o SsoSettingsLdapSettingsConfigServerOutput) ClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.ClientCert }).(pulumi.StringPtrOutput)
}

// The Base64 encoded value of the client certificate.
func (o SsoSettingsLdapSettingsConfigServerOutput) ClientCertValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.ClientCertValue }).(pulumi.StringPtrOutput)
}

// The path to the client private key.
func (o SsoSettingsLdapSettingsConfigServerOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// The Base64 encoded value of the client private key.
func (o SsoSettingsLdapSettingsConfigServerOutput) ClientKeyValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.ClientKeyValue }).(pulumi.StringPtrOutput)
}

// For mapping an LDAP group to a Grafana organization and role.
func (o SsoSettingsLdapSettingsConfigServerOutput) GroupMappings() SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) []SsoSettingsLdapSettingsConfigServerGroupMapping {
		return v.GroupMappings
	}).(SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput)
}

// An array of the base DNs to search through for groups. Typically uses ou=groups.
func (o SsoSettingsLdapSettingsConfigServerOutput) GroupSearchBaseDns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) []string { return v.GroupSearchBaseDns }).(pulumi.StringArrayOutput)
}

// Group search filter, to retrieve the groups of which the user is a member (only set if memberOf attribute is not available).
func (o SsoSettingsLdapSettingsConfigServerOutput) GroupSearchFilter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.GroupSearchFilter }).(pulumi.StringPtrOutput)
}

// The %s in the search filter will be replaced with the attribute defined in this field.
func (o SsoSettingsLdapSettingsConfigServerOutput) GroupSearchFilterUserAttribute() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.GroupSearchFilterUserAttribute }).(pulumi.StringPtrOutput)
}

// The LDAP server host.
func (o SsoSettingsLdapSettingsConfigServerOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) string { return v.Host }).(pulumi.StringOutput)
}

// Minimum TLS version allowed. Accepted values are: TLS1.2, TLS1.3.
func (o SsoSettingsLdapSettingsConfigServerOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// The LDAP server port.
func (o SsoSettingsLdapSettingsConfigServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// The path to the root CA certificate.
func (o SsoSettingsLdapSettingsConfigServerOutput) RootCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *string { return v.RootCaCert }).(pulumi.StringPtrOutput)
}

// The Base64 encoded values of the root CA certificates.
func (o SsoSettingsLdapSettingsConfigServerOutput) RootCaCertValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) []string { return v.RootCaCertValues }).(pulumi.StringArrayOutput)
}

// An array of base DNs to search through.
func (o SsoSettingsLdapSettingsConfigServerOutput) SearchBaseDns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) []string { return v.SearchBaseDns }).(pulumi.StringArrayOutput)
}

// The user search filter, for example "(cn=%s)" or "(sAMAccountName=%s)" or "(uid=%s)".
func (o SsoSettingsLdapSettingsConfigServerOutput) SearchFilter() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) string { return v.SearchFilter }).(pulumi.StringOutput)
}

// If set to true, the SSL cert validation will be skipped.
func (o SsoSettingsLdapSettingsConfigServerOutput) SslSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *bool { return v.SslSkipVerify }).(pulumi.BoolPtrOutput)
}

// If set to true, use LDAP with STARTTLS instead of LDAPS.
func (o SsoSettingsLdapSettingsConfigServerOutput) StartTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *bool { return v.StartTls }).(pulumi.BoolPtrOutput)
}

// The timeout in seconds for connecting to the LDAP host.
func (o SsoSettingsLdapSettingsConfigServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// Accepted TLS ciphers. For a complete list of supported ciphers, refer to: https://go.dev/src/crypto/tls/cipher_suites.go.
func (o SsoSettingsLdapSettingsConfigServerOutput) TlsCiphers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) []string { return v.TlsCiphers }).(pulumi.StringArrayOutput)
}

// Set to true if LDAP server should use an encrypted TLS connection (either with STARTTLS or LDAPS).
func (o SsoSettingsLdapSettingsConfigServerOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServer) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

type SsoSettingsLdapSettingsConfigServerArrayOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsoSettingsLdapSettingsConfigServer)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigServerArrayOutput) ToSsoSettingsLdapSettingsConfigServerArrayOutput() SsoSettingsLdapSettingsConfigServerArrayOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerArrayOutput) ToSsoSettingsLdapSettingsConfigServerArrayOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerArrayOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerArrayOutput) Index(i pulumi.IntInput) SsoSettingsLdapSettingsConfigServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsoSettingsLdapSettingsConfigServer {
		return vs[0].([]SsoSettingsLdapSettingsConfigServer)[vs[1].(int)]
	}).(SsoSettingsLdapSettingsConfigServerOutput)
}

type SsoSettingsLdapSettingsConfigServerGroupMapping struct {
	// If set to true, it makes the user of groupDn Grafana server admin.
	GrafanaAdmin *bool `pulumi:"grafanaAdmin"`
	// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	GroupDn string `pulumi:"groupDn"`
	// The Grafana organization database id.
	OrgId *int `pulumi:"orgId"`
	// Assign users of groupDn the organization role Admin, Editor, or Viewer.
	OrgRole string `pulumi:"orgRole"`
}

// SsoSettingsLdapSettingsConfigServerGroupMappingInput is an input type that accepts SsoSettingsLdapSettingsConfigServerGroupMappingArgs and SsoSettingsLdapSettingsConfigServerGroupMappingOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigServerGroupMappingInput` via:
//
//	SsoSettingsLdapSettingsConfigServerGroupMappingArgs{...}
type SsoSettingsLdapSettingsConfigServerGroupMappingInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigServerGroupMappingOutput() SsoSettingsLdapSettingsConfigServerGroupMappingOutput
	ToSsoSettingsLdapSettingsConfigServerGroupMappingOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingOutput
}

type SsoSettingsLdapSettingsConfigServerGroupMappingArgs struct {
	// If set to true, it makes the user of groupDn Grafana server admin.
	GrafanaAdmin pulumi.BoolPtrInput `pulumi:"grafanaAdmin"`
	// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
	GroupDn pulumi.StringInput `pulumi:"groupDn"`
	// The Grafana organization database id.
	OrgId pulumi.IntPtrInput `pulumi:"orgId"`
	// Assign users of groupDn the organization role Admin, Editor, or Viewer.
	OrgRole pulumi.StringInput `pulumi:"orgRole"`
}

func (SsoSettingsLdapSettingsConfigServerGroupMappingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerGroupMapping)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsConfigServerGroupMappingArgs) ToSsoSettingsLdapSettingsConfigServerGroupMappingOutput() SsoSettingsLdapSettingsConfigServerGroupMappingOutput {
	return i.ToSsoSettingsLdapSettingsConfigServerGroupMappingOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigServerGroupMappingArgs) ToSsoSettingsLdapSettingsConfigServerGroupMappingOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigServerGroupMappingOutput)
}

// SsoSettingsLdapSettingsConfigServerGroupMappingArrayInput is an input type that accepts SsoSettingsLdapSettingsConfigServerGroupMappingArray and SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput values.
// You can construct a concrete instance of `SsoSettingsLdapSettingsConfigServerGroupMappingArrayInput` via:
//
//	SsoSettingsLdapSettingsConfigServerGroupMappingArray{ SsoSettingsLdapSettingsConfigServerGroupMappingArgs{...} }
type SsoSettingsLdapSettingsConfigServerGroupMappingArrayInput interface {
	pulumi.Input

	ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput() SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput
	ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutputWithContext(context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput
}

type SsoSettingsLdapSettingsConfigServerGroupMappingArray []SsoSettingsLdapSettingsConfigServerGroupMappingInput

func (SsoSettingsLdapSettingsConfigServerGroupMappingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsoSettingsLdapSettingsConfigServerGroupMapping)(nil)).Elem()
}

func (i SsoSettingsLdapSettingsConfigServerGroupMappingArray) ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput() SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput {
	return i.ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutputWithContext(context.Background())
}

func (i SsoSettingsLdapSettingsConfigServerGroupMappingArray) ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput)
}

type SsoSettingsLdapSettingsConfigServerGroupMappingOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigServerGroupMappingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerGroupMapping)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) ToSsoSettingsLdapSettingsConfigServerGroupMappingOutput() SsoSettingsLdapSettingsConfigServerGroupMappingOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) ToSsoSettingsLdapSettingsConfigServerGroupMappingOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingOutput {
	return o
}

// If set to true, it makes the user of groupDn Grafana server admin.
func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) GrafanaAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServerGroupMapping) *bool { return v.GrafanaAdmin }).(pulumi.BoolPtrOutput)
}

// LDAP distinguished name (DN) of LDAP group. If you want to match all (or no LDAP groups) then you can use wildcard ("*").
func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) GroupDn() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServerGroupMapping) string { return v.GroupDn }).(pulumi.StringOutput)
}

// The Grafana organization database id.
func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) OrgId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServerGroupMapping) *int { return v.OrgId }).(pulumi.IntPtrOutput)
}

// Assign users of groupDn the organization role Admin, Editor, or Viewer.
func (o SsoSettingsLdapSettingsConfigServerGroupMappingOutput) OrgRole() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsLdapSettingsConfigServerGroupMapping) string { return v.OrgRole }).(pulumi.StringOutput)
}

type SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput struct{ *pulumi.OutputState }

func (SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SsoSettingsLdapSettingsConfigServerGroupMapping)(nil)).Elem()
}

func (o SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput) ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput() SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput) ToSsoSettingsLdapSettingsConfigServerGroupMappingArrayOutputWithContext(ctx context.Context) SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput {
	return o
}

func (o SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput) Index(i pulumi.IntInput) SsoSettingsLdapSettingsConfigServerGroupMappingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SsoSettingsLdapSettingsConfigServerGroupMapping {
		return vs[0].([]SsoSettingsLdapSettingsConfigServerGroupMapping)[vs[1].(int)]
	}).(SsoSettingsLdapSettingsConfigServerGroupMappingOutput)
}

type SsoSettingsOauth2Settings struct {
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin *bool `pulumi:"allowAssignGrafanaAdmin"`
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp *bool `pulumi:"allowSignUp"`
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains *string `pulumi:"allowedDomains"`
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
	AllowedGroups *string `pulumi:"allowedGroups"`
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations *string `pulumi:"allowedOrganizations"`
	// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
	ApiUrl *string `pulumi:"apiUrl"`
	// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle *string `pulumi:"authStyle"`
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	AuthUrl *string `pulumi:"authUrl"`
	// Log in automatically, skipping the login screen.
	AutoLogin *bool `pulumi:"autoLogin"`
	// The client Id of your OAuth2 app.
	ClientId string `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret *string `pulumi:"clientSecret"`
	// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	Custom map[string]string `pulumi:"custom"`
	// Define allowed groups.
	DefineAllowedGroups *bool `pulumi:"defineAllowedGroups"`
	// Define allowed teams ids.
	DefineAllowedTeamsIds *bool `pulumi:"defineAllowedTeamsIds"`
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName *string `pulumi:"emailAttributeName"`
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath *string `pulumi:"emailAttributePath"`
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes *bool `pulumi:"emptyScopes"`
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
	GroupsAttributePath *string `pulumi:"groupsAttributePath"`
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IdTokenAttributeName *string `pulumi:"idTokenAttributeName"`
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath *string `pulumi:"loginAttributePath"`
	// Indicates the type of user interaction when the user logs in with the IdP. Available values are `login`, `consent` and `selectAccount`.
	LoginPrompt *string `pulumi:"loginPrompt"`
	// Helpful if you use more than one identity providers or SSO protocols.
	Name *string `pulumi:"name"`
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath *string `pulumi:"nameAttributePath"`
	// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "orgMapping"). Only applicable to Generic OAuth and Okta.
	OrgAttributePath *string `pulumi:"orgAttributePath"`
	// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	OrgMapping *string `pulumi:"orgMapping"`
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath *string `pulumi:"roleAttributePath"`
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict *bool `pulumi:"roleAttributeStrict"`
	// List of comma- or space-separated OAuth2 scopes.
	Scopes *string `pulumi:"scopes"`
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectUrl *string `pulumi:"signoutRedirectUrl"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `pulumi:"skipOrgRoleSync"`
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
	TeamIds *string `pulumi:"teamIds"`
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath *string `pulumi:"teamIdsAttributePath"`
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
	TeamsUrl *string `pulumi:"teamsUrl"`
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TlsClientCa *string `pulumi:"tlsClientCa"`
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TlsClientCert *string `pulumi:"tlsClientCert"`
	// The path to the key. Is not applicable on Grafana Cloud.
	TlsClientKey *string `pulumi:"tlsClientKey"`
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TlsSkipVerifyInsecure *bool `pulumi:"tlsSkipVerifyInsecure"`
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	TokenUrl *string `pulumi:"tokenUrl"`
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce *bool `pulumi:"usePkce"`
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken *bool `pulumi:"useRefreshToken"`
}

// SsoSettingsOauth2SettingsInput is an input type that accepts SsoSettingsOauth2SettingsArgs and SsoSettingsOauth2SettingsOutput values.
// You can construct a concrete instance of `SsoSettingsOauth2SettingsInput` via:
//
//	SsoSettingsOauth2SettingsArgs{...}
type SsoSettingsOauth2SettingsInput interface {
	pulumi.Input

	ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput
	ToSsoSettingsOauth2SettingsOutputWithContext(context.Context) SsoSettingsOauth2SettingsOutput
}

type SsoSettingsOauth2SettingsArgs struct {
	// If enabled, it will automatically sync the Grafana server administrator role.
	AllowAssignGrafanaAdmin pulumi.BoolPtrInput `pulumi:"allowAssignGrafanaAdmin"`
	// If not enabled, only existing Grafana users can log in using OAuth.
	AllowSignUp pulumi.BoolPtrInput `pulumi:"allowSignUp"`
	// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
	AllowedDomains pulumi.StringPtrInput `pulumi:"allowedDomains"`
	// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
	AllowedGroups pulumi.StringPtrInput `pulumi:"allowedGroups"`
	// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
	AllowedOrganizations pulumi.StringPtrInput `pulumi:"allowedOrganizations"`
	// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
	ApiUrl pulumi.StringPtrInput `pulumi:"apiUrl"`
	// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
	AuthStyle pulumi.StringPtrInput `pulumi:"authStyle"`
	// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	AuthUrl pulumi.StringPtrInput `pulumi:"authUrl"`
	// Log in automatically, skipping the login screen.
	AutoLogin pulumi.BoolPtrInput `pulumi:"autoLogin"`
	// The client Id of your OAuth2 app.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
	Custom pulumi.StringMapInput `pulumi:"custom"`
	// Define allowed groups.
	DefineAllowedGroups pulumi.BoolPtrInput `pulumi:"defineAllowedGroups"`
	// Define allowed teams ids.
	DefineAllowedTeamsIds pulumi.BoolPtrInput `pulumi:"defineAllowedTeamsIds"`
	// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
	EmailAttributeName pulumi.StringPtrInput `pulumi:"emailAttributeName"`
	// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
	EmailAttributePath pulumi.StringPtrInput `pulumi:"emailAttributePath"`
	// If enabled, no scopes will be sent to the OAuth2 provider.
	EmptyScopes pulumi.BoolPtrInput `pulumi:"emptyScopes"`
	// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
	GroupsAttributePath pulumi.StringPtrInput `pulumi:"groupsAttributePath"`
	// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
	IdTokenAttributeName pulumi.StringPtrInput `pulumi:"idTokenAttributeName"`
	// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
	LoginAttributePath pulumi.StringPtrInput `pulumi:"loginAttributePath"`
	// Indicates the type of user interaction when the user logs in with the IdP. Available values are `login`, `consent` and `selectAccount`.
	LoginPrompt pulumi.StringPtrInput `pulumi:"loginPrompt"`
	// Helpful if you use more than one identity providers or SSO protocols.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
	NameAttributePath pulumi.StringPtrInput `pulumi:"nameAttributePath"`
	// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "orgMapping"). Only applicable to Generic OAuth and Okta.
	OrgAttributePath pulumi.StringPtrInput `pulumi:"orgAttributePath"`
	// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
	OrgMapping pulumi.StringPtrInput `pulumi:"orgMapping"`
	// JMESPath expression to use for Grafana role lookup.
	RoleAttributePath pulumi.StringPtrInput `pulumi:"roleAttributePath"`
	// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
	RoleAttributeStrict pulumi.BoolPtrInput `pulumi:"roleAttributeStrict"`
	// List of comma- or space-separated OAuth2 scopes.
	Scopes pulumi.StringPtrInput `pulumi:"scopes"`
	// The URL to redirect the user to after signing out from Grafana.
	SignoutRedirectUrl pulumi.StringPtrInput `pulumi:"signoutRedirectUrl"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync pulumi.BoolPtrInput `pulumi:"skipOrgRoleSync"`
	// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
	TeamIds pulumi.StringPtrInput `pulumi:"teamIds"`
	// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
	TeamIdsAttributePath pulumi.StringPtrInput `pulumi:"teamIdsAttributePath"`
	// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
	TeamsUrl pulumi.StringPtrInput `pulumi:"teamsUrl"`
	// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
	TlsClientCa pulumi.StringPtrInput `pulumi:"tlsClientCa"`
	// The path to the certificate. Is not applicable on Grafana Cloud.
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	// The path to the key. Is not applicable on Grafana Cloud.
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
	TlsSkipVerifyInsecure pulumi.BoolPtrInput `pulumi:"tlsSkipVerifyInsecure"`
	// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
	TokenUrl pulumi.StringPtrInput `pulumi:"tokenUrl"`
	// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
	UsePkce pulumi.BoolPtrInput `pulumi:"usePkce"`
	// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
	UseRefreshToken pulumi.BoolPtrInput `pulumi:"useRefreshToken"`
}

func (SsoSettingsOauth2SettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsOauth2Settings)(nil)).Elem()
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput {
	return i.ToSsoSettingsOauth2SettingsOutputWithContext(context.Background())
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsOutput)
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return i.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (i SsoSettingsOauth2SettingsArgs) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsOutput).ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx)
}

// SsoSettingsOauth2SettingsPtrInput is an input type that accepts SsoSettingsOauth2SettingsArgs, SsoSettingsOauth2SettingsPtr and SsoSettingsOauth2SettingsPtrOutput values.
// You can construct a concrete instance of `SsoSettingsOauth2SettingsPtrInput` via:
//
//	        SsoSettingsOauth2SettingsArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsOauth2SettingsPtrInput interface {
	pulumi.Input

	ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput
	ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Context) SsoSettingsOauth2SettingsPtrOutput
}

type ssoSettingsOauth2SettingsPtrType SsoSettingsOauth2SettingsArgs

func SsoSettingsOauth2SettingsPtr(v *SsoSettingsOauth2SettingsArgs) SsoSettingsOauth2SettingsPtrInput {
	return (*ssoSettingsOauth2SettingsPtrType)(v)
}

func (*ssoSettingsOauth2SettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsOauth2Settings)(nil)).Elem()
}

func (i *ssoSettingsOauth2SettingsPtrType) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return i.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsOauth2SettingsPtrType) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsOauth2SettingsPtrOutput)
}

type SsoSettingsOauth2SettingsOutput struct{ *pulumi.OutputState }

func (SsoSettingsOauth2SettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsOauth2Settings)(nil)).Elem()
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsOutput() SsoSettingsOauth2SettingsOutput {
	return o
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsOutput {
	return o
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return o.ToSsoSettingsOauth2SettingsPtrOutputWithContext(context.Background())
}

func (o SsoSettingsOauth2SettingsOutput) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsOauth2Settings) *SsoSettingsOauth2Settings {
		return &v
	}).(SsoSettingsOauth2SettingsPtrOutput)
}

// If enabled, it will automatically sync the Grafana server administrator role.
func (o SsoSettingsOauth2SettingsOutput) AllowAssignGrafanaAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AllowAssignGrafanaAdmin }).(pulumi.BoolPtrOutput)
}

// If not enabled, only existing Grafana users can log in using OAuth.
func (o SsoSettingsOauth2SettingsOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AllowSignUp }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
func (o SsoSettingsOauth2SettingsOutput) AllowedDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedDomains }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) AllowedGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedGroups }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
func (o SsoSettingsOauth2SettingsOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AllowedOrganizations }).(pulumi.StringPtrOutput)
}

// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
func (o SsoSettingsOauth2SettingsOutput) AuthStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AuthStyle }).(pulumi.StringPtrOutput)
}

// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.AuthUrl }).(pulumi.StringPtrOutput)
}

// Log in automatically, skipping the login screen.
func (o SsoSettingsOauth2SettingsOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.AutoLogin }).(pulumi.BoolPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsOauth2SettingsOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) string { return v.ClientId }).(pulumi.StringOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsOauth2SettingsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
func (o SsoSettingsOauth2SettingsOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) map[string]string { return v.Custom }).(pulumi.StringMapOutput)
}

// Define allowed groups.
func (o SsoSettingsOauth2SettingsOutput) DefineAllowedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.DefineAllowedGroups }).(pulumi.BoolPtrOutput)
}

// Define allowed teams ids.
func (o SsoSettingsOauth2SettingsOutput) DefineAllowedTeamsIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.DefineAllowedTeamsIds }).(pulumi.BoolPtrOutput)
}

// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) EmailAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.EmailAttributeName }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) EmailAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.EmailAttributePath }).(pulumi.StringPtrOutput)
}

// If enabled, no scopes will be sent to the OAuth2 provider.
func (o SsoSettingsOauth2SettingsOutput) EmptyScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.EmptyScopes }).(pulumi.BoolPtrOutput)
}

// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
func (o SsoSettingsOauth2SettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) GroupsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.GroupsAttributePath }).(pulumi.StringPtrOutput)
}

// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) IdTokenAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.IdTokenAttributeName }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) LoginAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.LoginAttributePath }).(pulumi.StringPtrOutput)
}

// Indicates the type of user interaction when the user logs in with the IdP. Available values are `login`, `consent` and `selectAccount`.
func (o SsoSettingsOauth2SettingsOutput) LoginPrompt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.LoginPrompt }).(pulumi.StringPtrOutput)
}

// Helpful if you use more than one identity providers or SSO protocols.
func (o SsoSettingsOauth2SettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) NameAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.NameAttributePath }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "orgMapping"). Only applicable to Generic OAuth and Okta.
func (o SsoSettingsOauth2SettingsOutput) OrgAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.OrgAttributePath }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
func (o SsoSettingsOauth2SettingsOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.OrgMapping }).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for Grafana role lookup.
func (o SsoSettingsOauth2SettingsOutput) RoleAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.RoleAttributePath }).(pulumi.StringPtrOutput)
}

// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
func (o SsoSettingsOauth2SettingsOutput) RoleAttributeStrict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.RoleAttributeStrict }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated OAuth2 scopes.
func (o SsoSettingsOauth2SettingsOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.Scopes }).(pulumi.StringPtrOutput)
}

// The URL to redirect the user to after signing out from Grafana.
func (o SsoSettingsOauth2SettingsOutput) SignoutRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.SignoutRedirectUrl }).(pulumi.StringPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsOauth2SettingsOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.SkipOrgRoleSync }).(pulumi.BoolPtrOutput)
}

// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
func (o SsoSettingsOauth2SettingsOutput) TeamIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamIds }).(pulumi.StringPtrOutput)
}

// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) TeamIdsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamIdsAttributePath }).(pulumi.StringPtrOutput)
}

// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsOutput) TeamsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TeamsUrl }).(pulumi.StringPtrOutput)
}

// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientCa }).(pulumi.StringPtrOutput)
}

// The path to the certificate. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

// The path to the key. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
func (o SsoSettingsOauth2SettingsOutput) TlsSkipVerifyInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.TlsSkipVerifyInsecure }).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *string { return v.TokenUrl }).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
func (o SsoSettingsOauth2SettingsOutput) UsePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.UsePkce }).(pulumi.BoolPtrOutput)
}

// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
func (o SsoSettingsOauth2SettingsOutput) UseRefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsOauth2Settings) *bool { return v.UseRefreshToken }).(pulumi.BoolPtrOutput)
}

type SsoSettingsOauth2SettingsPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsOauth2SettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsOauth2Settings)(nil)).Elem()
}

func (o SsoSettingsOauth2SettingsPtrOutput) ToSsoSettingsOauth2SettingsPtrOutput() SsoSettingsOauth2SettingsPtrOutput {
	return o
}

func (o SsoSettingsOauth2SettingsPtrOutput) ToSsoSettingsOauth2SettingsPtrOutputWithContext(ctx context.Context) SsoSettingsOauth2SettingsPtrOutput {
	return o
}

func (o SsoSettingsOauth2SettingsPtrOutput) Elem() SsoSettingsOauth2SettingsOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) SsoSettingsOauth2Settings {
		if v != nil {
			return *v
		}
		var ret SsoSettingsOauth2Settings
		return ret
	}).(SsoSettingsOauth2SettingsOutput)
}

// If enabled, it will automatically sync the Grafana server administrator role.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowAssignGrafanaAdmin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowAssignGrafanaAdmin
	}).(pulumi.BoolPtrOutput)
}

// If not enabled, only existing Grafana users can log in using OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSignUp
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated domains. The user should belong to at least one domain to log in.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedDomains() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedDomains
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedGroups
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.
func (o SsoSettingsOauth2SettingsPtrOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedOrganizations
	}).(pulumi.StringPtrOutput)
}

// The user information endpoint of your OAuth2 provider. Required for okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.ApiUrl
	}).(pulumi.StringPtrOutput)
}

// It determines how client*id and client*secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.
func (o SsoSettingsOauth2SettingsPtrOutput) AuthStyle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AuthStyle
	}).(pulumi.StringPtrOutput)
}

// The authorization endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) AuthUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.AuthUrl
	}).(pulumi.StringPtrOutput)
}

// Log in automatically, skipping the login screen.
func (o SsoSettingsOauth2SettingsPtrOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoLogin
	}).(pulumi.BoolPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsOauth2SettingsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsOauth2SettingsPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Custom fields to configure for OAuth2 such as the [force*use*graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.
func (o SsoSettingsOauth2SettingsPtrOutput) Custom() pulumi.StringMapOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Custom
	}).(pulumi.StringMapOutput)
}

// Define allowed groups.
func (o SsoSettingsOauth2SettingsPtrOutput) DefineAllowedGroups() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DefineAllowedGroups
	}).(pulumi.BoolPtrOutput)
}

// Define allowed teams ids.
func (o SsoSettingsOauth2SettingsPtrOutput) DefineAllowedTeamsIds() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.DefineAllowedTeamsIds
	}).(pulumi.BoolPtrOutput)
}

// Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) EmailAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.EmailAttributeName
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) EmailAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.EmailAttributePath
	}).(pulumi.StringPtrOutput)
}

// If enabled, no scopes will be sent to the OAuth2 provider.
func (o SsoSettingsOauth2SettingsPtrOutput) EmptyScopes() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.EmptyScopes
	}).(pulumi.BoolPtrOutput)
}

// Define whether this configuration is enabled for the specified provider. Defaults to `true`.
func (o SsoSettingsOauth2SettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// JMESPath expression to use for user group lookup. If you configure allowed*groups, you must also configure groups*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) GroupsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.GroupsAttributePath
	}).(pulumi.StringPtrOutput)
}

// The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) IdTokenAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.IdTokenAttributeName
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) LoginAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.LoginAttributePath
	}).(pulumi.StringPtrOutput)
}

// Indicates the type of user interaction when the user logs in with the IdP. Available values are `login`, `consent` and `selectAccount`.
func (o SsoSettingsOauth2SettingsPtrOutput) LoginPrompt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.LoginPrompt
	}).(pulumi.StringPtrOutput)
}

// Helpful if you use more than one identity providers or SSO protocols.
func (o SsoSettingsOauth2SettingsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) NameAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.NameAttributePath
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for the organization mapping lookup from the user ID token. The extracted list will be used for the organization mapping (to match "Organization" in the "orgMapping"). Only applicable to Generic OAuth and Okta.
func (o SsoSettingsOauth2SettingsPtrOutput) OrgAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.OrgAttributePath
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgIdOrOrgName:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: None, Viewer, Editor or Admin.
func (o SsoSettingsOauth2SettingsPtrOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.OrgMapping
	}).(pulumi.StringPtrOutput)
}

// JMESPath expression to use for Grafana role lookup.
func (o SsoSettingsOauth2SettingsPtrOutput) RoleAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.RoleAttributePath
	}).(pulumi.StringPtrOutput)
}

// If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.
func (o SsoSettingsOauth2SettingsPtrOutput) RoleAttributeStrict() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.RoleAttributeStrict
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated OAuth2 scopes.
func (o SsoSettingsOauth2SettingsPtrOutput) Scopes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringPtrOutput)
}

// The URL to redirect the user to after signing out from Grafana.
func (o SsoSettingsOauth2SettingsPtrOutput) SignoutRedirectUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.SignoutRedirectUrl
	}).(pulumi.StringPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsOauth2SettingsPtrOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOrgRoleSync
	}).(pulumi.BoolPtrOutput)
}

// String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team*ids, you must also configure teams*url and team*ids*attribute_path.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamIds
	}).(pulumi.StringPtrOutput)
}

// The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teamsUrl endpoint. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamIdsAttributePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamIdsAttributePath
	}).(pulumi.StringPtrOutput)
}

// The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams*url, you must also configure team*ids*attribute*path. Only applicable to Generic OAuth.
func (o SsoSettingsOauth2SettingsPtrOutput) TeamsUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TeamsUrl
	}).(pulumi.StringPtrOutput)
}

// The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientCa() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientCa
	}).(pulumi.StringPtrOutput)
}

// The path to the certificate. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientCert
	}).(pulumi.StringPtrOutput)
}

// The path to the key. Is not applicable on Grafana Cloud.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TlsClientKey
	}).(pulumi.StringPtrOutput)
}

// If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.
func (o SsoSettingsOauth2SettingsPtrOutput) TlsSkipVerifyInsecure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.TlsSkipVerifyInsecure
	}).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for azuread, okta and genericOauth providers.
func (o SsoSettingsOauth2SettingsPtrOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *string {
		if v == nil {
			return nil
		}
		return v.TokenUrl
	}).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.
func (o SsoSettingsOauth2SettingsPtrOutput) UsePkce() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.UsePkce
	}).(pulumi.BoolPtrOutput)
}

// If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.
func (o SsoSettingsOauth2SettingsPtrOutput) UseRefreshToken() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsOauth2Settings) *bool {
		if v == nil {
			return nil
		}
		return v.UseRefreshToken
	}).(pulumi.BoolPtrOutput)
}

type SsoSettingsSamlSettings struct {
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated *bool `pulumi:"allowIdpInitiated"`
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp *bool `pulumi:"allowSignUp"`
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations *string `pulumi:"allowedOrganizations"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail *string `pulumi:"assertionAttributeEmail"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups *string `pulumi:"assertionAttributeGroups"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin *string `pulumi:"assertionAttributeLogin"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName *string `pulumi:"assertionAttributeName"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg *string `pulumi:"assertionAttributeOrg"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole *string `pulumi:"assertionAttributeRole"`
	// Whether SAML auto login is enabled.
	AutoLogin *bool `pulumi:"autoLogin"`
	// Base64-encoded string for the SP X.509 certificate.
	Certificate *string `pulumi:"certificate"`
	// Path for the SP X.509 certificate.
	CertificatePath *string `pulumi:"certificatePath"`
	// The client Id of your OAuth2 app.
	ClientId *string `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret *string `pulumi:"clientSecret"`
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	EntityId *string `pulumi:"entityId"`
	// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	ForceUseGraphApi *bool `pulumi:"forceUseGraphApi"`
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata *string `pulumi:"idpMetadata"`
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath *string `pulumi:"idpMetadataPath"`
	// URL for the IdP SAML metadata XML.
	IdpMetadataUrl *string `pulumi:"idpMetadataUrl"`
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay *string `pulumi:"maxIssueDelay"`
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration *string `pulumi:"metadataValidDuration"`
	// Name used to refer to the SAML authentication.
	Name *string `pulumi:"name"`
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIdFormat *string `pulumi:"nameIdFormat"`
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping *string `pulumi:"orgMapping"`
	// Base64-encoded string for the SP private key.
	PrivateKey *string `pulumi:"privateKey"`
	// Path for the SP private key.
	PrivateKeyPath *string `pulumi:"privateKeyPath"`
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState *string `pulumi:"relayState"`
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin *string `pulumi:"roleValuesAdmin"`
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor *string `pulumi:"roleValuesEditor"`
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin *string `pulumi:"roleValuesGrafanaAdmin"`
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone *string `pulumi:"roleValuesNone"`
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer *string `pulumi:"roleValuesViewer"`
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm *string `pulumi:"signatureAlgorithm"`
	// Whether SAML Single Logout is enabled.
	SingleLogout *bool `pulumi:"singleLogout"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync *bool `pulumi:"skipOrgRoleSync"`
	// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
	TokenUrl *string `pulumi:"tokenUrl"`
}

// SsoSettingsSamlSettingsInput is an input type that accepts SsoSettingsSamlSettingsArgs and SsoSettingsSamlSettingsOutput values.
// You can construct a concrete instance of `SsoSettingsSamlSettingsInput` via:
//
//	SsoSettingsSamlSettingsArgs{...}
type SsoSettingsSamlSettingsInput interface {
	pulumi.Input

	ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput
	ToSsoSettingsSamlSettingsOutputWithContext(context.Context) SsoSettingsSamlSettingsOutput
}

type SsoSettingsSamlSettingsArgs struct {
	// Whether SAML IdP-initiated login is allowed.
	AllowIdpInitiated pulumi.BoolPtrInput `pulumi:"allowIdpInitiated"`
	// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
	AllowSignUp pulumi.BoolPtrInput `pulumi:"allowSignUp"`
	// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
	AllowedOrganizations pulumi.StringPtrInput `pulumi:"allowedOrganizations"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user email.
	AssertionAttributeEmail pulumi.StringPtrInput `pulumi:"assertionAttributeEmail"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
	AssertionAttributeGroups pulumi.StringPtrInput `pulumi:"assertionAttributeGroups"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
	AssertionAttributeLogin pulumi.StringPtrInput `pulumi:"assertionAttributeLogin"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
	AssertionAttributeName pulumi.StringPtrInput `pulumi:"assertionAttributeName"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
	AssertionAttributeOrg pulumi.StringPtrInput `pulumi:"assertionAttributeOrg"`
	// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
	AssertionAttributeRole pulumi.StringPtrInput `pulumi:"assertionAttributeRole"`
	// Whether SAML auto login is enabled.
	AutoLogin pulumi.BoolPtrInput `pulumi:"autoLogin"`
	// Base64-encoded string for the SP X.509 certificate.
	Certificate pulumi.StringPtrInput `pulumi:"certificate"`
	// Path for the SP X.509 certificate.
	CertificatePath pulumi.StringPtrInput `pulumi:"certificatePath"`
	// The client Id of your OAuth2 app.
	ClientId pulumi.StringPtrInput `pulumi:"clientId"`
	// The client secret of your OAuth2 app.
	ClientSecret pulumi.StringPtrInput `pulumi:"clientSecret"`
	// Define whether this configuration is enabled for SAML. Defaults to `true`.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
	EntityId pulumi.StringPtrInput `pulumi:"entityId"`
	// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
	ForceUseGraphApi pulumi.BoolPtrInput `pulumi:"forceUseGraphApi"`
	// Base64-encoded string for the IdP SAML metadata XML.
	IdpMetadata pulumi.StringPtrInput `pulumi:"idpMetadata"`
	// Path for the IdP SAML metadata XML.
	IdpMetadataPath pulumi.StringPtrInput `pulumi:"idpMetadataPath"`
	// URL for the IdP SAML metadata XML.
	IdpMetadataUrl pulumi.StringPtrInput `pulumi:"idpMetadataUrl"`
	// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
	MaxIssueDelay pulumi.StringPtrInput `pulumi:"maxIssueDelay"`
	// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
	MetadataValidDuration pulumi.StringPtrInput `pulumi:"metadataValidDuration"`
	// Name used to refer to the SAML authentication.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIdFormat pulumi.StringPtrInput `pulumi:"nameIdFormat"`
	// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
	OrgMapping pulumi.StringPtrInput `pulumi:"orgMapping"`
	// Base64-encoded string for the SP private key.
	PrivateKey pulumi.StringPtrInput `pulumi:"privateKey"`
	// Path for the SP private key.
	PrivateKeyPath pulumi.StringPtrInput `pulumi:"privateKeyPath"`
	// Relay state for IdP-initiated login. Should match relay state configured in IdP.
	RelayState pulumi.StringPtrInput `pulumi:"relayState"`
	// List of comma- or space-separated roles which will be mapped into the Admin role.
	RoleValuesAdmin pulumi.StringPtrInput `pulumi:"roleValuesAdmin"`
	// List of comma- or space-separated roles which will be mapped into the Editor role.
	RoleValuesEditor pulumi.StringPtrInput `pulumi:"roleValuesEditor"`
	// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
	RoleValuesGrafanaAdmin pulumi.StringPtrInput `pulumi:"roleValuesGrafanaAdmin"`
	// List of comma- or space-separated roles which will be mapped into the None role.
	RoleValuesNone pulumi.StringPtrInput `pulumi:"roleValuesNone"`
	// List of comma- or space-separated roles which will be mapped into the Viewer role.
	RoleValuesViewer pulumi.StringPtrInput `pulumi:"roleValuesViewer"`
	// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
	SignatureAlgorithm pulumi.StringPtrInput `pulumi:"signatureAlgorithm"`
	// Whether SAML Single Logout is enabled.
	SingleLogout pulumi.BoolPtrInput `pulumi:"singleLogout"`
	// Prevent synchronizing users’ organization roles from your IdP.
	SkipOrgRoleSync pulumi.BoolPtrInput `pulumi:"skipOrgRoleSync"`
	// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
	TokenUrl pulumi.StringPtrInput `pulumi:"tokenUrl"`
}

func (SsoSettingsSamlSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsSamlSettings)(nil)).Elem()
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput {
	return i.ToSsoSettingsSamlSettingsOutputWithContext(context.Background())
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsOutput)
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return i.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (i SsoSettingsSamlSettingsArgs) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsOutput).ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx)
}

// SsoSettingsSamlSettingsPtrInput is an input type that accepts SsoSettingsSamlSettingsArgs, SsoSettingsSamlSettingsPtr and SsoSettingsSamlSettingsPtrOutput values.
// You can construct a concrete instance of `SsoSettingsSamlSettingsPtrInput` via:
//
//	        SsoSettingsSamlSettingsArgs{...}
//
//	or:
//
//	        nil
type SsoSettingsSamlSettingsPtrInput interface {
	pulumi.Input

	ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput
	ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Context) SsoSettingsSamlSettingsPtrOutput
}

type ssoSettingsSamlSettingsPtrType SsoSettingsSamlSettingsArgs

func SsoSettingsSamlSettingsPtr(v *SsoSettingsSamlSettingsArgs) SsoSettingsSamlSettingsPtrInput {
	return (*ssoSettingsSamlSettingsPtrType)(v)
}

func (*ssoSettingsSamlSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsSamlSettings)(nil)).Elem()
}

func (i *ssoSettingsSamlSettingsPtrType) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return i.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (i *ssoSettingsSamlSettingsPtrType) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SsoSettingsSamlSettingsPtrOutput)
}

type SsoSettingsSamlSettingsOutput struct{ *pulumi.OutputState }

func (SsoSettingsSamlSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SsoSettingsSamlSettings)(nil)).Elem()
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsOutput() SsoSettingsSamlSettingsOutput {
	return o
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsOutput {
	return o
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return o.ToSsoSettingsSamlSettingsPtrOutputWithContext(context.Background())
}

func (o SsoSettingsSamlSettingsOutput) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SsoSettingsSamlSettings) *SsoSettingsSamlSettings {
		return &v
	}).(SsoSettingsSamlSettingsPtrOutput)
}

// Whether SAML IdP-initiated login is allowed.
func (o SsoSettingsSamlSettingsOutput) AllowIdpInitiated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AllowIdpInitiated }).(pulumi.BoolPtrOutput)
}

// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
func (o SsoSettingsSamlSettingsOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AllowSignUp }).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
func (o SsoSettingsSamlSettingsOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AllowedOrganizations }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user email.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeEmail }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeGroups }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeLogin }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeName }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeOrg }).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
func (o SsoSettingsSamlSettingsOutput) AssertionAttributeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.AssertionAttributeRole }).(pulumi.StringPtrOutput)
}

// Whether SAML auto login is enabled.
func (o SsoSettingsSamlSettingsOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.AutoLogin }).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.Certificate }).(pulumi.StringPtrOutput)
}

// Path for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.CertificatePath }).(pulumi.StringPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsSamlSettingsOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsSamlSettingsOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// Define whether this configuration is enabled for SAML. Defaults to `true`.
func (o SsoSettingsSamlSettingsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
func (o SsoSettingsSamlSettingsOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.EntityId }).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
func (o SsoSettingsSamlSettingsOutput) ForceUseGraphApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.ForceUseGraphApi }).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadata }).(pulumi.StringPtrOutput)
}

// Path for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadataPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadataPath }).(pulumi.StringPtrOutput)
}

// URL for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsOutput) IdpMetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.IdpMetadataUrl }).(pulumi.StringPtrOutput)
}

// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
func (o SsoSettingsSamlSettingsOutput) MaxIssueDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.MaxIssueDelay }).(pulumi.StringPtrOutput)
}

// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
func (o SsoSettingsSamlSettingsOutput) MetadataValidDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.MetadataValidDuration }).(pulumi.StringPtrOutput)
}

// Name used to refer to the SAML authentication.
func (o SsoSettingsSamlSettingsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
func (o SsoSettingsSamlSettingsOutput) NameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.NameIdFormat }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
func (o SsoSettingsSamlSettingsOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.OrgMapping }).(pulumi.StringPtrOutput)
}

// Base64-encoded string for the SP private key.
func (o SsoSettingsSamlSettingsOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.PrivateKey }).(pulumi.StringPtrOutput)
}

// Path for the SP private key.
func (o SsoSettingsSamlSettingsOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.PrivateKeyPath }).(pulumi.StringPtrOutput)
}

// Relay state for IdP-initiated login. Should match relay state configured in IdP.
func (o SsoSettingsSamlSettingsOutput) RelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RelayState }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Admin role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesAdmin }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Editor role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesEditor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesEditor }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesGrafanaAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesGrafanaAdmin }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the None role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesNone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesNone }).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Viewer role.
func (o SsoSettingsSamlSettingsOutput) RoleValuesViewer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.RoleValuesViewer }).(pulumi.StringPtrOutput)
}

// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
func (o SsoSettingsSamlSettingsOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.SignatureAlgorithm }).(pulumi.StringPtrOutput)
}

// Whether SAML Single Logout is enabled.
func (o SsoSettingsSamlSettingsOutput) SingleLogout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.SingleLogout }).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsSamlSettingsOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *bool { return v.SkipOrgRoleSync }).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
func (o SsoSettingsSamlSettingsOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SsoSettingsSamlSettings) *string { return v.TokenUrl }).(pulumi.StringPtrOutput)
}

type SsoSettingsSamlSettingsPtrOutput struct{ *pulumi.OutputState }

func (SsoSettingsSamlSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SsoSettingsSamlSettings)(nil)).Elem()
}

func (o SsoSettingsSamlSettingsPtrOutput) ToSsoSettingsSamlSettingsPtrOutput() SsoSettingsSamlSettingsPtrOutput {
	return o
}

func (o SsoSettingsSamlSettingsPtrOutput) ToSsoSettingsSamlSettingsPtrOutputWithContext(ctx context.Context) SsoSettingsSamlSettingsPtrOutput {
	return o
}

func (o SsoSettingsSamlSettingsPtrOutput) Elem() SsoSettingsSamlSettingsOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) SsoSettingsSamlSettings {
		if v != nil {
			return *v
		}
		var ret SsoSettingsSamlSettings
		return ret
	}).(SsoSettingsSamlSettingsOutput)
}

// Whether SAML IdP-initiated login is allowed.
func (o SsoSettingsSamlSettingsPtrOutput) AllowIdpInitiated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowIdpInitiated
	}).(pulumi.BoolPtrOutput)
}

// Whether to allow new Grafana user creation through SAML login. If set to false, then only existing Grafana users can log in with SAML.
func (o SsoSettingsSamlSettingsPtrOutput) AllowSignUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AllowSignUp
	}).(pulumi.BoolPtrOutput)
}

// List of comma- or space-separated organizations. User should be a member of at least one organization to log in.
func (o SsoSettingsSamlSettingsPtrOutput) AllowedOrganizations() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AllowedOrganizations
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user email.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeEmail
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user groups.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeGroups
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user login handle.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeLogin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeLogin
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user name. Alternatively, this can be a template with variables that match the names of attributes within the SAML assertion.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeName
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user organization.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeOrg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeOrg
	}).(pulumi.StringPtrOutput)
}

// Friendly name or name of the attribute within the SAML assertion to use as the user roles.
func (o SsoSettingsSamlSettingsPtrOutput) AssertionAttributeRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.AssertionAttributeRole
	}).(pulumi.StringPtrOutput)
}

// Whether SAML auto login is enabled.
func (o SsoSettingsSamlSettingsPtrOutput) AutoLogin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoLogin
	}).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsPtrOutput) Certificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Certificate
	}).(pulumi.StringPtrOutput)
}

// Path for the SP X.509 certificate.
func (o SsoSettingsSamlSettingsPtrOutput) CertificatePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.CertificatePath
	}).(pulumi.StringPtrOutput)
}

// The client Id of your OAuth2 app.
func (o SsoSettingsSamlSettingsPtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.ClientId
	}).(pulumi.StringPtrOutput)
}

// The client secret of your OAuth2 app.
func (o SsoSettingsSamlSettingsPtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Define whether this configuration is enabled for SAML. Defaults to `true`.
func (o SsoSettingsSamlSettingsPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// The entity ID is a globally unique identifier for the service provider. It is used to identify the service provider to the identity provider. Defaults to the URL of the Grafana instance if not set.
func (o SsoSettingsSamlSettingsPtrOutput) EntityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.EntityId
	}).(pulumi.StringPtrOutput)
}

// If enabled, Grafana will fetch groups from Microsoft Graph API instead of using the groups claim from the ID token.
func (o SsoSettingsSamlSettingsPtrOutput) ForceUseGraphApi() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.ForceUseGraphApi
	}).(pulumi.BoolPtrOutput)
}

// Base64-encoded string for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadata() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadata
	}).(pulumi.StringPtrOutput)
}

// Path for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadataPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadataPath
	}).(pulumi.StringPtrOutput)
}

// URL for the IdP SAML metadata XML.
func (o SsoSettingsSamlSettingsPtrOutput) IdpMetadataUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.IdpMetadataUrl
	}).(pulumi.StringPtrOutput)
}

// Duration, since the IdP issued a response and the SP is allowed to process it. For example: 90s, 1h.
func (o SsoSettingsSamlSettingsPtrOutput) MaxIssueDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.MaxIssueDelay
	}).(pulumi.StringPtrOutput)
}

// Duration, for how long the SP metadata is valid. For example: 48h, 5d.
func (o SsoSettingsSamlSettingsPtrOutput) MetadataValidDuration() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.MetadataValidDuration
	}).(pulumi.StringPtrOutput)
}

// Name used to refer to the SAML authentication.
func (o SsoSettingsSamlSettingsPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// The Name ID Format to request within the SAML assertion. Defaults to urn:oasis:names:tc:SAML:2.0:nameid-format:transient
func (o SsoSettingsSamlSettingsPtrOutput) NameIdFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.NameIdFormat
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated Organization:OrgId:Role mappings. Organization can be * meaning “All users”. Role is optional and can have the following values: Viewer, Editor or Admin.
func (o SsoSettingsSamlSettingsPtrOutput) OrgMapping() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.OrgMapping
	}).(pulumi.StringPtrOutput)
}

// Base64-encoded string for the SP private key.
func (o SsoSettingsSamlSettingsPtrOutput) PrivateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKey
	}).(pulumi.StringPtrOutput)
}

// Path for the SP private key.
func (o SsoSettingsSamlSettingsPtrOutput) PrivateKeyPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.PrivateKeyPath
	}).(pulumi.StringPtrOutput)
}

// Relay state for IdP-initiated login. Should match relay state configured in IdP.
func (o SsoSettingsSamlSettingsPtrOutput) RelayState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RelayState
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Admin role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesAdmin
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Editor role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesEditor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesEditor
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Grafana Admin (Super Admin) role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesGrafanaAdmin() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesGrafanaAdmin
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the None role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesNone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesNone
	}).(pulumi.StringPtrOutput)
}

// List of comma- or space-separated roles which will be mapped into the Viewer role.
func (o SsoSettingsSamlSettingsPtrOutput) RoleValuesViewer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.RoleValuesViewer
	}).(pulumi.StringPtrOutput)
}

// Signature algorithm used for signing requests to the IdP. Supported values are rsa-sha1, rsa-sha256, rsa-sha512.
func (o SsoSettingsSamlSettingsPtrOutput) SignatureAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.SignatureAlgorithm
	}).(pulumi.StringPtrOutput)
}

// Whether SAML Single Logout is enabled.
func (o SsoSettingsSamlSettingsPtrOutput) SingleLogout() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SingleLogout
	}).(pulumi.BoolPtrOutput)
}

// Prevent synchronizing users’ organization roles from your IdP.
func (o SsoSettingsSamlSettingsPtrOutput) SkipOrgRoleSync() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *bool {
		if v == nil {
			return nil
		}
		return v.SkipOrgRoleSync
	}).(pulumi.BoolPtrOutput)
}

// The token endpoint of your OAuth2 provider. Required for Azure AD providers.
func (o SsoSettingsSamlSettingsPtrOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SsoSettingsSamlSettings) *string {
		if v == nil {
			return nil
		}
		return v.TokenUrl
	}).(pulumi.StringPtrOutput)
}

type TeamPreferences struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart *string `pulumi:"weekStart"`
}

// TeamPreferencesInput is an input type that accepts TeamPreferencesArgs and TeamPreferencesOutput values.
// You can construct a concrete instance of `TeamPreferencesInput` via:
//
//	TeamPreferencesArgs{...}
type TeamPreferencesInput interface {
	pulumi.Input

	ToTeamPreferencesOutput() TeamPreferencesOutput
	ToTeamPreferencesOutputWithContext(context.Context) TeamPreferencesOutput
}

type TeamPreferencesArgs struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid pulumi.StringPtrInput `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart pulumi.StringPtrInput `pulumi:"weekStart"`
}

func (TeamPreferencesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return i.ToTeamPreferencesOutputWithContext(context.Background())
}

func (i TeamPreferencesArgs) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput)
}

func (i TeamPreferencesArgs) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return i.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (i TeamPreferencesArgs) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesOutput).ToTeamPreferencesPtrOutputWithContext(ctx)
}

// TeamPreferencesPtrInput is an input type that accepts TeamPreferencesArgs, TeamPreferencesPtr and TeamPreferencesPtrOutput values.
// You can construct a concrete instance of `TeamPreferencesPtrInput` via:
//
//	        TeamPreferencesArgs{...}
//
//	or:
//
//	        nil
type TeamPreferencesPtrInput interface {
	pulumi.Input

	ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput
	ToTeamPreferencesPtrOutputWithContext(context.Context) TeamPreferencesPtrOutput
}

type teamPreferencesPtrType TeamPreferencesArgs

func TeamPreferencesPtr(v *TeamPreferencesArgs) TeamPreferencesPtrInput {
	return (*teamPreferencesPtrType)(v)
}

func (*teamPreferencesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (i *teamPreferencesPtrType) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return i.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (i *teamPreferencesPtrType) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamPreferencesPtrOutput)
}

type TeamPreferencesOutput struct{ *pulumi.OutputState }

func (TeamPreferencesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutput() TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesOutputWithContext(ctx context.Context) TeamPreferencesOutput {
	return o
}

func (o TeamPreferencesOutput) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return o.ToTeamPreferencesPtrOutputWithContext(context.Background())
}

func (o TeamPreferencesOutput) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeamPreferences) *TeamPreferences {
		return &v
	}).(TeamPreferencesPtrOutput)
}

// The UID of the dashboard to display when a team member logs in.
func (o TeamPreferencesOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.HomeDashboardUid }).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o TeamPreferencesOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.Theme }).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o TeamPreferencesOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o TeamPreferencesOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TeamPreferences) *string { return v.WeekStart }).(pulumi.StringPtrOutput)
}

type TeamPreferencesPtrOutput struct{ *pulumi.OutputState }

func (TeamPreferencesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamPreferences)(nil)).Elem()
}

func (o TeamPreferencesPtrOutput) ToTeamPreferencesPtrOutput() TeamPreferencesPtrOutput {
	return o
}

func (o TeamPreferencesPtrOutput) ToTeamPreferencesPtrOutputWithContext(ctx context.Context) TeamPreferencesPtrOutput {
	return o
}

func (o TeamPreferencesPtrOutput) Elem() TeamPreferencesOutput {
	return o.ApplyT(func(v *TeamPreferences) TeamPreferences {
		if v != nil {
			return *v
		}
		var ret TeamPreferences
		return ret
	}).(TeamPreferencesOutput)
}

// The UID of the dashboard to display when a team member logs in.
func (o TeamPreferencesPtrOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.HomeDashboardUid
	}).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o TeamPreferencesPtrOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.Theme
	}).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o TeamPreferencesPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o TeamPreferencesPtrOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TeamPreferences) *string {
		if v == nil {
			return nil
		}
		return v.WeekStart
	}).(pulumi.StringPtrOutput)
}

type TeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

// TeamTeamSyncInput is an input type that accepts TeamTeamSyncArgs and TeamTeamSyncOutput values.
// You can construct a concrete instance of `TeamTeamSyncInput` via:
//
//	TeamTeamSyncArgs{...}
type TeamTeamSyncInput interface {
	pulumi.Input

	ToTeamTeamSyncOutput() TeamTeamSyncOutput
	ToTeamTeamSyncOutputWithContext(context.Context) TeamTeamSyncOutput
}

type TeamTeamSyncArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
}

func (TeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return i.ToTeamTeamSyncOutputWithContext(context.Background())
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncOutput)
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return i.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (i TeamTeamSyncArgs) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncOutput).ToTeamTeamSyncPtrOutputWithContext(ctx)
}

// TeamTeamSyncPtrInput is an input type that accepts TeamTeamSyncArgs, TeamTeamSyncPtr and TeamTeamSyncPtrOutput values.
// You can construct a concrete instance of `TeamTeamSyncPtrInput` via:
//
//	        TeamTeamSyncArgs{...}
//
//	or:
//
//	        nil
type TeamTeamSyncPtrInput interface {
	pulumi.Input

	ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput
	ToTeamTeamSyncPtrOutputWithContext(context.Context) TeamTeamSyncPtrOutput
}

type teamTeamSyncPtrType TeamTeamSyncArgs

func TeamTeamSyncPtr(v *TeamTeamSyncArgs) TeamTeamSyncPtrInput {
	return (*teamTeamSyncPtrType)(v)
}

func (*teamTeamSyncPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamTeamSync)(nil)).Elem()
}

func (i *teamTeamSyncPtrType) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return i.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (i *teamTeamSyncPtrType) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamTeamSyncPtrOutput)
}

type TeamTeamSyncOutput struct{ *pulumi.OutputState }

func (TeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TeamTeamSync)(nil)).Elem()
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutput() TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncOutputWithContext(ctx context.Context) TeamTeamSyncOutput {
	return o
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return o.ToTeamTeamSyncPtrOutputWithContext(context.Background())
}

func (o TeamTeamSyncOutput) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TeamTeamSync) *TeamTeamSync {
		return &v
	}).(TeamTeamSyncPtrOutput)
}

func (o TeamTeamSyncOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v TeamTeamSync) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

type TeamTeamSyncPtrOutput struct{ *pulumi.OutputState }

func (TeamTeamSyncPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TeamTeamSync)(nil)).Elem()
}

func (o TeamTeamSyncPtrOutput) ToTeamTeamSyncPtrOutput() TeamTeamSyncPtrOutput {
	return o
}

func (o TeamTeamSyncPtrOutput) ToTeamTeamSyncPtrOutputWithContext(ctx context.Context) TeamTeamSyncPtrOutput {
	return o
}

func (o TeamTeamSyncPtrOutput) Elem() TeamTeamSyncOutput {
	return o.ApplyT(func(v *TeamTeamSync) TeamTeamSync {
		if v != nil {
			return *v
		}
		var ret TeamTeamSync
		return ret
	}).(TeamTeamSyncOutput)
}

func (o TeamTeamSyncPtrOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *TeamTeamSync) []string {
		if v == nil {
			return nil
		}
		return v.Groups
	}).(pulumi.StringArrayOutput)
}

type GetDashboardsDashboard struct {
	FolderTitle string `pulumi:"folderTitle"`
	Title       string `pulumi:"title"`
	Uid         string `pulumi:"uid"`
}

// GetDashboardsDashboardInput is an input type that accepts GetDashboardsDashboardArgs and GetDashboardsDashboardOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardInput` via:
//
//	GetDashboardsDashboardArgs{...}
type GetDashboardsDashboardInput interface {
	pulumi.Input

	ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput
	ToGetDashboardsDashboardOutputWithContext(context.Context) GetDashboardsDashboardOutput
}

type GetDashboardsDashboardArgs struct {
	FolderTitle pulumi.StringInput `pulumi:"folderTitle"`
	Title       pulumi.StringInput `pulumi:"title"`
	Uid         pulumi.StringInput `pulumi:"uid"`
}

func (GetDashboardsDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return i.ToGetDashboardsDashboardOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArgs) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardOutput)
}

// GetDashboardsDashboardArrayInput is an input type that accepts GetDashboardsDashboardArray and GetDashboardsDashboardArrayOutput values.
// You can construct a concrete instance of `GetDashboardsDashboardArrayInput` via:
//
//	GetDashboardsDashboardArray{ GetDashboardsDashboardArgs{...} }
type GetDashboardsDashboardArrayInput interface {
	pulumi.Input

	ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput
	ToGetDashboardsDashboardArrayOutputWithContext(context.Context) GetDashboardsDashboardArrayOutput
}

type GetDashboardsDashboardArray []GetDashboardsDashboardInput

func (GetDashboardsDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return i.ToGetDashboardsDashboardArrayOutputWithContext(context.Background())
}

func (i GetDashboardsDashboardArray) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDashboardsDashboardArrayOutput)
}

type GetDashboardsDashboardOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutput() GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) ToGetDashboardsDashboardOutputWithContext(ctx context.Context) GetDashboardsDashboardOutput {
	return o
}

func (o GetDashboardsDashboardOutput) FolderTitle() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.FolderTitle }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetDashboardsDashboardOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetDashboardsDashboard) string { return v.Uid }).(pulumi.StringOutput)
}

type GetDashboardsDashboardArrayOutput struct{ *pulumi.OutputState }

func (GetDashboardsDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDashboardsDashboard)(nil)).Elem()
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutput() GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) ToGetDashboardsDashboardArrayOutputWithContext(ctx context.Context) GetDashboardsDashboardArrayOutput {
	return o
}

func (o GetDashboardsDashboardArrayOutput) Index(i pulumi.IntInput) GetDashboardsDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDashboardsDashboard {
		return vs[0].([]GetDashboardsDashboard)[vs[1].(int)]
	}).(GetDashboardsDashboardOutput)
}

type GetFoldersFolder struct {
	// The folder ID.
	Id int `pulumi:"id"`
	// The folder title.
	Title string `pulumi:"title"`
	// The folder's unique identifier.
	Uid string `pulumi:"uid"`
	// The folder's URL
	Url string `pulumi:"url"`
}

// GetFoldersFolderInput is an input type that accepts GetFoldersFolderArgs and GetFoldersFolderOutput values.
// You can construct a concrete instance of `GetFoldersFolderInput` via:
//
//	GetFoldersFolderArgs{...}
type GetFoldersFolderInput interface {
	pulumi.Input

	ToGetFoldersFolderOutput() GetFoldersFolderOutput
	ToGetFoldersFolderOutputWithContext(context.Context) GetFoldersFolderOutput
}

type GetFoldersFolderArgs struct {
	// The folder ID.
	Id pulumi.IntInput `pulumi:"id"`
	// The folder title.
	Title pulumi.StringInput `pulumi:"title"`
	// The folder's unique identifier.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The folder's URL
	Url pulumi.StringInput `pulumi:"url"`
}

func (GetFoldersFolderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return i.ToGetFoldersFolderOutputWithContext(context.Background())
}

func (i GetFoldersFolderArgs) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderOutput)
}

// GetFoldersFolderArrayInput is an input type that accepts GetFoldersFolderArray and GetFoldersFolderArrayOutput values.
// You can construct a concrete instance of `GetFoldersFolderArrayInput` via:
//
//	GetFoldersFolderArray{ GetFoldersFolderArgs{...} }
type GetFoldersFolderArrayInput interface {
	pulumi.Input

	ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput
	ToGetFoldersFolderArrayOutputWithContext(context.Context) GetFoldersFolderArrayOutput
}

type GetFoldersFolderArray []GetFoldersFolderInput

func (GetFoldersFolderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return i.ToGetFoldersFolderArrayOutputWithContext(context.Background())
}

func (i GetFoldersFolderArray) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetFoldersFolderArrayOutput)
}

type GetFoldersFolderOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutput() GetFoldersFolderOutput {
	return o
}

func (o GetFoldersFolderOutput) ToGetFoldersFolderOutputWithContext(ctx context.Context) GetFoldersFolderOutput {
	return o
}

// The folder ID.
func (o GetFoldersFolderOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetFoldersFolder) int { return v.Id }).(pulumi.IntOutput)
}

// The folder title.
func (o GetFoldersFolderOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Title }).(pulumi.StringOutput)
}

// The folder's unique identifier.
func (o GetFoldersFolderOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Uid }).(pulumi.StringOutput)
}

// The folder's URL
func (o GetFoldersFolderOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v GetFoldersFolder) string { return v.Url }).(pulumi.StringOutput)
}

type GetFoldersFolderArrayOutput struct{ *pulumi.OutputState }

func (GetFoldersFolderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetFoldersFolder)(nil)).Elem()
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutput() GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) ToGetFoldersFolderArrayOutputWithContext(ctx context.Context) GetFoldersFolderArrayOutput {
	return o
}

func (o GetFoldersFolderArrayOutput) Index(i pulumi.IntInput) GetFoldersFolderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetFoldersFolder {
		return vs[0].([]GetFoldersFolder)[vs[1].(int)]
	}).(GetFoldersFolderOutput)
}

type GetLibraryPanelsPanel struct {
	Description string `pulumi:"description"`
	FolderUid   string `pulumi:"folderUid"`
	ModelJson   string `pulumi:"modelJson"`
	Name        string `pulumi:"name"`
	Uid         string `pulumi:"uid"`
}

// GetLibraryPanelsPanelInput is an input type that accepts GetLibraryPanelsPanelArgs and GetLibraryPanelsPanelOutput values.
// You can construct a concrete instance of `GetLibraryPanelsPanelInput` via:
//
//	GetLibraryPanelsPanelArgs{...}
type GetLibraryPanelsPanelInput interface {
	pulumi.Input

	ToGetLibraryPanelsPanelOutput() GetLibraryPanelsPanelOutput
	ToGetLibraryPanelsPanelOutputWithContext(context.Context) GetLibraryPanelsPanelOutput
}

type GetLibraryPanelsPanelArgs struct {
	Description pulumi.StringInput `pulumi:"description"`
	FolderUid   pulumi.StringInput `pulumi:"folderUid"`
	ModelJson   pulumi.StringInput `pulumi:"modelJson"`
	Name        pulumi.StringInput `pulumi:"name"`
	Uid         pulumi.StringInput `pulumi:"uid"`
}

func (GetLibraryPanelsPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLibraryPanelsPanel)(nil)).Elem()
}

func (i GetLibraryPanelsPanelArgs) ToGetLibraryPanelsPanelOutput() GetLibraryPanelsPanelOutput {
	return i.ToGetLibraryPanelsPanelOutputWithContext(context.Background())
}

func (i GetLibraryPanelsPanelArgs) ToGetLibraryPanelsPanelOutputWithContext(ctx context.Context) GetLibraryPanelsPanelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLibraryPanelsPanelOutput)
}

// GetLibraryPanelsPanelArrayInput is an input type that accepts GetLibraryPanelsPanelArray and GetLibraryPanelsPanelArrayOutput values.
// You can construct a concrete instance of `GetLibraryPanelsPanelArrayInput` via:
//
//	GetLibraryPanelsPanelArray{ GetLibraryPanelsPanelArgs{...} }
type GetLibraryPanelsPanelArrayInput interface {
	pulumi.Input

	ToGetLibraryPanelsPanelArrayOutput() GetLibraryPanelsPanelArrayOutput
	ToGetLibraryPanelsPanelArrayOutputWithContext(context.Context) GetLibraryPanelsPanelArrayOutput
}

type GetLibraryPanelsPanelArray []GetLibraryPanelsPanelInput

func (GetLibraryPanelsPanelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLibraryPanelsPanel)(nil)).Elem()
}

func (i GetLibraryPanelsPanelArray) ToGetLibraryPanelsPanelArrayOutput() GetLibraryPanelsPanelArrayOutput {
	return i.ToGetLibraryPanelsPanelArrayOutputWithContext(context.Background())
}

func (i GetLibraryPanelsPanelArray) ToGetLibraryPanelsPanelArrayOutputWithContext(ctx context.Context) GetLibraryPanelsPanelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLibraryPanelsPanelArrayOutput)
}

type GetLibraryPanelsPanelOutput struct{ *pulumi.OutputState }

func (GetLibraryPanelsPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLibraryPanelsPanel)(nil)).Elem()
}

func (o GetLibraryPanelsPanelOutput) ToGetLibraryPanelsPanelOutput() GetLibraryPanelsPanelOutput {
	return o
}

func (o GetLibraryPanelsPanelOutput) ToGetLibraryPanelsPanelOutputWithContext(ctx context.Context) GetLibraryPanelsPanelOutput {
	return o
}

func (o GetLibraryPanelsPanelOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLibraryPanelsPanel) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetLibraryPanelsPanelOutput) FolderUid() pulumi.StringOutput {
	return o.ApplyT(func(v GetLibraryPanelsPanel) string { return v.FolderUid }).(pulumi.StringOutput)
}

func (o GetLibraryPanelsPanelOutput) ModelJson() pulumi.StringOutput {
	return o.ApplyT(func(v GetLibraryPanelsPanel) string { return v.ModelJson }).(pulumi.StringOutput)
}

func (o GetLibraryPanelsPanelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetLibraryPanelsPanel) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetLibraryPanelsPanelOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetLibraryPanelsPanel) string { return v.Uid }).(pulumi.StringOutput)
}

type GetLibraryPanelsPanelArrayOutput struct{ *pulumi.OutputState }

func (GetLibraryPanelsPanelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLibraryPanelsPanel)(nil)).Elem()
}

func (o GetLibraryPanelsPanelArrayOutput) ToGetLibraryPanelsPanelArrayOutput() GetLibraryPanelsPanelArrayOutput {
	return o
}

func (o GetLibraryPanelsPanelArrayOutput) ToGetLibraryPanelsPanelArrayOutputWithContext(ctx context.Context) GetLibraryPanelsPanelArrayOutput {
	return o
}

func (o GetLibraryPanelsPanelArrayOutput) Index(i pulumi.IntInput) GetLibraryPanelsPanelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLibraryPanelsPanel {
		return vs[0].([]GetLibraryPanelsPanel)[vs[1].(int)]
	}).(GetLibraryPanelsPanelOutput)
}

type GetTeamPreference struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid *string `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme *string `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone *string `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart *string `pulumi:"weekStart"`
}

// GetTeamPreferenceInput is an input type that accepts GetTeamPreferenceArgs and GetTeamPreferenceOutput values.
// You can construct a concrete instance of `GetTeamPreferenceInput` via:
//
//	GetTeamPreferenceArgs{...}
type GetTeamPreferenceInput interface {
	pulumi.Input

	ToGetTeamPreferenceOutput() GetTeamPreferenceOutput
	ToGetTeamPreferenceOutputWithContext(context.Context) GetTeamPreferenceOutput
}

type GetTeamPreferenceArgs struct {
	// The UID of the dashboard to display when a team member logs in.
	HomeDashboardUid pulumi.StringPtrInput `pulumi:"homeDashboardUid"`
	// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
	Theme pulumi.StringPtrInput `pulumi:"theme"`
	// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
	WeekStart pulumi.StringPtrInput `pulumi:"weekStart"`
}

func (GetTeamPreferenceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return i.ToGetTeamPreferenceOutputWithContext(context.Background())
}

func (i GetTeamPreferenceArgs) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamPreferenceOutput)
}

// GetTeamPreferenceArrayInput is an input type that accepts GetTeamPreferenceArray and GetTeamPreferenceArrayOutput values.
// You can construct a concrete instance of `GetTeamPreferenceArrayInput` via:
//
//	GetTeamPreferenceArray{ GetTeamPreferenceArgs{...} }
type GetTeamPreferenceArrayInput interface {
	pulumi.Input

	ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput
	ToGetTeamPreferenceArrayOutputWithContext(context.Context) GetTeamPreferenceArrayOutput
}

type GetTeamPreferenceArray []GetTeamPreferenceInput

func (GetTeamPreferenceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamPreference)(nil)).Elem()
}

func (i GetTeamPreferenceArray) ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput {
	return i.ToGetTeamPreferenceArrayOutputWithContext(context.Background())
}

func (i GetTeamPreferenceArray) ToGetTeamPreferenceArrayOutputWithContext(ctx context.Context) GetTeamPreferenceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamPreferenceArrayOutput)
}

type GetTeamPreferenceOutput struct{ *pulumi.OutputState }

func (GetTeamPreferenceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamPreference)(nil)).Elem()
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutput() GetTeamPreferenceOutput {
	return o
}

func (o GetTeamPreferenceOutput) ToGetTeamPreferenceOutputWithContext(ctx context.Context) GetTeamPreferenceOutput {
	return o
}

// The UID of the dashboard to display when a team member logs in.
func (o GetTeamPreferenceOutput) HomeDashboardUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.HomeDashboardUid }).(pulumi.StringPtrOutput)
}

// The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.
func (o GetTeamPreferenceOutput) Theme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.Theme }).(pulumi.StringPtrOutput)
}

// The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.
func (o GetTeamPreferenceOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.
func (o GetTeamPreferenceOutput) WeekStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTeamPreference) *string { return v.WeekStart }).(pulumi.StringPtrOutput)
}

type GetTeamPreferenceArrayOutput struct{ *pulumi.OutputState }

func (GetTeamPreferenceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamPreference)(nil)).Elem()
}

func (o GetTeamPreferenceArrayOutput) ToGetTeamPreferenceArrayOutput() GetTeamPreferenceArrayOutput {
	return o
}

func (o GetTeamPreferenceArrayOutput) ToGetTeamPreferenceArrayOutputWithContext(ctx context.Context) GetTeamPreferenceArrayOutput {
	return o
}

func (o GetTeamPreferenceArrayOutput) Index(i pulumi.IntInput) GetTeamPreferenceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamPreference {
		return vs[0].([]GetTeamPreference)[vs[1].(int)]
	}).(GetTeamPreferenceOutput)
}

type GetTeamTeamSync struct {
	Groups []string `pulumi:"groups"`
}

// GetTeamTeamSyncInput is an input type that accepts GetTeamTeamSyncArgs and GetTeamTeamSyncOutput values.
// You can construct a concrete instance of `GetTeamTeamSyncInput` via:
//
//	GetTeamTeamSyncArgs{...}
type GetTeamTeamSyncInput interface {
	pulumi.Input

	ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput
	ToGetTeamTeamSyncOutputWithContext(context.Context) GetTeamTeamSyncOutput
}

type GetTeamTeamSyncArgs struct {
	Groups pulumi.StringArrayInput `pulumi:"groups"`
}

func (GetTeamTeamSyncArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return i.ToGetTeamTeamSyncOutputWithContext(context.Background())
}

func (i GetTeamTeamSyncArgs) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamTeamSyncOutput)
}

// GetTeamTeamSyncArrayInput is an input type that accepts GetTeamTeamSyncArray and GetTeamTeamSyncArrayOutput values.
// You can construct a concrete instance of `GetTeamTeamSyncArrayInput` via:
//
//	GetTeamTeamSyncArray{ GetTeamTeamSyncArgs{...} }
type GetTeamTeamSyncArrayInput interface {
	pulumi.Input

	ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput
	ToGetTeamTeamSyncArrayOutputWithContext(context.Context) GetTeamTeamSyncArrayOutput
}

type GetTeamTeamSyncArray []GetTeamTeamSyncInput

func (GetTeamTeamSyncArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamTeamSync)(nil)).Elem()
}

func (i GetTeamTeamSyncArray) ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput {
	return i.ToGetTeamTeamSyncArrayOutputWithContext(context.Background())
}

func (i GetTeamTeamSyncArray) ToGetTeamTeamSyncArrayOutputWithContext(ctx context.Context) GetTeamTeamSyncArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTeamTeamSyncArrayOutput)
}

type GetTeamTeamSyncOutput struct{ *pulumi.OutputState }

func (GetTeamTeamSyncOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTeamTeamSync)(nil)).Elem()
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutput() GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) ToGetTeamTeamSyncOutputWithContext(ctx context.Context) GetTeamTeamSyncOutput {
	return o
}

func (o GetTeamTeamSyncOutput) Groups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetTeamTeamSync) []string { return v.Groups }).(pulumi.StringArrayOutput)
}

type GetTeamTeamSyncArrayOutput struct{ *pulumi.OutputState }

func (GetTeamTeamSyncArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTeamTeamSync)(nil)).Elem()
}

func (o GetTeamTeamSyncArrayOutput) ToGetTeamTeamSyncArrayOutput() GetTeamTeamSyncArrayOutput {
	return o
}

func (o GetTeamTeamSyncArrayOutput) ToGetTeamTeamSyncArrayOutputWithContext(ctx context.Context) GetTeamTeamSyncArrayOutput {
	return o
}

func (o GetTeamTeamSyncArrayOutput) Index(i pulumi.IntInput) GetTeamTeamSyncOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTeamTeamSync {
		return vs[0].([]GetTeamTeamSync)[vs[1].(int)]
	}).(GetTeamTeamSyncOutput)
}

type GetUsersUser struct {
	// The user's email.
	Email string `pulumi:"email"`
	// The user ID.
	Id int `pulumi:"id"`
	// Whether the user is admin or not.
	IsAdmin bool `pulumi:"isAdmin"`
	// The user's login.
	Login string `pulumi:"login"`
	// The user's name.
	Name string `pulumi:"name"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//	GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	// The user's email.
	Email pulumi.StringInput `pulumi:"email"`
	// The user ID.
	Id pulumi.IntInput `pulumi:"id"`
	// Whether the user is admin or not.
	IsAdmin pulumi.BoolInput `pulumi:"isAdmin"`
	// The user's login.
	Login pulumi.StringInput `pulumi:"login"`
	// The user's name.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//	GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

// The user's email.
func (o GetUsersUserOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Email }).(pulumi.StringOutput)
}

// The user ID.
func (o GetUsersUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUser) int { return v.Id }).(pulumi.IntOutput)
}

// Whether the user is admin or not.
func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

// The user's login.
func (o GetUsersUserOutput) Login() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Login }).(pulumi.StringOutput)
}

// The user's name.
func (o GetUsersUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionInput)(nil)).Elem(), DashboardPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPermissionPermissionArrayInput)(nil)).Elem(), DashboardPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionInput)(nil)).Elem(), FolderPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FolderPermissionPermissionArrayInput)(nil)).Elem(), FolderPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemInput)(nil)).Elem(), PlaylistItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaylistItemArrayInput)(nil)).Elem(), PlaylistItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPermissionPermissionInput)(nil)).Elem(), ServiceAccountPermissionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceAccountPermissionPermissionArrayInput)(nil)).Elem(), ServiceAccountPermissionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsInput)(nil)).Elem(), SsoSettingsLdapSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsPtrInput)(nil)).Elem(), SsoSettingsLdapSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigPtrInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerArrayInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerGroupMappingInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigServerGroupMappingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsLdapSettingsConfigServerGroupMappingArrayInput)(nil)).Elem(), SsoSettingsLdapSettingsConfigServerGroupMappingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsOauth2SettingsInput)(nil)).Elem(), SsoSettingsOauth2SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsOauth2SettingsPtrInput)(nil)).Elem(), SsoSettingsOauth2SettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsSamlSettingsInput)(nil)).Elem(), SsoSettingsSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SsoSettingsSamlSettingsPtrInput)(nil)).Elem(), SsoSettingsSamlSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesInput)(nil)).Elem(), TeamPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamPreferencesPtrInput)(nil)).Elem(), TeamPreferencesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamTeamSyncInput)(nil)).Elem(), TeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamTeamSyncPtrInput)(nil)).Elem(), TeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardInput)(nil)).Elem(), GetDashboardsDashboardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDashboardsDashboardArrayInput)(nil)).Elem(), GetDashboardsDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderInput)(nil)).Elem(), GetFoldersFolderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetFoldersFolderArrayInput)(nil)).Elem(), GetFoldersFolderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLibraryPanelsPanelInput)(nil)).Elem(), GetLibraryPanelsPanelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLibraryPanelsPanelArrayInput)(nil)).Elem(), GetLibraryPanelsPanelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamPreferenceInput)(nil)).Elem(), GetTeamPreferenceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamPreferenceArrayInput)(nil)).Elem(), GetTeamPreferenceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamTeamSyncInput)(nil)).Elem(), GetTeamTeamSyncArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTeamTeamSyncArrayInput)(nil)).Elem(), GetTeamTeamSyncArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionOutput{})
	pulumi.RegisterOutputType(DashboardPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionOutput{})
	pulumi.RegisterOutputType(FolderPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(PlaylistItemOutput{})
	pulumi.RegisterOutputType(PlaylistItemArrayOutput{})
	pulumi.RegisterOutputType(ServiceAccountPermissionPermissionOutput{})
	pulumi.RegisterOutputType(ServiceAccountPermissionPermissionArrayOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsPtrOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigPtrOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigServerOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigServerArrayOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigServerGroupMappingOutput{})
	pulumi.RegisterOutputType(SsoSettingsLdapSettingsConfigServerGroupMappingArrayOutput{})
	pulumi.RegisterOutputType(SsoSettingsOauth2SettingsOutput{})
	pulumi.RegisterOutputType(SsoSettingsOauth2SettingsPtrOutput{})
	pulumi.RegisterOutputType(SsoSettingsSamlSettingsOutput{})
	pulumi.RegisterOutputType(SsoSettingsSamlSettingsPtrOutput{})
	pulumi.RegisterOutputType(TeamPreferencesOutput{})
	pulumi.RegisterOutputType(TeamPreferencesPtrOutput{})
	pulumi.RegisterOutputType(TeamTeamSyncOutput{})
	pulumi.RegisterOutputType(TeamTeamSyncPtrOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardOutput{})
	pulumi.RegisterOutputType(GetDashboardsDashboardArrayOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderOutput{})
	pulumi.RegisterOutputType(GetFoldersFolderArrayOutput{})
	pulumi.RegisterOutputType(GetLibraryPanelsPanelOutput{})
	pulumi.RegisterOutputType(GetLibraryPanelsPanelArrayOutput{})
	pulumi.RegisterOutputType(GetTeamPreferenceOutput{})
	pulumi.RegisterOutputType(GetTeamPreferenceArrayOutput{})
	pulumi.RegisterOutputType(GetTeamTeamSyncOutput{})
	pulumi.RegisterOutputType(GetTeamTeamSyncArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
}
