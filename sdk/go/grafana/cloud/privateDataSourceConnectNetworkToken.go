// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#create-a-token)
//
// Required access policy scopes:
//
// * accesspolicies:read
// * accesspolicies:write
// * accesspolicies:delete
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/cloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := cloud.LookupStack(ctx, &cloud.LookupStackArgs{
//				Slug: "<your slug>",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			test, err := cloud.NewPrivateDataSourceConnectNetwork(ctx, "test", &cloud.PrivateDataSourceConnectNetworkArgs{
//				Region:          pulumi.String("prod-us-east-0"),
//				Name:            pulumi.String("my-pdc"),
//				DisplayName:     pulumi.String("My PDC"),
//				StackIdentifier: pulumi.String(current.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloud.NewPrivateDataSourceConnectNetworkToken(ctx, "test", &cloud.PrivateDataSourceConnectNetworkTokenArgs{
//				PdcNetworkId: test.PdcNetworkId,
//				Region:       test.Region,
//				Name:         pulumi.String("my-pdc-token"),
//				DisplayName:  pulumi.String("My PDC Token"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:cloud/privateDataSourceConnectNetworkToken:PrivateDataSourceConnectNetworkToken name "{{ region }}:{{ tokenId }}"
// ```
type PrivateDataSourceConnectNetworkToken struct {
	pulumi.CustomResourceState

	// Creation date of the private data source network token.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Display name of the private data source network token. Defaults to the name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Expiration date of the private data source network token. Does not expire by default.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// Name of the private data source network token.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the private data source network for which to create a token.
	PdcNetworkId pulumi.StringOutput `pulumi:"pdcNetworkId"`
	// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringOutput `pulumi:"region"`
	Token  pulumi.StringOutput `pulumi:"token"`
	// Last update date of the private data source network token.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewPrivateDataSourceConnectNetworkToken registers a new resource with the given unique name, arguments, and options.
func NewPrivateDataSourceConnectNetworkToken(ctx *pulumi.Context,
	name string, args *PrivateDataSourceConnectNetworkTokenArgs, opts ...pulumi.ResourceOption) (*PrivateDataSourceConnectNetworkToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PdcNetworkId == nil {
		return nil, errors.New("invalid value for required argument 'PdcNetworkId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateDataSourceConnectNetworkToken
	err := ctx.RegisterResource("grafana:cloud/privateDataSourceConnectNetworkToken:PrivateDataSourceConnectNetworkToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateDataSourceConnectNetworkToken gets an existing PrivateDataSourceConnectNetworkToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateDataSourceConnectNetworkToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateDataSourceConnectNetworkTokenState, opts ...pulumi.ResourceOption) (*PrivateDataSourceConnectNetworkToken, error) {
	var resource PrivateDataSourceConnectNetworkToken
	err := ctx.ReadResource("grafana:cloud/privateDataSourceConnectNetworkToken:PrivateDataSourceConnectNetworkToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateDataSourceConnectNetworkToken resources.
type privateDataSourceConnectNetworkTokenState struct {
	// Creation date of the private data source network token.
	CreatedAt *string `pulumi:"createdAt"`
	// Display name of the private data source network token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the private data source network token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the private data source network token.
	Name *string `pulumi:"name"`
	// ID of the private data source network for which to create a token.
	PdcNetworkId *string `pulumi:"pdcNetworkId"`
	// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region *string `pulumi:"region"`
	Token  *string `pulumi:"token"`
	// Last update date of the private data source network token.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type PrivateDataSourceConnectNetworkTokenState struct {
	// Creation date of the private data source network token.
	CreatedAt pulumi.StringPtrInput
	// Display name of the private data source network token. Defaults to the name.
	DisplayName pulumi.StringPtrInput
	// Expiration date of the private data source network token. Does not expire by default.
	ExpiresAt pulumi.StringPtrInput
	// Name of the private data source network token.
	Name pulumi.StringPtrInput
	// ID of the private data source network for which to create a token.
	PdcNetworkId pulumi.StringPtrInput
	// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringPtrInput
	Token  pulumi.StringPtrInput
	// Last update date of the private data source network token.
	UpdatedAt pulumi.StringPtrInput
}

func (PrivateDataSourceConnectNetworkTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateDataSourceConnectNetworkTokenState)(nil)).Elem()
}

type privateDataSourceConnectNetworkTokenArgs struct {
	// Display name of the private data source network token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the private data source network token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the private data source network token.
	Name *string `pulumi:"name"`
	// ID of the private data source network for which to create a token.
	PdcNetworkId string `pulumi:"pdcNetworkId"`
	// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a PrivateDataSourceConnectNetworkToken resource.
type PrivateDataSourceConnectNetworkTokenArgs struct {
	// Display name of the private data source network token. Defaults to the name.
	DisplayName pulumi.StringPtrInput
	// Expiration date of the private data source network token. Does not expire by default.
	ExpiresAt pulumi.StringPtrInput
	// Name of the private data source network token.
	Name pulumi.StringPtrInput
	// ID of the private data source network for which to create a token.
	PdcNetworkId pulumi.StringInput
	// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringInput
}

func (PrivateDataSourceConnectNetworkTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateDataSourceConnectNetworkTokenArgs)(nil)).Elem()
}

type PrivateDataSourceConnectNetworkTokenInput interface {
	pulumi.Input

	ToPrivateDataSourceConnectNetworkTokenOutput() PrivateDataSourceConnectNetworkTokenOutput
	ToPrivateDataSourceConnectNetworkTokenOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenOutput
}

func (*PrivateDataSourceConnectNetworkToken) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (i *PrivateDataSourceConnectNetworkToken) ToPrivateDataSourceConnectNetworkTokenOutput() PrivateDataSourceConnectNetworkTokenOutput {
	return i.ToPrivateDataSourceConnectNetworkTokenOutputWithContext(context.Background())
}

func (i *PrivateDataSourceConnectNetworkToken) ToPrivateDataSourceConnectNetworkTokenOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDataSourceConnectNetworkTokenOutput)
}

// PrivateDataSourceConnectNetworkTokenArrayInput is an input type that accepts PrivateDataSourceConnectNetworkTokenArray and PrivateDataSourceConnectNetworkTokenArrayOutput values.
// You can construct a concrete instance of `PrivateDataSourceConnectNetworkTokenArrayInput` via:
//
//	PrivateDataSourceConnectNetworkTokenArray{ PrivateDataSourceConnectNetworkTokenArgs{...} }
type PrivateDataSourceConnectNetworkTokenArrayInput interface {
	pulumi.Input

	ToPrivateDataSourceConnectNetworkTokenArrayOutput() PrivateDataSourceConnectNetworkTokenArrayOutput
	ToPrivateDataSourceConnectNetworkTokenArrayOutputWithContext(context.Context) PrivateDataSourceConnectNetworkTokenArrayOutput
}

type PrivateDataSourceConnectNetworkTokenArray []PrivateDataSourceConnectNetworkTokenInput

func (PrivateDataSourceConnectNetworkTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (i PrivateDataSourceConnectNetworkTokenArray) ToPrivateDataSourceConnectNetworkTokenArrayOutput() PrivateDataSourceConnectNetworkTokenArrayOutput {
	return i.ToPrivateDataSourceConnectNetworkTokenArrayOutputWithContext(context.Background())
}

func (i PrivateDataSourceConnectNetworkTokenArray) ToPrivateDataSourceConnectNetworkTokenArrayOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDataSourceConnectNetworkTokenArrayOutput)
}

// PrivateDataSourceConnectNetworkTokenMapInput is an input type that accepts PrivateDataSourceConnectNetworkTokenMap and PrivateDataSourceConnectNetworkTokenMapOutput values.
// You can construct a concrete instance of `PrivateDataSourceConnectNetworkTokenMapInput` via:
//
//	PrivateDataSourceConnectNetworkTokenMap{ "key": PrivateDataSourceConnectNetworkTokenArgs{...} }
type PrivateDataSourceConnectNetworkTokenMapInput interface {
	pulumi.Input

	ToPrivateDataSourceConnectNetworkTokenMapOutput() PrivateDataSourceConnectNetworkTokenMapOutput
	ToPrivateDataSourceConnectNetworkTokenMapOutputWithContext(context.Context) PrivateDataSourceConnectNetworkTokenMapOutput
}

type PrivateDataSourceConnectNetworkTokenMap map[string]PrivateDataSourceConnectNetworkTokenInput

func (PrivateDataSourceConnectNetworkTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (i PrivateDataSourceConnectNetworkTokenMap) ToPrivateDataSourceConnectNetworkTokenMapOutput() PrivateDataSourceConnectNetworkTokenMapOutput {
	return i.ToPrivateDataSourceConnectNetworkTokenMapOutputWithContext(context.Background())
}

func (i PrivateDataSourceConnectNetworkTokenMap) ToPrivateDataSourceConnectNetworkTokenMapOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateDataSourceConnectNetworkTokenMapOutput)
}

type PrivateDataSourceConnectNetworkTokenOutput struct{ *pulumi.OutputState }

func (PrivateDataSourceConnectNetworkTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (o PrivateDataSourceConnectNetworkTokenOutput) ToPrivateDataSourceConnectNetworkTokenOutput() PrivateDataSourceConnectNetworkTokenOutput {
	return o
}

func (o PrivateDataSourceConnectNetworkTokenOutput) ToPrivateDataSourceConnectNetworkTokenOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenOutput {
	return o
}

// Creation date of the private data source network token.
func (o PrivateDataSourceConnectNetworkTokenOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Display name of the private data source network token. Defaults to the name.
func (o PrivateDataSourceConnectNetworkTokenOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Expiration date of the private data source network token. Does not expire by default.
func (o PrivateDataSourceConnectNetworkTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// Name of the private data source network token.
func (o PrivateDataSourceConnectNetworkTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// ID of the private data source network for which to create a token.
func (o PrivateDataSourceConnectNetworkTokenOutput) PdcNetworkId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.PdcNetworkId }).(pulumi.StringOutput)
}

// Region of the private data source network. Should be set to the same region as the private data source network. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
func (o PrivateDataSourceConnectNetworkTokenOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o PrivateDataSourceConnectNetworkTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Last update date of the private data source network token.
func (o PrivateDataSourceConnectNetworkTokenOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateDataSourceConnectNetworkToken) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type PrivateDataSourceConnectNetworkTokenArrayOutput struct{ *pulumi.OutputState }

func (PrivateDataSourceConnectNetworkTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (o PrivateDataSourceConnectNetworkTokenArrayOutput) ToPrivateDataSourceConnectNetworkTokenArrayOutput() PrivateDataSourceConnectNetworkTokenArrayOutput {
	return o
}

func (o PrivateDataSourceConnectNetworkTokenArrayOutput) ToPrivateDataSourceConnectNetworkTokenArrayOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenArrayOutput {
	return o
}

func (o PrivateDataSourceConnectNetworkTokenArrayOutput) Index(i pulumi.IntInput) PrivateDataSourceConnectNetworkTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateDataSourceConnectNetworkToken {
		return vs[0].([]*PrivateDataSourceConnectNetworkToken)[vs[1].(int)]
	}).(PrivateDataSourceConnectNetworkTokenOutput)
}

type PrivateDataSourceConnectNetworkTokenMapOutput struct{ *pulumi.OutputState }

func (PrivateDataSourceConnectNetworkTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateDataSourceConnectNetworkToken)(nil)).Elem()
}

func (o PrivateDataSourceConnectNetworkTokenMapOutput) ToPrivateDataSourceConnectNetworkTokenMapOutput() PrivateDataSourceConnectNetworkTokenMapOutput {
	return o
}

func (o PrivateDataSourceConnectNetworkTokenMapOutput) ToPrivateDataSourceConnectNetworkTokenMapOutputWithContext(ctx context.Context) PrivateDataSourceConnectNetworkTokenMapOutput {
	return o
}

func (o PrivateDataSourceConnectNetworkTokenMapOutput) MapIndex(k pulumi.StringInput) PrivateDataSourceConnectNetworkTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateDataSourceConnectNetworkToken {
		return vs[0].(map[string]*PrivateDataSourceConnectNetworkToken)[vs[1].(string)]
	}).(PrivateDataSourceConnectNetworkTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDataSourceConnectNetworkTokenInput)(nil)).Elem(), &PrivateDataSourceConnectNetworkToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDataSourceConnectNetworkTokenArrayInput)(nil)).Elem(), PrivateDataSourceConnectNetworkTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateDataSourceConnectNetworkTokenMapInput)(nil)).Elem(), PrivateDataSourceConnectNetworkTokenMap{})
	pulumi.RegisterOutputType(PrivateDataSourceConnectNetworkTokenOutput{})
	pulumi.RegisterOutputType(PrivateDataSourceConnectNetworkTokenArrayOutput{})
	pulumi.RegisterOutputType(PrivateDataSourceConnectNetworkTokenMapOutput{})
}
