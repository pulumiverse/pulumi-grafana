// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// * [Official documentation](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#create-a-token)
//
// Required access policy scopes:
//
// * accesspolicies:read
// * accesspolicies:write
// * accesspolicies:delete
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/cloud"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := cloud.GetOrganization(ctx, &cloud.GetOrganizationArgs{
//				Slug: pulumi.StringRef("<your org slug>"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			test, err := cloud.NewAccessPolicy(ctx, "test", &cloud.AccessPolicyArgs{
//				Region:      pulumi.String("us"),
//				Name:        pulumi.String("my-policy"),
//				DisplayName: pulumi.String("My Policy"),
//				Scopes: pulumi.StringArray{
//					pulumi.String("metrics:read"),
//					pulumi.String("logs:read"),
//				},
//				Realms: cloud.AccessPolicyRealmArray{
//					&cloud.AccessPolicyRealmArgs{
//						Type:       pulumi.String("org"),
//						Identifier: pulumi.String(current.Id),
//						LabelPolicies: cloud.AccessPolicyRealmLabelPolicyArray{
//							&cloud.AccessPolicyRealmLabelPolicyArgs{
//								Selector: pulumi.String("{namespace=\"default\"}"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloud.NewAccessPolicyToken(ctx, "test", &cloud.AccessPolicyTokenArgs{
//				Region:         pulumi.String("us"),
//				AccessPolicyId: test.PolicyId,
//				Name:           pulumi.String("my-policy-token"),
//				DisplayName:    pulumi.String("My Policy Token"),
//				ExpiresAt:      pulumi.String("2023-01-01T00:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
// $ pulumi import grafana:cloud/accessPolicyToken:AccessPolicyToken name "{{ region }}:{{ tokenId }}"
// ```
type AccessPolicyToken struct {
	pulumi.CustomResourceState

	// ID of the access policy for which to create a token.
	AccessPolicyId pulumi.StringOutput `pulumi:"accessPolicyId"`
	// Creation date of the access policy token.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumi.StringPtrOutput `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumi.StringPtrOutput `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringOutput `pulumi:"region"`
	Token  pulumi.StringOutput `pulumi:"token"`
	// Last update date of the access policy token.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewAccessPolicyToken registers a new resource with the given unique name, arguments, and options.
func NewAccessPolicyToken(ctx *pulumi.Context,
	name string, args *AccessPolicyTokenArgs, opts ...pulumi.ResourceOption) (*AccessPolicyToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'AccessPolicyId'")
	}
	if args.Region == nil {
		return nil, errors.New("invalid value for required argument 'Region'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"token",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessPolicyToken
	err := ctx.RegisterResource("grafana:cloud/accessPolicyToken:AccessPolicyToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessPolicyToken gets an existing AccessPolicyToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessPolicyToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessPolicyTokenState, opts ...pulumi.ResourceOption) (*AccessPolicyToken, error) {
	var resource AccessPolicyToken
	err := ctx.ReadResource("grafana:cloud/accessPolicyToken:AccessPolicyToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessPolicyToken resources.
type accessPolicyTokenState struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId *string `pulumi:"accessPolicyId"`
	// Creation date of the access policy token.
	CreatedAt *string `pulumi:"createdAt"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name *string `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region *string `pulumi:"region"`
	Token  *string `pulumi:"token"`
	// Last update date of the access policy token.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type AccessPolicyTokenState struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId pulumi.StringPtrInput
	// Creation date of the access policy token.
	CreatedAt pulumi.StringPtrInput
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumi.StringPtrInput
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumi.StringPtrInput
	// Name of the access policy token.
	Name pulumi.StringPtrInput
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringPtrInput
	Token  pulumi.StringPtrInput
	// Last update date of the access policy token.
	UpdatedAt pulumi.StringPtrInput
}

func (AccessPolicyTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyTokenState)(nil)).Elem()
}

type accessPolicyTokenArgs struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId string `pulumi:"accessPolicyId"`
	// Display name of the access policy token. Defaults to the name.
	DisplayName *string `pulumi:"displayName"`
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Name of the access policy token.
	Name *string `pulumi:"name"`
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region string `pulumi:"region"`
}

// The set of arguments for constructing a AccessPolicyToken resource.
type AccessPolicyTokenArgs struct {
	// ID of the access policy for which to create a token.
	AccessPolicyId pulumi.StringInput
	// Display name of the access policy token. Defaults to the name.
	DisplayName pulumi.StringPtrInput
	// Expiration date of the access policy token. Does not expire by default.
	ExpiresAt pulumi.StringPtrInput
	// Name of the access policy token.
	Name pulumi.StringPtrInput
	// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
	Region pulumi.StringInput
}

func (AccessPolicyTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessPolicyTokenArgs)(nil)).Elem()
}

type AccessPolicyTokenInput interface {
	pulumi.Input

	ToAccessPolicyTokenOutput() AccessPolicyTokenOutput
	ToAccessPolicyTokenOutputWithContext(ctx context.Context) AccessPolicyTokenOutput
}

func (*AccessPolicyToken) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyToken)(nil)).Elem()
}

func (i *AccessPolicyToken) ToAccessPolicyTokenOutput() AccessPolicyTokenOutput {
	return i.ToAccessPolicyTokenOutputWithContext(context.Background())
}

func (i *AccessPolicyToken) ToAccessPolicyTokenOutputWithContext(ctx context.Context) AccessPolicyTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyTokenOutput)
}

// AccessPolicyTokenArrayInput is an input type that accepts AccessPolicyTokenArray and AccessPolicyTokenArrayOutput values.
// You can construct a concrete instance of `AccessPolicyTokenArrayInput` via:
//
//	AccessPolicyTokenArray{ AccessPolicyTokenArgs{...} }
type AccessPolicyTokenArrayInput interface {
	pulumi.Input

	ToAccessPolicyTokenArrayOutput() AccessPolicyTokenArrayOutput
	ToAccessPolicyTokenArrayOutputWithContext(context.Context) AccessPolicyTokenArrayOutput
}

type AccessPolicyTokenArray []AccessPolicyTokenInput

func (AccessPolicyTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyToken)(nil)).Elem()
}

func (i AccessPolicyTokenArray) ToAccessPolicyTokenArrayOutput() AccessPolicyTokenArrayOutput {
	return i.ToAccessPolicyTokenArrayOutputWithContext(context.Background())
}

func (i AccessPolicyTokenArray) ToAccessPolicyTokenArrayOutputWithContext(ctx context.Context) AccessPolicyTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyTokenArrayOutput)
}

// AccessPolicyTokenMapInput is an input type that accepts AccessPolicyTokenMap and AccessPolicyTokenMapOutput values.
// You can construct a concrete instance of `AccessPolicyTokenMapInput` via:
//
//	AccessPolicyTokenMap{ "key": AccessPolicyTokenArgs{...} }
type AccessPolicyTokenMapInput interface {
	pulumi.Input

	ToAccessPolicyTokenMapOutput() AccessPolicyTokenMapOutput
	ToAccessPolicyTokenMapOutputWithContext(context.Context) AccessPolicyTokenMapOutput
}

type AccessPolicyTokenMap map[string]AccessPolicyTokenInput

func (AccessPolicyTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyToken)(nil)).Elem()
}

func (i AccessPolicyTokenMap) ToAccessPolicyTokenMapOutput() AccessPolicyTokenMapOutput {
	return i.ToAccessPolicyTokenMapOutputWithContext(context.Background())
}

func (i AccessPolicyTokenMap) ToAccessPolicyTokenMapOutputWithContext(ctx context.Context) AccessPolicyTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessPolicyTokenMapOutput)
}

type AccessPolicyTokenOutput struct{ *pulumi.OutputState }

func (AccessPolicyTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessPolicyToken)(nil)).Elem()
}

func (o AccessPolicyTokenOutput) ToAccessPolicyTokenOutput() AccessPolicyTokenOutput {
	return o
}

func (o AccessPolicyTokenOutput) ToAccessPolicyTokenOutputWithContext(ctx context.Context) AccessPolicyTokenOutput {
	return o
}

// ID of the access policy for which to create a token.
func (o AccessPolicyTokenOutput) AccessPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.AccessPolicyId }).(pulumi.StringOutput)
}

// Creation date of the access policy token.
func (o AccessPolicyTokenOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Display name of the access policy token. Defaults to the name.
func (o AccessPolicyTokenOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringPtrOutput { return v.DisplayName }).(pulumi.StringPtrOutput)
}

// Expiration date of the access policy token. Does not expire by default.
func (o AccessPolicyTokenOutput) ExpiresAt() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringPtrOutput { return v.ExpiresAt }).(pulumi.StringPtrOutput)
}

// Name of the access policy token.
func (o AccessPolicyTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the list of available regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.
func (o AccessPolicyTokenOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

func (o AccessPolicyTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Last update date of the access policy token.
func (o AccessPolicyTokenOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessPolicyToken) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type AccessPolicyTokenArrayOutput struct{ *pulumi.OutputState }

func (AccessPolicyTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessPolicyToken)(nil)).Elem()
}

func (o AccessPolicyTokenArrayOutput) ToAccessPolicyTokenArrayOutput() AccessPolicyTokenArrayOutput {
	return o
}

func (o AccessPolicyTokenArrayOutput) ToAccessPolicyTokenArrayOutputWithContext(ctx context.Context) AccessPolicyTokenArrayOutput {
	return o
}

func (o AccessPolicyTokenArrayOutput) Index(i pulumi.IntInput) AccessPolicyTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessPolicyToken {
		return vs[0].([]*AccessPolicyToken)[vs[1].(int)]
	}).(AccessPolicyTokenOutput)
}

type AccessPolicyTokenMapOutput struct{ *pulumi.OutputState }

func (AccessPolicyTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessPolicyToken)(nil)).Elem()
}

func (o AccessPolicyTokenMapOutput) ToAccessPolicyTokenMapOutput() AccessPolicyTokenMapOutput {
	return o
}

func (o AccessPolicyTokenMapOutput) ToAccessPolicyTokenMapOutputWithContext(ctx context.Context) AccessPolicyTokenMapOutput {
	return o
}

func (o AccessPolicyTokenMapOutput) MapIndex(k pulumi.StringInput) AccessPolicyTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessPolicyToken {
		return vs[0].(map[string]*AccessPolicyToken)[vs[1].(string)]
	}).(AccessPolicyTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyTokenInput)(nil)).Elem(), &AccessPolicyToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyTokenArrayInput)(nil)).Elem(), AccessPolicyTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessPolicyTokenMapInput)(nil)).Elem(), AccessPolicyTokenMap{})
	pulumi.RegisterOutputType(AccessPolicyTokenOutput{})
	pulumi.RegisterOutputType(AccessPolicyTokenArrayOutput{})
	pulumi.RegisterOutputType(AccessPolicyTokenMapOutput{})
}
