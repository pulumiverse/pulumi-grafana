// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fleetmanagement

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Represents a Grafana Fleet Management collector.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/collector-api/)
//
// Required access policy scopes:
//
// * fleet-management:read
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/fleetmanagement"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := fleetmanagement.GetCollector(ctx, &fleetmanagement.GetCollectorArgs{
//				Id: "my_collector",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCollector(ctx *pulumi.Context, args *LookupCollectorArgs, opts ...pulumi.InvokeOption) (*LookupCollectorResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCollectorResult
	err := ctx.Invoke("grafana:fleetManagement/getCollector:getCollector", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCollector.
type LookupCollectorArgs struct {
	// ID of the collector
	Id string `pulumi:"id"`
}

// A collection of values returned by getCollector.
type LookupCollectorResult struct {
	// Whether the collector is enabled or not
	Enabled bool `pulumi:"enabled"`
	// ID of the collector
	Id string `pulumi:"id"`
	// Local attributes for the collector
	LocalAttributes map[string]string `pulumi:"localAttributes"`
	// Remote attributes for the collector
	RemoteAttributes map[string]string `pulumi:"remoteAttributes"`
}

func LookupCollectorOutput(ctx *pulumi.Context, args LookupCollectorOutputArgs, opts ...pulumi.InvokeOption) LookupCollectorResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCollectorResultOutput, error) {
			args := v.(LookupCollectorArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:fleetManagement/getCollector:getCollector", args, LookupCollectorResultOutput{}, options).(LookupCollectorResultOutput), nil
		}).(LookupCollectorResultOutput)
}

// A collection of arguments for invoking getCollector.
type LookupCollectorOutputArgs struct {
	// ID of the collector
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupCollectorOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorArgs)(nil)).Elem()
}

// A collection of values returned by getCollector.
type LookupCollectorResultOutput struct{ *pulumi.OutputState }

func (LookupCollectorResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCollectorResult)(nil)).Elem()
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutput() LookupCollectorResultOutput {
	return o
}

func (o LookupCollectorResultOutput) ToLookupCollectorResultOutputWithContext(ctx context.Context) LookupCollectorResultOutput {
	return o
}

// Whether the collector is enabled or not
func (o LookupCollectorResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCollectorResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// ID of the collector
func (o LookupCollectorResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCollectorResult) string { return v.Id }).(pulumi.StringOutput)
}

// Local attributes for the collector
func (o LookupCollectorResultOutput) LocalAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCollectorResult) map[string]string { return v.LocalAttributes }).(pulumi.StringMapOutput)
}

// Remote attributes for the collector
func (o LookupCollectorResultOutput) RemoteAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCollectorResult) map[string]string { return v.RemoteAttributes }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCollectorResultOutput{})
}
