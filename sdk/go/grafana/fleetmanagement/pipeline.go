// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package fleetmanagement

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// Manages Grafana Fleet Management pipelines.
//
// * [Official documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/)
// * [API documentation](https://grafana.com/docs/grafana-cloud/send-data/fleet-management/api-reference/pipeline-api/)
//
// **Note:** Fleet Management is in [public preview](https://grafana.com/docs/release-life-cycle/#public-preview) and this resource is experimental. Grafana Labs offers limited support, and breaking changes might occur.
//
// Required access policy scopes:
//
// * fleet-management:read
// * fleet-management:write
//
// ## Import
//
// ```sh
// $ pulumi import grafana:fleetManagement/pipeline:Pipeline name "{{ name }}"
// ```
type Pipeline struct {
	pulumi.CustomResourceState

	// Configuration contents of the pipeline to be used by collectors
	Contents pulumi.StringOutput `pulumi:"contents"`
	// Whether the pipeline is enabled for collectors
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers pulumi.StringArrayOutput `pulumi:"matchers"`
	// Name of the pipeline which is the unique identifier for the pipeline
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPipeline registers a new resource with the given unique name, arguments, and options.
func NewPipeline(ctx *pulumi.Context,
	name string, args *PipelineArgs, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contents == nil {
		return nil, errors.New("invalid value for required argument 'Contents'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Pipeline
	err := ctx.RegisterResource("grafana:fleetManagement/pipeline:Pipeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPipeline gets an existing Pipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPipeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PipelineState, opts ...pulumi.ResourceOption) (*Pipeline, error) {
	var resource Pipeline
	err := ctx.ReadResource("grafana:fleetManagement/pipeline:Pipeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Pipeline resources.
type pipelineState struct {
	// Configuration contents of the pipeline to be used by collectors
	Contents *string `pulumi:"contents"`
	// Whether the pipeline is enabled for collectors
	Enabled *bool `pulumi:"enabled"`
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers []string `pulumi:"matchers"`
	// Name of the pipeline which is the unique identifier for the pipeline
	Name *string `pulumi:"name"`
}

type PipelineState struct {
	// Configuration contents of the pipeline to be used by collectors
	Contents pulumi.StringPtrInput
	// Whether the pipeline is enabled for collectors
	Enabled pulumi.BoolPtrInput
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers pulumi.StringArrayInput
	// Name of the pipeline which is the unique identifier for the pipeline
	Name pulumi.StringPtrInput
}

func (PipelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineState)(nil)).Elem()
}

type pipelineArgs struct {
	// Configuration contents of the pipeline to be used by collectors
	Contents string `pulumi:"contents"`
	// Whether the pipeline is enabled for collectors
	Enabled *bool `pulumi:"enabled"`
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers []string `pulumi:"matchers"`
	// Name of the pipeline which is the unique identifier for the pipeline
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Pipeline resource.
type PipelineArgs struct {
	// Configuration contents of the pipeline to be used by collectors
	Contents pulumi.StringInput
	// Whether the pipeline is enabled for collectors
	Enabled pulumi.BoolPtrInput
	// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
	Matchers pulumi.StringArrayInput
	// Name of the pipeline which is the unique identifier for the pipeline
	Name pulumi.StringPtrInput
}

func (PipelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pipelineArgs)(nil)).Elem()
}

type PipelineInput interface {
	pulumi.Input

	ToPipelineOutput() PipelineOutput
	ToPipelineOutputWithContext(ctx context.Context) PipelineOutput
}

func (*Pipeline) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (i *Pipeline) ToPipelineOutput() PipelineOutput {
	return i.ToPipelineOutputWithContext(context.Background())
}

func (i *Pipeline) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineOutput)
}

// PipelineArrayInput is an input type that accepts PipelineArray and PipelineArrayOutput values.
// You can construct a concrete instance of `PipelineArrayInput` via:
//
//	PipelineArray{ PipelineArgs{...} }
type PipelineArrayInput interface {
	pulumi.Input

	ToPipelineArrayOutput() PipelineArrayOutput
	ToPipelineArrayOutputWithContext(context.Context) PipelineArrayOutput
}

type PipelineArray []PipelineInput

func (PipelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (i PipelineArray) ToPipelineArrayOutput() PipelineArrayOutput {
	return i.ToPipelineArrayOutputWithContext(context.Background())
}

func (i PipelineArray) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineArrayOutput)
}

// PipelineMapInput is an input type that accepts PipelineMap and PipelineMapOutput values.
// You can construct a concrete instance of `PipelineMapInput` via:
//
//	PipelineMap{ "key": PipelineArgs{...} }
type PipelineMapInput interface {
	pulumi.Input

	ToPipelineMapOutput() PipelineMapOutput
	ToPipelineMapOutputWithContext(context.Context) PipelineMapOutput
}

type PipelineMap map[string]PipelineInput

func (PipelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (i PipelineMap) ToPipelineMapOutput() PipelineMapOutput {
	return i.ToPipelineMapOutputWithContext(context.Background())
}

func (i PipelineMap) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PipelineMapOutput)
}

type PipelineOutput struct{ *pulumi.OutputState }

func (PipelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Pipeline)(nil)).Elem()
}

func (o PipelineOutput) ToPipelineOutput() PipelineOutput {
	return o
}

func (o PipelineOutput) ToPipelineOutputWithContext(ctx context.Context) PipelineOutput {
	return o
}

// Configuration contents of the pipeline to be used by collectors
func (o PipelineOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Contents }).(pulumi.StringOutput)
}

// Whether the pipeline is enabled for collectors
func (o PipelineOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Used to match against collectors and assign pipelines to them; follows the syntax of Prometheus Alertmanager matchers
func (o PipelineOutput) Matchers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringArrayOutput { return v.Matchers }).(pulumi.StringArrayOutput)
}

// Name of the pipeline which is the unique identifier for the pipeline
func (o PipelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Pipeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PipelineArrayOutput struct{ *pulumi.OutputState }

func (PipelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Pipeline)(nil)).Elem()
}

func (o PipelineArrayOutput) ToPipelineArrayOutput() PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) ToPipelineArrayOutputWithContext(ctx context.Context) PipelineArrayOutput {
	return o
}

func (o PipelineArrayOutput) Index(i pulumi.IntInput) PipelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].([]*Pipeline)[vs[1].(int)]
	}).(PipelineOutput)
}

type PipelineMapOutput struct{ *pulumi.OutputState }

func (PipelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Pipeline)(nil)).Elem()
}

func (o PipelineMapOutput) ToPipelineMapOutput() PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) ToPipelineMapOutputWithContext(ctx context.Context) PipelineMapOutput {
	return o
}

func (o PipelineMapOutput) MapIndex(k pulumi.StringInput) PipelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Pipeline {
		return vs[0].(map[string]*Pipeline)[vs[1].(string)]
	}).(PipelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineInput)(nil)).Elem(), &Pipeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineArrayInput)(nil)).Elem(), PipelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PipelineMapInput)(nil)).Elem(), PipelineMap{})
	pulumi.RegisterOutputType(PipelineOutput{})
	pulumi.RegisterOutputType(PipelineArrayOutput{})
	pulumi.RegisterOutputType(PipelineMapOutput{})
}
