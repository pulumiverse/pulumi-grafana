// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alerting

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

var _ = internal.GetEnvOrDefault

type AlertEnrichmentMetadata struct {
	// The UID of the folder to save the resource in.
	FolderUid *string `pulumi:"folderUid"`
	// The unique identifier of the resource.
	Uid string `pulumi:"uid"`
	// The full URL of the resource.
	Url *string `pulumi:"url"`
	// The globally unique identifier of a resource, used by the API for tracking.
	Uuid *string `pulumi:"uuid"`
	// The version of the resource.
	Version *string `pulumi:"version"`
}

// AlertEnrichmentMetadataInput is an input type that accepts AlertEnrichmentMetadataArgs and AlertEnrichmentMetadataOutput values.
// You can construct a concrete instance of `AlertEnrichmentMetadataInput` via:
//
//	AlertEnrichmentMetadataArgs{...}
type AlertEnrichmentMetadataInput interface {
	pulumi.Input

	ToAlertEnrichmentMetadataOutput() AlertEnrichmentMetadataOutput
	ToAlertEnrichmentMetadataOutputWithContext(context.Context) AlertEnrichmentMetadataOutput
}

type AlertEnrichmentMetadataArgs struct {
	// The UID of the folder to save the resource in.
	FolderUid pulumi.StringPtrInput `pulumi:"folderUid"`
	// The unique identifier of the resource.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The full URL of the resource.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// The globally unique identifier of a resource, used by the API for tracking.
	Uuid pulumi.StringPtrInput `pulumi:"uuid"`
	// The version of the resource.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (AlertEnrichmentMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentMetadata)(nil)).Elem()
}

func (i AlertEnrichmentMetadataArgs) ToAlertEnrichmentMetadataOutput() AlertEnrichmentMetadataOutput {
	return i.ToAlertEnrichmentMetadataOutputWithContext(context.Background())
}

func (i AlertEnrichmentMetadataArgs) ToAlertEnrichmentMetadataOutputWithContext(ctx context.Context) AlertEnrichmentMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentMetadataOutput)
}

func (i AlertEnrichmentMetadataArgs) ToAlertEnrichmentMetadataPtrOutput() AlertEnrichmentMetadataPtrOutput {
	return i.ToAlertEnrichmentMetadataPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentMetadataArgs) ToAlertEnrichmentMetadataPtrOutputWithContext(ctx context.Context) AlertEnrichmentMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentMetadataOutput).ToAlertEnrichmentMetadataPtrOutputWithContext(ctx)
}

// AlertEnrichmentMetadataPtrInput is an input type that accepts AlertEnrichmentMetadataArgs, AlertEnrichmentMetadataPtr and AlertEnrichmentMetadataPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentMetadataPtrInput` via:
//
//	        AlertEnrichmentMetadataArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentMetadataPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentMetadataPtrOutput() AlertEnrichmentMetadataPtrOutput
	ToAlertEnrichmentMetadataPtrOutputWithContext(context.Context) AlertEnrichmentMetadataPtrOutput
}

type alertEnrichmentMetadataPtrType AlertEnrichmentMetadataArgs

func AlertEnrichmentMetadataPtr(v *AlertEnrichmentMetadataArgs) AlertEnrichmentMetadataPtrInput {
	return (*alertEnrichmentMetadataPtrType)(v)
}

func (*alertEnrichmentMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentMetadata)(nil)).Elem()
}

func (i *alertEnrichmentMetadataPtrType) ToAlertEnrichmentMetadataPtrOutput() AlertEnrichmentMetadataPtrOutput {
	return i.ToAlertEnrichmentMetadataPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentMetadataPtrType) ToAlertEnrichmentMetadataPtrOutputWithContext(ctx context.Context) AlertEnrichmentMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentMetadataPtrOutput)
}

type AlertEnrichmentMetadataOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentMetadata)(nil)).Elem()
}

func (o AlertEnrichmentMetadataOutput) ToAlertEnrichmentMetadataOutput() AlertEnrichmentMetadataOutput {
	return o
}

func (o AlertEnrichmentMetadataOutput) ToAlertEnrichmentMetadataOutputWithContext(ctx context.Context) AlertEnrichmentMetadataOutput {
	return o
}

func (o AlertEnrichmentMetadataOutput) ToAlertEnrichmentMetadataPtrOutput() AlertEnrichmentMetadataPtrOutput {
	return o.ToAlertEnrichmentMetadataPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentMetadataOutput) ToAlertEnrichmentMetadataPtrOutputWithContext(ctx context.Context) AlertEnrichmentMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentMetadata) *AlertEnrichmentMetadata {
		return &v
	}).(AlertEnrichmentMetadataPtrOutput)
}

// The UID of the folder to save the resource in.
func (o AlertEnrichmentMetadataOutput) FolderUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentMetadata) *string { return v.FolderUid }).(pulumi.StringPtrOutput)
}

// The unique identifier of the resource.
func (o AlertEnrichmentMetadataOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentMetadata) string { return v.Uid }).(pulumi.StringOutput)
}

// The full URL of the resource.
func (o AlertEnrichmentMetadataOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentMetadata) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// The globally unique identifier of a resource, used by the API for tracking.
func (o AlertEnrichmentMetadataOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentMetadata) *string { return v.Uuid }).(pulumi.StringPtrOutput)
}

// The version of the resource.
func (o AlertEnrichmentMetadataOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentMetadata) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentMetadataPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentMetadata)(nil)).Elem()
}

func (o AlertEnrichmentMetadataPtrOutput) ToAlertEnrichmentMetadataPtrOutput() AlertEnrichmentMetadataPtrOutput {
	return o
}

func (o AlertEnrichmentMetadataPtrOutput) ToAlertEnrichmentMetadataPtrOutputWithContext(ctx context.Context) AlertEnrichmentMetadataPtrOutput {
	return o
}

func (o AlertEnrichmentMetadataPtrOutput) Elem() AlertEnrichmentMetadataOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) AlertEnrichmentMetadata {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentMetadata
		return ret
	}).(AlertEnrichmentMetadataOutput)
}

// The UID of the folder to save the resource in.
func (o AlertEnrichmentMetadataPtrOutput) FolderUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) *string {
		if v == nil {
			return nil
		}
		return v.FolderUid
	}).(pulumi.StringPtrOutput)
}

// The unique identifier of the resource.
func (o AlertEnrichmentMetadataPtrOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) *string {
		if v == nil {
			return nil
		}
		return &v.Uid
	}).(pulumi.StringPtrOutput)
}

// The full URL of the resource.
func (o AlertEnrichmentMetadataPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

// The globally unique identifier of a resource, used by the API for tracking.
func (o AlertEnrichmentMetadataPtrOutput) Uuid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Uuid
	}).(pulumi.StringPtrOutput)
}

// The version of the resource.
func (o AlertEnrichmentMetadataPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentOptions struct {
	// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
	Overwrite *bool `pulumi:"overwrite"`
}

// AlertEnrichmentOptionsInput is an input type that accepts AlertEnrichmentOptionsArgs and AlertEnrichmentOptionsOutput values.
// You can construct a concrete instance of `AlertEnrichmentOptionsInput` via:
//
//	AlertEnrichmentOptionsArgs{...}
type AlertEnrichmentOptionsInput interface {
	pulumi.Input

	ToAlertEnrichmentOptionsOutput() AlertEnrichmentOptionsOutput
	ToAlertEnrichmentOptionsOutputWithContext(context.Context) AlertEnrichmentOptionsOutput
}

type AlertEnrichmentOptionsArgs struct {
	// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
	Overwrite pulumi.BoolPtrInput `pulumi:"overwrite"`
}

func (AlertEnrichmentOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentOptions)(nil)).Elem()
}

func (i AlertEnrichmentOptionsArgs) ToAlertEnrichmentOptionsOutput() AlertEnrichmentOptionsOutput {
	return i.ToAlertEnrichmentOptionsOutputWithContext(context.Background())
}

func (i AlertEnrichmentOptionsArgs) ToAlertEnrichmentOptionsOutputWithContext(ctx context.Context) AlertEnrichmentOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentOptionsOutput)
}

func (i AlertEnrichmentOptionsArgs) ToAlertEnrichmentOptionsPtrOutput() AlertEnrichmentOptionsPtrOutput {
	return i.ToAlertEnrichmentOptionsPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentOptionsArgs) ToAlertEnrichmentOptionsPtrOutputWithContext(ctx context.Context) AlertEnrichmentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentOptionsOutput).ToAlertEnrichmentOptionsPtrOutputWithContext(ctx)
}

// AlertEnrichmentOptionsPtrInput is an input type that accepts AlertEnrichmentOptionsArgs, AlertEnrichmentOptionsPtr and AlertEnrichmentOptionsPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentOptionsPtrInput` via:
//
//	        AlertEnrichmentOptionsArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentOptionsPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentOptionsPtrOutput() AlertEnrichmentOptionsPtrOutput
	ToAlertEnrichmentOptionsPtrOutputWithContext(context.Context) AlertEnrichmentOptionsPtrOutput
}

type alertEnrichmentOptionsPtrType AlertEnrichmentOptionsArgs

func AlertEnrichmentOptionsPtr(v *AlertEnrichmentOptionsArgs) AlertEnrichmentOptionsPtrInput {
	return (*alertEnrichmentOptionsPtrType)(v)
}

func (*alertEnrichmentOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentOptions)(nil)).Elem()
}

func (i *alertEnrichmentOptionsPtrType) ToAlertEnrichmentOptionsPtrOutput() AlertEnrichmentOptionsPtrOutput {
	return i.ToAlertEnrichmentOptionsPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentOptionsPtrType) ToAlertEnrichmentOptionsPtrOutputWithContext(ctx context.Context) AlertEnrichmentOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentOptionsPtrOutput)
}

type AlertEnrichmentOptionsOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentOptions)(nil)).Elem()
}

func (o AlertEnrichmentOptionsOutput) ToAlertEnrichmentOptionsOutput() AlertEnrichmentOptionsOutput {
	return o
}

func (o AlertEnrichmentOptionsOutput) ToAlertEnrichmentOptionsOutputWithContext(ctx context.Context) AlertEnrichmentOptionsOutput {
	return o
}

func (o AlertEnrichmentOptionsOutput) ToAlertEnrichmentOptionsPtrOutput() AlertEnrichmentOptionsPtrOutput {
	return o.ToAlertEnrichmentOptionsPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentOptionsOutput) ToAlertEnrichmentOptionsPtrOutputWithContext(ctx context.Context) AlertEnrichmentOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentOptions) *AlertEnrichmentOptions {
		return &v
	}).(AlertEnrichmentOptionsPtrOutput)
}

// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
func (o AlertEnrichmentOptionsOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentOptions) *bool { return v.Overwrite }).(pulumi.BoolPtrOutput)
}

type AlertEnrichmentOptionsPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentOptions)(nil)).Elem()
}

func (o AlertEnrichmentOptionsPtrOutput) ToAlertEnrichmentOptionsPtrOutput() AlertEnrichmentOptionsPtrOutput {
	return o
}

func (o AlertEnrichmentOptionsPtrOutput) ToAlertEnrichmentOptionsPtrOutputWithContext(ctx context.Context) AlertEnrichmentOptionsPtrOutput {
	return o
}

func (o AlertEnrichmentOptionsPtrOutput) Elem() AlertEnrichmentOptionsOutput {
	return o.ApplyT(func(v *AlertEnrichmentOptions) AlertEnrichmentOptions {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentOptions
		return ret
	}).(AlertEnrichmentOptionsOutput)
}

// Set to true if you want to overwrite existing resource with newer version, same resource title in folder or same resource uid.
func (o AlertEnrichmentOptionsPtrOutput) Overwrite() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentOptions) *bool {
		if v == nil {
			return nil
		}
		return v.Overwrite
	}).(pulumi.BoolPtrOutput)
}

type AlertEnrichmentSpec struct {
	// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
	AlertRuleUids []string `pulumi:"alertRuleUids"`
	// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
	AnnotationMatchers []AlertEnrichmentSpecAnnotationMatcher `pulumi:"annotationMatchers"`
	// Description of the alert enrichment.
	Description *string `pulumi:"description"`
	// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
	LabelMatchers []AlertEnrichmentSpecLabelMatcher `pulumi:"labelMatchers"`
	// Receiver names to match. If empty, applies to all receivers.
	Receivers []string `pulumi:"receivers"`
	// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
	Steps []AlertEnrichmentSpecStep `pulumi:"steps"`
	// The title of the alert enrichment.
	Title string `pulumi:"title"`
}

// AlertEnrichmentSpecInput is an input type that accepts AlertEnrichmentSpecArgs and AlertEnrichmentSpecOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecInput` via:
//
//	AlertEnrichmentSpecArgs{...}
type AlertEnrichmentSpecInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecOutput() AlertEnrichmentSpecOutput
	ToAlertEnrichmentSpecOutputWithContext(context.Context) AlertEnrichmentSpecOutput
}

type AlertEnrichmentSpecArgs struct {
	// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
	AlertRuleUids pulumi.StringArrayInput `pulumi:"alertRuleUids"`
	// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
	AnnotationMatchers AlertEnrichmentSpecAnnotationMatcherArrayInput `pulumi:"annotationMatchers"`
	// Description of the alert enrichment.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
	LabelMatchers AlertEnrichmentSpecLabelMatcherArrayInput `pulumi:"labelMatchers"`
	// Receiver names to match. If empty, applies to all receivers.
	Receivers pulumi.StringArrayInput `pulumi:"receivers"`
	// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
	Steps AlertEnrichmentSpecStepArrayInput `pulumi:"steps"`
	// The title of the alert enrichment.
	Title pulumi.StringInput `pulumi:"title"`
}

func (AlertEnrichmentSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpec)(nil)).Elem()
}

func (i AlertEnrichmentSpecArgs) ToAlertEnrichmentSpecOutput() AlertEnrichmentSpecOutput {
	return i.ToAlertEnrichmentSpecOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecArgs) ToAlertEnrichmentSpecOutputWithContext(ctx context.Context) AlertEnrichmentSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecOutput)
}

func (i AlertEnrichmentSpecArgs) ToAlertEnrichmentSpecPtrOutput() AlertEnrichmentSpecPtrOutput {
	return i.ToAlertEnrichmentSpecPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecArgs) ToAlertEnrichmentSpecPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecOutput).ToAlertEnrichmentSpecPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecPtrInput is an input type that accepts AlertEnrichmentSpecArgs, AlertEnrichmentSpecPtr and AlertEnrichmentSpecPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecPtrInput` via:
//
//	        AlertEnrichmentSpecArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecPtrOutput() AlertEnrichmentSpecPtrOutput
	ToAlertEnrichmentSpecPtrOutputWithContext(context.Context) AlertEnrichmentSpecPtrOutput
}

type alertEnrichmentSpecPtrType AlertEnrichmentSpecArgs

func AlertEnrichmentSpecPtr(v *AlertEnrichmentSpecArgs) AlertEnrichmentSpecPtrInput {
	return (*alertEnrichmentSpecPtrType)(v)
}

func (*alertEnrichmentSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpec)(nil)).Elem()
}

func (i *alertEnrichmentSpecPtrType) ToAlertEnrichmentSpecPtrOutput() AlertEnrichmentSpecPtrOutput {
	return i.ToAlertEnrichmentSpecPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecPtrType) ToAlertEnrichmentSpecPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecPtrOutput)
}

type AlertEnrichmentSpecOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpec)(nil)).Elem()
}

func (o AlertEnrichmentSpecOutput) ToAlertEnrichmentSpecOutput() AlertEnrichmentSpecOutput {
	return o
}

func (o AlertEnrichmentSpecOutput) ToAlertEnrichmentSpecOutputWithContext(ctx context.Context) AlertEnrichmentSpecOutput {
	return o
}

func (o AlertEnrichmentSpecOutput) ToAlertEnrichmentSpecPtrOutput() AlertEnrichmentSpecPtrOutput {
	return o.ToAlertEnrichmentSpecPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecOutput) ToAlertEnrichmentSpecPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpec) *AlertEnrichmentSpec {
		return &v
	}).(AlertEnrichmentSpecPtrOutput)
}

// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
func (o AlertEnrichmentSpecOutput) AlertRuleUids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) []string { return v.AlertRuleUids }).(pulumi.StringArrayOutput)
}

// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
func (o AlertEnrichmentSpecOutput) AnnotationMatchers() AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) []AlertEnrichmentSpecAnnotationMatcher { return v.AnnotationMatchers }).(AlertEnrichmentSpecAnnotationMatcherArrayOutput)
}

// Description of the alert enrichment.
func (o AlertEnrichmentSpecOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
func (o AlertEnrichmentSpecOutput) LabelMatchers() AlertEnrichmentSpecLabelMatcherArrayOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) []AlertEnrichmentSpecLabelMatcher { return v.LabelMatchers }).(AlertEnrichmentSpecLabelMatcherArrayOutput)
}

// Receiver names to match. If empty, applies to all receivers.
func (o AlertEnrichmentSpecOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) []string { return v.Receivers }).(pulumi.StringArrayOutput)
}

// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
func (o AlertEnrichmentSpecOutput) Steps() AlertEnrichmentSpecStepArrayOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) []AlertEnrichmentSpecStep { return v.Steps }).(AlertEnrichmentSpecStepArrayOutput)
}

// The title of the alert enrichment.
func (o AlertEnrichmentSpecOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpec) string { return v.Title }).(pulumi.StringOutput)
}

type AlertEnrichmentSpecPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpec)(nil)).Elem()
}

func (o AlertEnrichmentSpecPtrOutput) ToAlertEnrichmentSpecPtrOutput() AlertEnrichmentSpecPtrOutput {
	return o
}

func (o AlertEnrichmentSpecPtrOutput) ToAlertEnrichmentSpecPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecPtrOutput {
	return o
}

func (o AlertEnrichmentSpecPtrOutput) Elem() AlertEnrichmentSpecOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) AlertEnrichmentSpec {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpec
		return ret
	}).(AlertEnrichmentSpecOutput)
}

// UIDs of alert rules this enrichment applies to. If empty, applies to all alert rules.
func (o AlertEnrichmentSpecPtrOutput) AlertRuleUids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) []string {
		if v == nil {
			return nil
		}
		return v.AlertRuleUids
	}).(pulumi.StringArrayOutput)
}

// Annotation matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, annotation key to match), 'value' (string, annotation value to compare against, supports regex for =~/!~ operators).
func (o AlertEnrichmentSpecPtrOutput) AnnotationMatchers() AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) []AlertEnrichmentSpecAnnotationMatcher {
		if v == nil {
			return nil
		}
		return v.AnnotationMatchers
	}).(AlertEnrichmentSpecAnnotationMatcherArrayOutput)
}

// Description of the alert enrichment.
func (o AlertEnrichmentSpecPtrOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) *string {
		if v == nil {
			return nil
		}
		return v.Description
	}).(pulumi.StringPtrOutput)
}

// Label matchers that an alert must satisfy for this enrichment to apply. Each matcher is an object with: 'type' (string, one of: =, !=, =~, !~), 'name' (string, label key to match), 'value' (string, label value to compare against, supports regex for =~/!~ operators).
func (o AlertEnrichmentSpecPtrOutput) LabelMatchers() AlertEnrichmentSpecLabelMatcherArrayOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) []AlertEnrichmentSpecLabelMatcher {
		if v == nil {
			return nil
		}
		return v.LabelMatchers
	}).(AlertEnrichmentSpecLabelMatcherArrayOutput)
}

// Receiver names to match. If empty, applies to all receivers.
func (o AlertEnrichmentSpecPtrOutput) Receivers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) []string {
		if v == nil {
			return nil
		}
		return v.Receivers
	}).(pulumi.StringArrayOutput)
}

// Enrichment step. Can be repeated multiple times to define a sequence of steps. Each step must contain exactly one enrichment block.
func (o AlertEnrichmentSpecPtrOutput) Steps() AlertEnrichmentSpecStepArrayOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) []AlertEnrichmentSpecStep {
		if v == nil {
			return nil
		}
		return v.Steps
	}).(AlertEnrichmentSpecStepArrayOutput)
}

// The title of the alert enrichment.
func (o AlertEnrichmentSpecPtrOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpec) *string {
		if v == nil {
			return nil
		}
		return &v.Title
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecAnnotationMatcher struct {
	Name  string `pulumi:"name"`
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// AlertEnrichmentSpecAnnotationMatcherInput is an input type that accepts AlertEnrichmentSpecAnnotationMatcherArgs and AlertEnrichmentSpecAnnotationMatcherOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecAnnotationMatcherInput` via:
//
//	AlertEnrichmentSpecAnnotationMatcherArgs{...}
type AlertEnrichmentSpecAnnotationMatcherInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecAnnotationMatcherOutput() AlertEnrichmentSpecAnnotationMatcherOutput
	ToAlertEnrichmentSpecAnnotationMatcherOutputWithContext(context.Context) AlertEnrichmentSpecAnnotationMatcherOutput
}

type AlertEnrichmentSpecAnnotationMatcherArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertEnrichmentSpecAnnotationMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecAnnotationMatcher)(nil)).Elem()
}

func (i AlertEnrichmentSpecAnnotationMatcherArgs) ToAlertEnrichmentSpecAnnotationMatcherOutput() AlertEnrichmentSpecAnnotationMatcherOutput {
	return i.ToAlertEnrichmentSpecAnnotationMatcherOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecAnnotationMatcherArgs) ToAlertEnrichmentSpecAnnotationMatcherOutputWithContext(ctx context.Context) AlertEnrichmentSpecAnnotationMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecAnnotationMatcherOutput)
}

// AlertEnrichmentSpecAnnotationMatcherArrayInput is an input type that accepts AlertEnrichmentSpecAnnotationMatcherArray and AlertEnrichmentSpecAnnotationMatcherArrayOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecAnnotationMatcherArrayInput` via:
//
//	AlertEnrichmentSpecAnnotationMatcherArray{ AlertEnrichmentSpecAnnotationMatcherArgs{...} }
type AlertEnrichmentSpecAnnotationMatcherArrayInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecAnnotationMatcherArrayOutput() AlertEnrichmentSpecAnnotationMatcherArrayOutput
	ToAlertEnrichmentSpecAnnotationMatcherArrayOutputWithContext(context.Context) AlertEnrichmentSpecAnnotationMatcherArrayOutput
}

type AlertEnrichmentSpecAnnotationMatcherArray []AlertEnrichmentSpecAnnotationMatcherInput

func (AlertEnrichmentSpecAnnotationMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecAnnotationMatcher)(nil)).Elem()
}

func (i AlertEnrichmentSpecAnnotationMatcherArray) ToAlertEnrichmentSpecAnnotationMatcherArrayOutput() AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return i.ToAlertEnrichmentSpecAnnotationMatcherArrayOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecAnnotationMatcherArray) ToAlertEnrichmentSpecAnnotationMatcherArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecAnnotationMatcherArrayOutput)
}

type AlertEnrichmentSpecAnnotationMatcherOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecAnnotationMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecAnnotationMatcher)(nil)).Elem()
}

func (o AlertEnrichmentSpecAnnotationMatcherOutput) ToAlertEnrichmentSpecAnnotationMatcherOutput() AlertEnrichmentSpecAnnotationMatcherOutput {
	return o
}

func (o AlertEnrichmentSpecAnnotationMatcherOutput) ToAlertEnrichmentSpecAnnotationMatcherOutputWithContext(ctx context.Context) AlertEnrichmentSpecAnnotationMatcherOutput {
	return o
}

func (o AlertEnrichmentSpecAnnotationMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecAnnotationMatcher) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlertEnrichmentSpecAnnotationMatcherOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecAnnotationMatcher) string { return v.Type }).(pulumi.StringOutput)
}

func (o AlertEnrichmentSpecAnnotationMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecAnnotationMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type AlertEnrichmentSpecAnnotationMatcherArrayOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecAnnotationMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecAnnotationMatcher)(nil)).Elem()
}

func (o AlertEnrichmentSpecAnnotationMatcherArrayOutput) ToAlertEnrichmentSpecAnnotationMatcherArrayOutput() AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return o
}

func (o AlertEnrichmentSpecAnnotationMatcherArrayOutput) ToAlertEnrichmentSpecAnnotationMatcherArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecAnnotationMatcherArrayOutput {
	return o
}

func (o AlertEnrichmentSpecAnnotationMatcherArrayOutput) Index(i pulumi.IntInput) AlertEnrichmentSpecAnnotationMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertEnrichmentSpecAnnotationMatcher {
		return vs[0].([]AlertEnrichmentSpecAnnotationMatcher)[vs[1].(int)]
	}).(AlertEnrichmentSpecAnnotationMatcherOutput)
}

type AlertEnrichmentSpecLabelMatcher struct {
	Name  string `pulumi:"name"`
	Type  string `pulumi:"type"`
	Value string `pulumi:"value"`
}

// AlertEnrichmentSpecLabelMatcherInput is an input type that accepts AlertEnrichmentSpecLabelMatcherArgs and AlertEnrichmentSpecLabelMatcherOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecLabelMatcherInput` via:
//
//	AlertEnrichmentSpecLabelMatcherArgs{...}
type AlertEnrichmentSpecLabelMatcherInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecLabelMatcherOutput() AlertEnrichmentSpecLabelMatcherOutput
	ToAlertEnrichmentSpecLabelMatcherOutputWithContext(context.Context) AlertEnrichmentSpecLabelMatcherOutput
}

type AlertEnrichmentSpecLabelMatcherArgs struct {
	Name  pulumi.StringInput `pulumi:"name"`
	Type  pulumi.StringInput `pulumi:"type"`
	Value pulumi.StringInput `pulumi:"value"`
}

func (AlertEnrichmentSpecLabelMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecLabelMatcher)(nil)).Elem()
}

func (i AlertEnrichmentSpecLabelMatcherArgs) ToAlertEnrichmentSpecLabelMatcherOutput() AlertEnrichmentSpecLabelMatcherOutput {
	return i.ToAlertEnrichmentSpecLabelMatcherOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecLabelMatcherArgs) ToAlertEnrichmentSpecLabelMatcherOutputWithContext(ctx context.Context) AlertEnrichmentSpecLabelMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecLabelMatcherOutput)
}

// AlertEnrichmentSpecLabelMatcherArrayInput is an input type that accepts AlertEnrichmentSpecLabelMatcherArray and AlertEnrichmentSpecLabelMatcherArrayOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecLabelMatcherArrayInput` via:
//
//	AlertEnrichmentSpecLabelMatcherArray{ AlertEnrichmentSpecLabelMatcherArgs{...} }
type AlertEnrichmentSpecLabelMatcherArrayInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecLabelMatcherArrayOutput() AlertEnrichmentSpecLabelMatcherArrayOutput
	ToAlertEnrichmentSpecLabelMatcherArrayOutputWithContext(context.Context) AlertEnrichmentSpecLabelMatcherArrayOutput
}

type AlertEnrichmentSpecLabelMatcherArray []AlertEnrichmentSpecLabelMatcherInput

func (AlertEnrichmentSpecLabelMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecLabelMatcher)(nil)).Elem()
}

func (i AlertEnrichmentSpecLabelMatcherArray) ToAlertEnrichmentSpecLabelMatcherArrayOutput() AlertEnrichmentSpecLabelMatcherArrayOutput {
	return i.ToAlertEnrichmentSpecLabelMatcherArrayOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecLabelMatcherArray) ToAlertEnrichmentSpecLabelMatcherArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecLabelMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecLabelMatcherArrayOutput)
}

type AlertEnrichmentSpecLabelMatcherOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecLabelMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecLabelMatcher)(nil)).Elem()
}

func (o AlertEnrichmentSpecLabelMatcherOutput) ToAlertEnrichmentSpecLabelMatcherOutput() AlertEnrichmentSpecLabelMatcherOutput {
	return o
}

func (o AlertEnrichmentSpecLabelMatcherOutput) ToAlertEnrichmentSpecLabelMatcherOutputWithContext(ctx context.Context) AlertEnrichmentSpecLabelMatcherOutput {
	return o
}

func (o AlertEnrichmentSpecLabelMatcherOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecLabelMatcher) string { return v.Name }).(pulumi.StringOutput)
}

func (o AlertEnrichmentSpecLabelMatcherOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecLabelMatcher) string { return v.Type }).(pulumi.StringOutput)
}

func (o AlertEnrichmentSpecLabelMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecLabelMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type AlertEnrichmentSpecLabelMatcherArrayOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecLabelMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecLabelMatcher)(nil)).Elem()
}

func (o AlertEnrichmentSpecLabelMatcherArrayOutput) ToAlertEnrichmentSpecLabelMatcherArrayOutput() AlertEnrichmentSpecLabelMatcherArrayOutput {
	return o
}

func (o AlertEnrichmentSpecLabelMatcherArrayOutput) ToAlertEnrichmentSpecLabelMatcherArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecLabelMatcherArrayOutput {
	return o
}

func (o AlertEnrichmentSpecLabelMatcherArrayOutput) Index(i pulumi.IntInput) AlertEnrichmentSpecLabelMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertEnrichmentSpecLabelMatcher {
		return vs[0].([]AlertEnrichmentSpecLabelMatcher)[vs[1].(int)]
	}).(AlertEnrichmentSpecLabelMatcherOutput)
}

type AlertEnrichmentSpecStep struct {
	// Integrate with Grafana Asserts for enrichment.
	Asserts *AlertEnrichmentSpecStepAsserts `pulumi:"asserts"`
	// Assign annotations to an alert.
	Assign *AlertEnrichmentSpecStepAssign `pulumi:"assign"`
	// Use AI assistant to investigate alerts and add insights.
	AssistantInvestigations *AlertEnrichmentSpecStepAssistantInvestigations `pulumi:"assistantInvestigations"`
	// Query Grafana data sources and add results to alerts.
	DataSource *AlertEnrichmentSpecStepDataSource `pulumi:"dataSource"`
	// Generate AI explanation and store in an annotation.
	Explain *AlertEnrichmentSpecStepExplain `pulumi:"explain"`
	// Call an external HTTP service for enrichment.
	External *AlertEnrichmentSpecStepExternal `pulumi:"external"`
	// Analyze alerts for patterns and insights.
	Sift *AlertEnrichmentSpecStepSift `pulumi:"sift"`
}

// AlertEnrichmentSpecStepInput is an input type that accepts AlertEnrichmentSpecStepArgs and AlertEnrichmentSpecStepOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepInput` via:
//
//	AlertEnrichmentSpecStepArgs{...}
type AlertEnrichmentSpecStepInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepOutput() AlertEnrichmentSpecStepOutput
	ToAlertEnrichmentSpecStepOutputWithContext(context.Context) AlertEnrichmentSpecStepOutput
}

type AlertEnrichmentSpecStepArgs struct {
	// Integrate with Grafana Asserts for enrichment.
	Asserts AlertEnrichmentSpecStepAssertsPtrInput `pulumi:"asserts"`
	// Assign annotations to an alert.
	Assign AlertEnrichmentSpecStepAssignPtrInput `pulumi:"assign"`
	// Use AI assistant to investigate alerts and add insights.
	AssistantInvestigations AlertEnrichmentSpecStepAssistantInvestigationsPtrInput `pulumi:"assistantInvestigations"`
	// Query Grafana data sources and add results to alerts.
	DataSource AlertEnrichmentSpecStepDataSourcePtrInput `pulumi:"dataSource"`
	// Generate AI explanation and store in an annotation.
	Explain AlertEnrichmentSpecStepExplainPtrInput `pulumi:"explain"`
	// Call an external HTTP service for enrichment.
	External AlertEnrichmentSpecStepExternalPtrInput `pulumi:"external"`
	// Analyze alerts for patterns and insights.
	Sift AlertEnrichmentSpecStepSiftPtrInput `pulumi:"sift"`
}

func (AlertEnrichmentSpecStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStep)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepArgs) ToAlertEnrichmentSpecStepOutput() AlertEnrichmentSpecStepOutput {
	return i.ToAlertEnrichmentSpecStepOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepArgs) ToAlertEnrichmentSpecStepOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepOutput)
}

// AlertEnrichmentSpecStepArrayInput is an input type that accepts AlertEnrichmentSpecStepArray and AlertEnrichmentSpecStepArrayOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepArrayInput` via:
//
//	AlertEnrichmentSpecStepArray{ AlertEnrichmentSpecStepArgs{...} }
type AlertEnrichmentSpecStepArrayInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepArrayOutput() AlertEnrichmentSpecStepArrayOutput
	ToAlertEnrichmentSpecStepArrayOutputWithContext(context.Context) AlertEnrichmentSpecStepArrayOutput
}

type AlertEnrichmentSpecStepArray []AlertEnrichmentSpecStepInput

func (AlertEnrichmentSpecStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecStep)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepArray) ToAlertEnrichmentSpecStepArrayOutput() AlertEnrichmentSpecStepArrayOutput {
	return i.ToAlertEnrichmentSpecStepArrayOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepArray) ToAlertEnrichmentSpecStepArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepArrayOutput)
}

type AlertEnrichmentSpecStepOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStep)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepOutput) ToAlertEnrichmentSpecStepOutput() AlertEnrichmentSpecStepOutput {
	return o
}

func (o AlertEnrichmentSpecStepOutput) ToAlertEnrichmentSpecStepOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepOutput {
	return o
}

// Integrate with Grafana Asserts for enrichment.
func (o AlertEnrichmentSpecStepOutput) Asserts() AlertEnrichmentSpecStepAssertsPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepAsserts { return v.Asserts }).(AlertEnrichmentSpecStepAssertsPtrOutput)
}

// Assign annotations to an alert.
func (o AlertEnrichmentSpecStepOutput) Assign() AlertEnrichmentSpecStepAssignPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepAssign { return v.Assign }).(AlertEnrichmentSpecStepAssignPtrOutput)
}

// Use AI assistant to investigate alerts and add insights.
func (o AlertEnrichmentSpecStepOutput) AssistantInvestigations() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepAssistantInvestigations {
		return v.AssistantInvestigations
	}).(AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput)
}

// Query Grafana data sources and add results to alerts.
func (o AlertEnrichmentSpecStepOutput) DataSource() AlertEnrichmentSpecStepDataSourcePtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepDataSource { return v.DataSource }).(AlertEnrichmentSpecStepDataSourcePtrOutput)
}

// Generate AI explanation and store in an annotation.
func (o AlertEnrichmentSpecStepOutput) Explain() AlertEnrichmentSpecStepExplainPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepExplain { return v.Explain }).(AlertEnrichmentSpecStepExplainPtrOutput)
}

// Call an external HTTP service for enrichment.
func (o AlertEnrichmentSpecStepOutput) External() AlertEnrichmentSpecStepExternalPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepExternal { return v.External }).(AlertEnrichmentSpecStepExternalPtrOutput)
}

// Analyze alerts for patterns and insights.
func (o AlertEnrichmentSpecStepOutput) Sift() AlertEnrichmentSpecStepSiftPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStep) *AlertEnrichmentSpecStepSift { return v.Sift }).(AlertEnrichmentSpecStepSiftPtrOutput)
}

type AlertEnrichmentSpecStepArrayOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AlertEnrichmentSpecStep)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepArrayOutput) ToAlertEnrichmentSpecStepArrayOutput() AlertEnrichmentSpecStepArrayOutput {
	return o
}

func (o AlertEnrichmentSpecStepArrayOutput) ToAlertEnrichmentSpecStepArrayOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepArrayOutput {
	return o
}

func (o AlertEnrichmentSpecStepArrayOutput) Index(i pulumi.IntInput) AlertEnrichmentSpecStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AlertEnrichmentSpecStep {
		return vs[0].([]AlertEnrichmentSpecStep)[vs[1].(int)]
	}).(AlertEnrichmentSpecStepOutput)
}

type AlertEnrichmentSpecStepAsserts struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepAssertsInput is an input type that accepts AlertEnrichmentSpecStepAssertsArgs and AlertEnrichmentSpecStepAssertsOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssertsInput` via:
//
//	AlertEnrichmentSpecStepAssertsArgs{...}
type AlertEnrichmentSpecStepAssertsInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssertsOutput() AlertEnrichmentSpecStepAssertsOutput
	ToAlertEnrichmentSpecStepAssertsOutputWithContext(context.Context) AlertEnrichmentSpecStepAssertsOutput
}

type AlertEnrichmentSpecStepAssertsArgs struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepAssertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAsserts)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepAssertsArgs) ToAlertEnrichmentSpecStepAssertsOutput() AlertEnrichmentSpecStepAssertsOutput {
	return i.ToAlertEnrichmentSpecStepAssertsOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssertsArgs) ToAlertEnrichmentSpecStepAssertsOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssertsOutput)
}

func (i AlertEnrichmentSpecStepAssertsArgs) ToAlertEnrichmentSpecStepAssertsPtrOutput() AlertEnrichmentSpecStepAssertsPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssertsArgs) ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssertsOutput).ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepAssertsPtrInput is an input type that accepts AlertEnrichmentSpecStepAssertsArgs, AlertEnrichmentSpecStepAssertsPtr and AlertEnrichmentSpecStepAssertsPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssertsPtrInput` via:
//
//	        AlertEnrichmentSpecStepAssertsArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepAssertsPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssertsPtrOutput() AlertEnrichmentSpecStepAssertsPtrOutput
	ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepAssertsPtrOutput
}

type alertEnrichmentSpecStepAssertsPtrType AlertEnrichmentSpecStepAssertsArgs

func AlertEnrichmentSpecStepAssertsPtr(v *AlertEnrichmentSpecStepAssertsArgs) AlertEnrichmentSpecStepAssertsPtrInput {
	return (*alertEnrichmentSpecStepAssertsPtrType)(v)
}

func (*alertEnrichmentSpecStepAssertsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAsserts)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepAssertsPtrType) ToAlertEnrichmentSpecStepAssertsPtrOutput() AlertEnrichmentSpecStepAssertsPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepAssertsPtrType) ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssertsPtrOutput)
}

type AlertEnrichmentSpecStepAssertsOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAsserts)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssertsOutput) ToAlertEnrichmentSpecStepAssertsOutput() AlertEnrichmentSpecStepAssertsOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssertsOutput) ToAlertEnrichmentSpecStepAssertsOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssertsOutput) ToAlertEnrichmentSpecStepAssertsPtrOutput() AlertEnrichmentSpecStepAssertsPtrOutput {
	return o.ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepAssertsOutput) ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepAsserts) *AlertEnrichmentSpecStepAsserts {
		return &v
	}).(AlertEnrichmentSpecStepAssertsPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssertsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepAsserts) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepAssertsPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssertsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAsserts)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssertsPtrOutput) ToAlertEnrichmentSpecStepAssertsPtrOutput() AlertEnrichmentSpecStepAssertsPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssertsPtrOutput) ToAlertEnrichmentSpecStepAssertsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssertsPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssertsPtrOutput) Elem() AlertEnrichmentSpecStepAssertsOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAsserts) AlertEnrichmentSpecStepAsserts {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepAsserts
		return ret
	}).(AlertEnrichmentSpecStepAssertsOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssertsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAsserts) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepAssign struct {
	// Map of annotation names to values to set on matching alerts.
	Annotations map[string]string `pulumi:"annotations"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepAssignInput is an input type that accepts AlertEnrichmentSpecStepAssignArgs and AlertEnrichmentSpecStepAssignOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssignInput` via:
//
//	AlertEnrichmentSpecStepAssignArgs{...}
type AlertEnrichmentSpecStepAssignInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssignOutput() AlertEnrichmentSpecStepAssignOutput
	ToAlertEnrichmentSpecStepAssignOutputWithContext(context.Context) AlertEnrichmentSpecStepAssignOutput
}

type AlertEnrichmentSpecStepAssignArgs struct {
	// Map of annotation names to values to set on matching alerts.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepAssignArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAssign)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepAssignArgs) ToAlertEnrichmentSpecStepAssignOutput() AlertEnrichmentSpecStepAssignOutput {
	return i.ToAlertEnrichmentSpecStepAssignOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssignArgs) ToAlertEnrichmentSpecStepAssignOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssignOutput)
}

func (i AlertEnrichmentSpecStepAssignArgs) ToAlertEnrichmentSpecStepAssignPtrOutput() AlertEnrichmentSpecStepAssignPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssignArgs) ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssignOutput).ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepAssignPtrInput is an input type that accepts AlertEnrichmentSpecStepAssignArgs, AlertEnrichmentSpecStepAssignPtr and AlertEnrichmentSpecStepAssignPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssignPtrInput` via:
//
//	        AlertEnrichmentSpecStepAssignArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepAssignPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssignPtrOutput() AlertEnrichmentSpecStepAssignPtrOutput
	ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepAssignPtrOutput
}

type alertEnrichmentSpecStepAssignPtrType AlertEnrichmentSpecStepAssignArgs

func AlertEnrichmentSpecStepAssignPtr(v *AlertEnrichmentSpecStepAssignArgs) AlertEnrichmentSpecStepAssignPtrInput {
	return (*alertEnrichmentSpecStepAssignPtrType)(v)
}

func (*alertEnrichmentSpecStepAssignPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAssign)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepAssignPtrType) ToAlertEnrichmentSpecStepAssignPtrOutput() AlertEnrichmentSpecStepAssignPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepAssignPtrType) ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssignPtrOutput)
}

type AlertEnrichmentSpecStepAssignOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssignOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAssign)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssignOutput) ToAlertEnrichmentSpecStepAssignOutput() AlertEnrichmentSpecStepAssignOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssignOutput) ToAlertEnrichmentSpecStepAssignOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssignOutput) ToAlertEnrichmentSpecStepAssignPtrOutput() AlertEnrichmentSpecStepAssignPtrOutput {
	return o.ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepAssignOutput) ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepAssign) *AlertEnrichmentSpecStepAssign {
		return &v
	}).(AlertEnrichmentSpecStepAssignPtrOutput)
}

// Map of annotation names to values to set on matching alerts.
func (o AlertEnrichmentSpecStepAssignOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepAssign) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssignOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepAssign) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepAssignPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssignPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAssign)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssignPtrOutput) ToAlertEnrichmentSpecStepAssignPtrOutput() AlertEnrichmentSpecStepAssignPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssignPtrOutput) ToAlertEnrichmentSpecStepAssignPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssignPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssignPtrOutput) Elem() AlertEnrichmentSpecStepAssignOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAssign) AlertEnrichmentSpecStepAssign {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepAssign
		return ret
	}).(AlertEnrichmentSpecStepAssignOutput)
}

// Map of annotation names to values to set on matching alerts.
func (o AlertEnrichmentSpecStepAssignPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAssign) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssignPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAssign) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepAssistantInvestigations struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepAssistantInvestigationsInput is an input type that accepts AlertEnrichmentSpecStepAssistantInvestigationsArgs and AlertEnrichmentSpecStepAssistantInvestigationsOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssistantInvestigationsInput` via:
//
//	AlertEnrichmentSpecStepAssistantInvestigationsArgs{...}
type AlertEnrichmentSpecStepAssistantInvestigationsInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssistantInvestigationsOutput() AlertEnrichmentSpecStepAssistantInvestigationsOutput
	ToAlertEnrichmentSpecStepAssistantInvestigationsOutputWithContext(context.Context) AlertEnrichmentSpecStepAssistantInvestigationsOutput
}

type AlertEnrichmentSpecStepAssistantInvestigationsArgs struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepAssistantInvestigationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAssistantInvestigations)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepAssistantInvestigationsArgs) ToAlertEnrichmentSpecStepAssistantInvestigationsOutput() AlertEnrichmentSpecStepAssistantInvestigationsOutput {
	return i.ToAlertEnrichmentSpecStepAssistantInvestigationsOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssistantInvestigationsArgs) ToAlertEnrichmentSpecStepAssistantInvestigationsOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssistantInvestigationsOutput)
}

func (i AlertEnrichmentSpecStepAssistantInvestigationsArgs) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutput() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepAssistantInvestigationsArgs) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssistantInvestigationsOutput).ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepAssistantInvestigationsPtrInput is an input type that accepts AlertEnrichmentSpecStepAssistantInvestigationsArgs, AlertEnrichmentSpecStepAssistantInvestigationsPtr and AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepAssistantInvestigationsPtrInput` via:
//
//	        AlertEnrichmentSpecStepAssistantInvestigationsArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepAssistantInvestigationsPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutput() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput
	ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput
}

type alertEnrichmentSpecStepAssistantInvestigationsPtrType AlertEnrichmentSpecStepAssistantInvestigationsArgs

func AlertEnrichmentSpecStepAssistantInvestigationsPtr(v *AlertEnrichmentSpecStepAssistantInvestigationsArgs) AlertEnrichmentSpecStepAssistantInvestigationsPtrInput {
	return (*alertEnrichmentSpecStepAssistantInvestigationsPtrType)(v)
}

func (*alertEnrichmentSpecStepAssistantInvestigationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAssistantInvestigations)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepAssistantInvestigationsPtrType) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutput() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return i.ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepAssistantInvestigationsPtrType) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput)
}

type AlertEnrichmentSpecStepAssistantInvestigationsOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssistantInvestigationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepAssistantInvestigations)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsOutput() AlertEnrichmentSpecStepAssistantInvestigationsOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutput() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return o.ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepAssistantInvestigations) *AlertEnrichmentSpecStepAssistantInvestigations {
		return &v
	}).(AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssistantInvestigationsOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepAssistantInvestigations) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepAssistantInvestigations)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutput() AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput) ToAlertEnrichmentSpecStepAssistantInvestigationsPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput) Elem() AlertEnrichmentSpecStepAssistantInvestigationsOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAssistantInvestigations) AlertEnrichmentSpecStepAssistantInvestigations {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepAssistantInvestigations
		return ret
	}).(AlertEnrichmentSpecStepAssistantInvestigationsOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepAssistantInvestigations) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepDataSource struct {
	// Logs query configuration for querying log data sources.
	LogsQuery *AlertEnrichmentSpecStepDataSourceLogsQuery `pulumi:"logsQuery"`
	// Raw query configuration for advanced data source queries.
	RawQuery *AlertEnrichmentSpecStepDataSourceRawQuery `pulumi:"rawQuery"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepDataSourceInput is an input type that accepts AlertEnrichmentSpecStepDataSourceArgs and AlertEnrichmentSpecStepDataSourceOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourceInput` via:
//
//	AlertEnrichmentSpecStepDataSourceArgs{...}
type AlertEnrichmentSpecStepDataSourceInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourceOutput() AlertEnrichmentSpecStepDataSourceOutput
	ToAlertEnrichmentSpecStepDataSourceOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourceOutput
}

type AlertEnrichmentSpecStepDataSourceArgs struct {
	// Logs query configuration for querying log data sources.
	LogsQuery AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput `pulumi:"logsQuery"`
	// Raw query configuration for advanced data source queries.
	RawQuery AlertEnrichmentSpecStepDataSourceRawQueryPtrInput `pulumi:"rawQuery"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSource)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepDataSourceArgs) ToAlertEnrichmentSpecStepDataSourceOutput() AlertEnrichmentSpecStepDataSourceOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceArgs) ToAlertEnrichmentSpecStepDataSourceOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceOutput)
}

func (i AlertEnrichmentSpecStepDataSourceArgs) ToAlertEnrichmentSpecStepDataSourcePtrOutput() AlertEnrichmentSpecStepDataSourcePtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceArgs) ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceOutput).ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepDataSourcePtrInput is an input type that accepts AlertEnrichmentSpecStepDataSourceArgs, AlertEnrichmentSpecStepDataSourcePtr and AlertEnrichmentSpecStepDataSourcePtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourcePtrInput` via:
//
//	        AlertEnrichmentSpecStepDataSourceArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepDataSourcePtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourcePtrOutput() AlertEnrichmentSpecStepDataSourcePtrOutput
	ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourcePtrOutput
}

type alertEnrichmentSpecStepDataSourcePtrType AlertEnrichmentSpecStepDataSourceArgs

func AlertEnrichmentSpecStepDataSourcePtr(v *AlertEnrichmentSpecStepDataSourceArgs) AlertEnrichmentSpecStepDataSourcePtrInput {
	return (*alertEnrichmentSpecStepDataSourcePtrType)(v)
}

func (*alertEnrichmentSpecStepDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSource)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepDataSourcePtrType) ToAlertEnrichmentSpecStepDataSourcePtrOutput() AlertEnrichmentSpecStepDataSourcePtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepDataSourcePtrType) ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourcePtrOutput)
}

type AlertEnrichmentSpecStepDataSourceOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSource)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourceOutput) ToAlertEnrichmentSpecStepDataSourceOutput() AlertEnrichmentSpecStepDataSourceOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceOutput) ToAlertEnrichmentSpecStepDataSourceOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceOutput) ToAlertEnrichmentSpecStepDataSourcePtrOutput() AlertEnrichmentSpecStepDataSourcePtrOutput {
	return o.ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepDataSourceOutput) ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepDataSource) *AlertEnrichmentSpecStepDataSource {
		return &v
	}).(AlertEnrichmentSpecStepDataSourcePtrOutput)
}

// Logs query configuration for querying log data sources.
func (o AlertEnrichmentSpecStepDataSourceOutput) LogsQuery() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSource) *AlertEnrichmentSpecStepDataSourceLogsQuery {
		return v.LogsQuery
	}).(AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput)
}

// Raw query configuration for advanced data source queries.
func (o AlertEnrichmentSpecStepDataSourceOutput) RawQuery() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSource) *AlertEnrichmentSpecStepDataSourceRawQuery {
		return v.RawQuery
	}).(AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepDataSourceOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSource) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepDataSourcePtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSource)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourcePtrOutput) ToAlertEnrichmentSpecStepDataSourcePtrOutput() AlertEnrichmentSpecStepDataSourcePtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourcePtrOutput) ToAlertEnrichmentSpecStepDataSourcePtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourcePtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourcePtrOutput) Elem() AlertEnrichmentSpecStepDataSourceOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSource) AlertEnrichmentSpecStepDataSource {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepDataSource
		return ret
	}).(AlertEnrichmentSpecStepDataSourceOutput)
}

// Logs query configuration for querying log data sources.
func (o AlertEnrichmentSpecStepDataSourcePtrOutput) LogsQuery() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSource) *AlertEnrichmentSpecStepDataSourceLogsQuery {
		if v == nil {
			return nil
		}
		return v.LogsQuery
	}).(AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput)
}

// Raw query configuration for advanced data source queries.
func (o AlertEnrichmentSpecStepDataSourcePtrOutput) RawQuery() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSource) *AlertEnrichmentSpecStepDataSourceRawQuery {
		if v == nil {
			return nil
		}
		return v.RawQuery
	}).(AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepDataSourcePtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceLogsQuery struct {
	// Data source type (e.g., 'loki').
	DataSourceType *string `pulumi:"dataSourceType"`
	// UID of the data source to query.
	DataSourceUid *string `pulumi:"dataSourceUid"`
	// Log query expression to execute.
	Expr *string `pulumi:"expr"`
	// Maximum number of log lines to include. Defaults to 3.
	MaxLines *int `pulumi:"maxLines"`
}

// AlertEnrichmentSpecStepDataSourceLogsQueryInput is an input type that accepts AlertEnrichmentSpecStepDataSourceLogsQueryArgs and AlertEnrichmentSpecStepDataSourceLogsQueryOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourceLogsQueryInput` via:
//
//	AlertEnrichmentSpecStepDataSourceLogsQueryArgs{...}
type AlertEnrichmentSpecStepDataSourceLogsQueryInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourceLogsQueryOutput() AlertEnrichmentSpecStepDataSourceLogsQueryOutput
	ToAlertEnrichmentSpecStepDataSourceLogsQueryOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryOutput
}

type AlertEnrichmentSpecStepDataSourceLogsQueryArgs struct {
	// Data source type (e.g., 'loki').
	DataSourceType pulumi.StringPtrInput `pulumi:"dataSourceType"`
	// UID of the data source to query.
	DataSourceUid pulumi.StringPtrInput `pulumi:"dataSourceUid"`
	// Log query expression to execute.
	Expr pulumi.StringPtrInput `pulumi:"expr"`
	// Maximum number of log lines to include. Defaults to 3.
	MaxLines pulumi.IntPtrInput `pulumi:"maxLines"`
}

func (AlertEnrichmentSpecStepDataSourceLogsQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceLogsQuery)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepDataSourceLogsQueryArgs) ToAlertEnrichmentSpecStepDataSourceLogsQueryOutput() AlertEnrichmentSpecStepDataSourceLogsQueryOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceLogsQueryOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceLogsQueryArgs) ToAlertEnrichmentSpecStepDataSourceLogsQueryOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceLogsQueryOutput)
}

func (i AlertEnrichmentSpecStepDataSourceLogsQueryArgs) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceLogsQueryArgs) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceLogsQueryOutput).ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput is an input type that accepts AlertEnrichmentSpecStepDataSourceLogsQueryArgs, AlertEnrichmentSpecStepDataSourceLogsQueryPtr and AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput` via:
//
//	        AlertEnrichmentSpecStepDataSourceLogsQueryArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput
	ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput
}

type alertEnrichmentSpecStepDataSourceLogsQueryPtrType AlertEnrichmentSpecStepDataSourceLogsQueryArgs

func AlertEnrichmentSpecStepDataSourceLogsQueryPtr(v *AlertEnrichmentSpecStepDataSourceLogsQueryArgs) AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput {
	return (*alertEnrichmentSpecStepDataSourceLogsQueryPtrType)(v)
}

func (*alertEnrichmentSpecStepDataSourceLogsQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSourceLogsQuery)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepDataSourceLogsQueryPtrType) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepDataSourceLogsQueryPtrType) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceLogsQueryOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourceLogsQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceLogsQuery)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryOutput() AlertEnrichmentSpecStepDataSourceLogsQueryOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o.ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepDataSourceLogsQuery) *AlertEnrichmentSpecStepDataSourceLogsQuery {
		return &v
	}).(AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput)
}

// Data source type (e.g., 'loki').
func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) DataSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceLogsQuery) *string { return v.DataSourceType }).(pulumi.StringPtrOutput)
}

// UID of the data source to query.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) DataSourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceLogsQuery) *string { return v.DataSourceUid }).(pulumi.StringPtrOutput)
}

// Log query expression to execute.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) Expr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceLogsQuery) *string { return v.Expr }).(pulumi.StringPtrOutput)
}

// Maximum number of log lines to include. Defaults to 3.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryOutput) MaxLines() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceLogsQuery) *int { return v.MaxLines }).(pulumi.IntPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSourceLogsQuery)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput() AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) ToAlertEnrichmentSpecStepDataSourceLogsQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) Elem() AlertEnrichmentSpecStepDataSourceLogsQueryOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceLogsQuery) AlertEnrichmentSpecStepDataSourceLogsQuery {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepDataSourceLogsQuery
		return ret
	}).(AlertEnrichmentSpecStepDataSourceLogsQueryOutput)
}

// Data source type (e.g., 'loki').
func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) DataSourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceLogsQuery) *string {
		if v == nil {
			return nil
		}
		return v.DataSourceType
	}).(pulumi.StringPtrOutput)
}

// UID of the data source to query.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) DataSourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceLogsQuery) *string {
		if v == nil {
			return nil
		}
		return v.DataSourceUid
	}).(pulumi.StringPtrOutput)
}

// Log query expression to execute.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) Expr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceLogsQuery) *string {
		if v == nil {
			return nil
		}
		return v.Expr
	}).(pulumi.StringPtrOutput)
}

// Maximum number of log lines to include. Defaults to 3.
func (o AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput) MaxLines() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceLogsQuery) *int {
		if v == nil {
			return nil
		}
		return v.MaxLines
	}).(pulumi.IntPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceRawQuery struct {
	// Reference ID for correlating queries.
	RefId *string `pulumi:"refId"`
	// Raw request payload for the data source query.
	Request *string `pulumi:"request"`
}

// AlertEnrichmentSpecStepDataSourceRawQueryInput is an input type that accepts AlertEnrichmentSpecStepDataSourceRawQueryArgs and AlertEnrichmentSpecStepDataSourceRawQueryOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourceRawQueryInput` via:
//
//	AlertEnrichmentSpecStepDataSourceRawQueryArgs{...}
type AlertEnrichmentSpecStepDataSourceRawQueryInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourceRawQueryOutput() AlertEnrichmentSpecStepDataSourceRawQueryOutput
	ToAlertEnrichmentSpecStepDataSourceRawQueryOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourceRawQueryOutput
}

type AlertEnrichmentSpecStepDataSourceRawQueryArgs struct {
	// Reference ID for correlating queries.
	RefId pulumi.StringPtrInput `pulumi:"refId"`
	// Raw request payload for the data source query.
	Request pulumi.StringPtrInput `pulumi:"request"`
}

func (AlertEnrichmentSpecStepDataSourceRawQueryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceRawQuery)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepDataSourceRawQueryArgs) ToAlertEnrichmentSpecStepDataSourceRawQueryOutput() AlertEnrichmentSpecStepDataSourceRawQueryOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceRawQueryOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceRawQueryArgs) ToAlertEnrichmentSpecStepDataSourceRawQueryOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceRawQueryOutput)
}

func (i AlertEnrichmentSpecStepDataSourceRawQueryArgs) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutput() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepDataSourceRawQueryArgs) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceRawQueryOutput).ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepDataSourceRawQueryPtrInput is an input type that accepts AlertEnrichmentSpecStepDataSourceRawQueryArgs, AlertEnrichmentSpecStepDataSourceRawQueryPtr and AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepDataSourceRawQueryPtrInput` via:
//
//	        AlertEnrichmentSpecStepDataSourceRawQueryArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepDataSourceRawQueryPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutput() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput
	ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput
}

type alertEnrichmentSpecStepDataSourceRawQueryPtrType AlertEnrichmentSpecStepDataSourceRawQueryArgs

func AlertEnrichmentSpecStepDataSourceRawQueryPtr(v *AlertEnrichmentSpecStepDataSourceRawQueryArgs) AlertEnrichmentSpecStepDataSourceRawQueryPtrInput {
	return (*alertEnrichmentSpecStepDataSourceRawQueryPtrType)(v)
}

func (*alertEnrichmentSpecStepDataSourceRawQueryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSourceRawQuery)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepDataSourceRawQueryPtrType) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutput() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return i.ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepDataSourceRawQueryPtrType) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceRawQueryOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourceRawQueryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceRawQuery)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryOutput() AlertEnrichmentSpecStepDataSourceRawQueryOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutput() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o.ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepDataSourceRawQuery) *AlertEnrichmentSpecStepDataSourceRawQuery {
		return &v
	}).(AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput)
}

// Reference ID for correlating queries.
func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) RefId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceRawQuery) *string { return v.RefId }).(pulumi.StringPtrOutput)
}

// Raw request payload for the data source query.
func (o AlertEnrichmentSpecStepDataSourceRawQueryOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepDataSourceRawQuery) *string { return v.Request }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepDataSourceRawQuery)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutput() AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) ToAlertEnrichmentSpecStepDataSourceRawQueryPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) Elem() AlertEnrichmentSpecStepDataSourceRawQueryOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceRawQuery) AlertEnrichmentSpecStepDataSourceRawQuery {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepDataSourceRawQuery
		return ret
	}).(AlertEnrichmentSpecStepDataSourceRawQueryOutput)
}

// Reference ID for correlating queries.
func (o AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) RefId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceRawQuery) *string {
		if v == nil {
			return nil
		}
		return v.RefId
	}).(pulumi.StringPtrOutput)
}

// Raw request payload for the data source query.
func (o AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepDataSourceRawQuery) *string {
		if v == nil {
			return nil
		}
		return v.Request
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepExplain struct {
	// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
	Annotation *string `pulumi:"annotation"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepExplainInput is an input type that accepts AlertEnrichmentSpecStepExplainArgs and AlertEnrichmentSpecStepExplainOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepExplainInput` via:
//
//	AlertEnrichmentSpecStepExplainArgs{...}
type AlertEnrichmentSpecStepExplainInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepExplainOutput() AlertEnrichmentSpecStepExplainOutput
	ToAlertEnrichmentSpecStepExplainOutputWithContext(context.Context) AlertEnrichmentSpecStepExplainOutput
}

type AlertEnrichmentSpecStepExplainArgs struct {
	// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
	Annotation pulumi.StringPtrInput `pulumi:"annotation"`
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepExplainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepExplain)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepExplainArgs) ToAlertEnrichmentSpecStepExplainOutput() AlertEnrichmentSpecStepExplainOutput {
	return i.ToAlertEnrichmentSpecStepExplainOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepExplainArgs) ToAlertEnrichmentSpecStepExplainOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExplainOutput)
}

func (i AlertEnrichmentSpecStepExplainArgs) ToAlertEnrichmentSpecStepExplainPtrOutput() AlertEnrichmentSpecStepExplainPtrOutput {
	return i.ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepExplainArgs) ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExplainOutput).ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepExplainPtrInput is an input type that accepts AlertEnrichmentSpecStepExplainArgs, AlertEnrichmentSpecStepExplainPtr and AlertEnrichmentSpecStepExplainPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepExplainPtrInput` via:
//
//	        AlertEnrichmentSpecStepExplainArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepExplainPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepExplainPtrOutput() AlertEnrichmentSpecStepExplainPtrOutput
	ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepExplainPtrOutput
}

type alertEnrichmentSpecStepExplainPtrType AlertEnrichmentSpecStepExplainArgs

func AlertEnrichmentSpecStepExplainPtr(v *AlertEnrichmentSpecStepExplainArgs) AlertEnrichmentSpecStepExplainPtrInput {
	return (*alertEnrichmentSpecStepExplainPtrType)(v)
}

func (*alertEnrichmentSpecStepExplainPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepExplain)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepExplainPtrType) ToAlertEnrichmentSpecStepExplainPtrOutput() AlertEnrichmentSpecStepExplainPtrOutput {
	return i.ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepExplainPtrType) ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExplainPtrOutput)
}

type AlertEnrichmentSpecStepExplainOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepExplainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepExplain)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepExplainOutput) ToAlertEnrichmentSpecStepExplainOutput() AlertEnrichmentSpecStepExplainOutput {
	return o
}

func (o AlertEnrichmentSpecStepExplainOutput) ToAlertEnrichmentSpecStepExplainOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainOutput {
	return o
}

func (o AlertEnrichmentSpecStepExplainOutput) ToAlertEnrichmentSpecStepExplainPtrOutput() AlertEnrichmentSpecStepExplainPtrOutput {
	return o.ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepExplainOutput) ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepExplain) *AlertEnrichmentSpecStepExplain {
		return &v
	}).(AlertEnrichmentSpecStepExplainPtrOutput)
}

// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
func (o AlertEnrichmentSpecStepExplainOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepExplain) *string { return v.Annotation }).(pulumi.StringPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepExplainOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepExplain) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepExplainPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepExplainPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepExplain)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepExplainPtrOutput) ToAlertEnrichmentSpecStepExplainPtrOutput() AlertEnrichmentSpecStepExplainPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepExplainPtrOutput) ToAlertEnrichmentSpecStepExplainPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExplainPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepExplainPtrOutput) Elem() AlertEnrichmentSpecStepExplainOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExplain) AlertEnrichmentSpecStepExplain {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepExplain
		return ret
	}).(AlertEnrichmentSpecStepExplainOutput)
}

// Annotation name to set the explanation in. Defaults to 'ai_explanation'.
func (o AlertEnrichmentSpecStepExplainPtrOutput) Annotation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExplain) *string {
		if v == nil {
			return nil
		}
		return v.Annotation
	}).(pulumi.StringPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepExplainPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExplain) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepExternal struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
	// HTTP endpoint URL to call for enrichment
	Url *string `pulumi:"url"`
}

// AlertEnrichmentSpecStepExternalInput is an input type that accepts AlertEnrichmentSpecStepExternalArgs and AlertEnrichmentSpecStepExternalOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepExternalInput` via:
//
//	AlertEnrichmentSpecStepExternalArgs{...}
type AlertEnrichmentSpecStepExternalInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepExternalOutput() AlertEnrichmentSpecStepExternalOutput
	ToAlertEnrichmentSpecStepExternalOutputWithContext(context.Context) AlertEnrichmentSpecStepExternalOutput
}

type AlertEnrichmentSpecStepExternalArgs struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
	// HTTP endpoint URL to call for enrichment
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (AlertEnrichmentSpecStepExternalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepExternal)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepExternalArgs) ToAlertEnrichmentSpecStepExternalOutput() AlertEnrichmentSpecStepExternalOutput {
	return i.ToAlertEnrichmentSpecStepExternalOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepExternalArgs) ToAlertEnrichmentSpecStepExternalOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExternalOutput)
}

func (i AlertEnrichmentSpecStepExternalArgs) ToAlertEnrichmentSpecStepExternalPtrOutput() AlertEnrichmentSpecStepExternalPtrOutput {
	return i.ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepExternalArgs) ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExternalOutput).ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepExternalPtrInput is an input type that accepts AlertEnrichmentSpecStepExternalArgs, AlertEnrichmentSpecStepExternalPtr and AlertEnrichmentSpecStepExternalPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepExternalPtrInput` via:
//
//	        AlertEnrichmentSpecStepExternalArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepExternalPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepExternalPtrOutput() AlertEnrichmentSpecStepExternalPtrOutput
	ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepExternalPtrOutput
}

type alertEnrichmentSpecStepExternalPtrType AlertEnrichmentSpecStepExternalArgs

func AlertEnrichmentSpecStepExternalPtr(v *AlertEnrichmentSpecStepExternalArgs) AlertEnrichmentSpecStepExternalPtrInput {
	return (*alertEnrichmentSpecStepExternalPtrType)(v)
}

func (*alertEnrichmentSpecStepExternalPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepExternal)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepExternalPtrType) ToAlertEnrichmentSpecStepExternalPtrOutput() AlertEnrichmentSpecStepExternalPtrOutput {
	return i.ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepExternalPtrType) ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepExternalPtrOutput)
}

type AlertEnrichmentSpecStepExternalOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepExternalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepExternal)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepExternalOutput) ToAlertEnrichmentSpecStepExternalOutput() AlertEnrichmentSpecStepExternalOutput {
	return o
}

func (o AlertEnrichmentSpecStepExternalOutput) ToAlertEnrichmentSpecStepExternalOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalOutput {
	return o
}

func (o AlertEnrichmentSpecStepExternalOutput) ToAlertEnrichmentSpecStepExternalPtrOutput() AlertEnrichmentSpecStepExternalPtrOutput {
	return o.ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepExternalOutput) ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepExternal) *AlertEnrichmentSpecStepExternal {
		return &v
	}).(AlertEnrichmentSpecStepExternalPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepExternalOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepExternal) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

// HTTP endpoint URL to call for enrichment
func (o AlertEnrichmentSpecStepExternalOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepExternal) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepExternalPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepExternalPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepExternal)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepExternalPtrOutput) ToAlertEnrichmentSpecStepExternalPtrOutput() AlertEnrichmentSpecStepExternalPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepExternalPtrOutput) ToAlertEnrichmentSpecStepExternalPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepExternalPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepExternalPtrOutput) Elem() AlertEnrichmentSpecStepExternalOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExternal) AlertEnrichmentSpecStepExternal {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepExternal
		return ret
	}).(AlertEnrichmentSpecStepExternalOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepExternalPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExternal) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

// HTTP endpoint URL to call for enrichment
func (o AlertEnrichmentSpecStepExternalPtrOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepExternal) *string {
		if v == nil {
			return nil
		}
		return v.Url
	}).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepSift struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout *string `pulumi:"timeout"`
}

// AlertEnrichmentSpecStepSiftInput is an input type that accepts AlertEnrichmentSpecStepSiftArgs and AlertEnrichmentSpecStepSiftOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepSiftInput` via:
//
//	AlertEnrichmentSpecStepSiftArgs{...}
type AlertEnrichmentSpecStepSiftInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepSiftOutput() AlertEnrichmentSpecStepSiftOutput
	ToAlertEnrichmentSpecStepSiftOutputWithContext(context.Context) AlertEnrichmentSpecStepSiftOutput
}

type AlertEnrichmentSpecStepSiftArgs struct {
	// Maximum execution time (e.g., '30s', '1m')
	Timeout pulumi.StringPtrInput `pulumi:"timeout"`
}

func (AlertEnrichmentSpecStepSiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepSift)(nil)).Elem()
}

func (i AlertEnrichmentSpecStepSiftArgs) ToAlertEnrichmentSpecStepSiftOutput() AlertEnrichmentSpecStepSiftOutput {
	return i.ToAlertEnrichmentSpecStepSiftOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepSiftArgs) ToAlertEnrichmentSpecStepSiftOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepSiftOutput)
}

func (i AlertEnrichmentSpecStepSiftArgs) ToAlertEnrichmentSpecStepSiftPtrOutput() AlertEnrichmentSpecStepSiftPtrOutput {
	return i.ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(context.Background())
}

func (i AlertEnrichmentSpecStepSiftArgs) ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepSiftOutput).ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(ctx)
}

// AlertEnrichmentSpecStepSiftPtrInput is an input type that accepts AlertEnrichmentSpecStepSiftArgs, AlertEnrichmentSpecStepSiftPtr and AlertEnrichmentSpecStepSiftPtrOutput values.
// You can construct a concrete instance of `AlertEnrichmentSpecStepSiftPtrInput` via:
//
//	        AlertEnrichmentSpecStepSiftArgs{...}
//
//	or:
//
//	        nil
type AlertEnrichmentSpecStepSiftPtrInput interface {
	pulumi.Input

	ToAlertEnrichmentSpecStepSiftPtrOutput() AlertEnrichmentSpecStepSiftPtrOutput
	ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(context.Context) AlertEnrichmentSpecStepSiftPtrOutput
}

type alertEnrichmentSpecStepSiftPtrType AlertEnrichmentSpecStepSiftArgs

func AlertEnrichmentSpecStepSiftPtr(v *AlertEnrichmentSpecStepSiftArgs) AlertEnrichmentSpecStepSiftPtrInput {
	return (*alertEnrichmentSpecStepSiftPtrType)(v)
}

func (*alertEnrichmentSpecStepSiftPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepSift)(nil)).Elem()
}

func (i *alertEnrichmentSpecStepSiftPtrType) ToAlertEnrichmentSpecStepSiftPtrOutput() AlertEnrichmentSpecStepSiftPtrOutput {
	return i.ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(context.Background())
}

func (i *alertEnrichmentSpecStepSiftPtrType) ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentSpecStepSiftPtrOutput)
}

type AlertEnrichmentSpecStepSiftOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepSiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertEnrichmentSpecStepSift)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepSiftOutput) ToAlertEnrichmentSpecStepSiftOutput() AlertEnrichmentSpecStepSiftOutput {
	return o
}

func (o AlertEnrichmentSpecStepSiftOutput) ToAlertEnrichmentSpecStepSiftOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftOutput {
	return o
}

func (o AlertEnrichmentSpecStepSiftOutput) ToAlertEnrichmentSpecStepSiftPtrOutput() AlertEnrichmentSpecStepSiftPtrOutput {
	return o.ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(context.Background())
}

func (o AlertEnrichmentSpecStepSiftOutput) ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AlertEnrichmentSpecStepSift) *AlertEnrichmentSpecStepSift {
		return &v
	}).(AlertEnrichmentSpecStepSiftPtrOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepSiftOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertEnrichmentSpecStepSift) *string { return v.Timeout }).(pulumi.StringPtrOutput)
}

type AlertEnrichmentSpecStepSiftPtrOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentSpecStepSiftPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichmentSpecStepSift)(nil)).Elem()
}

func (o AlertEnrichmentSpecStepSiftPtrOutput) ToAlertEnrichmentSpecStepSiftPtrOutput() AlertEnrichmentSpecStepSiftPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepSiftPtrOutput) ToAlertEnrichmentSpecStepSiftPtrOutputWithContext(ctx context.Context) AlertEnrichmentSpecStepSiftPtrOutput {
	return o
}

func (o AlertEnrichmentSpecStepSiftPtrOutput) Elem() AlertEnrichmentSpecStepSiftOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepSift) AlertEnrichmentSpecStepSift {
		if v != nil {
			return *v
		}
		var ret AlertEnrichmentSpecStepSift
		return ret
	}).(AlertEnrichmentSpecStepSiftOutput)
}

// Maximum execution time (e.g., '30s', '1m')
func (o AlertEnrichmentSpecStepSiftPtrOutput) Timeout() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertEnrichmentSpecStepSift) *string {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.StringPtrOutput)
}

type ContactPointAlertmanager struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url string `pulumi:"url"`
}

// ContactPointAlertmanagerInput is an input type that accepts ContactPointAlertmanagerArgs and ContactPointAlertmanagerOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerInput` via:
//
//	ContactPointAlertmanagerArgs{...}
type ContactPointAlertmanagerInput interface {
	pulumi.Input

	ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput
	ToContactPointAlertmanagerOutputWithContext(context.Context) ContactPointAlertmanagerOutput
}

type ContactPointAlertmanagerArgs struct {
	// The password component of the basic auth credentials to use.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username component of the basic auth credentials to use.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL of the Alertmanager instance.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointAlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return i.ToContactPointAlertmanagerOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArgs) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerOutput)
}

// ContactPointAlertmanagerArrayInput is an input type that accepts ContactPointAlertmanagerArray and ContactPointAlertmanagerArrayOutput values.
// You can construct a concrete instance of `ContactPointAlertmanagerArrayInput` via:
//
//	ContactPointAlertmanagerArray{ ContactPointAlertmanagerArgs{...} }
type ContactPointAlertmanagerArrayInput interface {
	pulumi.Input

	ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput
	ToContactPointAlertmanagerArrayOutputWithContext(context.Context) ContactPointAlertmanagerArrayOutput
}

type ContactPointAlertmanagerArray []ContactPointAlertmanagerInput

func (ContactPointAlertmanagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return i.ToContactPointAlertmanagerArrayOutputWithContext(context.Background())
}

func (i ContactPointAlertmanagerArray) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointAlertmanagerArrayOutput)
}

type ContactPointAlertmanagerOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutput() ContactPointAlertmanagerOutput {
	return o
}

func (o ContactPointAlertmanagerOutput) ToContactPointAlertmanagerOutputWithContext(ctx context.Context) ContactPointAlertmanagerOutput {
	return o
}

// The password component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username component of the basic auth credentials to use.
func (o ContactPointAlertmanagerOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointAlertmanagerOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointAlertmanagerOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointAlertmanagerOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL of the Alertmanager instance.
func (o ContactPointAlertmanagerOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointAlertmanager) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointAlertmanagerArrayOutput struct{ *pulumi.OutputState }

func (ContactPointAlertmanagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointAlertmanager)(nil)).Elem()
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutput() ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) ToContactPointAlertmanagerArrayOutputWithContext(ctx context.Context) ContactPointAlertmanagerArrayOutput {
	return o
}

func (o ContactPointAlertmanagerArrayOutput) Index(i pulumi.IntInput) ContactPointAlertmanagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointAlertmanager {
		return vs[0].([]ContactPointAlertmanager)[vs[1].(int)]
	}).(ContactPointAlertmanagerOutput)
}

type ContactPointDingding struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The DingDing webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointDingdingInput is an input type that accepts ContactPointDingdingArgs and ContactPointDingdingOutput values.
// You can construct a concrete instance of `ContactPointDingdingInput` via:
//
//	ContactPointDingdingArgs{...}
type ContactPointDingdingInput interface {
	pulumi.Input

	ToContactPointDingdingOutput() ContactPointDingdingOutput
	ToContactPointDingdingOutputWithContext(context.Context) ContactPointDingdingOutput
}

type ContactPointDingdingArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The format of message to send - either 'link' or 'actionCard'
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The DingDing webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointDingdingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return i.ToContactPointDingdingOutputWithContext(context.Background())
}

func (i ContactPointDingdingArgs) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingOutput)
}

// ContactPointDingdingArrayInput is an input type that accepts ContactPointDingdingArray and ContactPointDingdingArrayOutput values.
// You can construct a concrete instance of `ContactPointDingdingArrayInput` via:
//
//	ContactPointDingdingArray{ ContactPointDingdingArgs{...} }
type ContactPointDingdingArrayInput interface {
	pulumi.Input

	ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput
	ToContactPointDingdingArrayOutputWithContext(context.Context) ContactPointDingdingArrayOutput
}

type ContactPointDingdingArray []ContactPointDingdingInput

func (ContactPointDingdingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return i.ToContactPointDingdingArrayOutputWithContext(context.Background())
}

func (i ContactPointDingdingArray) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDingdingArrayOutput)
}

type ContactPointDingdingOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutput() ContactPointDingdingOutput {
	return o
}

func (o ContactPointDingdingOutput) ToContactPointDingdingOutputWithContext(ctx context.Context) ContactPointDingdingOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDingdingOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointDingdingOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The format of message to send - either 'link' or 'actionCard'
func (o ContactPointDingdingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDingdingOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDingding) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointDingdingOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointDingdingOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDingding) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The DingDing webhook URL.
func (o ContactPointDingdingOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDingding) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointDingdingArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDingdingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDingding)(nil)).Elem()
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutput() ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) ToContactPointDingdingArrayOutputWithContext(ctx context.Context) ContactPointDingdingArrayOutput {
	return o
}

func (o ContactPointDingdingArrayOutput) Index(i pulumi.IntInput) ContactPointDingdingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDingding {
		return vs[0].([]ContactPointDingding)[vs[1].(int)]
	}).(ContactPointDingdingOutput)
}

type ContactPointDiscord struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl *string `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated content of the title.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The discord webhook URL.
	Url string `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername *bool `pulumi:"useDiscordUsername"`
}

// ContactPointDiscordInput is an input type that accepts ContactPointDiscordArgs and ContactPointDiscordOutput values.
// You can construct a concrete instance of `ContactPointDiscordInput` via:
//
//	ContactPointDiscordArgs{...}
type ContactPointDiscordInput interface {
	pulumi.Input

	ToContactPointDiscordOutput() ContactPointDiscordOutput
	ToContactPointDiscordOutputWithContext(context.Context) ContactPointDiscordOutput
}

type ContactPointDiscordArgs struct {
	// The URL of a custom avatar image to use. Defaults to ``.
	AvatarUrl pulumi.StringPtrInput `pulumi:"avatarUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated content of the title.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The discord webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
	// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
	UseDiscordUsername pulumi.BoolPtrInput `pulumi:"useDiscordUsername"`
}

func (ContactPointDiscordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return i.ToContactPointDiscordOutputWithContext(context.Background())
}

func (i ContactPointDiscordArgs) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordOutput)
}

// ContactPointDiscordArrayInput is an input type that accepts ContactPointDiscordArray and ContactPointDiscordArrayOutput values.
// You can construct a concrete instance of `ContactPointDiscordArrayInput` via:
//
//	ContactPointDiscordArray{ ContactPointDiscordArgs{...} }
type ContactPointDiscordArrayInput interface {
	pulumi.Input

	ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput
	ToContactPointDiscordArrayOutputWithContext(context.Context) ContactPointDiscordArrayOutput
}

type ContactPointDiscordArray []ContactPointDiscordInput

func (ContactPointDiscordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return i.ToContactPointDiscordArrayOutputWithContext(context.Background())
}

func (i ContactPointDiscordArray) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointDiscordArrayOutput)
}

type ContactPointDiscordOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutput() ContactPointDiscordOutput {
	return o
}

func (o ContactPointDiscordOutput) ToContactPointDiscordOutputWithContext(ctx context.Context) ContactPointDiscordOutput {
	return o
}

// The URL of a custom avatar image to use. Defaults to “.
func (o ContactPointDiscordOutput) AvatarUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.AvatarUrl }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointDiscordOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message. Defaults to “.
func (o ContactPointDiscordOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointDiscordOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointDiscord) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated content of the title.
func (o ContactPointDiscordOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointDiscordOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The discord webhook URL.
func (o ContactPointDiscordOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointDiscord) string { return v.Url }).(pulumi.StringOutput)
}

// Whether to use the bot account's plain username instead of "Grafana." Defaults to `false`.
func (o ContactPointDiscordOutput) UseDiscordUsername() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointDiscord) *bool { return v.UseDiscordUsername }).(pulumi.BoolPtrOutput)
}

type ContactPointDiscordArrayOutput struct{ *pulumi.OutputState }

func (ContactPointDiscordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointDiscord)(nil)).Elem()
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutput() ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) ToContactPointDiscordArrayOutputWithContext(ctx context.Context) ContactPointDiscordArrayOutput {
	return o
}

func (o ContactPointDiscordArrayOutput) Index(i pulumi.IntInput) ContactPointDiscordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointDiscord {
		return vs[0].([]ContactPointDiscord)[vs[1].(int)]
	}).(ContactPointDiscordOutput)
}

type ContactPointEmail struct {
	// The addresses to send emails to.
	Addresses []string `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail *bool `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject *string `pulumi:"subject"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointEmailInput is an input type that accepts ContactPointEmailArgs and ContactPointEmailOutput values.
// You can construct a concrete instance of `ContactPointEmailInput` via:
//
//	ContactPointEmailArgs{...}
type ContactPointEmailInput interface {
	pulumi.Input

	ToContactPointEmailOutput() ContactPointEmailOutput
	ToContactPointEmailOutputWithContext(context.Context) ContactPointEmailOutput
}

type ContactPointEmailArgs struct {
	// The addresses to send emails to.
	Addresses pulumi.StringArrayInput `pulumi:"addresses"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the email. Defaults to ``.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
	SingleEmail pulumi.BoolPtrInput `pulumi:"singleEmail"`
	// The templated subject line of the email. Defaults to ``.
	Subject pulumi.StringPtrInput `pulumi:"subject"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArgs) ToContactPointEmailOutput() ContactPointEmailOutput {
	return i.ToContactPointEmailOutputWithContext(context.Background())
}

func (i ContactPointEmailArgs) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailOutput)
}

// ContactPointEmailArrayInput is an input type that accepts ContactPointEmailArray and ContactPointEmailArrayOutput values.
// You can construct a concrete instance of `ContactPointEmailArrayInput` via:
//
//	ContactPointEmailArray{ ContactPointEmailArgs{...} }
type ContactPointEmailArrayInput interface {
	pulumi.Input

	ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput
	ToContactPointEmailArrayOutputWithContext(context.Context) ContactPointEmailArrayOutput
}

type ContactPointEmailArray []ContactPointEmailInput

func (ContactPointEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return i.ToContactPointEmailArrayOutputWithContext(context.Background())
}

func (i ContactPointEmailArray) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointEmailArrayOutput)
}

type ContactPointEmailOutput struct{ *pulumi.OutputState }

func (ContactPointEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailOutput) ToContactPointEmailOutput() ContactPointEmailOutput {
	return o
}

func (o ContactPointEmailOutput) ToContactPointEmailOutputWithContext(ctx context.Context) ContactPointEmailOutput {
	return o
}

// The addresses to send emails to.
func (o ContactPointEmailOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactPointEmail) []string { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointEmailOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the email. Defaults to “.
func (o ContactPointEmailOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointEmailOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointEmail) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Whether to send a single email CC'ing all addresses, rather than a separate email to each address. Defaults to `false`.
func (o ContactPointEmailOutput) SingleEmail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *bool { return v.SingleEmail }).(pulumi.BoolPtrOutput)
}

// The templated subject line of the email. Defaults to “.
func (o ContactPointEmailOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointEmailOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointEmail) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointEmailArrayOutput struct{ *pulumi.OutputState }

func (ContactPointEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointEmail)(nil)).Elem()
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutput() ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) ToContactPointEmailArrayOutputWithContext(ctx context.Context) ContactPointEmailArrayOutput {
	return o
}

func (o ContactPointEmailArrayOutput) Index(i pulumi.IntInput) ContactPointEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointEmail {
		return vs[0].([]ContactPointEmail)[vs[1].(int)]
	}).(ContactPointEmailOutput)
}

type ContactPointGooglechat struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated content of the title.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointGooglechatInput is an input type that accepts ContactPointGooglechatArgs and ContactPointGooglechatOutput values.
// You can construct a concrete instance of `ContactPointGooglechatInput` via:
//
//	ContactPointGooglechatArgs{...}
type ContactPointGooglechatInput interface {
	pulumi.Input

	ToContactPointGooglechatOutput() ContactPointGooglechatOutput
	ToContactPointGooglechatOutputWithContext(context.Context) ContactPointGooglechatOutput
}

type ContactPointGooglechatArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated content of the title.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The Google Chat webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointGooglechatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return i.ToContactPointGooglechatOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArgs) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatOutput)
}

// ContactPointGooglechatArrayInput is an input type that accepts ContactPointGooglechatArray and ContactPointGooglechatArrayOutput values.
// You can construct a concrete instance of `ContactPointGooglechatArrayInput` via:
//
//	ContactPointGooglechatArray{ ContactPointGooglechatArgs{...} }
type ContactPointGooglechatArrayInput interface {
	pulumi.Input

	ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput
	ToContactPointGooglechatArrayOutputWithContext(context.Context) ContactPointGooglechatArrayOutput
}

type ContactPointGooglechatArray []ContactPointGooglechatInput

func (ContactPointGooglechatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return i.ToContactPointGooglechatArrayOutputWithContext(context.Background())
}

func (i ContactPointGooglechatArray) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointGooglechatArrayOutput)
}

type ContactPointGooglechatOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutput() ContactPointGooglechatOutput {
	return o
}

func (o ContactPointGooglechatOutput) ToContactPointGooglechatOutputWithContext(ctx context.Context) ContactPointGooglechatOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointGooglechatOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointGooglechatOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointGooglechatOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointGooglechat) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated content of the title.
func (o ContactPointGooglechatOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointGooglechatOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointGooglechat) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The Google Chat webhook URL.
func (o ContactPointGooglechatOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointGooglechat) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointGooglechatArrayOutput struct{ *pulumi.OutputState }

func (ContactPointGooglechatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointGooglechat)(nil)).Elem()
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutput() ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) ToContactPointGooglechatArrayOutputWithContext(ctx context.Context) ContactPointGooglechatArrayOutput {
	return o
}

func (o ContactPointGooglechatArrayOutput) Index(i pulumi.IntInput) ContactPointGooglechatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointGooglechat {
		return vs[0].([]ContactPointGooglechat)[vs[1].(int)]
	}).(ContactPointGooglechatOutput)
}

type ContactPointKafka struct {
	// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
	ApiVersion *string `pulumi:"apiVersion"`
	// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
	ClusterId *string `pulumi:"clusterId"`
	// The templated description of the Kafka message.
	Description *string `pulumi:"description"`
	// The templated details to include with the message.
	Details *string `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The password to use when making a call to the Kafka REST Proxy
	Password *string `pulumi:"password"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl string `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The user name to use when making a call to the Kafka REST Proxy
	Username *string `pulumi:"username"`
}

// ContactPointKafkaInput is an input type that accepts ContactPointKafkaArgs and ContactPointKafkaOutput values.
// You can construct a concrete instance of `ContactPointKafkaInput` via:
//
//	ContactPointKafkaArgs{...}
type ContactPointKafkaInput interface {
	pulumi.Input

	ToContactPointKafkaOutput() ContactPointKafkaOutput
	ToContactPointKafkaOutputWithContext(context.Context) ContactPointKafkaOutput
}

type ContactPointKafkaArgs struct {
	// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
	ClusterId pulumi.StringPtrInput `pulumi:"clusterId"`
	// The templated description of the Kafka message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The templated details to include with the message.
	Details pulumi.StringPtrInput `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The password to use when making a call to the Kafka REST Proxy
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The URL of the Kafka REST proxy to send requests to.
	RestProxyUrl pulumi.StringInput `pulumi:"restProxyUrl"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The name of the Kafka topic to publish to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The user name to use when making a call to the Kafka REST Proxy
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointKafkaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return i.ToContactPointKafkaOutputWithContext(context.Background())
}

func (i ContactPointKafkaArgs) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaOutput)
}

// ContactPointKafkaArrayInput is an input type that accepts ContactPointKafkaArray and ContactPointKafkaArrayOutput values.
// You can construct a concrete instance of `ContactPointKafkaArrayInput` via:
//
//	ContactPointKafkaArray{ ContactPointKafkaArgs{...} }
type ContactPointKafkaArrayInput interface {
	pulumi.Input

	ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput
	ToContactPointKafkaArrayOutputWithContext(context.Context) ContactPointKafkaArrayOutput
}

type ContactPointKafkaArray []ContactPointKafkaInput

func (ContactPointKafkaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return i.ToContactPointKafkaArrayOutputWithContext(context.Background())
}

func (i ContactPointKafkaArray) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointKafkaArrayOutput)
}

type ContactPointKafkaOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutput() ContactPointKafkaOutput {
	return o
}

func (o ContactPointKafkaOutput) ToContactPointKafkaOutputWithContext(ctx context.Context) ContactPointKafkaOutput {
	return o
}

// The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3. Defaults to `v2`.
func (o ContactPointKafkaOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The Id of cluster to use when contacting the Kafka REST Server. Required apiVersion to be 'v3'
func (o ContactPointKafkaOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The templated description of the Kafka message.
func (o ContactPointKafkaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The templated details to include with the message.
func (o ContactPointKafkaOutput) Details() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Details }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointKafkaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The password to use when making a call to the Kafka REST Proxy
func (o ContactPointKafkaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The URL of the Kafka REST proxy to send requests to.
func (o ContactPointKafkaOutput) RestProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.RestProxyUrl }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointKafkaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointKafka) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The name of the Kafka topic to publish to.
func (o ContactPointKafkaOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointKafka) string { return v.Topic }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointKafkaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The user name to use when making a call to the Kafka REST Proxy
func (o ContactPointKafkaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointKafka) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointKafkaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointKafkaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointKafka)(nil)).Elem()
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutput() ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) ToContactPointKafkaArrayOutputWithContext(ctx context.Context) ContactPointKafkaArrayOutput {
	return o
}

func (o ContactPointKafkaArrayOutput) Index(i pulumi.IntInput) ContactPointKafkaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointKafka {
		return vs[0].([]ContactPointKafka)[vs[1].(int)]
	}).(ContactPointKafkaOutput)
}

type ContactPointLine struct {
	// The templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The bearer token used to authorize the client.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointLineInput is an input type that accepts ContactPointLineArgs and ContactPointLineOutput values.
// You can construct a concrete instance of `ContactPointLineInput` via:
//
//	ContactPointLineArgs{...}
type ContactPointLineInput interface {
	pulumi.Input

	ToContactPointLineOutput() ContactPointLineOutput
	ToContactPointLineOutputWithContext(context.Context) ContactPointLineOutput
}

type ContactPointLineArgs struct {
	// The templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The bearer token used to authorize the client.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointLineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointLine)(nil)).Elem()
}

func (i ContactPointLineArgs) ToContactPointLineOutput() ContactPointLineOutput {
	return i.ToContactPointLineOutputWithContext(context.Background())
}

func (i ContactPointLineArgs) ToContactPointLineOutputWithContext(ctx context.Context) ContactPointLineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointLineOutput)
}

// ContactPointLineArrayInput is an input type that accepts ContactPointLineArray and ContactPointLineArrayOutput values.
// You can construct a concrete instance of `ContactPointLineArrayInput` via:
//
//	ContactPointLineArray{ ContactPointLineArgs{...} }
type ContactPointLineArrayInput interface {
	pulumi.Input

	ToContactPointLineArrayOutput() ContactPointLineArrayOutput
	ToContactPointLineArrayOutputWithContext(context.Context) ContactPointLineArrayOutput
}

type ContactPointLineArray []ContactPointLineInput

func (ContactPointLineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointLine)(nil)).Elem()
}

func (i ContactPointLineArray) ToContactPointLineArrayOutput() ContactPointLineArrayOutput {
	return i.ToContactPointLineArrayOutputWithContext(context.Background())
}

func (i ContactPointLineArray) ToContactPointLineArrayOutputWithContext(ctx context.Context) ContactPointLineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointLineArrayOutput)
}

type ContactPointLineOutput struct{ *pulumi.OutputState }

func (ContactPointLineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointLine)(nil)).Elem()
}

func (o ContactPointLineOutput) ToContactPointLineOutput() ContactPointLineOutput {
	return o
}

func (o ContactPointLineOutput) ToContactPointLineOutputWithContext(ctx context.Context) ContactPointLineOutput {
	return o
}

// The templated description of the message.
func (o ContactPointLineOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointLineOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointLineOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointLine) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointLineOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The bearer token used to authorize the client.
func (o ContactPointLineOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointLine) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointLineOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointLine) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointLineArrayOutput struct{ *pulumi.OutputState }

func (ContactPointLineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointLine)(nil)).Elem()
}

func (o ContactPointLineArrayOutput) ToContactPointLineArrayOutput() ContactPointLineArrayOutput {
	return o
}

func (o ContactPointLineArrayOutput) ToContactPointLineArrayOutputWithContext(ctx context.Context) ContactPointLineArrayOutput {
	return o
}

func (o ContactPointLineArrayOutput) Index(i pulumi.IntInput) ContactPointLineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointLine {
		return vs[0].([]ContactPointLine)[vs[1].(int)]
	}).(ContactPointLineOutput)
}

type ContactPointOncall struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message *string `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

// ContactPointOncallInput is an input type that accepts ContactPointOncallArgs and ContactPointOncallOutput values.
// You can construct a concrete instance of `ContactPointOncallInput` via:
//
//	ContactPointOncallArgs{...}
type ContactPointOncallInput interface {
	pulumi.Input

	ToContactPointOncallOutput() ContactPointOncallOutput
	ToContactPointOncallOutputWithContext(context.Context) ContactPointOncallOutput
}

type ContactPointOncallArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumi.StringPtrInput `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumi.StringPtrInput `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumi.IntPtrInput `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointOncallArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOncall)(nil)).Elem()
}

func (i ContactPointOncallArgs) ToContactPointOncallOutput() ContactPointOncallOutput {
	return i.ToContactPointOncallOutputWithContext(context.Background())
}

func (i ContactPointOncallArgs) ToContactPointOncallOutputWithContext(ctx context.Context) ContactPointOncallOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOncallOutput)
}

// ContactPointOncallArrayInput is an input type that accepts ContactPointOncallArray and ContactPointOncallArrayOutput values.
// You can construct a concrete instance of `ContactPointOncallArrayInput` via:
//
//	ContactPointOncallArray{ ContactPointOncallArgs{...} }
type ContactPointOncallArrayInput interface {
	pulumi.Input

	ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput
	ToContactPointOncallArrayOutputWithContext(context.Context) ContactPointOncallArrayOutput
}

type ContactPointOncallArray []ContactPointOncallInput

func (ContactPointOncallArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOncall)(nil)).Elem()
}

func (i ContactPointOncallArray) ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput {
	return i.ToContactPointOncallArrayOutputWithContext(context.Background())
}

func (i ContactPointOncallArray) ToContactPointOncallArrayOutputWithContext(ctx context.Context) ContactPointOncallArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOncallArrayOutput)
}

type ContactPointOncallOutput struct{ *pulumi.OutputState }

func (ContactPointOncallOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOncall)(nil)).Elem()
}

func (o ContactPointOncallOutput) ToContactPointOncallOutput() ContactPointOncallOutput {
	return o
}

func (o ContactPointOncallOutput) ToContactPointOncallOutputWithContext(ctx context.Context) ContactPointOncallOutput {
	return o
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointOncallOutput) AuthorizationCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.AuthorizationCredentials }).(pulumi.StringPtrOutput)
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointOncallOutput) AuthorizationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.AuthorizationScheme }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointOncallOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointOncallOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOncallOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointOncallOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointOncallOutput) MaxAlerts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *int { return v.MaxAlerts }).(pulumi.IntPtrOutput)
}

// Custom message. You can use template variables.
func (o ContactPointOncallOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOncallOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointOncall) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title of the message.
func (o ContactPointOncallOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointOncallOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOncall) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send webhook requests to.
func (o ContactPointOncallOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOncall) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointOncallArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOncallArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOncall)(nil)).Elem()
}

func (o ContactPointOncallArrayOutput) ToContactPointOncallArrayOutput() ContactPointOncallArrayOutput {
	return o
}

func (o ContactPointOncallArrayOutput) ToContactPointOncallArrayOutputWithContext(ctx context.Context) ContactPointOncallArrayOutput {
	return o
}

func (o ContactPointOncallArrayOutput) Index(i pulumi.IntInput) ContactPointOncallOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOncall {
		return vs[0].([]ContactPointOncall)[vs[1].(int)]
	}).(ContactPointOncallOutput)
}

type ContactPointOpsgeny struct {
	// The OpsGenie API key to use.
	ApiKey string `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose *bool `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority *bool `pulumi:"overridePriority"`
	// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
	Responders []ContactPointOpsgenyResponder `pulumi:"responders"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs *string `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url *string `pulumi:"url"`
}

// ContactPointOpsgenyInput is an input type that accepts ContactPointOpsgenyArgs and ContactPointOpsgenyOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyInput` via:
//
//	ContactPointOpsgenyArgs{...}
type ContactPointOpsgenyInput interface {
	pulumi.Input

	ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput
	ToContactPointOpsgenyOutputWithContext(context.Context) ContactPointOpsgenyOutput
}

type ContactPointOpsgenyArgs struct {
	// The OpsGenie API key to use.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
	AutoClose pulumi.BoolPtrInput `pulumi:"autoClose"`
	// A templated high-level description to use for the alert.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
	OverridePriority pulumi.BoolPtrInput `pulumi:"overridePriority"`
	// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
	Responders ContactPointOpsgenyResponderArrayInput `pulumi:"responders"`
	// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
	SendTagsAs pulumi.StringPtrInput `pulumi:"sendTagsAs"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Allows customization of the OpsGenie API URL.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointOpsgenyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return i.ToContactPointOpsgenyOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArgs) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyOutput)
}

// ContactPointOpsgenyArrayInput is an input type that accepts ContactPointOpsgenyArray and ContactPointOpsgenyArrayOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyArrayInput` via:
//
//	ContactPointOpsgenyArray{ ContactPointOpsgenyArgs{...} }
type ContactPointOpsgenyArrayInput interface {
	pulumi.Input

	ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput
	ToContactPointOpsgenyArrayOutputWithContext(context.Context) ContactPointOpsgenyArrayOutput
}

type ContactPointOpsgenyArray []ContactPointOpsgenyInput

func (ContactPointOpsgenyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return i.ToContactPointOpsgenyArrayOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyArray) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyArrayOutput)
}

type ContactPointOpsgenyOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutput() ContactPointOpsgenyOutput {
	return o
}

func (o ContactPointOpsgenyOutput) ToContactPointOpsgenyOutputWithContext(ctx context.Context) ContactPointOpsgenyOutput {
	return o
}

// The OpsGenie API key to use.
func (o ContactPointOpsgenyOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) string { return v.ApiKey }).(pulumi.StringOutput)
}

// Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.
func (o ContactPointOpsgenyOutput) AutoClose() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.AutoClose }).(pulumi.BoolPtrOutput)
}

// A templated high-level description to use for the alert.
func (o ContactPointOpsgenyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointOpsgenyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointOpsgenyOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Whether to allow the alert priority to be configured via the value of the `ogPriority` annotation on the alert.
func (o ContactPointOpsgenyOutput) OverridePriority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *bool { return v.OverridePriority }).(pulumi.BoolPtrOutput)
}

// Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.
func (o ContactPointOpsgenyOutput) Responders() ContactPointOpsgenyResponderArrayOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) []ContactPointOpsgenyResponder { return v.Responders }).(ContactPointOpsgenyResponderArrayOutput)
}

// Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.
func (o ContactPointOpsgenyOutput) SendTagsAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.SendTagsAs }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointOpsgenyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointOpsgenyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Allows customization of the OpsGenie API URL.
func (o ContactPointOpsgenyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgeny) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointOpsgenyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgeny)(nil)).Elem()
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutput() ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) ToContactPointOpsgenyArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyArrayOutput {
	return o
}

func (o ContactPointOpsgenyArrayOutput) Index(i pulumi.IntInput) ContactPointOpsgenyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOpsgeny {
		return vs[0].([]ContactPointOpsgeny)[vs[1].(int)]
	}).(ContactPointOpsgenyOutput)
}

type ContactPointOpsgenyResponder struct {
	// ID of the responder. Must be specified if name and username are empty.
	Id *string `pulumi:"id"`
	// Name of the responder. Must be specified if username and id are empty.
	Name *string `pulumi:"name"`
	// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
	Type string `pulumi:"type"`
	// User name of the responder. Must be specified if name and id are empty.
	Username *string `pulumi:"username"`
}

// ContactPointOpsgenyResponderInput is an input type that accepts ContactPointOpsgenyResponderArgs and ContactPointOpsgenyResponderOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyResponderInput` via:
//
//	ContactPointOpsgenyResponderArgs{...}
type ContactPointOpsgenyResponderInput interface {
	pulumi.Input

	ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput
	ToContactPointOpsgenyResponderOutputWithContext(context.Context) ContactPointOpsgenyResponderOutput
}

type ContactPointOpsgenyResponderArgs struct {
	// ID of the responder. Must be specified if name and username are empty.
	Id pulumi.StringPtrInput `pulumi:"id"`
	// Name of the responder. Must be specified if username and id are empty.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
	Type pulumi.StringInput `pulumi:"type"`
	// User name of the responder. Must be specified if name and id are empty.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointOpsgenyResponderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgenyResponder)(nil)).Elem()
}

func (i ContactPointOpsgenyResponderArgs) ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput {
	return i.ToContactPointOpsgenyResponderOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyResponderArgs) ToContactPointOpsgenyResponderOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyResponderOutput)
}

// ContactPointOpsgenyResponderArrayInput is an input type that accepts ContactPointOpsgenyResponderArray and ContactPointOpsgenyResponderArrayOutput values.
// You can construct a concrete instance of `ContactPointOpsgenyResponderArrayInput` via:
//
//	ContactPointOpsgenyResponderArray{ ContactPointOpsgenyResponderArgs{...} }
type ContactPointOpsgenyResponderArrayInput interface {
	pulumi.Input

	ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput
	ToContactPointOpsgenyResponderArrayOutputWithContext(context.Context) ContactPointOpsgenyResponderArrayOutput
}

type ContactPointOpsgenyResponderArray []ContactPointOpsgenyResponderInput

func (ContactPointOpsgenyResponderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgenyResponder)(nil)).Elem()
}

func (i ContactPointOpsgenyResponderArray) ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput {
	return i.ToContactPointOpsgenyResponderArrayOutputWithContext(context.Background())
}

func (i ContactPointOpsgenyResponderArray) ToContactPointOpsgenyResponderArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointOpsgenyResponderArrayOutput)
}

type ContactPointOpsgenyResponderOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyResponderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointOpsgenyResponder)(nil)).Elem()
}

func (o ContactPointOpsgenyResponderOutput) ToContactPointOpsgenyResponderOutput() ContactPointOpsgenyResponderOutput {
	return o
}

func (o ContactPointOpsgenyResponderOutput) ToContactPointOpsgenyResponderOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderOutput {
	return o
}

// ID of the responder. Must be specified if name and username are empty.
func (o ContactPointOpsgenyResponderOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Id }).(pulumi.StringPtrOutput)
}

// Name of the responder. Must be specified if username and id are empty.
func (o ContactPointOpsgenyResponderOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.
func (o ContactPointOpsgenyResponderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) string { return v.Type }).(pulumi.StringOutput)
}

// User name of the responder. Must be specified if name and id are empty.
func (o ContactPointOpsgenyResponderOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointOpsgenyResponder) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointOpsgenyResponderArrayOutput struct{ *pulumi.OutputState }

func (ContactPointOpsgenyResponderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointOpsgenyResponder)(nil)).Elem()
}

func (o ContactPointOpsgenyResponderArrayOutput) ToContactPointOpsgenyResponderArrayOutput() ContactPointOpsgenyResponderArrayOutput {
	return o
}

func (o ContactPointOpsgenyResponderArrayOutput) ToContactPointOpsgenyResponderArrayOutputWithContext(ctx context.Context) ContactPointOpsgenyResponderArrayOutput {
	return o
}

func (o ContactPointOpsgenyResponderArrayOutput) Index(i pulumi.IntInput) ContactPointOpsgenyResponderOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointOpsgenyResponder {
		return vs[0].([]ContactPointOpsgenyResponder)[vs[1].(int)]
	}).(ContactPointOpsgenyResponderOutput)
}

type ContactPointPagerduty struct {
	// The class or type of event, for example `ping failure`.
	Class *string `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client *string `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl *string `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component *string `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details map[string]string `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group *string `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey string `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity *string `pulumi:"severity"`
	// The unique location of the affected system.
	Source *string `pulumi:"source"`
	// The templated summary message of the event.
	Summary *string `pulumi:"summary"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send API requests to
	Url *string `pulumi:"url"`
}

// ContactPointPagerdutyInput is an input type that accepts ContactPointPagerdutyArgs and ContactPointPagerdutyOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyInput` via:
//
//	ContactPointPagerdutyArgs{...}
type ContactPointPagerdutyInput interface {
	pulumi.Input

	ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput
	ToContactPointPagerdutyOutputWithContext(context.Context) ContactPointPagerdutyOutput
}

type ContactPointPagerdutyArgs struct {
	// The class or type of event, for example `ping failure`.
	Class pulumi.StringPtrInput `pulumi:"class"`
	// The name of the monitoring client that is triggering this event.
	Client pulumi.StringPtrInput `pulumi:"client"`
	// The URL of the monitoring client that is triggering this event.
	ClientUrl pulumi.StringPtrInput `pulumi:"clientUrl"`
	// The component being affected by the event.
	Component pulumi.StringPtrInput `pulumi:"component"`
	// A set of arbitrary key/value pairs that provide further detail about the incident.
	Details pulumi.StringMapInput `pulumi:"details"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The group to which the provided component belongs to.
	Group pulumi.StringPtrInput `pulumi:"group"`
	// The PagerDuty API key.
	IntegrationKey pulumi.StringInput `pulumi:"integrationKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The PagerDuty event severity level. Default is `critical`.
	Severity pulumi.StringPtrInput `pulumi:"severity"`
	// The unique location of the affected system.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The templated summary message of the event.
	Summary pulumi.StringPtrInput `pulumi:"summary"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send API requests to
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointPagerdutyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return i.ToContactPointPagerdutyOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArgs) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyOutput)
}

// ContactPointPagerdutyArrayInput is an input type that accepts ContactPointPagerdutyArray and ContactPointPagerdutyArrayOutput values.
// You can construct a concrete instance of `ContactPointPagerdutyArrayInput` via:
//
//	ContactPointPagerdutyArray{ ContactPointPagerdutyArgs{...} }
type ContactPointPagerdutyArrayInput interface {
	pulumi.Input

	ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput
	ToContactPointPagerdutyArrayOutputWithContext(context.Context) ContactPointPagerdutyArrayOutput
}

type ContactPointPagerdutyArray []ContactPointPagerdutyInput

func (ContactPointPagerdutyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return i.ToContactPointPagerdutyArrayOutputWithContext(context.Background())
}

func (i ContactPointPagerdutyArray) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPagerdutyArrayOutput)
}

type ContactPointPagerdutyOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutput() ContactPointPagerdutyOutput {
	return o
}

func (o ContactPointPagerdutyOutput) ToContactPointPagerdutyOutputWithContext(ctx context.Context) ContactPointPagerdutyOutput {
	return o
}

// The class or type of event, for example `ping failure`.
func (o ContactPointPagerdutyOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Class }).(pulumi.StringPtrOutput)
}

// The name of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) Client() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Client }).(pulumi.StringPtrOutput)
}

// The URL of the monitoring client that is triggering this event.
func (o ContactPointPagerdutyOutput) ClientUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.ClientUrl }).(pulumi.StringPtrOutput)
}

// The component being affected by the event.
func (o ContactPointPagerdutyOutput) Component() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Component }).(pulumi.StringPtrOutput)
}

// A set of arbitrary key/value pairs that provide further detail about the incident.
func (o ContactPointPagerdutyOutput) Details() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPagerduty) map[string]string { return v.Details }).(pulumi.StringMapOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPagerdutyOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The group to which the provided component belongs to.
func (o ContactPointPagerdutyOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// The PagerDuty API key.
func (o ContactPointPagerdutyOutput) IntegrationKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPagerduty) string { return v.IntegrationKey }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPagerdutyOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPagerduty) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The PagerDuty event severity level. Default is `critical`.
func (o ContactPointPagerdutyOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Severity }).(pulumi.StringPtrOutput)
}

// The unique location of the affected system.
func (o ContactPointPagerdutyOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// The templated summary message of the event.
func (o ContactPointPagerdutyOutput) Summary() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Summary }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPagerdutyOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send API requests to
func (o ContactPointPagerdutyOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPagerduty) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointPagerdutyArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPagerdutyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPagerduty)(nil)).Elem()
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutput() ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) ToContactPointPagerdutyArrayOutputWithContext(ctx context.Context) ContactPointPagerdutyArrayOutput {
	return o
}

func (o ContactPointPagerdutyArrayOutput) Index(i pulumi.IntInput) ContactPointPagerdutyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPagerduty {
		return vs[0].([]ContactPointPagerduty)[vs[1].(int)]
	}).(ContactPointPagerdutyOutput)
}

type ContactPointPushover struct {
	// The Pushover API token.
	ApiToken string `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device *string `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire *int `pulumi:"expire"`
	// The templated notification message content.
	Message *string `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority *int `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound *string `pulumi:"okSound"`
	// The priority level of the event.
	Priority *int `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry *int `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The sound associated with the notification.
	Sound *string `pulumi:"sound"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
	UploadImage *bool `pulumi:"uploadImage"`
	// The Pushover user key.
	UserKey string `pulumi:"userKey"`
}

// ContactPointPushoverInput is an input type that accepts ContactPointPushoverArgs and ContactPointPushoverOutput values.
// You can construct a concrete instance of `ContactPointPushoverInput` via:
//
//	ContactPointPushoverArgs{...}
type ContactPointPushoverInput interface {
	pulumi.Input

	ToContactPointPushoverOutput() ContactPointPushoverOutput
	ToContactPointPushoverOutputWithContext(context.Context) ContactPointPushoverOutput
}

type ContactPointPushoverArgs struct {
	// The Pushover API token.
	ApiToken pulumi.StringInput `pulumi:"apiToken"`
	// Comma-separated list of devices to which the event is associated.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// How many seconds for which the notification will continue to be retried by Pushover.
	Expire pulumi.IntPtrInput `pulumi:"expire"`
	// The templated notification message content.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The priority level of the resolved event.
	OkPriority pulumi.IntPtrInput `pulumi:"okPriority"`
	// The sound associated with the resolved notification.
	OkSound pulumi.StringPtrInput `pulumi:"okSound"`
	// The priority level of the event.
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// How often, in seconds, the Pushover servers will send the same notification to the user.
	Retry pulumi.IntPtrInput `pulumi:"retry"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The sound associated with the notification.
	Sound pulumi.StringPtrInput `pulumi:"sound"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
	UploadImage pulumi.BoolPtrInput `pulumi:"uploadImage"`
	// The Pushover user key.
	UserKey pulumi.StringInput `pulumi:"userKey"`
}

func (ContactPointPushoverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return i.ToContactPointPushoverOutputWithContext(context.Background())
}

func (i ContactPointPushoverArgs) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverOutput)
}

// ContactPointPushoverArrayInput is an input type that accepts ContactPointPushoverArray and ContactPointPushoverArrayOutput values.
// You can construct a concrete instance of `ContactPointPushoverArrayInput` via:
//
//	ContactPointPushoverArray{ ContactPointPushoverArgs{...} }
type ContactPointPushoverArrayInput interface {
	pulumi.Input

	ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput
	ToContactPointPushoverArrayOutputWithContext(context.Context) ContactPointPushoverArrayOutput
}

type ContactPointPushoverArray []ContactPointPushoverInput

func (ContactPointPushoverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return i.ToContactPointPushoverArrayOutputWithContext(context.Background())
}

func (i ContactPointPushoverArray) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointPushoverArrayOutput)
}

type ContactPointPushoverOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutput() ContactPointPushoverOutput {
	return o
}

func (o ContactPointPushoverOutput) ToContactPointPushoverOutputWithContext(ctx context.Context) ContactPointPushoverOutput {
	return o
}

// The Pushover API token.
func (o ContactPointPushoverOutput) ApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.ApiToken }).(pulumi.StringOutput)
}

// Comma-separated list of devices to which the event is associated.
func (o ContactPointPushoverOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointPushoverOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// How many seconds for which the notification will continue to be retried by Pushover.
func (o ContactPointPushoverOutput) Expire() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Expire }).(pulumi.IntPtrOutput)
}

// The templated notification message content.
func (o ContactPointPushoverOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The priority level of the resolved event.
func (o ContactPointPushoverOutput) OkPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.OkPriority }).(pulumi.IntPtrOutput)
}

// The sound associated with the resolved notification.
func (o ContactPointPushoverOutput) OkSound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.OkSound }).(pulumi.StringPtrOutput)
}

// The priority level of the event.
func (o ContactPointPushoverOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// How often, in seconds, the Pushover servers will send the same notification to the user.
func (o ContactPointPushoverOutput) Retry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *int { return v.Retry }).(pulumi.IntPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointPushoverOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointPushover) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The sound associated with the notification.
func (o ContactPointPushoverOutput) Sound() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Sound }).(pulumi.StringPtrOutput)
}

// The templated title of the message.
func (o ContactPointPushoverOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointPushoverOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.
func (o ContactPointPushoverOutput) UploadImage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointPushover) *bool { return v.UploadImage }).(pulumi.BoolPtrOutput)
}

// The Pushover user key.
func (o ContactPointPushoverOutput) UserKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointPushover) string { return v.UserKey }).(pulumi.StringOutput)
}

type ContactPointPushoverArrayOutput struct{ *pulumi.OutputState }

func (ContactPointPushoverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointPushover)(nil)).Elem()
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutput() ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) ToContactPointPushoverArrayOutputWithContext(ctx context.Context) ContactPointPushoverArrayOutput {
	return o
}

func (o ContactPointPushoverArrayOutput) Index(i pulumi.IntInput) ContactPointPushoverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointPushover {
		return vs[0].([]ContactPointPushover)[vs[1].(int)]
	}).(ContactPointPushoverOutput)
}

type ContactPointSensugo struct {
	// The SensuGo API key.
	ApiKey string `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check *string `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity *string `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler *string `pulumi:"handler"`
	// Templated message content describing the alert.
	Message *string `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace *string `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url string `pulumi:"url"`
}

// ContactPointSensugoInput is an input type that accepts ContactPointSensugoArgs and ContactPointSensugoOutput values.
// You can construct a concrete instance of `ContactPointSensugoInput` via:
//
//	ContactPointSensugoArgs{...}
type ContactPointSensugoInput interface {
	pulumi.Input

	ToContactPointSensugoOutput() ContactPointSensugoOutput
	ToContactPointSensugoOutputWithContext(context.Context) ContactPointSensugoOutput
}

type ContactPointSensugoArgs struct {
	// The SensuGo API key.
	ApiKey pulumi.StringInput `pulumi:"apiKey"`
	// The SensuGo check to which the event should be routed.
	Check pulumi.StringPtrInput `pulumi:"check"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The entity being monitored.
	Entity pulumi.StringPtrInput `pulumi:"entity"`
	// A custom handler to execute in addition to the check.
	Handler pulumi.StringPtrInput `pulumi:"handler"`
	// Templated message content describing the alert.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The namespace in which the check resides.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The SensuGo URL to send requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointSensugoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return i.ToContactPointSensugoOutputWithContext(context.Background())
}

func (i ContactPointSensugoArgs) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoOutput)
}

// ContactPointSensugoArrayInput is an input type that accepts ContactPointSensugoArray and ContactPointSensugoArrayOutput values.
// You can construct a concrete instance of `ContactPointSensugoArrayInput` via:
//
//	ContactPointSensugoArray{ ContactPointSensugoArgs{...} }
type ContactPointSensugoArrayInput interface {
	pulumi.Input

	ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput
	ToContactPointSensugoArrayOutputWithContext(context.Context) ContactPointSensugoArrayOutput
}

type ContactPointSensugoArray []ContactPointSensugoInput

func (ContactPointSensugoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return i.ToContactPointSensugoArrayOutputWithContext(context.Background())
}

func (i ContactPointSensugoArray) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSensugoArrayOutput)
}

type ContactPointSensugoOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutput() ContactPointSensugoOutput {
	return o
}

func (o ContactPointSensugoOutput) ToContactPointSensugoOutputWithContext(ctx context.Context) ContactPointSensugoOutput {
	return o
}

// The SensuGo API key.
func (o ContactPointSensugoOutput) ApiKey() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.ApiKey }).(pulumi.StringOutput)
}

// The SensuGo check to which the event should be routed.
func (o ContactPointSensugoOutput) Check() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Check }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSensugoOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The entity being monitored.
func (o ContactPointSensugoOutput) Entity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Entity }).(pulumi.StringPtrOutput)
}

// A custom handler to execute in addition to the check.
func (o ContactPointSensugoOutput) Handler() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Handler }).(pulumi.StringPtrOutput)
}

// Templated message content describing the alert.
func (o ContactPointSensugoOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The namespace in which the check resides.
func (o ContactPointSensugoOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSensugoOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSensugo) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointSensugoOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSensugo) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The SensuGo URL to send requests to.
func (o ContactPointSensugoOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSensugo) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointSensugoArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSensugoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSensugo)(nil)).Elem()
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutput() ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) ToContactPointSensugoArrayOutputWithContext(ctx context.Context) ContactPointSensugoArrayOutput {
	return o
}

func (o ContactPointSensugoArrayOutput) Index(i pulumi.IntInput) ContactPointSensugoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSensugo {
		return vs[0].([]ContactPointSensugo)[vs[1].(int)]
	}).(ContactPointSensugoOutput)
}

type ContactPointSlack struct {
	// Templated color of the slack message.
	Color *string `pulumi:"color"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl *string `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji *string `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl *string `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel *string `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups *string `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers *string `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient *string `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated content of the message.
	Text *string `pulumi:"text"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token *string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url *string `pulumi:"url"`
	// Username for the bot to use.
	Username *string `pulumi:"username"`
}

// ContactPointSlackInput is an input type that accepts ContactPointSlackArgs and ContactPointSlackOutput values.
// You can construct a concrete instance of `ContactPointSlackInput` via:
//
//	ContactPointSlackArgs{...}
type ContactPointSlackInput interface {
	pulumi.Input

	ToContactPointSlackOutput() ContactPointSlackOutput
	ToContactPointSlackOutputWithContext(context.Context) ContactPointSlackOutput
}

type ContactPointSlackArgs struct {
	// Templated color of the slack message.
	Color pulumi.StringPtrInput `pulumi:"color"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Use this to override the Slack API endpoint URL to send requests to.
	EndpointUrl pulumi.StringPtrInput `pulumi:"endpointUrl"`
	// The name of a Slack workspace emoji to use as the bot icon.
	IconEmoji pulumi.StringPtrInput `pulumi:"iconEmoji"`
	// A URL of an image to use as the bot icon.
	IconUrl pulumi.StringPtrInput `pulumi:"iconUrl"`
	// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
	MentionChannel pulumi.StringPtrInput `pulumi:"mentionChannel"`
	// Comma-separated list of groups to mention in the message.
	MentionGroups pulumi.StringPtrInput `pulumi:"mentionGroups"`
	// Comma-separated list of users to mention in the message.
	MentionUsers pulumi.StringPtrInput `pulumi:"mentionUsers"`
	// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
	Recipient pulumi.StringPtrInput `pulumi:"recipient"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated content of the message.
	Text pulumi.StringPtrInput `pulumi:"text"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// A Slack API token,for sending messages directly without the webhook method.
	Token pulumi.StringPtrInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Slack webhook URL,for sending messages via the webhook method.
	Url pulumi.StringPtrInput `pulumi:"url"`
	// Username for the bot to use.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (ContactPointSlackArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArgs) ToContactPointSlackOutput() ContactPointSlackOutput {
	return i.ToContactPointSlackOutputWithContext(context.Background())
}

func (i ContactPointSlackArgs) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackOutput)
}

// ContactPointSlackArrayInput is an input type that accepts ContactPointSlackArray and ContactPointSlackArrayOutput values.
// You can construct a concrete instance of `ContactPointSlackArrayInput` via:
//
//	ContactPointSlackArray{ ContactPointSlackArgs{...} }
type ContactPointSlackArrayInput interface {
	pulumi.Input

	ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput
	ToContactPointSlackArrayOutputWithContext(context.Context) ContactPointSlackArrayOutput
}

type ContactPointSlackArray []ContactPointSlackInput

func (ContactPointSlackArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return i.ToContactPointSlackArrayOutputWithContext(context.Background())
}

func (i ContactPointSlackArray) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSlackArrayOutput)
}

type ContactPointSlackOutput struct{ *pulumi.OutputState }

func (ContactPointSlackOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackOutput) ToContactPointSlackOutput() ContactPointSlackOutput {
	return o
}

func (o ContactPointSlackOutput) ToContactPointSlackOutputWithContext(ctx context.Context) ContactPointSlackOutput {
	return o
}

// Templated color of the slack message.
func (o ContactPointSlackOutput) Color() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Color }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSlackOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Use this to override the Slack API endpoint URL to send requests to.
func (o ContactPointSlackOutput) EndpointUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.EndpointUrl }).(pulumi.StringPtrOutput)
}

// The name of a Slack workspace emoji to use as the bot icon.
func (o ContactPointSlackOutput) IconEmoji() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconEmoji }).(pulumi.StringPtrOutput)
}

// A URL of an image to use as the bot icon.
func (o ContactPointSlackOutput) IconUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.IconUrl }).(pulumi.StringPtrOutput)
}

// Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.
func (o ContactPointSlackOutput) MentionChannel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionChannel }).(pulumi.StringPtrOutput)
}

// Comma-separated list of groups to mention in the message.
func (o ContactPointSlackOutput) MentionGroups() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionGroups }).(pulumi.StringPtrOutput)
}

// Comma-separated list of users to mention in the message.
func (o ContactPointSlackOutput) MentionUsers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.MentionUsers }).(pulumi.StringPtrOutput)
}

// Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.
func (o ContactPointSlackOutput) Recipient() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Recipient }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSlackOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSlack) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated content of the message.
func (o ContactPointSlackOutput) Text() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Text }).(pulumi.StringPtrOutput)
}

// Templated title of the message.
func (o ContactPointSlackOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// A Slack API token,for sending messages directly without the webhook method.
func (o ContactPointSlackOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Token }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointSlackOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Slack webhook URL,for sending messages via the webhook method.
func (o ContactPointSlackOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Url }).(pulumi.StringPtrOutput)
}

// Username for the bot to use.
func (o ContactPointSlackOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSlack) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type ContactPointSlackArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSlackArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSlack)(nil)).Elem()
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutput() ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) ToContactPointSlackArrayOutputWithContext(ctx context.Context) ContactPointSlackArrayOutput {
	return o
}

func (o ContactPointSlackArrayOutput) Index(i pulumi.IntInput) ContactPointSlackOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSlack {
		return vs[0].([]ContactPointSlack)[vs[1].(int)]
	}).(ContactPointSlackOutput)
}

type ContactPointSn struct {
	// AWS access key ID used to authenticate with Amazon SNS.
	AccessKey *string `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
	AssumeRoleArn *string `pulumi:"assumeRoleArn"`
	// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
	AuthProvider *string `pulumi:"authProvider"`
	Body         *string `pulumi:"body"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The external ID to use when assuming the role.
	ExternalId *string `pulumi:"externalId"`
	// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
	MessageFormat *string `pulumi:"messageFormat"`
	// AWS secret access key used to authenticate with Amazon SNS.
	SecretKey *string `pulumi:"secretKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	Subject  *string           `pulumi:"subject"`
	// The Amazon SNS topic to send notifications to.
	Topic string `pulumi:"topic"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointSnInput is an input type that accepts ContactPointSnArgs and ContactPointSnOutput values.
// You can construct a concrete instance of `ContactPointSnInput` via:
//
//	ContactPointSnArgs{...}
type ContactPointSnInput interface {
	pulumi.Input

	ToContactPointSnOutput() ContactPointSnOutput
	ToContactPointSnOutputWithContext(context.Context) ContactPointSnOutput
}

type ContactPointSnArgs struct {
	// AWS access key ID used to authenticate with Amazon SNS.
	AccessKey pulumi.StringPtrInput `pulumi:"accessKey"`
	// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
	AssumeRoleArn pulumi.StringPtrInput `pulumi:"assumeRoleArn"`
	// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
	AuthProvider pulumi.StringPtrInput `pulumi:"authProvider"`
	Body         pulumi.StringPtrInput `pulumi:"body"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The external ID to use when assuming the role.
	ExternalId pulumi.StringPtrInput `pulumi:"externalId"`
	// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
	MessageFormat pulumi.StringPtrInput `pulumi:"messageFormat"`
	// AWS secret access key used to authenticate with Amazon SNS.
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	Subject  pulumi.StringPtrInput `pulumi:"subject"`
	// The Amazon SNS topic to send notifications to.
	Topic pulumi.StringInput `pulumi:"topic"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointSnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSn)(nil)).Elem()
}

func (i ContactPointSnArgs) ToContactPointSnOutput() ContactPointSnOutput {
	return i.ToContactPointSnOutputWithContext(context.Background())
}

func (i ContactPointSnArgs) ToContactPointSnOutputWithContext(ctx context.Context) ContactPointSnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSnOutput)
}

// ContactPointSnArrayInput is an input type that accepts ContactPointSnArray and ContactPointSnArrayOutput values.
// You can construct a concrete instance of `ContactPointSnArrayInput` via:
//
//	ContactPointSnArray{ ContactPointSnArgs{...} }
type ContactPointSnArrayInput interface {
	pulumi.Input

	ToContactPointSnArrayOutput() ContactPointSnArrayOutput
	ToContactPointSnArrayOutputWithContext(context.Context) ContactPointSnArrayOutput
}

type ContactPointSnArray []ContactPointSnInput

func (ContactPointSnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSn)(nil)).Elem()
}

func (i ContactPointSnArray) ToContactPointSnArrayOutput() ContactPointSnArrayOutput {
	return i.ToContactPointSnArrayOutputWithContext(context.Background())
}

func (i ContactPointSnArray) ToContactPointSnArrayOutputWithContext(ctx context.Context) ContactPointSnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointSnArrayOutput)
}

type ContactPointSnOutput struct{ *pulumi.OutputState }

func (ContactPointSnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointSn)(nil)).Elem()
}

func (o ContactPointSnOutput) ToContactPointSnOutput() ContactPointSnOutput {
	return o
}

func (o ContactPointSnOutput) ToContactPointSnOutputWithContext(ctx context.Context) ContactPointSnOutput {
	return o
}

// AWS access key ID used to authenticate with Amazon SNS.
func (o ContactPointSnOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.
func (o ContactPointSnOutput) AssumeRoleArn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AssumeRoleArn }).(pulumi.StringPtrOutput)
}

// The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`. Defaults to `default`.
func (o ContactPointSnOutput) AuthProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.AuthProvider }).(pulumi.StringPtrOutput)
}

func (o ContactPointSnOutput) Body() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Body }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointSnOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The external ID to use when assuming the role.
func (o ContactPointSnOutput) ExternalId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.ExternalId }).(pulumi.StringPtrOutput)
}

// The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`. Defaults to `text`.
func (o ContactPointSnOutput) MessageFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.MessageFormat }).(pulumi.StringPtrOutput)
}

// AWS secret access key used to authenticate with Amazon SNS.
func (o ContactPointSnOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointSnOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointSn) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o ContactPointSnOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Subject }).(pulumi.StringPtrOutput)
}

// The Amazon SNS topic to send notifications to.
func (o ContactPointSnOutput) Topic() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointSn) string { return v.Topic }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointSnOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointSn) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointSnArrayOutput struct{ *pulumi.OutputState }

func (ContactPointSnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointSn)(nil)).Elem()
}

func (o ContactPointSnArrayOutput) ToContactPointSnArrayOutput() ContactPointSnArrayOutput {
	return o
}

func (o ContactPointSnArrayOutput) ToContactPointSnArrayOutputWithContext(ctx context.Context) ContactPointSnArrayOutput {
	return o
}

func (o ContactPointSnArrayOutput) Index(i pulumi.IntInput) ContactPointSnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointSn {
		return vs[0].([]ContactPointSn)[vs[1].(int)]
	}).(ContactPointSnOutput)
}

type ContactPointTeam struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message *string `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle *string `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// A Teams webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointTeamInput is an input type that accepts ContactPointTeamArgs and ContactPointTeamOutput values.
// You can construct a concrete instance of `ContactPointTeamInput` via:
//
//	ContactPointTeamArgs{...}
type ContactPointTeamInput interface {
	pulumi.Input

	ToContactPointTeamOutput() ContactPointTeamOutput
	ToContactPointTeamOutputWithContext(context.Context) ContactPointTeamOutput
}

type ContactPointTeamArgs struct {
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated message content to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The templated subtitle for each message section.
	SectionTitle pulumi.StringPtrInput `pulumi:"sectionTitle"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// A Teams webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArgs) ToContactPointTeamOutput() ContactPointTeamOutput {
	return i.ToContactPointTeamOutputWithContext(context.Background())
}

func (i ContactPointTeamArgs) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamOutput)
}

// ContactPointTeamArrayInput is an input type that accepts ContactPointTeamArray and ContactPointTeamArrayOutput values.
// You can construct a concrete instance of `ContactPointTeamArrayInput` via:
//
//	ContactPointTeamArray{ ContactPointTeamArgs{...} }
type ContactPointTeamArrayInput interface {
	pulumi.Input

	ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput
	ToContactPointTeamArrayOutputWithContext(context.Context) ContactPointTeamArrayOutput
}

type ContactPointTeamArray []ContactPointTeamInput

func (ContactPointTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return i.ToContactPointTeamArrayOutputWithContext(context.Background())
}

func (i ContactPointTeamArray) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTeamArrayOutput)
}

type ContactPointTeamOutput struct{ *pulumi.OutputState }

func (ContactPointTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamOutput) ToContactPointTeamOutput() ContactPointTeamOutput {
	return o
}

func (o ContactPointTeamOutput) ToContactPointTeamOutputWithContext(ctx context.Context) ContactPointTeamOutput {
	return o
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTeamOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated message content to send.
func (o ContactPointTeamOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The templated subtitle for each message section.
func (o ContactPointTeamOutput) SectionTitle() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.SectionTitle }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTeamOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTeam) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointTeamOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointTeamOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTeam) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// A Teams webhook URL.
func (o ContactPointTeamOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTeam) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointTeamArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTeam)(nil)).Elem()
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutput() ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) ToContactPointTeamArrayOutputWithContext(ctx context.Context) ContactPointTeamArrayOutput {
	return o
}

func (o ContactPointTeamArrayOutput) Index(i pulumi.IntInput) ContactPointTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTeam {
		return vs[0].([]ContactPointTeam)[vs[1].(int)]
	}).(ContactPointTeamOutput)
}

type ContactPointTelegram struct {
	// The chat ID to send messages to.
	ChatId string `pulumi:"chatId"`
	// When set users will receive a notification with no sound.
	DisableNotifications *bool `pulumi:"disableNotifications"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// When set it disables link previews for links in the message.
	DisableWebPagePreview *bool `pulumi:"disableWebPagePreview"`
	// The templated content of the message.
	Message *string `pulumi:"message"`
	// The ID of the message thread to send the message to.
	MessageThreadId *string `pulumi:"messageThreadId"`
	// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
	ParseMode *string `pulumi:"parseMode"`
	// When set it protects the contents of the message from forwarding and saving.
	ProtectContent *bool `pulumi:"protectContent"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The Telegram bot token.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointTelegramInput is an input type that accepts ContactPointTelegramArgs and ContactPointTelegramOutput values.
// You can construct a concrete instance of `ContactPointTelegramInput` via:
//
//	ContactPointTelegramArgs{...}
type ContactPointTelegramInput interface {
	pulumi.Input

	ToContactPointTelegramOutput() ContactPointTelegramOutput
	ToContactPointTelegramOutputWithContext(context.Context) ContactPointTelegramOutput
}

type ContactPointTelegramArgs struct {
	// The chat ID to send messages to.
	ChatId pulumi.StringInput `pulumi:"chatId"`
	// When set users will receive a notification with no sound.
	DisableNotifications pulumi.BoolPtrInput `pulumi:"disableNotifications"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// When set it disables link previews for links in the message.
	DisableWebPagePreview pulumi.BoolPtrInput `pulumi:"disableWebPagePreview"`
	// The templated content of the message.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The ID of the message thread to send the message to.
	MessageThreadId pulumi.StringPtrInput `pulumi:"messageThreadId"`
	// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
	ParseMode pulumi.StringPtrInput `pulumi:"parseMode"`
	// When set it protects the contents of the message from forwarding and saving.
	ProtectContent pulumi.BoolPtrInput `pulumi:"protectContent"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The Telegram bot token.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointTelegramArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return i.ToContactPointTelegramOutputWithContext(context.Background())
}

func (i ContactPointTelegramArgs) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramOutput)
}

// ContactPointTelegramArrayInput is an input type that accepts ContactPointTelegramArray and ContactPointTelegramArrayOutput values.
// You can construct a concrete instance of `ContactPointTelegramArrayInput` via:
//
//	ContactPointTelegramArray{ ContactPointTelegramArgs{...} }
type ContactPointTelegramArrayInput interface {
	pulumi.Input

	ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput
	ToContactPointTelegramArrayOutputWithContext(context.Context) ContactPointTelegramArrayOutput
}

type ContactPointTelegramArray []ContactPointTelegramInput

func (ContactPointTelegramArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return i.ToContactPointTelegramArrayOutputWithContext(context.Background())
}

func (i ContactPointTelegramArray) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointTelegramArrayOutput)
}

type ContactPointTelegramOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutput() ContactPointTelegramOutput {
	return o
}

func (o ContactPointTelegramOutput) ToContactPointTelegramOutputWithContext(ctx context.Context) ContactPointTelegramOutput {
	return o
}

// The chat ID to send messages to.
func (o ContactPointTelegramOutput) ChatId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.ChatId }).(pulumi.StringOutput)
}

// When set users will receive a notification with no sound.
func (o ContactPointTelegramOutput) DisableNotifications() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableNotifications }).(pulumi.BoolPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointTelegramOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// When set it disables link previews for links in the message.
func (o ContactPointTelegramOutput) DisableWebPagePreview() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.DisableWebPagePreview }).(pulumi.BoolPtrOutput)
}

// The templated content of the message.
func (o ContactPointTelegramOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The ID of the message thread to send the message to.
func (o ContactPointTelegramOutput) MessageThreadId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.MessageThreadId }).(pulumi.StringPtrOutput)
}

// Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.
func (o ContactPointTelegramOutput) ParseMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.ParseMode }).(pulumi.StringPtrOutput)
}

// When set it protects the contents of the message from forwarding and saving.
func (o ContactPointTelegramOutput) ProtectContent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *bool { return v.ProtectContent }).(pulumi.BoolPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointTelegramOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointTelegram) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The Telegram bot token.
func (o ContactPointTelegramOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointTelegram) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointTelegramOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointTelegram) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointTelegramArrayOutput struct{ *pulumi.OutputState }

func (ContactPointTelegramArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointTelegram)(nil)).Elem()
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutput() ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) ToContactPointTelegramArrayOutputWithContext(ctx context.Context) ContactPointTelegramArrayOutput {
	return o
}

func (o ContactPointTelegramArrayOutput) Index(i pulumi.IntInput) ContactPointTelegramOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointTelegram {
		return vs[0].([]ContactPointTelegram)[vs[1].(int)]
	}).(ContactPointTelegramOutput)
}

type ContactPointThreema struct {
	// The Threema API key.
	ApiSecret string `pulumi:"apiSecret"`
	// The templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId string `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId string `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointThreemaInput is an input type that accepts ContactPointThreemaArgs and ContactPointThreemaOutput values.
// You can construct a concrete instance of `ContactPointThreemaInput` via:
//
//	ContactPointThreemaArgs{...}
type ContactPointThreemaInput interface {
	pulumi.Input

	ToContactPointThreemaOutput() ContactPointThreemaOutput
	ToContactPointThreemaOutputWithContext(context.Context) ContactPointThreemaOutput
}

type ContactPointThreemaArgs struct {
	// The Threema API key.
	ApiSecret pulumi.StringInput `pulumi:"apiSecret"`
	// The templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The Threema gateway ID.
	GatewayId pulumi.StringInput `pulumi:"gatewayId"`
	// The ID of the recipient of the message.
	RecipientId pulumi.StringInput `pulumi:"recipientId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointThreemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return i.ToContactPointThreemaOutputWithContext(context.Background())
}

func (i ContactPointThreemaArgs) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaOutput)
}

// ContactPointThreemaArrayInput is an input type that accepts ContactPointThreemaArray and ContactPointThreemaArrayOutput values.
// You can construct a concrete instance of `ContactPointThreemaArrayInput` via:
//
//	ContactPointThreemaArray{ ContactPointThreemaArgs{...} }
type ContactPointThreemaArrayInput interface {
	pulumi.Input

	ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput
	ToContactPointThreemaArrayOutputWithContext(context.Context) ContactPointThreemaArrayOutput
}

type ContactPointThreemaArray []ContactPointThreemaInput

func (ContactPointThreemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return i.ToContactPointThreemaArrayOutputWithContext(context.Background())
}

func (i ContactPointThreemaArray) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointThreemaArrayOutput)
}

type ContactPointThreemaOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutput() ContactPointThreemaOutput {
	return o
}

func (o ContactPointThreemaOutput) ToContactPointThreemaOutputWithContext(ctx context.Context) ContactPointThreemaOutput {
	return o
}

// The Threema API key.
func (o ContactPointThreemaOutput) ApiSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.ApiSecret }).(pulumi.StringOutput)
}

// The templated description of the message.
func (o ContactPointThreemaOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointThreemaOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The Threema gateway ID.
func (o ContactPointThreemaOutput) GatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.GatewayId }).(pulumi.StringOutput)
}

// The ID of the recipient of the message.
func (o ContactPointThreemaOutput) RecipientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointThreema) string { return v.RecipientId }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointThreemaOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointThreema) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message.
func (o ContactPointThreemaOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointThreemaOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointThreema) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointThreemaArrayOutput struct{ *pulumi.OutputState }

func (ContactPointThreemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointThreema)(nil)).Elem()
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutput() ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) ToContactPointThreemaArrayOutputWithContext(ctx context.Context) ContactPointThreemaArrayOutput {
	return o
}

func (o ContactPointThreemaArrayOutput) Index(i pulumi.IntInput) ContactPointThreemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointThreema {
		return vs[0].([]ContactPointThreema)[vs[1].(int)]
	}).(ContactPointThreemaOutput)
}

type ContactPointVictorop struct {
	// Templated description of the message.
	Description *string `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType *string `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title to display.
	Title *string `pulumi:"title"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url string `pulumi:"url"`
}

// ContactPointVictoropInput is an input type that accepts ContactPointVictoropArgs and ContactPointVictoropOutput values.
// You can construct a concrete instance of `ContactPointVictoropInput` via:
//
//	ContactPointVictoropArgs{...}
type ContactPointVictoropInput interface {
	pulumi.Input

	ToContactPointVictoropOutput() ContactPointVictoropOutput
	ToContactPointVictoropOutputWithContext(context.Context) ContactPointVictoropOutput
}

type ContactPointVictoropArgs struct {
	// Templated description of the message.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title to display.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The VictorOps webhook URL.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointVictoropArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return i.ToContactPointVictoropOutputWithContext(context.Background())
}

func (i ContactPointVictoropArgs) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropOutput)
}

// ContactPointVictoropArrayInput is an input type that accepts ContactPointVictoropArray and ContactPointVictoropArrayOutput values.
// You can construct a concrete instance of `ContactPointVictoropArrayInput` via:
//
//	ContactPointVictoropArray{ ContactPointVictoropArgs{...} }
type ContactPointVictoropArrayInput interface {
	pulumi.Input

	ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput
	ToContactPointVictoropArrayOutputWithContext(context.Context) ContactPointVictoropArrayOutput
}

type ContactPointVictoropArray []ContactPointVictoropInput

func (ContactPointVictoropArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return i.ToContactPointVictoropArrayOutputWithContext(context.Background())
}

func (i ContactPointVictoropArray) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointVictoropArrayOutput)
}

type ContactPointVictoropOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutput() ContactPointVictoropOutput {
	return o
}

func (o ContactPointVictoropOutput) ToContactPointVictoropOutputWithContext(ctx context.Context) ContactPointVictoropOutput {
	return o
}

// Templated description of the message.
func (o ContactPointVictoropOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointVictoropOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.
func (o ContactPointVictoropOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointVictoropOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointVictorop) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title to display.
func (o ContactPointVictoropOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointVictoropOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointVictorop) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The VictorOps webhook URL.
func (o ContactPointVictoropOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointVictorop) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointVictoropArrayOutput struct{ *pulumi.OutputState }

func (ContactPointVictoropArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointVictorop)(nil)).Elem()
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutput() ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) ToContactPointVictoropArrayOutputWithContext(ctx context.Context) ContactPointVictoropArrayOutput {
	return o
}

func (o ContactPointVictoropArrayOutput) Index(i pulumi.IntInput) ContactPointVictoropOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointVictorop {
		return vs[0].([]ContactPointVictorop)[vs[1].(int)]
	}).(ContactPointVictoropOutput)
}

type ContactPointWebex struct {
	// The URL to send webhook requests to.
	ApiUrl *string `pulumi:"apiUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated title of the message to send.
	Message *string `pulumi:"message"`
	// ID of the Webex Teams room where to send the messages.
	RoomId string `pulumi:"roomId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The bearer token used to authorize the client.
	Token string `pulumi:"token"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
}

// ContactPointWebexInput is an input type that accepts ContactPointWebexArgs and ContactPointWebexOutput values.
// You can construct a concrete instance of `ContactPointWebexInput` via:
//
//	ContactPointWebexArgs{...}
type ContactPointWebexInput interface {
	pulumi.Input

	ToContactPointWebexOutput() ContactPointWebexOutput
	ToContactPointWebexOutputWithContext(context.Context) ContactPointWebexOutput
}

type ContactPointWebexArgs struct {
	// The URL to send webhook requests to.
	ApiUrl pulumi.StringPtrInput `pulumi:"apiUrl"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated title of the message to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// ID of the Webex Teams room where to send the messages.
	RoomId pulumi.StringInput `pulumi:"roomId"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The bearer token used to authorize the client.
	Token pulumi.StringInput `pulumi:"token"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (ContactPointWebexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebex)(nil)).Elem()
}

func (i ContactPointWebexArgs) ToContactPointWebexOutput() ContactPointWebexOutput {
	return i.ToContactPointWebexOutputWithContext(context.Background())
}

func (i ContactPointWebexArgs) ToContactPointWebexOutputWithContext(ctx context.Context) ContactPointWebexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebexOutput)
}

// ContactPointWebexArrayInput is an input type that accepts ContactPointWebexArray and ContactPointWebexArrayOutput values.
// You can construct a concrete instance of `ContactPointWebexArrayInput` via:
//
//	ContactPointWebexArray{ ContactPointWebexArgs{...} }
type ContactPointWebexArrayInput interface {
	pulumi.Input

	ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput
	ToContactPointWebexArrayOutputWithContext(context.Context) ContactPointWebexArrayOutput
}

type ContactPointWebexArray []ContactPointWebexInput

func (ContactPointWebexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebex)(nil)).Elem()
}

func (i ContactPointWebexArray) ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput {
	return i.ToContactPointWebexArrayOutputWithContext(context.Background())
}

func (i ContactPointWebexArray) ToContactPointWebexArrayOutputWithContext(ctx context.Context) ContactPointWebexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebexArrayOutput)
}

type ContactPointWebexOutput struct{ *pulumi.OutputState }

func (ContactPointWebexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebex)(nil)).Elem()
}

func (o ContactPointWebexOutput) ToContactPointWebexOutput() ContactPointWebexOutput {
	return o
}

func (o ContactPointWebexOutput) ToContactPointWebexOutputWithContext(ctx context.Context) ContactPointWebexOutput {
	return o
}

// The URL to send webhook requests to.
func (o ContactPointWebexOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebexOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated title of the message to send.
func (o ContactPointWebexOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ID of the Webex Teams room where to send the messages.
func (o ContactPointWebexOutput) RoomId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebex) string { return v.RoomId }).(pulumi.StringOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebexOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebex) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The bearer token used to authorize the client.
func (o ContactPointWebexOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebex) string { return v.Token }).(pulumi.StringOutput)
}

// The UID of the contact point.
func (o ContactPointWebexOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebex) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type ContactPointWebexArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWebexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebex)(nil)).Elem()
}

func (o ContactPointWebexArrayOutput) ToContactPointWebexArrayOutput() ContactPointWebexArrayOutput {
	return o
}

func (o ContactPointWebexArrayOutput) ToContactPointWebexArrayOutputWithContext(ctx context.Context) ContactPointWebexArrayOutput {
	return o
}

func (o ContactPointWebexArrayOutput) Index(i pulumi.IntInput) ContactPointWebexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWebex {
		return vs[0].([]ContactPointWebex)[vs[1].(int)]
	}).(ContactPointWebexOutput)
}

type ContactPointWebhook struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials *string `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme *string `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword *string `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser *string `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// Custom headers to attach to the request.
	Headers map[string]string `pulumi:"headers"`
	// HMAC signature configuration options.
	HmacConfig *ContactPointWebhookHmacConfig `pulumi:"hmacConfig"`
	// Common HTTP client options.
	HttpConfig *ContactPointWebhookHttpConfig `pulumi:"httpConfig"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod *string `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts *int `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message *string `pulumi:"message"`
	// Optionally provide a templated payload. Overrides 'Message' and 'Title' field.
	Payload *ContactPointWebhookPayload `pulumi:"payload"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// Templated title of the message.
	Title *string `pulumi:"title"`
	// Allows configuring TLS for the webhook notifier.
	TlsConfig map[string]string `pulumi:"tlsConfig"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url string `pulumi:"url"`
}

// ContactPointWebhookInput is an input type that accepts ContactPointWebhookArgs and ContactPointWebhookOutput values.
// You can construct a concrete instance of `ContactPointWebhookInput` via:
//
//	ContactPointWebhookArgs{...}
type ContactPointWebhookInput interface {
	pulumi.Input

	ToContactPointWebhookOutput() ContactPointWebhookOutput
	ToContactPointWebhookOutputWithContext(context.Context) ContactPointWebhookOutput
}

type ContactPointWebhookArgs struct {
	// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
	AuthorizationCredentials pulumi.StringPtrInput `pulumi:"authorizationCredentials"`
	// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
	AuthorizationScheme pulumi.StringPtrInput `pulumi:"authorizationScheme"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthPassword pulumi.StringPtrInput `pulumi:"basicAuthPassword"`
	// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
	BasicAuthUser pulumi.StringPtrInput `pulumi:"basicAuthUser"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// Custom headers to attach to the request.
	Headers pulumi.StringMapInput `pulumi:"headers"`
	// HMAC signature configuration options.
	HmacConfig ContactPointWebhookHmacConfigPtrInput `pulumi:"hmacConfig"`
	// Common HTTP client options.
	HttpConfig ContactPointWebhookHttpConfigPtrInput `pulumi:"httpConfig"`
	// The HTTP method to use in the request. Defaults to `POST`.
	HttpMethod pulumi.StringPtrInput `pulumi:"httpMethod"`
	// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
	MaxAlerts pulumi.IntPtrInput `pulumi:"maxAlerts"`
	// Custom message. You can use template variables.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// Optionally provide a templated payload. Overrides 'Message' and 'Title' field.
	Payload ContactPointWebhookPayloadPtrInput `pulumi:"payload"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// Templated title of the message.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// Allows configuring TLS for the webhook notifier.
	TlsConfig pulumi.StringMapInput `pulumi:"tlsConfig"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The URL to send webhook requests to.
	Url pulumi.StringInput `pulumi:"url"`
}

func (ContactPointWebhookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return i.ToContactPointWebhookOutputWithContext(context.Background())
}

func (i ContactPointWebhookArgs) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookOutput)
}

// ContactPointWebhookArrayInput is an input type that accepts ContactPointWebhookArray and ContactPointWebhookArrayOutput values.
// You can construct a concrete instance of `ContactPointWebhookArrayInput` via:
//
//	ContactPointWebhookArray{ ContactPointWebhookArgs{...} }
type ContactPointWebhookArrayInput interface {
	pulumi.Input

	ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput
	ToContactPointWebhookArrayOutputWithContext(context.Context) ContactPointWebhookArrayOutput
}

type ContactPointWebhookArray []ContactPointWebhookInput

func (ContactPointWebhookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return i.ToContactPointWebhookArrayOutputWithContext(context.Background())
}

func (i ContactPointWebhookArray) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookArrayOutput)
}

type ContactPointWebhookOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutput() ContactPointWebhookOutput {
	return o
}

func (o ContactPointWebhookOutput) ToContactPointWebhookOutputWithContext(ctx context.Context) ContactPointWebhookOutput {
	return o
}

// Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationCredentials() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationCredentials }).(pulumi.StringPtrOutput)
}

// Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.
func (o ContactPointWebhookOutput) AuthorizationScheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.AuthorizationScheme }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthPassword }).(pulumi.StringPtrOutput)
}

// The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.
func (o ContactPointWebhookOutput) BasicAuthUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.BasicAuthUser }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWebhookOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// Custom headers to attach to the request.
func (o ContactPointWebhookOutput) Headers() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhook) map[string]string { return v.Headers }).(pulumi.StringMapOutput)
}

// HMAC signature configuration options.
func (o ContactPointWebhookOutput) HmacConfig() ContactPointWebhookHmacConfigPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *ContactPointWebhookHmacConfig { return v.HmacConfig }).(ContactPointWebhookHmacConfigPtrOutput)
}

// Common HTTP client options.
func (o ContactPointWebhookOutput) HttpConfig() ContactPointWebhookHttpConfigPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *ContactPointWebhookHttpConfig { return v.HttpConfig }).(ContactPointWebhookHttpConfigPtrOutput)
}

// The HTTP method to use in the request. Defaults to `POST`.
func (o ContactPointWebhookOutput) HttpMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.HttpMethod }).(pulumi.StringPtrOutput)
}

// The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.
func (o ContactPointWebhookOutput) MaxAlerts() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *int { return v.MaxAlerts }).(pulumi.IntPtrOutput)
}

// Custom message. You can use template variables.
func (o ContactPointWebhookOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// Optionally provide a templated payload. Overrides 'Message' and 'Title' field.
func (o ContactPointWebhookOutput) Payload() ContactPointWebhookPayloadPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *ContactPointWebhookPayload { return v.Payload }).(ContactPointWebhookPayloadPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWebhookOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhook) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// Templated title of the message.
func (o ContactPointWebhookOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// Allows configuring TLS for the webhook notifier.
func (o ContactPointWebhookOutput) TlsConfig() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhook) map[string]string { return v.TlsConfig }).(pulumi.StringMapOutput)
}

// The UID of the contact point.
func (o ContactPointWebhookOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhook) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The URL to send webhook requests to.
func (o ContactPointWebhookOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhook) string { return v.Url }).(pulumi.StringOutput)
}

type ContactPointWebhookArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWebhook)(nil)).Elem()
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutput() ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) ToContactPointWebhookArrayOutputWithContext(ctx context.Context) ContactPointWebhookArrayOutput {
	return o
}

func (o ContactPointWebhookArrayOutput) Index(i pulumi.IntInput) ContactPointWebhookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWebhook {
		return vs[0].([]ContactPointWebhook)[vs[1].(int)]
	}).(ContactPointWebhookOutput)
}

type ContactPointWebhookHmacConfig struct {
	// The header in which the HMAC signature will be included. Defaults to `X-Grafana-Alerting-Signature`.
	Header *string `pulumi:"header"`
	// The secret key used to generate the HMAC signature.
	Secret string `pulumi:"secret"`
	// If set, the timestamp will be included in the HMAC signature. The value should be the name of the header to use.
	TimestampHeader *string `pulumi:"timestampHeader"`
}

// ContactPointWebhookHmacConfigInput is an input type that accepts ContactPointWebhookHmacConfigArgs and ContactPointWebhookHmacConfigOutput values.
// You can construct a concrete instance of `ContactPointWebhookHmacConfigInput` via:
//
//	ContactPointWebhookHmacConfigArgs{...}
type ContactPointWebhookHmacConfigInput interface {
	pulumi.Input

	ToContactPointWebhookHmacConfigOutput() ContactPointWebhookHmacConfigOutput
	ToContactPointWebhookHmacConfigOutputWithContext(context.Context) ContactPointWebhookHmacConfigOutput
}

type ContactPointWebhookHmacConfigArgs struct {
	// The header in which the HMAC signature will be included. Defaults to `X-Grafana-Alerting-Signature`.
	Header pulumi.StringPtrInput `pulumi:"header"`
	// The secret key used to generate the HMAC signature.
	Secret pulumi.StringInput `pulumi:"secret"`
	// If set, the timestamp will be included in the HMAC signature. The value should be the name of the header to use.
	TimestampHeader pulumi.StringPtrInput `pulumi:"timestampHeader"`
}

func (ContactPointWebhookHmacConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHmacConfig)(nil)).Elem()
}

func (i ContactPointWebhookHmacConfigArgs) ToContactPointWebhookHmacConfigOutput() ContactPointWebhookHmacConfigOutput {
	return i.ToContactPointWebhookHmacConfigOutputWithContext(context.Background())
}

func (i ContactPointWebhookHmacConfigArgs) ToContactPointWebhookHmacConfigOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHmacConfigOutput)
}

func (i ContactPointWebhookHmacConfigArgs) ToContactPointWebhookHmacConfigPtrOutput() ContactPointWebhookHmacConfigPtrOutput {
	return i.ToContactPointWebhookHmacConfigPtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookHmacConfigArgs) ToContactPointWebhookHmacConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHmacConfigOutput).ToContactPointWebhookHmacConfigPtrOutputWithContext(ctx)
}

// ContactPointWebhookHmacConfigPtrInput is an input type that accepts ContactPointWebhookHmacConfigArgs, ContactPointWebhookHmacConfigPtr and ContactPointWebhookHmacConfigPtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookHmacConfigPtrInput` via:
//
//	        ContactPointWebhookHmacConfigArgs{...}
//
//	or:
//
//	        nil
type ContactPointWebhookHmacConfigPtrInput interface {
	pulumi.Input

	ToContactPointWebhookHmacConfigPtrOutput() ContactPointWebhookHmacConfigPtrOutput
	ToContactPointWebhookHmacConfigPtrOutputWithContext(context.Context) ContactPointWebhookHmacConfigPtrOutput
}

type contactPointWebhookHmacConfigPtrType ContactPointWebhookHmacConfigArgs

func ContactPointWebhookHmacConfigPtr(v *ContactPointWebhookHmacConfigArgs) ContactPointWebhookHmacConfigPtrInput {
	return (*contactPointWebhookHmacConfigPtrType)(v)
}

func (*contactPointWebhookHmacConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHmacConfig)(nil)).Elem()
}

func (i *contactPointWebhookHmacConfigPtrType) ToContactPointWebhookHmacConfigPtrOutput() ContactPointWebhookHmacConfigPtrOutput {
	return i.ToContactPointWebhookHmacConfigPtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookHmacConfigPtrType) ToContactPointWebhookHmacConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHmacConfigPtrOutput)
}

type ContactPointWebhookHmacConfigOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHmacConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHmacConfig)(nil)).Elem()
}

func (o ContactPointWebhookHmacConfigOutput) ToContactPointWebhookHmacConfigOutput() ContactPointWebhookHmacConfigOutput {
	return o
}

func (o ContactPointWebhookHmacConfigOutput) ToContactPointWebhookHmacConfigOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigOutput {
	return o
}

func (o ContactPointWebhookHmacConfigOutput) ToContactPointWebhookHmacConfigPtrOutput() ContactPointWebhookHmacConfigPtrOutput {
	return o.ToContactPointWebhookHmacConfigPtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookHmacConfigOutput) ToContactPointWebhookHmacConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookHmacConfig) *ContactPointWebhookHmacConfig {
		return &v
	}).(ContactPointWebhookHmacConfigPtrOutput)
}

// The header in which the HMAC signature will be included. Defaults to `X-Grafana-Alerting-Signature`.
func (o ContactPointWebhookHmacConfigOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHmacConfig) *string { return v.Header }).(pulumi.StringPtrOutput)
}

// The secret key used to generate the HMAC signature.
func (o ContactPointWebhookHmacConfigOutput) Secret() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhookHmacConfig) string { return v.Secret }).(pulumi.StringOutput)
}

// If set, the timestamp will be included in the HMAC signature. The value should be the name of the header to use.
func (o ContactPointWebhookHmacConfigOutput) TimestampHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHmacConfig) *string { return v.TimestampHeader }).(pulumi.StringPtrOutput)
}

type ContactPointWebhookHmacConfigPtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHmacConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHmacConfig)(nil)).Elem()
}

func (o ContactPointWebhookHmacConfigPtrOutput) ToContactPointWebhookHmacConfigPtrOutput() ContactPointWebhookHmacConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHmacConfigPtrOutput) ToContactPointWebhookHmacConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHmacConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHmacConfigPtrOutput) Elem() ContactPointWebhookHmacConfigOutput {
	return o.ApplyT(func(v *ContactPointWebhookHmacConfig) ContactPointWebhookHmacConfig {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookHmacConfig
		return ret
	}).(ContactPointWebhookHmacConfigOutput)
}

// The header in which the HMAC signature will be included. Defaults to `X-Grafana-Alerting-Signature`.
func (o ContactPointWebhookHmacConfigPtrOutput) Header() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHmacConfig) *string {
		if v == nil {
			return nil
		}
		return v.Header
	}).(pulumi.StringPtrOutput)
}

// The secret key used to generate the HMAC signature.
func (o ContactPointWebhookHmacConfigPtrOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHmacConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Secret
	}).(pulumi.StringPtrOutput)
}

// If set, the timestamp will be included in the HMAC signature. The value should be the name of the header to use.
func (o ContactPointWebhookHmacConfigPtrOutput) TimestampHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHmacConfig) *string {
		if v == nil {
			return nil
		}
		return v.TimestampHeader
	}).(pulumi.StringPtrOutput)
}

type ContactPointWebhookHttpConfig struct {
	// OAuth2 configuration options.
	Oauth2 *ContactPointWebhookHttpConfigOauth2 `pulumi:"oauth2"`
}

// ContactPointWebhookHttpConfigInput is an input type that accepts ContactPointWebhookHttpConfigArgs and ContactPointWebhookHttpConfigOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigInput` via:
//
//	ContactPointWebhookHttpConfigArgs{...}
type ContactPointWebhookHttpConfigInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOutput() ContactPointWebhookHttpConfigOutput
	ToContactPointWebhookHttpConfigOutputWithContext(context.Context) ContactPointWebhookHttpConfigOutput
}

type ContactPointWebhookHttpConfigArgs struct {
	// OAuth2 configuration options.
	Oauth2 ContactPointWebhookHttpConfigOauth2PtrInput `pulumi:"oauth2"`
}

func (ContactPointWebhookHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfig)(nil)).Elem()
}

func (i ContactPointWebhookHttpConfigArgs) ToContactPointWebhookHttpConfigOutput() ContactPointWebhookHttpConfigOutput {
	return i.ToContactPointWebhookHttpConfigOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigArgs) ToContactPointWebhookHttpConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOutput)
}

func (i ContactPointWebhookHttpConfigArgs) ToContactPointWebhookHttpConfigPtrOutput() ContactPointWebhookHttpConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigPtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigArgs) ToContactPointWebhookHttpConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOutput).ToContactPointWebhookHttpConfigPtrOutputWithContext(ctx)
}

// ContactPointWebhookHttpConfigPtrInput is an input type that accepts ContactPointWebhookHttpConfigArgs, ContactPointWebhookHttpConfigPtr and ContactPointWebhookHttpConfigPtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigPtrInput` via:
//
//	        ContactPointWebhookHttpConfigArgs{...}
//
//	or:
//
//	        nil
type ContactPointWebhookHttpConfigPtrInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigPtrOutput() ContactPointWebhookHttpConfigPtrOutput
	ToContactPointWebhookHttpConfigPtrOutputWithContext(context.Context) ContactPointWebhookHttpConfigPtrOutput
}

type contactPointWebhookHttpConfigPtrType ContactPointWebhookHttpConfigArgs

func ContactPointWebhookHttpConfigPtr(v *ContactPointWebhookHttpConfigArgs) ContactPointWebhookHttpConfigPtrInput {
	return (*contactPointWebhookHttpConfigPtrType)(v)
}

func (*contactPointWebhookHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfig)(nil)).Elem()
}

func (i *contactPointWebhookHttpConfigPtrType) ToContactPointWebhookHttpConfigPtrOutput() ContactPointWebhookHttpConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigPtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookHttpConfigPtrType) ToContactPointWebhookHttpConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigPtrOutput)
}

type ContactPointWebhookHttpConfigOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOutput) ToContactPointWebhookHttpConfigOutput() ContactPointWebhookHttpConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOutput) ToContactPointWebhookHttpConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOutput) ToContactPointWebhookHttpConfigPtrOutput() ContactPointWebhookHttpConfigPtrOutput {
	return o.ToContactPointWebhookHttpConfigPtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookHttpConfigOutput) ToContactPointWebhookHttpConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookHttpConfig) *ContactPointWebhookHttpConfig {
		return &v
	}).(ContactPointWebhookHttpConfigPtrOutput)
}

// OAuth2 configuration options.
func (o ContactPointWebhookHttpConfigOutput) Oauth2() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfig) *ContactPointWebhookHttpConfigOauth2 { return v.Oauth2 }).(ContactPointWebhookHttpConfigOauth2PtrOutput)
}

type ContactPointWebhookHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigPtrOutput) ToContactPointWebhookHttpConfigPtrOutput() ContactPointWebhookHttpConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigPtrOutput) ToContactPointWebhookHttpConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigPtrOutput) Elem() ContactPointWebhookHttpConfigOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfig) ContactPointWebhookHttpConfig {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookHttpConfig
		return ret
	}).(ContactPointWebhookHttpConfigOutput)
}

// OAuth2 configuration options.
func (o ContactPointWebhookHttpConfigPtrOutput) Oauth2() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfig) *ContactPointWebhookHttpConfigOauth2 {
		if v == nil {
			return nil
		}
		return v.Oauth2
	}).(ContactPointWebhookHttpConfigOauth2PtrOutput)
}

type ContactPointWebhookHttpConfigOauth2 struct {
	// Client ID to use when authenticating.
	ClientId string `pulumi:"clientId"`
	// Client secret to use when authenticating.
	ClientSecret string `pulumi:"clientSecret"`
	// Optional parameters to append to the access token request.
	EndpointParams map[string]string `pulumi:"endpointParams"`
	// Optional proxy configuration for OAuth2 requests.
	ProxyConfig *ContactPointWebhookHttpConfigOauth2ProxyConfig `pulumi:"proxyConfig"`
	// Optional scopes to request when obtaining an access token.
	Scopes []string `pulumi:"scopes"`
	// Optional TLS configuration options for OAuth2 requests.
	TlsConfig *ContactPointWebhookHttpConfigOauth2TlsConfig `pulumi:"tlsConfig"`
	// URL for the access token endpoint.
	TokenUrl string `pulumi:"tokenUrl"`
}

// ContactPointWebhookHttpConfigOauth2Input is an input type that accepts ContactPointWebhookHttpConfigOauth2Args and ContactPointWebhookHttpConfigOauth2Output values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2Input` via:
//
//	ContactPointWebhookHttpConfigOauth2Args{...}
type ContactPointWebhookHttpConfigOauth2Input interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2Output() ContactPointWebhookHttpConfigOauth2Output
	ToContactPointWebhookHttpConfigOauth2OutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2Output
}

type ContactPointWebhookHttpConfigOauth2Args struct {
	// Client ID to use when authenticating.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// Client secret to use when authenticating.
	ClientSecret pulumi.StringInput `pulumi:"clientSecret"`
	// Optional parameters to append to the access token request.
	EndpointParams pulumi.StringMapInput `pulumi:"endpointParams"`
	// Optional proxy configuration for OAuth2 requests.
	ProxyConfig ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput `pulumi:"proxyConfig"`
	// Optional scopes to request when obtaining an access token.
	Scopes pulumi.StringArrayInput `pulumi:"scopes"`
	// Optional TLS configuration options for OAuth2 requests.
	TlsConfig ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput `pulumi:"tlsConfig"`
	// URL for the access token endpoint.
	TokenUrl pulumi.StringInput `pulumi:"tokenUrl"`
}

func (ContactPointWebhookHttpConfigOauth2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2)(nil)).Elem()
}

func (i ContactPointWebhookHttpConfigOauth2Args) ToContactPointWebhookHttpConfigOauth2Output() ContactPointWebhookHttpConfigOauth2Output {
	return i.ToContactPointWebhookHttpConfigOauth2OutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2Args) ToContactPointWebhookHttpConfigOauth2OutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2Output {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2Output)
}

func (i ContactPointWebhookHttpConfigOauth2Args) ToContactPointWebhookHttpConfigOauth2PtrOutput() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2Args) ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2Output).ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(ctx)
}

// ContactPointWebhookHttpConfigOauth2PtrInput is an input type that accepts ContactPointWebhookHttpConfigOauth2Args, ContactPointWebhookHttpConfigOauth2Ptr and ContactPointWebhookHttpConfigOauth2PtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2PtrInput` via:
//
//	        ContactPointWebhookHttpConfigOauth2Args{...}
//
//	or:
//
//	        nil
type ContactPointWebhookHttpConfigOauth2PtrInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2PtrOutput() ContactPointWebhookHttpConfigOauth2PtrOutput
	ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2PtrOutput
}

type contactPointWebhookHttpConfigOauth2PtrType ContactPointWebhookHttpConfigOauth2Args

func ContactPointWebhookHttpConfigOauth2Ptr(v *ContactPointWebhookHttpConfigOauth2Args) ContactPointWebhookHttpConfigOauth2PtrInput {
	return (*contactPointWebhookHttpConfigOauth2PtrType)(v)
}

func (*contactPointWebhookHttpConfigOauth2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2)(nil)).Elem()
}

func (i *contactPointWebhookHttpConfigOauth2PtrType) ToContactPointWebhookHttpConfigOauth2PtrOutput() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookHttpConfigOauth2PtrType) ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2PtrOutput)
}

type ContactPointWebhookHttpConfigOauth2Output struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2Output) ToContactPointWebhookHttpConfigOauth2Output() ContactPointWebhookHttpConfigOauth2Output {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2Output) ToContactPointWebhookHttpConfigOauth2OutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2Output {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2Output) ToContactPointWebhookHttpConfigOauth2PtrOutput() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o.ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookHttpConfigOauth2Output) ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookHttpConfigOauth2) *ContactPointWebhookHttpConfigOauth2 {
		return &v
	}).(ContactPointWebhookHttpConfigOauth2PtrOutput)
}

// Client ID to use when authenticating.
func (o ContactPointWebhookHttpConfigOauth2Output) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) string { return v.ClientId }).(pulumi.StringOutput)
}

// Client secret to use when authenticating.
func (o ContactPointWebhookHttpConfigOauth2Output) ClientSecret() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) string { return v.ClientSecret }).(pulumi.StringOutput)
}

// Optional parameters to append to the access token request.
func (o ContactPointWebhookHttpConfigOauth2Output) EndpointParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) map[string]string { return v.EndpointParams }).(pulumi.StringMapOutput)
}

// Optional proxy configuration for OAuth2 requests.
func (o ContactPointWebhookHttpConfigOauth2Output) ProxyConfig() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) *ContactPointWebhookHttpConfigOauth2ProxyConfig {
		return v.ProxyConfig
	}).(ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput)
}

// Optional scopes to request when obtaining an access token.
func (o ContactPointWebhookHttpConfigOauth2Output) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) []string { return v.Scopes }).(pulumi.StringArrayOutput)
}

// Optional TLS configuration options for OAuth2 requests.
func (o ContactPointWebhookHttpConfigOauth2Output) TlsConfig() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) *ContactPointWebhookHttpConfigOauth2TlsConfig {
		return v.TlsConfig
	}).(ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput)
}

// URL for the access token endpoint.
func (o ContactPointWebhookHttpConfigOauth2Output) TokenUrl() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2) string { return v.TokenUrl }).(pulumi.StringOutput)
}

type ContactPointWebhookHttpConfigOauth2PtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2PtrOutput) ToContactPointWebhookHttpConfigOauth2PtrOutput() ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2PtrOutput) ToContactPointWebhookHttpConfigOauth2PtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2PtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2PtrOutput) Elem() ContactPointWebhookHttpConfigOauth2Output {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) ContactPointWebhookHttpConfigOauth2 {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookHttpConfigOauth2
		return ret
	}).(ContactPointWebhookHttpConfigOauth2Output)
}

// Client ID to use when authenticating.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) *string {
		if v == nil {
			return nil
		}
		return &v.ClientId
	}).(pulumi.StringPtrOutput)
}

// Client secret to use when authenticating.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) *string {
		if v == nil {
			return nil
		}
		return &v.ClientSecret
	}).(pulumi.StringPtrOutput)
}

// Optional parameters to append to the access token request.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) EndpointParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) map[string]string {
		if v == nil {
			return nil
		}
		return v.EndpointParams
	}).(pulumi.StringMapOutput)
}

// Optional proxy configuration for OAuth2 requests.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) ProxyConfig() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) *ContactPointWebhookHttpConfigOauth2ProxyConfig {
		if v == nil {
			return nil
		}
		return v.ProxyConfig
	}).(ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput)
}

// Optional scopes to request when obtaining an access token.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) Scopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) []string {
		if v == nil {
			return nil
		}
		return v.Scopes
	}).(pulumi.StringArrayOutput)
}

// Optional TLS configuration options for OAuth2 requests.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) TlsConfig() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) *ContactPointWebhookHttpConfigOauth2TlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput)
}

// URL for the access token endpoint.
func (o ContactPointWebhookHttpConfigOauth2PtrOutput) TokenUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2) *string {
		if v == nil {
			return nil
		}
		return &v.TokenUrl
	}).(pulumi.StringPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2ProxyConfig struct {
	// Comma-separated list of addresses that should not use a proxy.
	NoProxy *string `pulumi:"noProxy"`
	// Optional headers to send to proxies during CONNECT requests.
	ProxyConnectHeader map[string]string `pulumi:"proxyConnectHeader"`
	// Use environment HTTP*PROXY, HTTPS*PROXY and NO_PROXY to determine proxies. Defaults to `false`.
	ProxyFromEnvironment *bool `pulumi:"proxyFromEnvironment"`
	// HTTP proxy server to use to connect to the targets.
	ProxyUrl *string `pulumi:"proxyUrl"`
}

// ContactPointWebhookHttpConfigOauth2ProxyConfigInput is an input type that accepts ContactPointWebhookHttpConfigOauth2ProxyConfigArgs and ContactPointWebhookHttpConfigOauth2ProxyConfigOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2ProxyConfigInput` via:
//
//	ContactPointWebhookHttpConfigOauth2ProxyConfigArgs{...}
type ContactPointWebhookHttpConfigOauth2ProxyConfigInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2ProxyConfigOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigOutput
	ToContactPointWebhookHttpConfigOauth2ProxyConfigOutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigOutput
}

type ContactPointWebhookHttpConfigOauth2ProxyConfigArgs struct {
	// Comma-separated list of addresses that should not use a proxy.
	NoProxy pulumi.StringPtrInput `pulumi:"noProxy"`
	// Optional headers to send to proxies during CONNECT requests.
	ProxyConnectHeader pulumi.StringMapInput `pulumi:"proxyConnectHeader"`
	// Use environment HTTP*PROXY, HTTPS*PROXY and NO_PROXY to determine proxies. Defaults to `false`.
	ProxyFromEnvironment pulumi.BoolPtrInput `pulumi:"proxyFromEnvironment"`
	// HTTP proxy server to use to connect to the targets.
	ProxyUrl pulumi.StringPtrInput `pulumi:"proxyUrl"`
}

func (ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2ProxyConfig)(nil)).Elem()
}

func (i ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ToContactPointWebhookHttpConfigOauth2ProxyConfigOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigOutput {
	return i.ToContactPointWebhookHttpConfigOauth2ProxyConfigOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ToContactPointWebhookHttpConfigOauth2ProxyConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2ProxyConfigOutput)
}

func (i ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2ProxyConfigOutput).ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(ctx)
}

// ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput is an input type that accepts ContactPointWebhookHttpConfigOauth2ProxyConfigArgs, ContactPointWebhookHttpConfigOauth2ProxyConfigPtr and ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput` via:
//
//	        ContactPointWebhookHttpConfigOauth2ProxyConfigArgs{...}
//
//	or:
//
//	        nil
type ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput
	ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput
}

type contactPointWebhookHttpConfigOauth2ProxyConfigPtrType ContactPointWebhookHttpConfigOauth2ProxyConfigArgs

func ContactPointWebhookHttpConfigOauth2ProxyConfigPtr(v *ContactPointWebhookHttpConfigOauth2ProxyConfigArgs) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput {
	return (*contactPointWebhookHttpConfigOauth2ProxyConfigPtrType)(v)
}

func (*contactPointWebhookHttpConfigOauth2ProxyConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2ProxyConfig)(nil)).Elem()
}

func (i *contactPointWebhookHttpConfigOauth2ProxyConfigPtrType) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookHttpConfigOauth2ProxyConfigPtrType) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2ProxyConfigOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2ProxyConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o.ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookHttpConfigOauth2ProxyConfig) *ContactPointWebhookHttpConfigOauth2ProxyConfig {
		return &v
	}).(ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput)
}

// Comma-separated list of addresses that should not use a proxy.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2ProxyConfig) *string { return v.NoProxy }).(pulumi.StringPtrOutput)
}

// Optional headers to send to proxies during CONNECT requests.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ProxyConnectHeader() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2ProxyConfig) map[string]string { return v.ProxyConnectHeader }).(pulumi.StringMapOutput)
}

// Use environment HTTP*PROXY, HTTPS*PROXY and NO_PROXY to determine proxies. Defaults to `false`.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ProxyFromEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2ProxyConfig) *bool { return v.ProxyFromEnvironment }).(pulumi.BoolPtrOutput)
}

// HTTP proxy server to use to connect to the targets.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2ProxyConfig) *string { return v.ProxyUrl }).(pulumi.StringPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2ProxyConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput() ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ToContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) Elem() ContactPointWebhookHttpConfigOauth2ProxyConfigOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2ProxyConfig) ContactPointWebhookHttpConfigOauth2ProxyConfig {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookHttpConfigOauth2ProxyConfig
		return ret
	}).(ContactPointWebhookHttpConfigOauth2ProxyConfigOutput)
}

// Comma-separated list of addresses that should not use a proxy.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) NoProxy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2ProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.NoProxy
	}).(pulumi.StringPtrOutput)
}

// Optional headers to send to proxies during CONNECT requests.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ProxyConnectHeader() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2ProxyConfig) map[string]string {
		if v == nil {
			return nil
		}
		return v.ProxyConnectHeader
	}).(pulumi.StringMapOutput)
}

// Use environment HTTP*PROXY, HTTPS*PROXY and NO_PROXY to determine proxies. Defaults to `false`.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ProxyFromEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2ProxyConfig) *bool {
		if v == nil {
			return nil
		}
		return v.ProxyFromEnvironment
	}).(pulumi.BoolPtrOutput)
}

// HTTP proxy server to use to connect to the targets.
func (o ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput) ProxyUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2ProxyConfig) *string {
		if v == nil {
			return nil
		}
		return v.ProxyUrl
	}).(pulumi.StringPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2TlsConfig struct {
	// Certificate in PEM format to use when verifying the server's certificate chain.
	CaCertificate *string `pulumi:"caCertificate"`
	// Client certificate in PEM format to use when connecting to the server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// Client key in PEM format to use when connecting to the server.
	ClientKey *string `pulumi:"clientKey"`
	// Do not verify the server's certificate chain and host name. Defaults to `false`.
	InsecureSkipVerify *bool `pulumi:"insecureSkipVerify"`
}

// ContactPointWebhookHttpConfigOauth2TlsConfigInput is an input type that accepts ContactPointWebhookHttpConfigOauth2TlsConfigArgs and ContactPointWebhookHttpConfigOauth2TlsConfigOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2TlsConfigInput` via:
//
//	ContactPointWebhookHttpConfigOauth2TlsConfigArgs{...}
type ContactPointWebhookHttpConfigOauth2TlsConfigInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2TlsConfigOutput() ContactPointWebhookHttpConfigOauth2TlsConfigOutput
	ToContactPointWebhookHttpConfigOauth2TlsConfigOutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigOutput
}

type ContactPointWebhookHttpConfigOauth2TlsConfigArgs struct {
	// Certificate in PEM format to use when verifying the server's certificate chain.
	CaCertificate pulumi.StringPtrInput `pulumi:"caCertificate"`
	// Client certificate in PEM format to use when connecting to the server.
	ClientCertificate pulumi.StringPtrInput `pulumi:"clientCertificate"`
	// Client key in PEM format to use when connecting to the server.
	ClientKey pulumi.StringPtrInput `pulumi:"clientKey"`
	// Do not verify the server's certificate chain and host name. Defaults to `false`.
	InsecureSkipVerify pulumi.BoolPtrInput `pulumi:"insecureSkipVerify"`
}

func (ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2TlsConfig)(nil)).Elem()
}

func (i ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ToContactPointWebhookHttpConfigOauth2TlsConfigOutput() ContactPointWebhookHttpConfigOauth2TlsConfigOutput {
	return i.ToContactPointWebhookHttpConfigOauth2TlsConfigOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ToContactPointWebhookHttpConfigOauth2TlsConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2TlsConfigOutput)
}

func (i ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2TlsConfigOutput).ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(ctx)
}

// ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput is an input type that accepts ContactPointWebhookHttpConfigOauth2TlsConfigArgs, ContactPointWebhookHttpConfigOauth2TlsConfigPtr and ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput` via:
//
//	        ContactPointWebhookHttpConfigOauth2TlsConfigArgs{...}
//
//	or:
//
//	        nil
type ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput interface {
	pulumi.Input

	ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput
	ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput
}

type contactPointWebhookHttpConfigOauth2TlsConfigPtrType ContactPointWebhookHttpConfigOauth2TlsConfigArgs

func ContactPointWebhookHttpConfigOauth2TlsConfigPtr(v *ContactPointWebhookHttpConfigOauth2TlsConfigArgs) ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput {
	return (*contactPointWebhookHttpConfigOauth2TlsConfigPtrType)(v)
}

func (*contactPointWebhookHttpConfigOauth2TlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2TlsConfig)(nil)).Elem()
}

func (i *contactPointWebhookHttpConfigOauth2TlsConfigPtrType) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return i.ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookHttpConfigOauth2TlsConfigPtrType) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2TlsConfigOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2TlsConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigOutput() ContactPointWebhookHttpConfigOauth2TlsConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o.ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookHttpConfigOauth2TlsConfig) *ContactPointWebhookHttpConfigOauth2TlsConfig {
		return &v
	}).(ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput)
}

// Certificate in PEM format to use when verifying the server's certificate chain.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2TlsConfig) *string { return v.CaCertificate }).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format to use when connecting to the server.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2TlsConfig) *string { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// Client key in PEM format to use when connecting to the server.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2TlsConfig) *string { return v.ClientKey }).(pulumi.StringPtrOutput)
}

// Do not verify the server's certificate chain and host name. Defaults to `false`.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWebhookHttpConfigOauth2TlsConfig) *bool { return v.InsecureSkipVerify }).(pulumi.BoolPtrOutput)
}

type ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookHttpConfigOauth2TlsConfig)(nil)).Elem()
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput() ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) ToContactPointWebhookHttpConfigOauth2TlsConfigPtrOutputWithContext(ctx context.Context) ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput {
	return o
}

func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) Elem() ContactPointWebhookHttpConfigOauth2TlsConfigOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2TlsConfig) ContactPointWebhookHttpConfigOauth2TlsConfig {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookHttpConfigOauth2TlsConfig
		return ret
	}).(ContactPointWebhookHttpConfigOauth2TlsConfigOutput)
}

// Certificate in PEM format to use when verifying the server's certificate chain.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) CaCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2TlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CaCertificate
	}).(pulumi.StringPtrOutput)
}

// Client certificate in PEM format to use when connecting to the server.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2TlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCertificate
	}).(pulumi.StringPtrOutput)
}

// Client key in PEM format to use when connecting to the server.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) ClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2TlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientKey
	}).(pulumi.StringPtrOutput)
}

// Do not verify the server's certificate chain and host name. Defaults to `false`.
func (o ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput) InsecureSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookHttpConfigOauth2TlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.InsecureSkipVerify
	}).(pulumi.BoolPtrOutput)
}

type ContactPointWebhookPayload struct {
	// Custom payload template.
	Template string `pulumi:"template"`
	// Optionally provide a variables to be used in the payload template. They will be available in the template as `.Vars.<variable_name>`.
	Vars map[string]string `pulumi:"vars"`
}

// ContactPointWebhookPayloadInput is an input type that accepts ContactPointWebhookPayloadArgs and ContactPointWebhookPayloadOutput values.
// You can construct a concrete instance of `ContactPointWebhookPayloadInput` via:
//
//	ContactPointWebhookPayloadArgs{...}
type ContactPointWebhookPayloadInput interface {
	pulumi.Input

	ToContactPointWebhookPayloadOutput() ContactPointWebhookPayloadOutput
	ToContactPointWebhookPayloadOutputWithContext(context.Context) ContactPointWebhookPayloadOutput
}

type ContactPointWebhookPayloadArgs struct {
	// Custom payload template.
	Template pulumi.StringInput `pulumi:"template"`
	// Optionally provide a variables to be used in the payload template. They will be available in the template as `.Vars.<variable_name>`.
	Vars pulumi.StringMapInput `pulumi:"vars"`
}

func (ContactPointWebhookPayloadArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookPayload)(nil)).Elem()
}

func (i ContactPointWebhookPayloadArgs) ToContactPointWebhookPayloadOutput() ContactPointWebhookPayloadOutput {
	return i.ToContactPointWebhookPayloadOutputWithContext(context.Background())
}

func (i ContactPointWebhookPayloadArgs) ToContactPointWebhookPayloadOutputWithContext(ctx context.Context) ContactPointWebhookPayloadOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookPayloadOutput)
}

func (i ContactPointWebhookPayloadArgs) ToContactPointWebhookPayloadPtrOutput() ContactPointWebhookPayloadPtrOutput {
	return i.ToContactPointWebhookPayloadPtrOutputWithContext(context.Background())
}

func (i ContactPointWebhookPayloadArgs) ToContactPointWebhookPayloadPtrOutputWithContext(ctx context.Context) ContactPointWebhookPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookPayloadOutput).ToContactPointWebhookPayloadPtrOutputWithContext(ctx)
}

// ContactPointWebhookPayloadPtrInput is an input type that accepts ContactPointWebhookPayloadArgs, ContactPointWebhookPayloadPtr and ContactPointWebhookPayloadPtrOutput values.
// You can construct a concrete instance of `ContactPointWebhookPayloadPtrInput` via:
//
//	        ContactPointWebhookPayloadArgs{...}
//
//	or:
//
//	        nil
type ContactPointWebhookPayloadPtrInput interface {
	pulumi.Input

	ToContactPointWebhookPayloadPtrOutput() ContactPointWebhookPayloadPtrOutput
	ToContactPointWebhookPayloadPtrOutputWithContext(context.Context) ContactPointWebhookPayloadPtrOutput
}

type contactPointWebhookPayloadPtrType ContactPointWebhookPayloadArgs

func ContactPointWebhookPayloadPtr(v *ContactPointWebhookPayloadArgs) ContactPointWebhookPayloadPtrInput {
	return (*contactPointWebhookPayloadPtrType)(v)
}

func (*contactPointWebhookPayloadPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookPayload)(nil)).Elem()
}

func (i *contactPointWebhookPayloadPtrType) ToContactPointWebhookPayloadPtrOutput() ContactPointWebhookPayloadPtrOutput {
	return i.ToContactPointWebhookPayloadPtrOutputWithContext(context.Background())
}

func (i *contactPointWebhookPayloadPtrType) ToContactPointWebhookPayloadPtrOutputWithContext(ctx context.Context) ContactPointWebhookPayloadPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWebhookPayloadPtrOutput)
}

type ContactPointWebhookPayloadOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookPayloadOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWebhookPayload)(nil)).Elem()
}

func (o ContactPointWebhookPayloadOutput) ToContactPointWebhookPayloadOutput() ContactPointWebhookPayloadOutput {
	return o
}

func (o ContactPointWebhookPayloadOutput) ToContactPointWebhookPayloadOutputWithContext(ctx context.Context) ContactPointWebhookPayloadOutput {
	return o
}

func (o ContactPointWebhookPayloadOutput) ToContactPointWebhookPayloadPtrOutput() ContactPointWebhookPayloadPtrOutput {
	return o.ToContactPointWebhookPayloadPtrOutputWithContext(context.Background())
}

func (o ContactPointWebhookPayloadOutput) ToContactPointWebhookPayloadPtrOutputWithContext(ctx context.Context) ContactPointWebhookPayloadPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ContactPointWebhookPayload) *ContactPointWebhookPayload {
		return &v
	}).(ContactPointWebhookPayloadPtrOutput)
}

// Custom payload template.
func (o ContactPointWebhookPayloadOutput) Template() pulumi.StringOutput {
	return o.ApplyT(func(v ContactPointWebhookPayload) string { return v.Template }).(pulumi.StringOutput)
}

// Optionally provide a variables to be used in the payload template. They will be available in the template as `.Vars.<variable_name>`.
func (o ContactPointWebhookPayloadOutput) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWebhookPayload) map[string]string { return v.Vars }).(pulumi.StringMapOutput)
}

type ContactPointWebhookPayloadPtrOutput struct{ *pulumi.OutputState }

func (ContactPointWebhookPayloadPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContactPointWebhookPayload)(nil)).Elem()
}

func (o ContactPointWebhookPayloadPtrOutput) ToContactPointWebhookPayloadPtrOutput() ContactPointWebhookPayloadPtrOutput {
	return o
}

func (o ContactPointWebhookPayloadPtrOutput) ToContactPointWebhookPayloadPtrOutputWithContext(ctx context.Context) ContactPointWebhookPayloadPtrOutput {
	return o
}

func (o ContactPointWebhookPayloadPtrOutput) Elem() ContactPointWebhookPayloadOutput {
	return o.ApplyT(func(v *ContactPointWebhookPayload) ContactPointWebhookPayload {
		if v != nil {
			return *v
		}
		var ret ContactPointWebhookPayload
		return ret
	}).(ContactPointWebhookPayloadOutput)
}

// Custom payload template.
func (o ContactPointWebhookPayloadPtrOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ContactPointWebhookPayload) *string {
		if v == nil {
			return nil
		}
		return &v.Template
	}).(pulumi.StringPtrOutput)
}

// Optionally provide a variables to be used in the payload template. They will be available in the template as `.Vars.<variable_name>`.
func (o ContactPointWebhookPayloadPtrOutput) Vars() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ContactPointWebhookPayload) map[string]string {
		if v == nil {
			return nil
		}
		return v.Vars
	}).(pulumi.StringMapOutput)
}

type ContactPointWecom struct {
	// Agent ID added to the request payload when using APIAPP.
	AgentId *string `pulumi:"agentId"`
	// Corp ID used to get token when using APIAPP.
	CorpId *string `pulumi:"corpId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage *bool `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message *string `pulumi:"message"`
	// The type of them message. Supported: markdown, text. Default: text.
	MsgType *string `pulumi:"msgType"`
	// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
	Secret *string `pulumi:"secret"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings map[string]string `pulumi:"settings"`
	// The templated title of the message to send.
	Title *string `pulumi:"title"`
	// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
	ToUser *string `pulumi:"toUser"`
	// The UID of the contact point.
	Uid *string `pulumi:"uid"`
	// The WeCom webhook URL. Required if using GroupRobot.
	Url *string `pulumi:"url"`
}

// ContactPointWecomInput is an input type that accepts ContactPointWecomArgs and ContactPointWecomOutput values.
// You can construct a concrete instance of `ContactPointWecomInput` via:
//
//	ContactPointWecomArgs{...}
type ContactPointWecomInput interface {
	pulumi.Input

	ToContactPointWecomOutput() ContactPointWecomOutput
	ToContactPointWecomOutputWithContext(context.Context) ContactPointWecomOutput
}

type ContactPointWecomArgs struct {
	// Agent ID added to the request payload when using APIAPP.
	AgentId pulumi.StringPtrInput `pulumi:"agentId"`
	// Corp ID used to get token when using APIAPP.
	CorpId pulumi.StringPtrInput `pulumi:"corpId"`
	// Whether to disable sending resolve messages. Defaults to `false`.
	DisableResolveMessage pulumi.BoolPtrInput `pulumi:"disableResolveMessage"`
	// The templated content of the message to send.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// The type of them message. Supported: markdown, text. Default: text.
	MsgType pulumi.StringPtrInput `pulumi:"msgType"`
	// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
	Secret pulumi.StringPtrInput `pulumi:"secret"`
	// Additional custom properties to attach to the notifier. Defaults to `map[]`.
	Settings pulumi.StringMapInput `pulumi:"settings"`
	// The templated title of the message to send.
	Title pulumi.StringPtrInput `pulumi:"title"`
	// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
	ToUser pulumi.StringPtrInput `pulumi:"toUser"`
	// The UID of the contact point.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
	// The WeCom webhook URL. Required if using GroupRobot.
	Url pulumi.StringPtrInput `pulumi:"url"`
}

func (ContactPointWecomArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArgs) ToContactPointWecomOutput() ContactPointWecomOutput {
	return i.ToContactPointWecomOutputWithContext(context.Background())
}

func (i ContactPointWecomArgs) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomOutput)
}

// ContactPointWecomArrayInput is an input type that accepts ContactPointWecomArray and ContactPointWecomArrayOutput values.
// You can construct a concrete instance of `ContactPointWecomArrayInput` via:
//
//	ContactPointWecomArray{ ContactPointWecomArgs{...} }
type ContactPointWecomArrayInput interface {
	pulumi.Input

	ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput
	ToContactPointWecomArrayOutputWithContext(context.Context) ContactPointWecomArrayOutput
}

type ContactPointWecomArray []ContactPointWecomInput

func (ContactPointWecomArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return i.ToContactPointWecomArrayOutputWithContext(context.Background())
}

func (i ContactPointWecomArray) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactPointWecomArrayOutput)
}

type ContactPointWecomOutput struct{ *pulumi.OutputState }

func (ContactPointWecomOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomOutput) ToContactPointWecomOutput() ContactPointWecomOutput {
	return o
}

func (o ContactPointWecomOutput) ToContactPointWecomOutputWithContext(ctx context.Context) ContactPointWecomOutput {
	return o
}

// Agent ID added to the request payload when using APIAPP.
func (o ContactPointWecomOutput) AgentId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.AgentId }).(pulumi.StringPtrOutput)
}

// Corp ID used to get token when using APIAPP.
func (o ContactPointWecomOutput) CorpId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.CorpId }).(pulumi.StringPtrOutput)
}

// Whether to disable sending resolve messages. Defaults to `false`.
func (o ContactPointWecomOutput) DisableResolveMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *bool { return v.DisableResolveMessage }).(pulumi.BoolPtrOutput)
}

// The templated content of the message to send.
func (o ContactPointWecomOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// The type of them message. Supported: markdown, text. Default: text.
func (o ContactPointWecomOutput) MsgType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.MsgType }).(pulumi.StringPtrOutput)
}

// The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.
func (o ContactPointWecomOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Secret }).(pulumi.StringPtrOutput)
}

// Additional custom properties to attach to the notifier. Defaults to `map[]`.
func (o ContactPointWecomOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v ContactPointWecom) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

// The templated title of the message to send.
func (o ContactPointWecomOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Title }).(pulumi.StringPtrOutput)
}

// The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.
func (o ContactPointWecomOutput) ToUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.ToUser }).(pulumi.StringPtrOutput)
}

// The UID of the contact point.
func (o ContactPointWecomOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

// The WeCom webhook URL. Required if using GroupRobot.
func (o ContactPointWecomOutput) Url() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ContactPointWecom) *string { return v.Url }).(pulumi.StringPtrOutput)
}

type ContactPointWecomArrayOutput struct{ *pulumi.OutputState }

func (ContactPointWecomArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ContactPointWecom)(nil)).Elem()
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutput() ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) ToContactPointWecomArrayOutputWithContext(ctx context.Context) ContactPointWecomArrayOutput {
	return o
}

func (o ContactPointWecomArrayOutput) Index(i pulumi.IntInput) ContactPointWecomOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ContactPointWecom {
		return vs[0].([]ContactPointWecom)[vs[1].(int)]
	}).(ContactPointWecomOutput)
}

type MuteTimingInterval struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths []string `pulumi:"daysOfMonths"`
	// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
	Location *string `pulumi:"location"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months []string `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times []MuteTimingIntervalTime `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays []string `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years []string `pulumi:"years"`
}

// MuteTimingIntervalInput is an input type that accepts MuteTimingIntervalArgs and MuteTimingIntervalOutput values.
// You can construct a concrete instance of `MuteTimingIntervalInput` via:
//
//	MuteTimingIntervalArgs{...}
type MuteTimingIntervalInput interface {
	pulumi.Input

	ToMuteTimingIntervalOutput() MuteTimingIntervalOutput
	ToMuteTimingIntervalOutputWithContext(context.Context) MuteTimingIntervalOutput
}

type MuteTimingIntervalArgs struct {
	// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
	DaysOfMonths pulumi.StringArrayInput `pulumi:"daysOfMonths"`
	// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
	Location pulumi.StringPtrInput `pulumi:"location"`
	// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
	Months pulumi.StringArrayInput `pulumi:"months"`
	// The time ranges, represented in minutes, during which to mute in a given day.
	Times MuteTimingIntervalTimeArrayInput `pulumi:"times"`
	// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
	Weekdays pulumi.StringArrayInput `pulumi:"weekdays"`
	// A positive inclusive range of years, e.g. "2030" or "2025:2026".
	Years pulumi.StringArrayInput `pulumi:"years"`
}

func (MuteTimingIntervalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return i.ToMuteTimingIntervalOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArgs) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalOutput)
}

// MuteTimingIntervalArrayInput is an input type that accepts MuteTimingIntervalArray and MuteTimingIntervalArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalArrayInput` via:
//
//	MuteTimingIntervalArray{ MuteTimingIntervalArgs{...} }
type MuteTimingIntervalArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput
	ToMuteTimingIntervalArrayOutputWithContext(context.Context) MuteTimingIntervalArrayOutput
}

type MuteTimingIntervalArray []MuteTimingIntervalInput

func (MuteTimingIntervalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return i.ToMuteTimingIntervalArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalArray) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalArrayOutput)
}

type MuteTimingIntervalOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutput() MuteTimingIntervalOutput {
	return o
}

func (o MuteTimingIntervalOutput) ToMuteTimingIntervalOutputWithContext(ctx context.Context) MuteTimingIntervalOutput {
	return o
}

// An inclusive range of days, 1-31, within a month, e.g. "1" or "14:16". Negative values can be used to represent days counting from the end of a month, e.g. "-1".
func (o MuteTimingIntervalOutput) DaysOfMonths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.DaysOfMonths }).(pulumi.StringArrayOutput)
}

// Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g "America/New_York"
func (o MuteTimingIntervalOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MuteTimingInterval) *string { return v.Location }).(pulumi.StringPtrOutput)
}

// An inclusive range of months, either numerical or full calendar month, e.g. "1:3", "december", or "may:august".
func (o MuteTimingIntervalOutput) Months() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Months }).(pulumi.StringArrayOutput)
}

// The time ranges, represented in minutes, during which to mute in a given day.
func (o MuteTimingIntervalOutput) Times() MuteTimingIntervalTimeArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []MuteTimingIntervalTime { return v.Times }).(MuteTimingIntervalTimeArrayOutput)
}

// An inclusive range of weekdays, e.g. "monday" or "tuesday:thursday".
func (o MuteTimingIntervalOutput) Weekdays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Weekdays }).(pulumi.StringArrayOutput)
}

// A positive inclusive range of years, e.g. "2030" or "2025:2026".
func (o MuteTimingIntervalOutput) Years() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MuteTimingInterval) []string { return v.Years }).(pulumi.StringArrayOutput)
}

type MuteTimingIntervalArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingInterval)(nil)).Elem()
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutput() MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) ToMuteTimingIntervalArrayOutputWithContext(ctx context.Context) MuteTimingIntervalArrayOutput {
	return o
}

func (o MuteTimingIntervalArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingInterval {
		return vs[0].([]MuteTimingInterval)[vs[1].(int)]
	}).(MuteTimingIntervalOutput)
}

type MuteTimingIntervalTime struct {
	// The time, in hh:mm format, of when the interval should end exclusively.
	End string `pulumi:"end"`
	// The time, in hh:mm format, of when the interval should begin inclusively.
	Start string `pulumi:"start"`
}

// MuteTimingIntervalTimeInput is an input type that accepts MuteTimingIntervalTimeArgs and MuteTimingIntervalTimeOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeInput` via:
//
//	MuteTimingIntervalTimeArgs{...}
type MuteTimingIntervalTimeInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput
	ToMuteTimingIntervalTimeOutputWithContext(context.Context) MuteTimingIntervalTimeOutput
}

type MuteTimingIntervalTimeArgs struct {
	// The time, in hh:mm format, of when the interval should end exclusively.
	End pulumi.StringInput `pulumi:"end"`
	// The time, in hh:mm format, of when the interval should begin inclusively.
	Start pulumi.StringInput `pulumi:"start"`
}

func (MuteTimingIntervalTimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return i.ToMuteTimingIntervalTimeOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArgs) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeOutput)
}

// MuteTimingIntervalTimeArrayInput is an input type that accepts MuteTimingIntervalTimeArray and MuteTimingIntervalTimeArrayOutput values.
// You can construct a concrete instance of `MuteTimingIntervalTimeArrayInput` via:
//
//	MuteTimingIntervalTimeArray{ MuteTimingIntervalTimeArgs{...} }
type MuteTimingIntervalTimeArrayInput interface {
	pulumi.Input

	ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput
	ToMuteTimingIntervalTimeArrayOutputWithContext(context.Context) MuteTimingIntervalTimeArrayOutput
}

type MuteTimingIntervalTimeArray []MuteTimingIntervalTimeInput

func (MuteTimingIntervalTimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return i.ToMuteTimingIntervalTimeArrayOutputWithContext(context.Background())
}

func (i MuteTimingIntervalTimeArray) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MuteTimingIntervalTimeArrayOutput)
}

type MuteTimingIntervalTimeOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutput() MuteTimingIntervalTimeOutput {
	return o
}

func (o MuteTimingIntervalTimeOutput) ToMuteTimingIntervalTimeOutputWithContext(ctx context.Context) MuteTimingIntervalTimeOutput {
	return o
}

// The time, in hh:mm format, of when the interval should end exclusively.
func (o MuteTimingIntervalTimeOutput) End() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.End }).(pulumi.StringOutput)
}

// The time, in hh:mm format, of when the interval should begin inclusively.
func (o MuteTimingIntervalTimeOutput) Start() pulumi.StringOutput {
	return o.ApplyT(func(v MuteTimingIntervalTime) string { return v.Start }).(pulumi.StringOutput)
}

type MuteTimingIntervalTimeArrayOutput struct{ *pulumi.OutputState }

func (MuteTimingIntervalTimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MuteTimingIntervalTime)(nil)).Elem()
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutput() MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) ToMuteTimingIntervalTimeArrayOutputWithContext(ctx context.Context) MuteTimingIntervalTimeArrayOutput {
	return o
}

func (o MuteTimingIntervalTimeArrayOutput) Index(i pulumi.IntInput) MuteTimingIntervalTimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MuteTimingIntervalTime {
		return vs[0].([]MuteTimingIntervalTime)[vs[1].(int)]
	}).(MuteTimingIntervalTimeOutput)
}

type NotificationPolicyPolicy struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings []string `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyArgs and NotificationPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyArgs{...}
type NotificationPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput
	ToNotificationPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyOutput
}

type NotificationPolicyPolicyArgs struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings pulumi.StringArrayInput `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArgs) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyOutput)
}

// NotificationPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyArray and NotificationPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyArray{ NotificationPolicyPolicyArgs{...} }
type NotificationPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyArray []NotificationPolicyPolicyInput

func (NotificationPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyArray) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutput() NotificationPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyOutput) ToNotificationPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyOutput {
	return o
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o NotificationPolicyPolicyOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.ActiveTimings }).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyOutput) Matchers() NotificationPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyMatcherArrayOutput)
}

// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
func (o NotificationPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) []NotificationPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutput() NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) ToNotificationPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyOutput)
}

type NotificationPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyMatcherArgs and NotificationPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyMatcherArray and NotificationPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyMatcherArray{ NotificationPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyMatcherArray []NotificationPolicyPolicyMatcherInput

func (NotificationPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyMatcherArray) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutput() NotificationPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicy struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings []string `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyArgs struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings pulumi.StringArrayInput `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyOutput {
	return o
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o NotificationPolicyPolicyPolicyOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.ActiveTimings }).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyMatcher { return v.Matchers }).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
func (o NotificationPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicy { return v.Policies }).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicy struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings []string `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings []string `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies []NotificationPolicyPolicyPolicyPolicyPolicy `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyArgs struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings pulumi.StringArrayInput `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Routing rules for specific label sets.
	Policies NotificationPolicyPolicyPolicyPolicyPolicyArrayInput `pulumi:"policies"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyOutput {
	return o
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o NotificationPolicyPolicyPolicyPolicyOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.ActiveTimings }).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
func (o NotificationPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Routing rules for specific label sets.
func (o NotificationPolicyPolicyPolicyPolicyOutput) Policies() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicy {
		return v.Policies
	}).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyMatcherOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicy struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings []string `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint *string `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue *bool `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers []NotificationPolicyPolicyPolicyPolicyPolicyMatcher `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArgs and NotificationPolicyPolicyPolicyPolicyPolicyOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArgs struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings pulumi.StringArrayInput `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringPtrInput `pulumi:"contactPoint"`
	// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
	Continue pulumi.BoolPtrInput `pulumi:"continue"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
	Matchers NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput `pulumi:"matchers"`
	// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyArray and NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyArray{ NotificationPolicyPolicyPolicyPolicyPolicyArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyArray []NotificationPolicyPolicyPolicyPolicyPolicyInput

func (NotificationPolicyPolicyPolicyPolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyArray) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutput() NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return o
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.ActiveTimings }).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.ContactPoint }).(pulumi.StringPtrOutput)
}

// Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) Matchers() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return v.Matchers
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

// A list of time intervals to apply to alerts that match this policy to mute them for the specified time.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o NotificationPolicyPolicyPolicyPolicyPolicyOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicy) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicy)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicy {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicy)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcher struct {
	// The name of the label to match against.
	Label string `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match string `pulumi:"match"`
	// The label value to match against.
	Value string `pulumi:"value"`
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs and NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...}
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs struct {
	// The name of the label to match against.
	Label pulumi.StringInput `pulumi:"label"`
	// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
	Match pulumi.StringInput `pulumi:"match"`
	// The label value to match against.
	Value pulumi.StringInput `pulumi:"value"`
}

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

// NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput is an input type that accepts NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray and NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput values.
// You can construct a concrete instance of `NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput` via:
//
//	NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{ NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{...} }
type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput interface {
	pulumi.Input

	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
	ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray []NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return i.ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(context.Background())
}

func (i NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return o
}

// The name of the label to match against.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Label() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Label }).(pulumi.StringOutput)
}

// The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Match() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Match }).(pulumi.StringOutput)
}

// The label value to match against.
func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v NotificationPolicyPolicyPolicyPolicyPolicyMatcher) string { return v.Value }).(pulumi.StringOutput)
}

type NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput struct{ *pulumi.OutputState }

func (NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)(nil)).Elem()
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput() NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) ToNotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutputWithContext(ctx context.Context) NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput {
	return o
}

func (o NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput) Index(i pulumi.IntInput) NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NotificationPolicyPolicyPolicyPolicyPolicyMatcher {
		return vs[0].([]NotificationPolicyPolicyPolicyPolicyPolicyMatcher)[vs[1].(int)]
	}).(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput)
}

type RuleGroupRule struct {
	// Key-value pairs of metadata to attach to the alert rule. They add additional information, such as a `summary` or `runbookUrl`, to help identify and investigate alerts. The `__dashboardUid__` and `__panelId__` annotations, which link alerts to a panel, must be set together. Defaults to `map[]`.
	Annotations map[string]string `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition *string `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas []RuleGroupRuleData `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting.  Defaults to Alerting if not set.
	ExecErrState *string `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For *string `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused *bool `pulumi:"isPaused"`
	// The amount of time for which the rule will considered to be Recovering after initially Firing. Before this time has elapsed, the rule will continue to fire once it's been triggered.
	KeepFiringFor *string `pulumi:"keepFiringFor"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels map[string]string `pulumi:"labels"`
	// The number of missing series evaluations that must occur before the rule is considered to be resolved.
	MissingSeriesEvalsToResolve *int `pulumi:"missingSeriesEvalsToResolve"`
	// The name of the alert rule.
	Name string `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to NoData if not set.
	NoDataState *string `pulumi:"noDataState"`
	// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' to be enabled.
	NotificationSettings *RuleGroupRuleNotificationSettings `pulumi:"notificationSettings"`
	// Settings for a recording rule. Available since Grafana 11.2, requires feature flag 'grafanaManagedRecordingRules' to be enabled.
	Record *RuleGroupRuleRecord `pulumi:"record"`
	// The unique identifier of the alert rule.
	Uid *string `pulumi:"uid"`
}

// RuleGroupRuleInput is an input type that accepts RuleGroupRuleArgs and RuleGroupRuleOutput values.
// You can construct a concrete instance of `RuleGroupRuleInput` via:
//
//	RuleGroupRuleArgs{...}
type RuleGroupRuleInput interface {
	pulumi.Input

	ToRuleGroupRuleOutput() RuleGroupRuleOutput
	ToRuleGroupRuleOutputWithContext(context.Context) RuleGroupRuleOutput
}

type RuleGroupRuleArgs struct {
	// Key-value pairs of metadata to attach to the alert rule. They add additional information, such as a `summary` or `runbookUrl`, to help identify and investigate alerts. The `__dashboardUid__` and `__panelId__` annotations, which link alerts to a panel, must be set together. Defaults to `map[]`.
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// The `refId` of the query node in the `data` field to use as the alert condition.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// A sequence of stages that describe the contents of the rule.
	Datas RuleGroupRuleDataArrayInput `pulumi:"datas"`
	// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting.  Defaults to Alerting if not set.
	ExecErrState pulumi.StringPtrInput `pulumi:"execErrState"`
	// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
	For pulumi.StringPtrInput `pulumi:"for"`
	// Sets whether the alert should be paused or not. Defaults to `false`.
	IsPaused pulumi.BoolPtrInput `pulumi:"isPaused"`
	// The amount of time for which the rule will considered to be Recovering after initially Firing. Before this time has elapsed, the rule will continue to fire once it's been triggered.
	KeepFiringFor pulumi.StringPtrInput `pulumi:"keepFiringFor"`
	// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// The number of missing series evaluations that must occur before the rule is considered to be resolved.
	MissingSeriesEvalsToResolve pulumi.IntPtrInput `pulumi:"missingSeriesEvalsToResolve"`
	// The name of the alert rule.
	Name pulumi.StringInput `pulumi:"name"`
	// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to NoData if not set.
	NoDataState pulumi.StringPtrInput `pulumi:"noDataState"`
	// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' to be enabled.
	NotificationSettings RuleGroupRuleNotificationSettingsPtrInput `pulumi:"notificationSettings"`
	// Settings for a recording rule. Available since Grafana 11.2, requires feature flag 'grafanaManagedRecordingRules' to be enabled.
	Record RuleGroupRuleRecordPtrInput `pulumi:"record"`
	// The unique identifier of the alert rule.
	Uid pulumi.StringPtrInput `pulumi:"uid"`
}

func (RuleGroupRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return i.ToRuleGroupRuleOutputWithContext(context.Background())
}

func (i RuleGroupRuleArgs) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleOutput)
}

// RuleGroupRuleArrayInput is an input type that accepts RuleGroupRuleArray and RuleGroupRuleArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleArrayInput` via:
//
//	RuleGroupRuleArray{ RuleGroupRuleArgs{...} }
type RuleGroupRuleArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput
	ToRuleGroupRuleArrayOutputWithContext(context.Context) RuleGroupRuleArrayOutput
}

type RuleGroupRuleArray []RuleGroupRuleInput

func (RuleGroupRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return i.ToRuleGroupRuleArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleArray) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleArrayOutput)
}

type RuleGroupRuleOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutput() RuleGroupRuleOutput {
	return o
}

func (o RuleGroupRuleOutput) ToRuleGroupRuleOutputWithContext(ctx context.Context) RuleGroupRuleOutput {
	return o
}

// Key-value pairs of metadata to attach to the alert rule. They add additional information, such as a `summary` or `runbookUrl`, to help identify and investigate alerts. The `__dashboardUid__` and `__panelId__` annotations, which link alerts to a panel, must be set together. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// The `refId` of the query node in the `data` field to use as the alert condition.
func (o RuleGroupRuleOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// A sequence of stages that describe the contents of the rule.
func (o RuleGroupRuleOutput) Datas() RuleGroupRuleDataArrayOutput {
	return o.ApplyT(func(v RuleGroupRule) []RuleGroupRuleData { return v.Datas }).(RuleGroupRuleDataArrayOutput)
}

// Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, KeepLast, and Alerting.  Defaults to Alerting if not set.
func (o RuleGroupRuleOutput) ExecErrState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.ExecErrState }).(pulumi.StringPtrOutput)
}

// The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending. Defaults to `0`.
func (o RuleGroupRuleOutput) For() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.For }).(pulumi.StringPtrOutput)
}

// Sets whether the alert should be paused or not. Defaults to `false`.
func (o RuleGroupRuleOutput) IsPaused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *bool { return v.IsPaused }).(pulumi.BoolPtrOutput)
}

// The amount of time for which the rule will considered to be Recovering after initially Firing. Before this time has elapsed, the rule will continue to fire once it's been triggered.
func (o RuleGroupRuleOutput) KeepFiringFor() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.KeepFiringFor }).(pulumi.StringPtrOutput)
}

// Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing. Defaults to `map[]`.
func (o RuleGroupRuleOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v RuleGroupRule) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// The number of missing series evaluations that must occur before the rule is considered to be resolved.
func (o RuleGroupRuleOutput) MissingSeriesEvalsToResolve() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *int { return v.MissingSeriesEvalsToResolve }).(pulumi.IntPtrOutput)
}

// The name of the alert rule.
func (o RuleGroupRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRule) string { return v.Name }).(pulumi.StringOutput)
}

// Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, KeepLast, and Alerting. Defaults to NoData if not set.
func (o RuleGroupRuleOutput) NoDataState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.NoDataState }).(pulumi.StringPtrOutput)
}

// Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' to be enabled.
func (o RuleGroupRuleOutput) NotificationSettings() RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *RuleGroupRuleNotificationSettings { return v.NotificationSettings }).(RuleGroupRuleNotificationSettingsPtrOutput)
}

// Settings for a recording rule. Available since Grafana 11.2, requires feature flag 'grafanaManagedRecordingRules' to be enabled.
func (o RuleGroupRuleOutput) Record() RuleGroupRuleRecordPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *RuleGroupRuleRecord { return v.Record }).(RuleGroupRuleRecordPtrOutput)
}

// The unique identifier of the alert rule.
func (o RuleGroupRuleOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRule) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRule)(nil)).Elem()
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutput() RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) ToRuleGroupRuleArrayOutputWithContext(ctx context.Context) RuleGroupRuleArrayOutput {
	return o
}

func (o RuleGroupRuleArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRule {
		return vs[0].([]RuleGroupRule)[vs[1].(int)]
	}).(RuleGroupRuleOutput)
}

type RuleGroupRuleData struct {
	// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
	DatasourceUid string `pulumi:"datasourceUid"`
	// Custom JSON data to send to the specified datasource when querying.
	Model string `pulumi:"model"`
	// An optional identifier for the type of query being executed. Defaults to ``.
	QueryType *string `pulumi:"queryType"`
	// A unique string to identify this query stage within a rule.
	RefId string `pulumi:"refId"`
	// The time range, relative to when the query is executed, across which to query.
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRange `pulumi:"relativeTimeRange"`
}

// RuleGroupRuleDataInput is an input type that accepts RuleGroupRuleDataArgs and RuleGroupRuleDataOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataInput` via:
//
//	RuleGroupRuleDataArgs{...}
type RuleGroupRuleDataInput interface {
	pulumi.Input

	ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput
	ToRuleGroupRuleDataOutputWithContext(context.Context) RuleGroupRuleDataOutput
}

type RuleGroupRuleDataArgs struct {
	// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
	DatasourceUid pulumi.StringInput `pulumi:"datasourceUid"`
	// Custom JSON data to send to the specified datasource when querying.
	Model pulumi.StringInput `pulumi:"model"`
	// An optional identifier for the type of query being executed. Defaults to ``.
	QueryType pulumi.StringPtrInput `pulumi:"queryType"`
	// A unique string to identify this query stage within a rule.
	RefId pulumi.StringInput `pulumi:"refId"`
	// The time range, relative to when the query is executed, across which to query.
	RelativeTimeRange RuleGroupRuleDataRelativeTimeRangeInput `pulumi:"relativeTimeRange"`
}

func (RuleGroupRuleDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return i.ToRuleGroupRuleDataOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArgs) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataOutput)
}

// RuleGroupRuleDataArrayInput is an input type that accepts RuleGroupRuleDataArray and RuleGroupRuleDataArrayOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataArrayInput` via:
//
//	RuleGroupRuleDataArray{ RuleGroupRuleDataArgs{...} }
type RuleGroupRuleDataArrayInput interface {
	pulumi.Input

	ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput
	ToRuleGroupRuleDataArrayOutputWithContext(context.Context) RuleGroupRuleDataArrayOutput
}

type RuleGroupRuleDataArray []RuleGroupRuleDataInput

func (RuleGroupRuleDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return i.ToRuleGroupRuleDataArrayOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataArray) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataArrayOutput)
}

type RuleGroupRuleDataOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutput() RuleGroupRuleDataOutput {
	return o
}

func (o RuleGroupRuleDataOutput) ToRuleGroupRuleDataOutputWithContext(ctx context.Context) RuleGroupRuleDataOutput {
	return o
}

// The UID of the datasource being queried, or "-100" if this stage is an expression stage.
func (o RuleGroupRuleDataOutput) DatasourceUid() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.DatasourceUid }).(pulumi.StringOutput)
}

// Custom JSON data to send to the specified datasource when querying.
func (o RuleGroupRuleDataOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.Model }).(pulumi.StringOutput)
}

// An optional identifier for the type of query being executed. Defaults to “.
func (o RuleGroupRuleDataOutput) QueryType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleData) *string { return v.QueryType }).(pulumi.StringPtrOutput)
}

// A unique string to identify this query stage within a rule.
func (o RuleGroupRuleDataOutput) RefId() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleData) string { return v.RefId }).(pulumi.StringOutput)
}

// The time range, relative to when the query is executed, across which to query.
func (o RuleGroupRuleDataOutput) RelativeTimeRange() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o.ApplyT(func(v RuleGroupRuleData) RuleGroupRuleDataRelativeTimeRange { return v.RelativeTimeRange }).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataArrayOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RuleGroupRuleData)(nil)).Elem()
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutput() RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) ToRuleGroupRuleDataArrayOutputWithContext(ctx context.Context) RuleGroupRuleDataArrayOutput {
	return o
}

func (o RuleGroupRuleDataArrayOutput) Index(i pulumi.IntInput) RuleGroupRuleDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RuleGroupRuleData {
		return vs[0].([]RuleGroupRuleData)[vs[1].(int)]
	}).(RuleGroupRuleDataOutput)
}

type RuleGroupRuleDataRelativeTimeRange struct {
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
	From int `pulumi:"from"`
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
	To int `pulumi:"to"`
}

// RuleGroupRuleDataRelativeTimeRangeInput is an input type that accepts RuleGroupRuleDataRelativeTimeRangeArgs and RuleGroupRuleDataRelativeTimeRangeOutput values.
// You can construct a concrete instance of `RuleGroupRuleDataRelativeTimeRangeInput` via:
//
//	RuleGroupRuleDataRelativeTimeRangeArgs{...}
type RuleGroupRuleDataRelativeTimeRangeInput interface {
	pulumi.Input

	ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput
	ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Context) RuleGroupRuleDataRelativeTimeRangeOutput
}

type RuleGroupRuleDataRelativeTimeRangeArgs struct {
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
	From pulumi.IntInput `pulumi:"from"`
	// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
	To pulumi.IntInput `pulumi:"to"`
}

func (RuleGroupRuleDataRelativeTimeRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return i.ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(context.Background())
}

func (i RuleGroupRuleDataRelativeTimeRangeArgs) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleDataRelativeTimeRangeOutput)
}

type RuleGroupRuleDataRelativeTimeRangeOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleDataRelativeTimeRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRange)(nil)).Elem()
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutput() RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

func (o RuleGroupRuleDataRelativeTimeRangeOutput) ToRuleGroupRuleDataRelativeTimeRangeOutputWithContext(ctx context.Context) RuleGroupRuleDataRelativeTimeRangeOutput {
	return o
}

// The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.
func (o RuleGroupRuleDataRelativeTimeRangeOutput) From() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.From }).(pulumi.IntOutput)
}

// The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.
func (o RuleGroupRuleDataRelativeTimeRangeOutput) To() pulumi.IntOutput {
	return o.ApplyT(func(v RuleGroupRuleDataRelativeTimeRange) int { return v.To }).(pulumi.IntOutput)
}

type RuleGroupRuleNotificationSettings struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings []string `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint string `pulumi:"contactPoint"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
	GroupBies []string `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval *string `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait *string `pulumi:"groupWait"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings []string `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval *string `pulumi:"repeatInterval"`
}

// RuleGroupRuleNotificationSettingsInput is an input type that accepts RuleGroupRuleNotificationSettingsArgs and RuleGroupRuleNotificationSettingsOutput values.
// You can construct a concrete instance of `RuleGroupRuleNotificationSettingsInput` via:
//
//	RuleGroupRuleNotificationSettingsArgs{...}
type RuleGroupRuleNotificationSettingsInput interface {
	pulumi.Input

	ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput
	ToRuleGroupRuleNotificationSettingsOutputWithContext(context.Context) RuleGroupRuleNotificationSettingsOutput
}

type RuleGroupRuleNotificationSettingsArgs struct {
	// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
	ActiveTimings pulumi.StringArrayInput `pulumi:"activeTimings"`
	// The contact point to route notifications that match this rule to.
	ContactPoint pulumi.StringInput `pulumi:"contactPoint"`
	// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
	GroupBies pulumi.StringArrayInput `pulumi:"groupBies"`
	// Minimum time interval between two notifications for the same group. Default is 5 minutes.
	GroupInterval pulumi.StringPtrInput `pulumi:"groupInterval"`
	// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
	GroupWait pulumi.StringPtrInput `pulumi:"groupWait"`
	// A list of mute timing names to apply to alerts that match this policy.
	MuteTimings pulumi.StringArrayInput `pulumi:"muteTimings"`
	// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
	RepeatInterval pulumi.StringPtrInput `pulumi:"repeatInterval"`
}

func (RuleGroupRuleNotificationSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput {
	return i.ToRuleGroupRuleNotificationSettingsOutputWithContext(context.Background())
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsOutput)
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return i.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i RuleGroupRuleNotificationSettingsArgs) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsOutput).ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx)
}

// RuleGroupRuleNotificationSettingsPtrInput is an input type that accepts RuleGroupRuleNotificationSettingsArgs, RuleGroupRuleNotificationSettingsPtr and RuleGroupRuleNotificationSettingsPtrOutput values.
// You can construct a concrete instance of `RuleGroupRuleNotificationSettingsPtrInput` via:
//
//	        RuleGroupRuleNotificationSettingsArgs{...}
//
//	or:
//
//	        nil
type RuleGroupRuleNotificationSettingsPtrInput interface {
	pulumi.Input

	ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput
	ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Context) RuleGroupRuleNotificationSettingsPtrOutput
}

type ruleGroupRuleNotificationSettingsPtrType RuleGroupRuleNotificationSettingsArgs

func RuleGroupRuleNotificationSettingsPtr(v *RuleGroupRuleNotificationSettingsArgs) RuleGroupRuleNotificationSettingsPtrInput {
	return (*ruleGroupRuleNotificationSettingsPtrType)(v)
}

func (*ruleGroupRuleNotificationSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (i *ruleGroupRuleNotificationSettingsPtrType) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return i.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (i *ruleGroupRuleNotificationSettingsPtrType) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleNotificationSettingsPtrOutput)
}

type RuleGroupRuleNotificationSettingsOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleNotificationSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsOutput() RuleGroupRuleNotificationSettingsOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(context.Background())
}

func (o RuleGroupRuleNotificationSettingsOutput) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleGroupRuleNotificationSettings) *RuleGroupRuleNotificationSettings {
		return &v
	}).(RuleGroupRuleNotificationSettingsPtrOutput)
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o RuleGroupRuleNotificationSettingsOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) []string { return v.ActiveTimings }).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o RuleGroupRuleNotificationSettingsOutput) ContactPoint() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) string { return v.ContactPoint }).(pulumi.StringOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
func (o RuleGroupRuleNotificationSettingsOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) []string { return v.GroupBies }).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o RuleGroupRuleNotificationSettingsOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.GroupInterval }).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o RuleGroupRuleNotificationSettingsOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.GroupWait }).(pulumi.StringPtrOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o RuleGroupRuleNotificationSettingsOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) []string { return v.MuteTimings }).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o RuleGroupRuleNotificationSettingsOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleNotificationSettings) *string { return v.RepeatInterval }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleNotificationSettingsPtrOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleNotificationSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleNotificationSettings)(nil)).Elem()
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) ToRuleGroupRuleNotificationSettingsPtrOutput() RuleGroupRuleNotificationSettingsPtrOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) ToRuleGroupRuleNotificationSettingsPtrOutputWithContext(ctx context.Context) RuleGroupRuleNotificationSettingsPtrOutput {
	return o
}

func (o RuleGroupRuleNotificationSettingsPtrOutput) Elem() RuleGroupRuleNotificationSettingsOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) RuleGroupRuleNotificationSettings {
		if v != nil {
			return *v
		}
		var ret RuleGroupRuleNotificationSettings
		return ret
	}).(RuleGroupRuleNotificationSettingsOutput)
}

// A list of time interval names to apply to alerts that match this policy to suppress them unless they are sent at the specified time. Supported in Grafana 12.1.0 and later
func (o RuleGroupRuleNotificationSettingsPtrOutput) ActiveTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.ActiveTimings
	}).(pulumi.StringArrayOutput)
}

// The contact point to route notifications that match this rule to.
func (o RuleGroupRuleNotificationSettingsPtrOutput) ContactPoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return &v.ContactPoint
	}).(pulumi.StringPtrOutput)
}

// A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupBies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.GroupBies
	}).(pulumi.StringArrayOutput)
}

// Minimum time interval between two notifications for the same group. Default is 5 minutes.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupInterval
	}).(pulumi.StringPtrOutput)
}

// Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.
func (o RuleGroupRuleNotificationSettingsPtrOutput) GroupWait() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.GroupWait
	}).(pulumi.StringPtrOutput)
}

// A list of mute timing names to apply to alerts that match this policy.
func (o RuleGroupRuleNotificationSettingsPtrOutput) MuteTimings() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) []string {
		if v == nil {
			return nil
		}
		return v.MuteTimings
	}).(pulumi.StringArrayOutput)
}

// Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.
func (o RuleGroupRuleNotificationSettingsPtrOutput) RepeatInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleNotificationSettings) *string {
		if v == nil {
			return nil
		}
		return v.RepeatInterval
	}).(pulumi.StringPtrOutput)
}

type RuleGroupRuleRecord struct {
	// The ref id of the query node in the data field to use as the source of the metric.
	From string `pulumi:"from"`
	// The name of the metric to write to.
	Metric string `pulumi:"metric"`
	// The UID of the datasource to write the metric to.
	TargetDatasourceUid *string `pulumi:"targetDatasourceUid"`
}

// RuleGroupRuleRecordInput is an input type that accepts RuleGroupRuleRecordArgs and RuleGroupRuleRecordOutput values.
// You can construct a concrete instance of `RuleGroupRuleRecordInput` via:
//
//	RuleGroupRuleRecordArgs{...}
type RuleGroupRuleRecordInput interface {
	pulumi.Input

	ToRuleGroupRuleRecordOutput() RuleGroupRuleRecordOutput
	ToRuleGroupRuleRecordOutputWithContext(context.Context) RuleGroupRuleRecordOutput
}

type RuleGroupRuleRecordArgs struct {
	// The ref id of the query node in the data field to use as the source of the metric.
	From pulumi.StringInput `pulumi:"from"`
	// The name of the metric to write to.
	Metric pulumi.StringInput `pulumi:"metric"`
	// The UID of the datasource to write the metric to.
	TargetDatasourceUid pulumi.StringPtrInput `pulumi:"targetDatasourceUid"`
}

func (RuleGroupRuleRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleRecord)(nil)).Elem()
}

func (i RuleGroupRuleRecordArgs) ToRuleGroupRuleRecordOutput() RuleGroupRuleRecordOutput {
	return i.ToRuleGroupRuleRecordOutputWithContext(context.Background())
}

func (i RuleGroupRuleRecordArgs) ToRuleGroupRuleRecordOutputWithContext(ctx context.Context) RuleGroupRuleRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleRecordOutput)
}

func (i RuleGroupRuleRecordArgs) ToRuleGroupRuleRecordPtrOutput() RuleGroupRuleRecordPtrOutput {
	return i.ToRuleGroupRuleRecordPtrOutputWithContext(context.Background())
}

func (i RuleGroupRuleRecordArgs) ToRuleGroupRuleRecordPtrOutputWithContext(ctx context.Context) RuleGroupRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleRecordOutput).ToRuleGroupRuleRecordPtrOutputWithContext(ctx)
}

// RuleGroupRuleRecordPtrInput is an input type that accepts RuleGroupRuleRecordArgs, RuleGroupRuleRecordPtr and RuleGroupRuleRecordPtrOutput values.
// You can construct a concrete instance of `RuleGroupRuleRecordPtrInput` via:
//
//	        RuleGroupRuleRecordArgs{...}
//
//	or:
//
//	        nil
type RuleGroupRuleRecordPtrInput interface {
	pulumi.Input

	ToRuleGroupRuleRecordPtrOutput() RuleGroupRuleRecordPtrOutput
	ToRuleGroupRuleRecordPtrOutputWithContext(context.Context) RuleGroupRuleRecordPtrOutput
}

type ruleGroupRuleRecordPtrType RuleGroupRuleRecordArgs

func RuleGroupRuleRecordPtr(v *RuleGroupRuleRecordArgs) RuleGroupRuleRecordPtrInput {
	return (*ruleGroupRuleRecordPtrType)(v)
}

func (*ruleGroupRuleRecordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleRecord)(nil)).Elem()
}

func (i *ruleGroupRuleRecordPtrType) ToRuleGroupRuleRecordPtrOutput() RuleGroupRuleRecordPtrOutput {
	return i.ToRuleGroupRuleRecordPtrOutputWithContext(context.Background())
}

func (i *ruleGroupRuleRecordPtrType) ToRuleGroupRuleRecordPtrOutputWithContext(ctx context.Context) RuleGroupRuleRecordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleGroupRuleRecordPtrOutput)
}

type RuleGroupRuleRecordOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RuleGroupRuleRecord)(nil)).Elem()
}

func (o RuleGroupRuleRecordOutput) ToRuleGroupRuleRecordOutput() RuleGroupRuleRecordOutput {
	return o
}

func (o RuleGroupRuleRecordOutput) ToRuleGroupRuleRecordOutputWithContext(ctx context.Context) RuleGroupRuleRecordOutput {
	return o
}

func (o RuleGroupRuleRecordOutput) ToRuleGroupRuleRecordPtrOutput() RuleGroupRuleRecordPtrOutput {
	return o.ToRuleGroupRuleRecordPtrOutputWithContext(context.Background())
}

func (o RuleGroupRuleRecordOutput) ToRuleGroupRuleRecordPtrOutputWithContext(ctx context.Context) RuleGroupRuleRecordPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RuleGroupRuleRecord) *RuleGroupRuleRecord {
		return &v
	}).(RuleGroupRuleRecordPtrOutput)
}

// The ref id of the query node in the data field to use as the source of the metric.
func (o RuleGroupRuleRecordOutput) From() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleRecord) string { return v.From }).(pulumi.StringOutput)
}

// The name of the metric to write to.
func (o RuleGroupRuleRecordOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v RuleGroupRuleRecord) string { return v.Metric }).(pulumi.StringOutput)
}

// The UID of the datasource to write the metric to.
func (o RuleGroupRuleRecordOutput) TargetDatasourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RuleGroupRuleRecord) *string { return v.TargetDatasourceUid }).(pulumi.StringPtrOutput)
}

type RuleGroupRuleRecordPtrOutput struct{ *pulumi.OutputState }

func (RuleGroupRuleRecordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleGroupRuleRecord)(nil)).Elem()
}

func (o RuleGroupRuleRecordPtrOutput) ToRuleGroupRuleRecordPtrOutput() RuleGroupRuleRecordPtrOutput {
	return o
}

func (o RuleGroupRuleRecordPtrOutput) ToRuleGroupRuleRecordPtrOutputWithContext(ctx context.Context) RuleGroupRuleRecordPtrOutput {
	return o
}

func (o RuleGroupRuleRecordPtrOutput) Elem() RuleGroupRuleRecordOutput {
	return o.ApplyT(func(v *RuleGroupRuleRecord) RuleGroupRuleRecord {
		if v != nil {
			return *v
		}
		var ret RuleGroupRuleRecord
		return ret
	}).(RuleGroupRuleRecordOutput)
}

// The ref id of the query node in the data field to use as the source of the metric.
func (o RuleGroupRuleRecordPtrOutput) From() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleRecord) *string {
		if v == nil {
			return nil
		}
		return &v.From
	}).(pulumi.StringPtrOutput)
}

// The name of the metric to write to.
func (o RuleGroupRuleRecordPtrOutput) Metric() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleRecord) *string {
		if v == nil {
			return nil
		}
		return &v.Metric
	}).(pulumi.StringPtrOutput)
}

// The UID of the datasource to write the metric to.
func (o RuleGroupRuleRecordPtrOutput) TargetDatasourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleGroupRuleRecord) *string {
		if v == nil {
			return nil
		}
		return v.TargetDatasourceUid
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentMetadataInput)(nil)).Elem(), AlertEnrichmentMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentMetadataPtrInput)(nil)).Elem(), AlertEnrichmentMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentOptionsInput)(nil)).Elem(), AlertEnrichmentOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentOptionsPtrInput)(nil)).Elem(), AlertEnrichmentOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecInput)(nil)).Elem(), AlertEnrichmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecPtrInput)(nil)).Elem(), AlertEnrichmentSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecAnnotationMatcherInput)(nil)).Elem(), AlertEnrichmentSpecAnnotationMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecAnnotationMatcherArrayInput)(nil)).Elem(), AlertEnrichmentSpecAnnotationMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecLabelMatcherInput)(nil)).Elem(), AlertEnrichmentSpecLabelMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecLabelMatcherArrayInput)(nil)).Elem(), AlertEnrichmentSpecLabelMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepInput)(nil)).Elem(), AlertEnrichmentSpecStepArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepArrayInput)(nil)).Elem(), AlertEnrichmentSpecStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssertsInput)(nil)).Elem(), AlertEnrichmentSpecStepAssertsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssertsPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepAssertsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssignInput)(nil)).Elem(), AlertEnrichmentSpecStepAssignArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssignPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepAssignArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssistantInvestigationsInput)(nil)).Elem(), AlertEnrichmentSpecStepAssistantInvestigationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepAssistantInvestigationsPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepAssistantInvestigationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourcePtrInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceLogsQueryInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceLogsQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceLogsQueryPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceLogsQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceRawQueryInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceRawQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepDataSourceRawQueryPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepDataSourceRawQueryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepExplainInput)(nil)).Elem(), AlertEnrichmentSpecStepExplainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepExplainPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepExplainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepExternalInput)(nil)).Elem(), AlertEnrichmentSpecStepExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepExternalPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepExternalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepSiftInput)(nil)).Elem(), AlertEnrichmentSpecStepSiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentSpecStepSiftPtrInput)(nil)).Elem(), AlertEnrichmentSpecStepSiftArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerInput)(nil)).Elem(), ContactPointAlertmanagerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointAlertmanagerArrayInput)(nil)).Elem(), ContactPointAlertmanagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingInput)(nil)).Elem(), ContactPointDingdingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDingdingArrayInput)(nil)).Elem(), ContactPointDingdingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordInput)(nil)).Elem(), ContactPointDiscordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointDiscordArrayInput)(nil)).Elem(), ContactPointDiscordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailInput)(nil)).Elem(), ContactPointEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointEmailArrayInput)(nil)).Elem(), ContactPointEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatInput)(nil)).Elem(), ContactPointGooglechatArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointGooglechatArrayInput)(nil)).Elem(), ContactPointGooglechatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaInput)(nil)).Elem(), ContactPointKafkaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointKafkaArrayInput)(nil)).Elem(), ContactPointKafkaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointLineInput)(nil)).Elem(), ContactPointLineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointLineArrayInput)(nil)).Elem(), ContactPointLineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOncallInput)(nil)).Elem(), ContactPointOncallArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOncallArrayInput)(nil)).Elem(), ContactPointOncallArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyInput)(nil)).Elem(), ContactPointOpsgenyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyArrayInput)(nil)).Elem(), ContactPointOpsgenyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyResponderInput)(nil)).Elem(), ContactPointOpsgenyResponderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointOpsgenyResponderArrayInput)(nil)).Elem(), ContactPointOpsgenyResponderArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyInput)(nil)).Elem(), ContactPointPagerdutyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPagerdutyArrayInput)(nil)).Elem(), ContactPointPagerdutyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverInput)(nil)).Elem(), ContactPointPushoverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointPushoverArrayInput)(nil)).Elem(), ContactPointPushoverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoInput)(nil)).Elem(), ContactPointSensugoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSensugoArrayInput)(nil)).Elem(), ContactPointSensugoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackInput)(nil)).Elem(), ContactPointSlackArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSlackArrayInput)(nil)).Elem(), ContactPointSlackArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSnInput)(nil)).Elem(), ContactPointSnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointSnArrayInput)(nil)).Elem(), ContactPointSnArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamInput)(nil)).Elem(), ContactPointTeamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTeamArrayInput)(nil)).Elem(), ContactPointTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramInput)(nil)).Elem(), ContactPointTelegramArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointTelegramArrayInput)(nil)).Elem(), ContactPointTelegramArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaInput)(nil)).Elem(), ContactPointThreemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointThreemaArrayInput)(nil)).Elem(), ContactPointThreemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropInput)(nil)).Elem(), ContactPointVictoropArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointVictoropArrayInput)(nil)).Elem(), ContactPointVictoropArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebexInput)(nil)).Elem(), ContactPointWebexArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebexArrayInput)(nil)).Elem(), ContactPointWebexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookInput)(nil)).Elem(), ContactPointWebhookArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookArrayInput)(nil)).Elem(), ContactPointWebhookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHmacConfigInput)(nil)).Elem(), ContactPointWebhookHmacConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHmacConfigPtrInput)(nil)).Elem(), ContactPointWebhookHmacConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigInput)(nil)).Elem(), ContactPointWebhookHttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigPtrInput)(nil)).Elem(), ContactPointWebhookHttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2Input)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2PtrInput)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2ProxyConfigInput)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2ProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2ProxyConfigPtrInput)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2ProxyConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2TlsConfigInput)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2TlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookHttpConfigOauth2TlsConfigPtrInput)(nil)).Elem(), ContactPointWebhookHttpConfigOauth2TlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookPayloadInput)(nil)).Elem(), ContactPointWebhookPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWebhookPayloadPtrInput)(nil)).Elem(), ContactPointWebhookPayloadArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomInput)(nil)).Elem(), ContactPointWecomArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactPointWecomArrayInput)(nil)).Elem(), ContactPointWecomArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalInput)(nil)).Elem(), MuteTimingIntervalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalArrayInput)(nil)).Elem(), MuteTimingIntervalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeInput)(nil)).Elem(), MuteTimingIntervalTimeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MuteTimingIntervalTimeArrayInput)(nil)).Elem(), MuteTimingIntervalTimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayInput)(nil)).Elem(), NotificationPolicyPolicyPolicyPolicyPolicyMatcherArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleInput)(nil)).Elem(), RuleGroupRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleArrayInput)(nil)).Elem(), RuleGroupRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataInput)(nil)).Elem(), RuleGroupRuleDataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataArrayInput)(nil)).Elem(), RuleGroupRuleDataArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleDataRelativeTimeRangeInput)(nil)).Elem(), RuleGroupRuleDataRelativeTimeRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleNotificationSettingsInput)(nil)).Elem(), RuleGroupRuleNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleNotificationSettingsPtrInput)(nil)).Elem(), RuleGroupRuleNotificationSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleRecordInput)(nil)).Elem(), RuleGroupRuleRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleGroupRuleRecordPtrInput)(nil)).Elem(), RuleGroupRuleRecordArgs{})
	pulumi.RegisterOutputType(AlertEnrichmentMetadataOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentMetadataPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentOptionsOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentOptionsPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecAnnotationMatcherOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecAnnotationMatcherArrayOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecLabelMatcherOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecLabelMatcherArrayOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepArrayOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssertsOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssertsPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssignOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssignPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssistantInvestigationsOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepAssistantInvestigationsPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourceOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourcePtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourceLogsQueryOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourceLogsQueryPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourceRawQueryOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepDataSourceRawQueryPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepExplainOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepExplainPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepExternalOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepExternalPtrOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepSiftOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentSpecStepSiftPtrOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerOutput{})
	pulumi.RegisterOutputType(ContactPointAlertmanagerArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingOutput{})
	pulumi.RegisterOutputType(ContactPointDingdingArrayOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordOutput{})
	pulumi.RegisterOutputType(ContactPointDiscordArrayOutput{})
	pulumi.RegisterOutputType(ContactPointEmailOutput{})
	pulumi.RegisterOutputType(ContactPointEmailArrayOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatOutput{})
	pulumi.RegisterOutputType(ContactPointGooglechatArrayOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaOutput{})
	pulumi.RegisterOutputType(ContactPointKafkaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointLineOutput{})
	pulumi.RegisterOutputType(ContactPointLineArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOncallOutput{})
	pulumi.RegisterOutputType(ContactPointOncallArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyResponderOutput{})
	pulumi.RegisterOutputType(ContactPointOpsgenyResponderArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyOutput{})
	pulumi.RegisterOutputType(ContactPointPagerdutyArrayOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverOutput{})
	pulumi.RegisterOutputType(ContactPointPushoverArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoOutput{})
	pulumi.RegisterOutputType(ContactPointSensugoArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSlackOutput{})
	pulumi.RegisterOutputType(ContactPointSlackArrayOutput{})
	pulumi.RegisterOutputType(ContactPointSnOutput{})
	pulumi.RegisterOutputType(ContactPointSnArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTeamOutput{})
	pulumi.RegisterOutputType(ContactPointTeamArrayOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramOutput{})
	pulumi.RegisterOutputType(ContactPointTelegramArrayOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaOutput{})
	pulumi.RegisterOutputType(ContactPointThreemaArrayOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropOutput{})
	pulumi.RegisterOutputType(ContactPointVictoropArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebexOutput{})
	pulumi.RegisterOutputType(ContactPointWebexArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookArrayOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHmacConfigOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHmacConfigPtrOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2Output{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2PtrOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2ProxyConfigOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2ProxyConfigPtrOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2TlsConfigOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookHttpConfigOauth2TlsConfigPtrOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookPayloadOutput{})
	pulumi.RegisterOutputType(ContactPointWebhookPayloadPtrOutput{})
	pulumi.RegisterOutputType(ContactPointWecomOutput{})
	pulumi.RegisterOutputType(ContactPointWecomArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalArrayOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeOutput{})
	pulumi.RegisterOutputType(MuteTimingIntervalTimeArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherOutput{})
	pulumi.RegisterOutputType(NotificationPolicyPolicyPolicyPolicyPolicyMatcherArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataArrayOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleDataRelativeTimeRangeOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleNotificationSettingsOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleNotificationSettingsPtrOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleRecordOutput{})
	pulumi.RegisterOutputType(RuleGroupRuleRecordPtrOutput{})
}
