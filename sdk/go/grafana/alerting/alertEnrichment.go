// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package alerting

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/v2/go/grafana/internal"
)

// This resource is currently under development. Documentation will be provided in a future release.
type AlertEnrichment struct {
	pulumi.CustomResourceState

	// The metadata of the resource.
	Metadata AlertEnrichmentMetadataPtrOutput `pulumi:"metadata"`
	// Options for applying the resource.
	Options AlertEnrichmentOptionsPtrOutput `pulumi:"options"`
	// The spec of the resource.
	Spec AlertEnrichmentSpecPtrOutput `pulumi:"spec"`
}

// NewAlertEnrichment registers a new resource with the given unique name, arguments, and options.
func NewAlertEnrichment(ctx *pulumi.Context,
	name string, args *AlertEnrichmentArgs, opts ...pulumi.ResourceOption) (*AlertEnrichment, error) {
	if args == nil {
		args = &AlertEnrichmentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlertEnrichment
	err := ctx.RegisterResource("grafana:alerting/alertEnrichment:AlertEnrichment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertEnrichment gets an existing AlertEnrichment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertEnrichment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertEnrichmentState, opts ...pulumi.ResourceOption) (*AlertEnrichment, error) {
	var resource AlertEnrichment
	err := ctx.ReadResource("grafana:alerting/alertEnrichment:AlertEnrichment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertEnrichment resources.
type alertEnrichmentState struct {
	// The metadata of the resource.
	Metadata *AlertEnrichmentMetadata `pulumi:"metadata"`
	// Options for applying the resource.
	Options *AlertEnrichmentOptions `pulumi:"options"`
	// The spec of the resource.
	Spec *AlertEnrichmentSpec `pulumi:"spec"`
}

type AlertEnrichmentState struct {
	// The metadata of the resource.
	Metadata AlertEnrichmentMetadataPtrInput
	// Options for applying the resource.
	Options AlertEnrichmentOptionsPtrInput
	// The spec of the resource.
	Spec AlertEnrichmentSpecPtrInput
}

func (AlertEnrichmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEnrichmentState)(nil)).Elem()
}

type alertEnrichmentArgs struct {
	// The metadata of the resource.
	Metadata *AlertEnrichmentMetadata `pulumi:"metadata"`
	// Options for applying the resource.
	Options *AlertEnrichmentOptions `pulumi:"options"`
	// The spec of the resource.
	Spec *AlertEnrichmentSpec `pulumi:"spec"`
}

// The set of arguments for constructing a AlertEnrichment resource.
type AlertEnrichmentArgs struct {
	// The metadata of the resource.
	Metadata AlertEnrichmentMetadataPtrInput
	// Options for applying the resource.
	Options AlertEnrichmentOptionsPtrInput
	// The spec of the resource.
	Spec AlertEnrichmentSpecPtrInput
}

func (AlertEnrichmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertEnrichmentArgs)(nil)).Elem()
}

type AlertEnrichmentInput interface {
	pulumi.Input

	ToAlertEnrichmentOutput() AlertEnrichmentOutput
	ToAlertEnrichmentOutputWithContext(ctx context.Context) AlertEnrichmentOutput
}

func (*AlertEnrichment) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichment)(nil)).Elem()
}

func (i *AlertEnrichment) ToAlertEnrichmentOutput() AlertEnrichmentOutput {
	return i.ToAlertEnrichmentOutputWithContext(context.Background())
}

func (i *AlertEnrichment) ToAlertEnrichmentOutputWithContext(ctx context.Context) AlertEnrichmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentOutput)
}

// AlertEnrichmentArrayInput is an input type that accepts AlertEnrichmentArray and AlertEnrichmentArrayOutput values.
// You can construct a concrete instance of `AlertEnrichmentArrayInput` via:
//
//	AlertEnrichmentArray{ AlertEnrichmentArgs{...} }
type AlertEnrichmentArrayInput interface {
	pulumi.Input

	ToAlertEnrichmentArrayOutput() AlertEnrichmentArrayOutput
	ToAlertEnrichmentArrayOutputWithContext(context.Context) AlertEnrichmentArrayOutput
}

type AlertEnrichmentArray []AlertEnrichmentInput

func (AlertEnrichmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertEnrichment)(nil)).Elem()
}

func (i AlertEnrichmentArray) ToAlertEnrichmentArrayOutput() AlertEnrichmentArrayOutput {
	return i.ToAlertEnrichmentArrayOutputWithContext(context.Background())
}

func (i AlertEnrichmentArray) ToAlertEnrichmentArrayOutputWithContext(ctx context.Context) AlertEnrichmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentArrayOutput)
}

// AlertEnrichmentMapInput is an input type that accepts AlertEnrichmentMap and AlertEnrichmentMapOutput values.
// You can construct a concrete instance of `AlertEnrichmentMapInput` via:
//
//	AlertEnrichmentMap{ "key": AlertEnrichmentArgs{...} }
type AlertEnrichmentMapInput interface {
	pulumi.Input

	ToAlertEnrichmentMapOutput() AlertEnrichmentMapOutput
	ToAlertEnrichmentMapOutputWithContext(context.Context) AlertEnrichmentMapOutput
}

type AlertEnrichmentMap map[string]AlertEnrichmentInput

func (AlertEnrichmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertEnrichment)(nil)).Elem()
}

func (i AlertEnrichmentMap) ToAlertEnrichmentMapOutput() AlertEnrichmentMapOutput {
	return i.ToAlertEnrichmentMapOutputWithContext(context.Background())
}

func (i AlertEnrichmentMap) ToAlertEnrichmentMapOutputWithContext(ctx context.Context) AlertEnrichmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertEnrichmentMapOutput)
}

type AlertEnrichmentOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertEnrichment)(nil)).Elem()
}

func (o AlertEnrichmentOutput) ToAlertEnrichmentOutput() AlertEnrichmentOutput {
	return o
}

func (o AlertEnrichmentOutput) ToAlertEnrichmentOutputWithContext(ctx context.Context) AlertEnrichmentOutput {
	return o
}

// The metadata of the resource.
func (o AlertEnrichmentOutput) Metadata() AlertEnrichmentMetadataPtrOutput {
	return o.ApplyT(func(v *AlertEnrichment) AlertEnrichmentMetadataPtrOutput { return v.Metadata }).(AlertEnrichmentMetadataPtrOutput)
}

// Options for applying the resource.
func (o AlertEnrichmentOutput) Options() AlertEnrichmentOptionsPtrOutput {
	return o.ApplyT(func(v *AlertEnrichment) AlertEnrichmentOptionsPtrOutput { return v.Options }).(AlertEnrichmentOptionsPtrOutput)
}

// The spec of the resource.
func (o AlertEnrichmentOutput) Spec() AlertEnrichmentSpecPtrOutput {
	return o.ApplyT(func(v *AlertEnrichment) AlertEnrichmentSpecPtrOutput { return v.Spec }).(AlertEnrichmentSpecPtrOutput)
}

type AlertEnrichmentArrayOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertEnrichment)(nil)).Elem()
}

func (o AlertEnrichmentArrayOutput) ToAlertEnrichmentArrayOutput() AlertEnrichmentArrayOutput {
	return o
}

func (o AlertEnrichmentArrayOutput) ToAlertEnrichmentArrayOutputWithContext(ctx context.Context) AlertEnrichmentArrayOutput {
	return o
}

func (o AlertEnrichmentArrayOutput) Index(i pulumi.IntInput) AlertEnrichmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertEnrichment {
		return vs[0].([]*AlertEnrichment)[vs[1].(int)]
	}).(AlertEnrichmentOutput)
}

type AlertEnrichmentMapOutput struct{ *pulumi.OutputState }

func (AlertEnrichmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertEnrichment)(nil)).Elem()
}

func (o AlertEnrichmentMapOutput) ToAlertEnrichmentMapOutput() AlertEnrichmentMapOutput {
	return o
}

func (o AlertEnrichmentMapOutput) ToAlertEnrichmentMapOutputWithContext(ctx context.Context) AlertEnrichmentMapOutput {
	return o
}

func (o AlertEnrichmentMapOutput) MapIndex(k pulumi.StringInput) AlertEnrichmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertEnrichment {
		return vs[0].(map[string]*AlertEnrichment)[vs[1].(string)]
	}).(AlertEnrichmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentInput)(nil)).Elem(), &AlertEnrichment{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentArrayInput)(nil)).Elem(), AlertEnrichmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertEnrichmentMapInput)(nil)).Elem(), AlertEnrichmentMap{})
	pulumi.RegisterOutputType(AlertEnrichmentOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentArrayOutput{})
	pulumi.RegisterOutputType(AlertEnrichmentMapOutput{})
}
