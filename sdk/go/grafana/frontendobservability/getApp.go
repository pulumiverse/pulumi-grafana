// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package frontendobservability

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

// ## Example Usage
func LookupApp(ctx *pulumi.Context, args *LookupAppArgs, opts ...pulumi.InvokeOption) (*LookupAppResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAppResult
	err := ctx.Invoke("grafana:frontendObservability/getApp:getApp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApp.
type LookupAppArgs struct {
	Name    string `pulumi:"name"`
	StackId int    `pulumi:"stackId"`
}

// A collection of values returned by getApp.
type LookupAppResult struct {
	// A list of allowed origins for CORS.
	AllowedOrigins []string `pulumi:"allowedOrigins"`
	// The collector URL Grafana Cloud Frontend Observability. Use this endpoint to send your Telemetry.
	CollectorEndpoint string `pulumi:"collectorEndpoint"`
	// The extra attributes to append in each signal.
	ExtraLogAttributes map[string]string `pulumi:"extraLogAttributes"`
	Id                 int               `pulumi:"id"`
	Name               string            `pulumi:"name"`
	// The settings of the Frontend Observability App.
	Settings map[string]string `pulumi:"settings"`
	StackId  int               `pulumi:"stackId"`
}

func LookupAppOutput(ctx *pulumi.Context, args LookupAppOutputArgs, opts ...pulumi.InvokeOption) LookupAppResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupAppResultOutput, error) {
			args := v.(LookupAppArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("grafana:frontendObservability/getApp:getApp", args, LookupAppResultOutput{}, options).(LookupAppResultOutput), nil
		}).(LookupAppResultOutput)
}

// A collection of arguments for invoking getApp.
type LookupAppOutputArgs struct {
	Name    pulumi.StringInput `pulumi:"name"`
	StackId pulumi.IntInput    `pulumi:"stackId"`
}

func (LookupAppOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppArgs)(nil)).Elem()
}

// A collection of values returned by getApp.
type LookupAppResultOutput struct{ *pulumi.OutputState }

func (LookupAppResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAppResult)(nil)).Elem()
}

func (o LookupAppResultOutput) ToLookupAppResultOutput() LookupAppResultOutput {
	return o
}

func (o LookupAppResultOutput) ToLookupAppResultOutputWithContext(ctx context.Context) LookupAppResultOutput {
	return o
}

// A list of allowed origins for CORS.
func (o LookupAppResultOutput) AllowedOrigins() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAppResult) []string { return v.AllowedOrigins }).(pulumi.StringArrayOutput)
}

// The collector URL Grafana Cloud Frontend Observability. Use this endpoint to send your Telemetry.
func (o LookupAppResultOutput) CollectorEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppResult) string { return v.CollectorEndpoint }).(pulumi.StringOutput)
}

// The extra attributes to append in each signal.
func (o LookupAppResultOutput) ExtraLogAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAppResult) map[string]string { return v.ExtraLogAttributes }).(pulumi.StringMapOutput)
}

func (o LookupAppResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAppResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupAppResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAppResult) string { return v.Name }).(pulumi.StringOutput)
}

// The settings of the Frontend Observability App.
func (o LookupAppResultOutput) Settings() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupAppResult) map[string]string { return v.Settings }).(pulumi.StringMapOutput)
}

func (o LookupAppResultOutput) StackId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupAppResult) int { return v.StackId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAppResultOutput{})
}
