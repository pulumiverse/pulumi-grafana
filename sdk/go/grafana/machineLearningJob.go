// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package grafana

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-grafana/sdk/go/grafana/internal"
)

type MachineLearningJob struct {
	pulumi.CustomResourceState

	// An object representing the custom labels added on the forecast.
	CustomLabels pulumi.MapOutput `pulumi:"customLabels"`
	// The id of the datasource to query.
	//
	// Deprecated: Use datasourceUid instead.
	DatasourceId pulumi.IntPtrOutput `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringOutput `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringPtrOutput `pulumi:"datasourceUid"`
	// A description of the job.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumi.StringArrayOutput `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
	// for the full list of available hyperparameters.
	HyperParams pulumi.MapOutput `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on.
	Interval pulumi.IntPtrOutput `pulumi:"interval"`
	// The metric used to query the job results.
	Metric pulumi.StringOutput `pulumi:"metric"`
	// The name of the job.
	Name pulumi.StringOutput `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.MapOutput `pulumi:"queryParams"`
	// The data interval in seconds to train the data on.
	TrainingWindow pulumi.IntPtrOutput `pulumi:"trainingWindow"`
}

// NewMachineLearningJob registers a new resource with the given unique name, arguments, and options.
func NewMachineLearningJob(ctx *pulumi.Context,
	name string, args *MachineLearningJobArgs, opts ...pulumi.ResourceOption) (*MachineLearningJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatasourceType == nil {
		return nil, errors.New("invalid value for required argument 'DatasourceType'")
	}
	if args.Metric == nil {
		return nil, errors.New("invalid value for required argument 'Metric'")
	}
	if args.QueryParams == nil {
		return nil, errors.New("invalid value for required argument 'QueryParams'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MachineLearningJob
	err := ctx.RegisterResource("grafana:index/machineLearningJob:MachineLearningJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineLearningJob gets an existing MachineLearningJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineLearningJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineLearningJobState, opts ...pulumi.ResourceOption) (*MachineLearningJob, error) {
	var resource MachineLearningJob
	err := ctx.ReadResource("grafana:index/machineLearningJob:MachineLearningJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineLearningJob resources.
type machineLearningJobState struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels map[string]interface{} `pulumi:"customLabels"`
	// The id of the datasource to query.
	//
	// Deprecated: Use datasourceUid instead.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType *string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the job.
	Description *string `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays []string `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
	// for the full list of available hyperparameters.
	HyperParams map[string]interface{} `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on.
	Interval *int `pulumi:"interval"`
	// The metric used to query the job results.
	Metric *string `pulumi:"metric"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
	// The data interval in seconds to train the data on.
	TrainingWindow *int `pulumi:"trainingWindow"`
}

type MachineLearningJobState struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels pulumi.MapInput
	// The id of the datasource to query.
	//
	// Deprecated: Use datasourceUid instead.
	DatasourceId pulumi.IntPtrInput
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringPtrInput
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringPtrInput
	// A description of the job.
	Description pulumi.StringPtrInput
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumi.StringArrayInput
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
	// for the full list of available hyperparameters.
	HyperParams pulumi.MapInput
	// The data interval in seconds to train the data on.
	Interval pulumi.IntPtrInput
	// The metric used to query the job results.
	Metric pulumi.StringPtrInput
	// The name of the job.
	Name pulumi.StringPtrInput
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.MapInput
	// The data interval in seconds to train the data on.
	TrainingWindow pulumi.IntPtrInput
}

func (MachineLearningJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningJobState)(nil)).Elem()
}

type machineLearningJobArgs struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels map[string]interface{} `pulumi:"customLabels"`
	// The id of the datasource to query.
	//
	// Deprecated: Use datasourceUid instead.
	DatasourceId *int `pulumi:"datasourceId"`
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType string `pulumi:"datasourceType"`
	// The uid of the datasource to query.
	DatasourceUid *string `pulumi:"datasourceUid"`
	// A description of the job.
	Description *string `pulumi:"description"`
	// A list of holiday IDs or names to take into account when training the model.
	Holidays []string `pulumi:"holidays"`
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
	// for the full list of available hyperparameters.
	HyperParams map[string]interface{} `pulumi:"hyperParams"`
	// The data interval in seconds to train the data on.
	Interval *int `pulumi:"interval"`
	// The metric used to query the job results.
	Metric string `pulumi:"metric"`
	// The name of the job.
	Name *string `pulumi:"name"`
	// An object representing the query params to query Grafana with.
	QueryParams map[string]interface{} `pulumi:"queryParams"`
	// The data interval in seconds to train the data on.
	TrainingWindow *int `pulumi:"trainingWindow"`
}

// The set of arguments for constructing a MachineLearningJob resource.
type MachineLearningJobArgs struct {
	// An object representing the custom labels added on the forecast.
	CustomLabels pulumi.MapInput
	// The id of the datasource to query.
	//
	// Deprecated: Use datasourceUid instead.
	DatasourceId pulumi.IntPtrInput
	// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
	DatasourceType pulumi.StringInput
	// The uid of the datasource to query.
	DatasourceUid pulumi.StringPtrInput
	// A description of the job.
	Description pulumi.StringPtrInput
	// A list of holiday IDs or names to take into account when training the model.
	Holidays pulumi.StringArrayInput
	// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
	// for the full list of available hyperparameters.
	HyperParams pulumi.MapInput
	// The data interval in seconds to train the data on.
	Interval pulumi.IntPtrInput
	// The metric used to query the job results.
	Metric pulumi.StringInput
	// The name of the job.
	Name pulumi.StringPtrInput
	// An object representing the query params to query Grafana with.
	QueryParams pulumi.MapInput
	// The data interval in seconds to train the data on.
	TrainingWindow pulumi.IntPtrInput
}

func (MachineLearningJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningJobArgs)(nil)).Elem()
}

type MachineLearningJobInput interface {
	pulumi.Input

	ToMachineLearningJobOutput() MachineLearningJobOutput
	ToMachineLearningJobOutputWithContext(ctx context.Context) MachineLearningJobOutput
}

func (*MachineLearningJob) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningJob)(nil)).Elem()
}

func (i *MachineLearningJob) ToMachineLearningJobOutput() MachineLearningJobOutput {
	return i.ToMachineLearningJobOutputWithContext(context.Background())
}

func (i *MachineLearningJob) ToMachineLearningJobOutputWithContext(ctx context.Context) MachineLearningJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningJobOutput)
}

// MachineLearningJobArrayInput is an input type that accepts MachineLearningJobArray and MachineLearningJobArrayOutput values.
// You can construct a concrete instance of `MachineLearningJobArrayInput` via:
//
//	MachineLearningJobArray{ MachineLearningJobArgs{...} }
type MachineLearningJobArrayInput interface {
	pulumi.Input

	ToMachineLearningJobArrayOutput() MachineLearningJobArrayOutput
	ToMachineLearningJobArrayOutputWithContext(context.Context) MachineLearningJobArrayOutput
}

type MachineLearningJobArray []MachineLearningJobInput

func (MachineLearningJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineLearningJob)(nil)).Elem()
}

func (i MachineLearningJobArray) ToMachineLearningJobArrayOutput() MachineLearningJobArrayOutput {
	return i.ToMachineLearningJobArrayOutputWithContext(context.Background())
}

func (i MachineLearningJobArray) ToMachineLearningJobArrayOutputWithContext(ctx context.Context) MachineLearningJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningJobArrayOutput)
}

// MachineLearningJobMapInput is an input type that accepts MachineLearningJobMap and MachineLearningJobMapOutput values.
// You can construct a concrete instance of `MachineLearningJobMapInput` via:
//
//	MachineLearningJobMap{ "key": MachineLearningJobArgs{...} }
type MachineLearningJobMapInput interface {
	pulumi.Input

	ToMachineLearningJobMapOutput() MachineLearningJobMapOutput
	ToMachineLearningJobMapOutputWithContext(context.Context) MachineLearningJobMapOutput
}

type MachineLearningJobMap map[string]MachineLearningJobInput

func (MachineLearningJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineLearningJob)(nil)).Elem()
}

func (i MachineLearningJobMap) ToMachineLearningJobMapOutput() MachineLearningJobMapOutput {
	return i.ToMachineLearningJobMapOutputWithContext(context.Background())
}

func (i MachineLearningJobMap) ToMachineLearningJobMapOutputWithContext(ctx context.Context) MachineLearningJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MachineLearningJobMapOutput)
}

type MachineLearningJobOutput struct{ *pulumi.OutputState }

func (MachineLearningJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MachineLearningJob)(nil)).Elem()
}

func (o MachineLearningJobOutput) ToMachineLearningJobOutput() MachineLearningJobOutput {
	return o
}

func (o MachineLearningJobOutput) ToMachineLearningJobOutputWithContext(ctx context.Context) MachineLearningJobOutput {
	return o
}

// An object representing the custom labels added on the forecast.
func (o MachineLearningJobOutput) CustomLabels() pulumi.MapOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.MapOutput { return v.CustomLabels }).(pulumi.MapOutput)
}

// The id of the datasource to query.
//
// Deprecated: Use datasourceUid instead.
func (o MachineLearningJobOutput) DatasourceId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.IntPtrOutput { return v.DatasourceId }).(pulumi.IntPtrOutput)
}

// The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.
func (o MachineLearningJobOutput) DatasourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringOutput { return v.DatasourceType }).(pulumi.StringOutput)
}

// The uid of the datasource to query.
func (o MachineLearningJobOutput) DatasourceUid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringPtrOutput { return v.DatasourceUid }).(pulumi.StringPtrOutput)
}

// A description of the job.
func (o MachineLearningJobOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A list of holiday IDs or names to take into account when training the model.
func (o MachineLearningJobOutput) Holidays() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringArrayOutput { return v.Holidays }).(pulumi.StringArrayOutput)
}

// The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/
// for the full list of available hyperparameters.
func (o MachineLearningJobOutput) HyperParams() pulumi.MapOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.MapOutput { return v.HyperParams }).(pulumi.MapOutput)
}

// The data interval in seconds to train the data on.
func (o MachineLearningJobOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.IntPtrOutput { return v.Interval }).(pulumi.IntPtrOutput)
}

// The metric used to query the job results.
func (o MachineLearningJobOutput) Metric() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringOutput { return v.Metric }).(pulumi.StringOutput)
}

// The name of the job.
func (o MachineLearningJobOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// An object representing the query params to query Grafana with.
func (o MachineLearningJobOutput) QueryParams() pulumi.MapOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.MapOutput { return v.QueryParams }).(pulumi.MapOutput)
}

// The data interval in seconds to train the data on.
func (o MachineLearningJobOutput) TrainingWindow() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MachineLearningJob) pulumi.IntPtrOutput { return v.TrainingWindow }).(pulumi.IntPtrOutput)
}

type MachineLearningJobArrayOutput struct{ *pulumi.OutputState }

func (MachineLearningJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MachineLearningJob)(nil)).Elem()
}

func (o MachineLearningJobArrayOutput) ToMachineLearningJobArrayOutput() MachineLearningJobArrayOutput {
	return o
}

func (o MachineLearningJobArrayOutput) ToMachineLearningJobArrayOutputWithContext(ctx context.Context) MachineLearningJobArrayOutput {
	return o
}

func (o MachineLearningJobArrayOutput) Index(i pulumi.IntInput) MachineLearningJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MachineLearningJob {
		return vs[0].([]*MachineLearningJob)[vs[1].(int)]
	}).(MachineLearningJobOutput)
}

type MachineLearningJobMapOutput struct{ *pulumi.OutputState }

func (MachineLearningJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MachineLearningJob)(nil)).Elem()
}

func (o MachineLearningJobMapOutput) ToMachineLearningJobMapOutput() MachineLearningJobMapOutput {
	return o
}

func (o MachineLearningJobMapOutput) ToMachineLearningJobMapOutputWithContext(ctx context.Context) MachineLearningJobMapOutput {
	return o
}

func (o MachineLearningJobMapOutput) MapIndex(k pulumi.StringInput) MachineLearningJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MachineLearningJob {
		return vs[0].(map[string]*MachineLearningJob)[vs[1].(string)]
	}).(MachineLearningJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningJobInput)(nil)).Elem(), &MachineLearningJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningJobArrayInput)(nil)).Elem(), MachineLearningJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MachineLearningJobMapInput)(nil)).Elem(), MachineLearningJobMap{})
	pulumi.RegisterOutputType(MachineLearningJobOutput{})
	pulumi.RegisterOutputType(MachineLearningJobArrayOutput{})
	pulumi.RegisterOutputType(MachineLearningJobMapOutput{})
}
