{
    "name": "grafana",
    "displayName": "Grafana",
    "description": "A Pulumi package for creating and managing grafana.",
    "keywords": [
        "pulumi",
        "grafana",
        "pulumiverse"
    ],
    "homepage": "https://grafana.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`grafana` Terraform Provider](https://github.com/grafana/terraform-provider-grafana).",
    "repository": "https://github.com/pulumiverse/pulumi-grafana",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-grafana/main/assets/grafana.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-grafana/sdk/go/grafana",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/grafana",
            "packageDescription": "A Pulumi package for creating and managing grafana.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/grafana/terraform-provider-grafana)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-grafana` repo](https://github.com/pulumiverse/pulumi-grafana/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-grafana` repo](https://github.com/grafana/terraform-provider-grafana/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_grafana",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/grafana/terraform-provider-grafana)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-grafana` repo](https://github.com/pulumiverse/pulumi-grafana/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-grafana` repo](https://github.com/grafana/terraform-provider-grafana/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "auth": {
                "type": "string",
                "description": "API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via\nthe `GRAFANA_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_AUTH"
                    ]
                },
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively\nbe set via the `GRAFANA_CA_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CA_CERT"
                    ]
                }
            },
            "cloudAccessPolicyToken": {
                "type": "string",
                "description": "Access Policy Token for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_ACCESS_POLICY_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "cloudApiKey": {
                "type": "string",
                "description": "Deprecated: Use `cloud_access_policy_token` instead.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_KEY"
                    ]
                },
                "deprecationMessage": "Use `cloud_access_policy_token` instead.",
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_URL"
                    ]
                }
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_INSECURE_SKIP_VERIFY"
                    ]
                }
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_URL"
                    ]
                }
            },
            "orgId": {
                "type": "integer",
                "description": "Deprecated: Use the `org_id` attributes on resources instead.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ORG_ID"
                    ]
                },
                "deprecationMessage": "Use the `org_id` attributes on resources instead."
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the\n`GRAFANA_RETRIES` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_RETRIES"
                    ]
                }
            },
            "retryStatusCodes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429\nand 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.\n"
            },
            "retryWait": {
                "type": "integer",
                "description": "The amount of time in seconds to wait between retries for Grafana API and Grafana Cloud API calls. May alternatively be\nset via the `GRAFANA_RETRY_WAIT` environment variable.\n"
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "smUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_URL"
                    ]
                }
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_STORE_DASHBOARD_SHA256"
                    ]
                }
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be\nset via the `GRAFANA_TLS_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_CERT"
                    ]
                }
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via\nthe `GRAFANA_TLS_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_KEY"
                    ]
                },
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_URL"
                    ]
                }
            }
        }
    },
    "types": {
        "grafana:index/CloudAccessPolicyRealm:CloudAccessPolicyRealm": {
            "properties": {
                "identifier": {
                    "type": "string",
                    "description": "The identifier of the org or stack. For orgs, this is the slug, for stacks, this is the stack ID.\n"
                },
                "labelPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/CloudAccessPolicyRealmLabelPolicy:CloudAccessPolicyRealmLabelPolicy"
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Whether a policy applies to a Cloud org or a specific stack. Should be one of `org` or `stack`.\n"
                }
            },
            "type": "object",
            "required": [
                "identifier",
                "type"
            ]
        },
        "grafana:index/CloudAccessPolicyRealmLabelPolicy:CloudAccessPolicyRealmLabelPolicy": {
            "properties": {
                "selector": {
                    "type": "string",
                    "description": "The label selector to match in metrics or logs query. Should be in PromQL or LogQL format.\n"
                }
            },
            "type": "object",
            "required": [
                "selector"
            ]
        },
        "grafana:index/ContactPointAlertmanager:ContactPointAlertmanager": {
            "properties": {
                "basicAuthPassword": {
                    "type": "string",
                    "description": "The password component of the basic auth credentials to use.\n",
                    "secret": true
                },
                "basicAuthUser": {
                    "type": "string",
                    "description": "The username component of the basic auth credentials to use.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the Alertmanager instance.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointDingding:ContactPointDingding": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "The format of message to send - either 'link' or 'actionCard'\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The DingDing webhook URL.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointDiscord:ContactPointDiscord": {
            "properties": {
                "avatarUrl": {
                    "type": "string",
                    "description": "The URL of a custom avatar image to use.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated content of the title.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The discord webhook URL.\n",
                    "secret": true
                },
                "useDiscordUsername": {
                    "type": "boolean",
                    "description": "Whether to use the bot account's plain username instead of \"Grafana.\"\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointEmail:ContactPointEmail": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The addresses to send emails to.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the email.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "singleEmail": {
                    "type": "boolean",
                    "description": "Whether to send a single email CC'ing all addresses, rather than a separate email to each address.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The templated subject line of the email.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "addresses"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addresses",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointGooglechat:ContactPointGooglechat": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated content of the title.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The Google Chat webhook URL.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointKafka:ContactPointKafka": {
            "properties": {
                "apiVersion": {
                    "type": "string",
                    "description": "The API version to use when contacting the Kafka REST Server. Supported: v2 (default) and v3.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The Id of cluster to use when contacting the Kafka REST Server. Required api_version to be 'v3'\n"
                },
                "description": {
                    "type": "string",
                    "description": "The templated description of the Kafka message.\n"
                },
                "details": {
                    "type": "string",
                    "description": "The templated details to include with the message.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password to use when making a call to the Kafka REST Proxy\n",
                    "secret": true
                },
                "restProxyUrl": {
                    "type": "string",
                    "description": "The URL of the Kafka REST proxy to send requests to.\n",
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "topic": {
                    "type": "string",
                    "description": "The name of the Kafka topic to publish to.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The user name to use when making a call to the Kafka REST Proxy\n"
                }
            },
            "type": "object",
            "required": [
                "restProxyUrl",
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "restProxyUrl",
                        "topic",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointLine:ContactPointLine": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The templated description of the message.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n"
                },
                "token": {
                    "type": "string",
                    "description": "The bearer token used to authorize the client.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "token",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointOncall:ContactPointOncall": {
            "properties": {
                "authorizationCredentials": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.\n",
                    "secret": true
                },
                "authorizationScheme": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.\n"
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n",
                    "secret": true
                },
                "basicAuthUser": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method to use in the request. Defaults to `POST`.\n"
                },
                "maxAlerts": {
                    "type": "integer",
                    "description": "The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Custom message. You can use template variables.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "Templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to send webhook requests to.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointOpsgeny:ContactPointOpsgeny": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The OpsGenie API key to use.\n",
                    "secret": true
                },
                "autoClose": {
                    "type": "boolean",
                    "description": "Whether to auto-close alerts in OpsGenie when they resolve in the Alertmanager.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A templated high-level description to use for the alert.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n"
                },
                "overridePriority": {
                    "type": "boolean",
                    "description": "Whether to allow the alert priority to be configured via the value of the `og_priority` annotation on the alert.\n"
                },
                "responders": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOpsgenyResponder:ContactPointOpsgenyResponder"
                    },
                    "description": "Teams, users, escalations and schedules that the alert will be routed to send notifications. If the API Key belongs to a team integration, this field will be overwritten with the owner team. This feature is available from Grafana 10.3+.\n"
                },
                "sendTagsAs": {
                    "type": "string",
                    "description": "Whether to send annotations to OpsGenie as Tags, Details, or both. Supported values are `tags`, `details`, `both`, or empty to use the default behavior of Tags.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Allows customization of the OpsGenie API URL.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointOpsgenyResponder:ContactPointOpsgenyResponder": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the responder. Must be specified if name and username are empty.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the responder. Must be specified if username and id are empty.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the responder. Supported: team, teams, user, escalation, schedule or a template that is expanded to one of these values.\n"
                },
                "username": {
                    "type": "string",
                    "description": "User name of the responder. Must be specified if name and id are empty.\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "grafana:index/ContactPointPagerduty:ContactPointPagerduty": {
            "properties": {
                "class": {
                    "type": "string",
                    "description": "The class or type of event, for example `ping failure`.\n"
                },
                "client": {
                    "type": "string",
                    "description": "The name of the monitoring client that is triggering this event.\n"
                },
                "clientUrl": {
                    "type": "string",
                    "description": "The URL of the monitoring client that is triggering this event.\n"
                },
                "component": {
                    "type": "string",
                    "description": "The component being affected by the event.\n"
                },
                "details": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A set of arbitrary key/value pairs that provide further detail about the incident.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "group": {
                    "type": "string",
                    "description": "The group to which the provided component belongs to.\n"
                },
                "integrationKey": {
                    "type": "string",
                    "description": "The PagerDuty API key.\n",
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "severity": {
                    "type": "string",
                    "description": "The PagerDuty event severity level. Default is `critical`.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The unique location of the affected system.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The templated summary message of the event.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "integrationKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "integrationKey",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointPushover:ContactPointPushover": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "The Pushover API token.\n",
                    "secret": true
                },
                "device": {
                    "type": "string",
                    "description": "Comma-separated list of devices to which the event is associated.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "How many seconds for which the notification will continue to be retried by Pushover.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated notification message content.\n"
                },
                "okPriority": {
                    "type": "integer",
                    "description": "The priority level of the resolved event.\n"
                },
                "okSound": {
                    "type": "string",
                    "description": "The sound associated with the resolved notification.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "The priority level of the event.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "How often, in seconds, the Pushover servers will send the same notification to the user.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "sound": {
                    "type": "string",
                    "description": "The sound associated with the notification.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "uploadImage": {
                    "type": "boolean",
                    "description": "Whether to send images in the notification or not. Default is true. Requires Grafana to be configured to send images in notifications.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "The Pushover user key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "userKey"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiToken",
                        "uid",
                        "userKey"
                    ]
                }
            }
        },
        "grafana:index/ContactPointSensugo:ContactPointSensugo": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "The SensuGo API key.\n",
                    "secret": true
                },
                "check": {
                    "type": "string",
                    "description": "The SensuGo check to which the event should be routed.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "entity": {
                    "type": "string",
                    "description": "The entity being monitored.\n"
                },
                "handler": {
                    "type": "string",
                    "description": "A custom handler to execute in addition to the check.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Templated message content describing the alert.\n"
                },
                "namespace": {
                    "type": "string",
                    "description": "The namespace in which the check resides.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The SensuGo URL to send requests to.\n"
                }
            },
            "type": "object",
            "required": [
                "apiKey",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiKey",
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointSlack:ContactPointSlack": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "endpointUrl": {
                    "type": "string",
                    "description": "Use this to override the Slack API endpoint URL to send requests to.\n"
                },
                "iconEmoji": {
                    "type": "string",
                    "description": "The name of a Slack workspace emoji to use as the bot icon.\n"
                },
                "iconUrl": {
                    "type": "string",
                    "description": "A URL of an image to use as the bot icon.\n"
                },
                "mentionChannel": {
                    "type": "string",
                    "description": "Describes how to ping the slack channel that messages are being sent to. Options are `here` for an @here ping, `channel` for @channel, or empty for no ping.\n"
                },
                "mentionGroups": {
                    "type": "string",
                    "description": "Comma-separated list of groups to mention in the message.\n"
                },
                "mentionUsers": {
                    "type": "string",
                    "description": "Comma-separated list of users to mention in the message.\n"
                },
                "recipient": {
                    "type": "string",
                    "description": "Channel, private group, or IM channel (can be an encoded ID or a name) to send messages to.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "text": {
                    "type": "string",
                    "description": "Templated content of the message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Templated title of the message.\n"
                },
                "token": {
                    "type": "string",
                    "description": "A Slack API token,for sending messages directly without the webhook method.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A Slack webhook URL,for sending messages via the webhook method.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username for the bot to use.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointSn:ContactPointSn": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "AWS access key ID used to authenticate with Amazon SNS.\n",
                    "secret": true
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "The Amazon Resource Name (ARN) of the role to assume to send notifications to Amazon SNS.\n"
                },
                "authProvider": {
                    "type": "string",
                    "description": "The authentication provider to use. Valid values are `default`, `arn` and `keys`. Default is `default`.\n"
                },
                "body": {
                    "type": "string"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "The external ID to use when assuming the role.\n"
                },
                "messageFormat": {
                    "type": "string",
                    "description": "The format of the message to send. Valid values are `text`, `body` and `json`. Default is `text`.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "AWS secret access key used to authenticate with Amazon SNS.\n",
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "subject": {
                    "type": "string"
                },
                "topic": {
                    "type": "string",
                    "description": "The Amazon SNS topic to send notifications to.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "topic"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "topic",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointTeam:ContactPointTeam": {
            "properties": {
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated message content to send.\n"
                },
                "sectionTitle": {
                    "type": "string",
                    "description": "The templated subtitle for each message section.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "A Teams webhook URL.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointTelegram:ContactPointTelegram": {
            "properties": {
                "chatId": {
                    "type": "string",
                    "description": "The chat ID to send messages to.\n"
                },
                "disableNotifications": {
                    "type": "boolean",
                    "description": "When set users will receive a notification with no sound.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "disableWebPagePreview": {
                    "type": "boolean",
                    "description": "When set it disables link previews for links in the message.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message.\n"
                },
                "parseMode": {
                    "type": "string",
                    "description": "Mode for parsing entities in the message text. Supported: None, Markdown, MarkdownV2, and HTML. HTML is the default.\n"
                },
                "protectContent": {
                    "type": "boolean",
                    "description": "When set it protects the contents of the message from forwarding and saving.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The Telegram bot token.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "chatId",
                "token"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "chatId",
                        "token",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointThreema:ContactPointThreema": {
            "properties": {
                "apiSecret": {
                    "type": "string",
                    "description": "The Threema API key.\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "The templated description of the message.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "gatewayId": {
                    "type": "string",
                    "description": "The Threema gateway ID.\n"
                },
                "recipientId": {
                    "type": "string",
                    "description": "The ID of the recipient of the message.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "required": [
                "apiSecret",
                "gatewayId",
                "recipientId"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "apiSecret",
                        "gatewayId",
                        "recipientId",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointVictorop:ContactPointVictorop": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Templated description of the message.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "messageType": {
                    "type": "string",
                    "description": "The VictorOps alert state - typically either `CRITICAL` or `RECOVERY`.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "Templated title to display.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The VictorOps webhook URL.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointWebex:ContactPointWebex": {
            "properties": {
                "apiUrl": {
                    "type": "string",
                    "description": "The URL to send webhook requests to.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated title of the message to send.\n"
                },
                "roomId": {
                    "type": "string",
                    "description": "ID of the Webex Teams room where to send the messages.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "token": {
                    "type": "string",
                    "description": "The bearer token used to authorize the client.\n",
                    "secret": true
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/ContactPointWebhook:ContactPointWebhook": {
            "properties": {
                "authorizationCredentials": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this value. Do not use in conjunction with basic auth parameters.\n",
                    "secret": true
                },
                "authorizationScheme": {
                    "type": "string",
                    "description": "Allows a custom authorization scheme - attaches an auth header with this name. Do not use in conjunction with basic auth parameters.\n"
                },
                "basicAuthPassword": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n",
                    "secret": true
                },
                "basicAuthUser": {
                    "type": "string",
                    "description": "The username to use in basic auth headers attached to the request. If omitted, basic auth will not be used.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method to use in the request. Defaults to `POST`.\n"
                },
                "maxAlerts": {
                    "type": "integer",
                    "description": "The maximum number of alerts to send in a single request. This can be helpful in limiting the size of the request body. The default is 0, which indicates no limit.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Custom message. You can use template variables.\n"
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "Templated title of the message.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL to send webhook requests to.\n"
                }
            },
            "type": "object",
            "required": [
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid",
                        "url"
                    ]
                }
            }
        },
        "grafana:index/ContactPointWecom:ContactPointWecom": {
            "properties": {
                "agentId": {
                    "type": "string",
                    "description": "Agent ID added to the request payload when using APIAPP.\n"
                },
                "corpId": {
                    "type": "string",
                    "description": "Corp ID used to get token when using APIAPP.\n"
                },
                "disableResolveMessage": {
                    "type": "boolean",
                    "description": "Whether to disable sending resolve messages.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The templated content of the message to send.\n"
                },
                "msgType": {
                    "type": "string",
                    "description": "The type of them message. Supported: markdown, text. Default: text.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret key required to obtain access token when using APIAPP. See https://work.weixin.qq.com/wework_admin/frame#apps to create APIAPP.\n",
                    "secret": true
                },
                "settings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Additional custom properties to attach to the notifier.\n",
                    "secret": true
                },
                "title": {
                    "type": "string",
                    "description": "The templated title of the message to send.\n"
                },
                "toUser": {
                    "type": "string",
                    "description": "The ID of user that should receive the message. Multiple entries should be separated by '|'. Default: @all.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The UID of the contact point.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The WeCom webhook URL. Required if using GroupRobot.\n",
                    "secret": true
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/DashboardPermissionPermission:DashboardPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Manage permissions for `Viewer` or `Editor` roles.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team to manage permissions for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user or service account to manage permissions for.\n"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission": {
            "properties": {
                "builtInRole": {
                    "type": "string",
                    "description": "Name of the basic role to manage permissions for. Options: `Viewer`, `Editor` or `Admin`. Can only be set from Grafana v9.2.3+.\n"
                },
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Options: `Query`, `Edit` or `Admin` (`Admin` can only be used with Grafana v10.3.0+).\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team to manage permissions for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user or service account to manage permissions for.\n"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/FolderPermissionPermission:FolderPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be one of `View`, `Edit`, or `Admin`.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Manage permissions for `Viewer` or `Editor` roles.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team to manage permissions for.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user or service account to manage permissions for.\n"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/MachineLearningHolidayCustomPeriod:MachineLearningHolidayCustomPeriod": {
            "properties": {
                "endTime": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom period.\n"
                },
                "startTime": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endTime",
                "startTime"
            ]
        },
        "grafana:index/MachineLearningOutlierDetectorAlgorithm:MachineLearningOutlierDetectorAlgorithm": {
            "properties": {
                "config": {
                    "$ref": "#/types/grafana:index/MachineLearningOutlierDetectorAlgorithmConfig:MachineLearningOutlierDetectorAlgorithmConfig",
                    "description": "For DBSCAN only, specify the configuration map\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the algorithm to use ('mad' or 'dbscan').\n"
                },
                "sensitivity": {
                    "type": "number",
                    "description": "Specify the sensitivity of the detector (in range [0,1]).\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "sensitivity"
            ]
        },
        "grafana:index/MachineLearningOutlierDetectorAlgorithmConfig:MachineLearningOutlierDetectorAlgorithmConfig": {
            "properties": {
                "epsilon": {
                    "type": "number",
                    "description": "Specify the epsilon parameter (positive float)\n"
                }
            },
            "type": "object",
            "required": [
                "epsilon"
            ]
        },
        "grafana:index/MuteTimingInterval:MuteTimingInterval": {
            "properties": {
                "daysOfMonths": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of days, 1-31, within a month, e.g. \"1\" or \"14:16\". Negative values can be used to represent days counting from the end of a month, e.g. \"-1\".\n"
                },
                "location": {
                    "type": "string",
                    "description": "Provides the time zone for the time interval. Must be a location in the IANA time zone database, e.g \"America/New_York\"\n"
                },
                "months": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of months, either numerical or full calendar month, e.g. \"1:3\", \"december\", or \"may:august\".\n"
                },
                "times": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingIntervalTime:MuteTimingIntervalTime"
                    },
                    "description": "The time ranges, represented in minutes, during which to mute in a given day.\n"
                },
                "weekdays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An inclusive range of weekdays, e.g. \"monday\" or \"tuesday:thursday\".\n"
                },
                "years": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A positive inclusive range of years, e.g. \"2030\" or \"2025:2026\".\n"
                }
            },
            "type": "object"
        },
        "grafana:index/MuteTimingIntervalTime:MuteTimingIntervalTime": {
            "properties": {
                "end": {
                    "type": "string",
                    "description": "The time, in hh:mm format, of when the interval should end exclusively.\n"
                },
                "start": {
                    "type": "string",
                    "description": "The time, in hh:mm format, of when the interval should begin inclusively.\n"
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ]
        },
        "grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n"
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyMatcher:NotificationPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n"
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicy:NotificationPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "type": "object",
            "required": [
                "contactPoint"
            ]
        },
        "grafana:index/NotificationPolicyPolicyMatcher:NotificationPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "The name of the label to match against.\n"
                },
                "match": {
                    "type": "string",
                    "description": "The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The label value to match against.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicy:NotificationPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n"
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n"
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "type": "object",
            "required": [
                "contactPoint"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "The name of the label to match against.\n"
                },
                "match": {
                    "type": "string",
                    "description": "The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The label value to match against.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n"
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n"
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "type": "object",
            "required": [
                "contactPoint"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "The name of the label to match against.\n"
                },
                "match": {
                    "type": "string",
                    "description": "The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The label value to match against.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyPolicy:NotificationPolicyPolicyPolicyPolicyPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n"
                },
                "continue": {
                    "type": "boolean",
                    "description": "Whether to continue matching subsequent rules if an alert matches the current rule. Otherwise, the rule will be 'consumed' by the first policy to match it.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. Required for root policy only. If empty, the parent grouping is used.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyPolicyMatcher"
                    },
                    "description": "Describes which labels this rule should match. When multiple matchers are supplied, an alert must match ALL matchers to be accepted by this policy. When no matchers are supplied, the rule will match all alert instances.\n"
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "type": "object",
            "required": [
                "contactPoint",
                "groupBies"
            ]
        },
        "grafana:index/NotificationPolicyPolicyPolicyPolicyPolicyMatcher:NotificationPolicyPolicyPolicyPolicyPolicyMatcher": {
            "properties": {
                "label": {
                    "type": "string",
                    "description": "The name of the label to match against.\n"
                },
                "match": {
                    "type": "string",
                    "description": "The operator to apply when matching values of the given label. Allowed operators are `=` for equality, `!=` for negated equality, `=~` for regex equality, and `!~` for negated regex equality.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The label value to match against.\n"
                }
            },
            "type": "object",
            "required": [
                "label",
                "match",
                "value"
            ]
        },
        "grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute": {
            "properties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "id": {
                    "type": "string"
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteMsteams:OncallIntegrationDefaultRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteSlack:OncallIntegrationDefaultRouteSlack",
                    "description": "Slack-specific settings for a route.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRouteTelegram:OncallIntegrationDefaultRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id"
                    ]
                }
            }
        },
        "grafana:index/OncallIntegrationDefaultRouteMsteams:OncallIntegrationDefaultRouteMsteams": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in MS teams.\n"
                },
                "id": {
                    "type": "string",
                    "description": "MS teams channel id. Alerts will be directed to this channel in Microsoft teams.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationDefaultRouteSlack:OncallIntegrationDefaultRouteSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Slack channel id. Alerts will be directed to this channel in Slack.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Slack.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationDefaultRouteTelegram:OncallIntegrationDefaultRouteTelegram": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Telegram.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Telegram channel id. Alerts will be directed to this channel in Telegram.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates": {
            "properties": {
                "acknowledgeSignal": {
                    "type": "string",
                    "description": "Template for sending a signal to acknowledge the Incident.\n"
                },
                "email": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesEmail:OncallIntegrationTemplatesEmail",
                    "description": "Templates for Email.\n"
                },
                "groupingKey": {
                    "type": "string",
                    "description": "Template for the key by which alerts are grouped.\n"
                },
                "microsoftTeams": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesMicrosoftTeams:OncallIntegrationTemplatesMicrosoftTeams",
                    "description": "Templates for Microsoft Teams.\n"
                },
                "phoneCall": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesPhoneCall:OncallIntegrationTemplatesPhoneCall",
                    "description": "Templates for Phone Call.\n"
                },
                "resolveSignal": {
                    "type": "string",
                    "description": "Template for sending a signal to resolve the Incident.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesSlack:OncallIntegrationTemplatesSlack",
                    "description": "Templates for Slack.\n"
                },
                "sms": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesSms:OncallIntegrationTemplatesSms",
                    "description": "Templates for SMS.\n"
                },
                "sourceLink": {
                    "type": "string",
                    "description": "Template for a source link.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesTelegram:OncallIntegrationTemplatesTelegram",
                    "description": "Templates for Telegram.\n"
                },
                "web": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplatesWeb:OncallIntegrationTemplatesWeb",
                    "description": "Templates for Web.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesEmail:OncallIntegrationTemplatesEmail": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Template for Alert message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesMicrosoftTeams:OncallIntegrationTemplatesMicrosoftTeams": {
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "Template for Alert image url.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Template for Alert message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesPhoneCall:OncallIntegrationTemplatesPhoneCall": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesSlack:OncallIntegrationTemplatesSlack": {
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "Template for Alert image url.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Template for Alert message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesSms:OncallIntegrationTemplatesSms": {
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesTelegram:OncallIntegrationTemplatesTelegram": {
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "Template for Alert image url.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Template for Alert message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallIntegrationTemplatesWeb:OncallIntegrationTemplatesWeb": {
            "properties": {
                "imageUrl": {
                    "type": "string",
                    "description": "Template for Alert image url.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Template for Alert message.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Template for Alert title.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteMsteams:OncallRouteMsteams": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in MS teams.\n"
                },
                "id": {
                    "type": "string",
                    "description": "MS teams channel id. Alerts will be directed to this channel in Microsoft teams.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteSlack:OncallRouteSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Slack channel id. Alerts will be directed to this channel in Slack.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Slack.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallRouteTelegram:OncallRouteTelegram": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notification in Telegram.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Telegram channel id. Alerts will be directed to this channel in Telegram.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/OncallScheduleSlack:OncallScheduleSlack": {
            "properties": {
                "channelId": {
                    "type": "string",
                    "description": "Slack channel id. Reminder about schedule shifts will be directed to this channel in Slack.\n"
                },
                "userGroupId": {
                    "type": "string",
                    "description": "Slack user group id. Members of user group will be updated when on-call users change.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/PlaylistItem:PlaylistItem": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "order": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "order",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "order",
                        "title"
                    ]
                }
            }
        },
        "grafana:index/ReportDashboard:ReportDashboard": {
            "properties": {
                "reportVariables": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Add report variables to the dashboard. Values should be separated by commas.\n"
                },
                "timeRange": {
                    "$ref": "#/types/grafana:index/ReportDashboardTimeRange:ReportDashboardTimeRange",
                    "description": "Time range of the report.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Dashboard uid.\n"
                }
            },
            "type": "object",
            "required": [
                "uid"
            ]
        },
        "grafana:index/ReportDashboardTimeRange:ReportDashboardTimeRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Start of the time range.\n"
                },
                "to": {
                    "type": "string",
                    "description": "End of the time range.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/ReportSchedule:ReportSchedule": {
            "properties": {
                "customInterval": {
                    "type": "string",
                    "description": "Custom interval of the report.\n**Note:** This field is only available when frequency is set to `custom`.\n"
                },
                "endTime": {
                    "type": "string",
                    "description": "End time of the report. If empty, the report will be sent indefinitely (according to frequency). Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "Frequency of the report. Allowed values: `never`, `once`, `hourly`, `daily`, `weekly`, `monthly`, `custom`.\n"
                },
                "lastDayOfMonth": {
                    "type": "boolean",
                    "description": "Send the report on the last day of the month\n"
                },
                "startTime": {
                    "type": "string",
                    "description": "Start time of the report. If empty, the start date will be set to the creation time. Note that times will be saved as UTC in Grafana. Use 2006-01-02T15:04:05 format if you want to set a custom timezone\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "Set the report time zone.\n"
                },
                "workdaysOnly": {
                    "type": "boolean",
                    "description": "Whether to send the report only on work days.\n"
                }
            },
            "type": "object",
            "required": [
                "frequency"
            ]
        },
        "grafana:index/ReportTimeRange:ReportTimeRange": {
            "properties": {
                "from": {
                    "type": "string",
                    "description": "Start of the time range.\n"
                },
                "to": {
                    "type": "string",
                    "description": "End of the time range.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/RolePermission:RolePermission": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Specific action users granted with the role will be allowed to perform (for example: `users:read`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ]
        },
        "grafana:index/RuleGroupRule:RuleGroupRule": {
            "properties": {
                "annotations": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs of metadata to attach to the alert rule that may add user-defined context, but cannot be used for matching, grouping, or routing.\n"
                },
                "condition": {
                    "type": "string",
                    "description": "The `ref_id` of the query node in the `data` field to use as the alert condition.\n"
                },
                "datas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRuleData:RuleGroupRuleData"
                    },
                    "description": "A sequence of stages that describe the contents of the rule.\n"
                },
                "execErrState": {
                    "type": "string",
                    "description": "Describes what state to enter when the rule's query is invalid and the rule cannot be executed. Options are OK, Error, and Alerting.\n"
                },
                "for": {
                    "type": "string",
                    "description": "The amount of time for which the rule must be breached for the rule to be considered to be Firing. Before this time has elapsed, the rule is only considered to be Pending.\n"
                },
                "isPaused": {
                    "type": "boolean",
                    "description": "Sets whether the alert should be paused or not.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value pairs to attach to the alert rule that can be used in matching, grouping, and routing.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the alert rule.\n"
                },
                "noDataState": {
                    "type": "string",
                    "description": "Describes what state to enter when the rule's query returns No Data. Options are OK, NoData, and Alerting.\n"
                },
                "notificationSettings": {
                    "$ref": "#/types/grafana:index/RuleGroupRuleNotificationSettings:RuleGroupRuleNotificationSettings",
                    "description": "Notification settings for the rule. If specified, it overrides the notification policies. Available since Grafana 10.4, requires feature flag 'alertingSimplifiedRouting' enabled.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of the alert rule.\n"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "datas",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "condition",
                        "datas",
                        "name",
                        "uid"
                    ]
                }
            }
        },
        "grafana:index/RuleGroupRuleData:RuleGroupRuleData": {
            "properties": {
                "datasourceUid": {
                    "type": "string",
                    "description": "The UID of the datasource being queried, or \"-100\" if this stage is an expression stage.\n"
                },
                "model": {
                    "type": "string",
                    "description": "Custom JSON data to send to the specified datasource when querying.\n"
                },
                "queryType": {
                    "type": "string",
                    "description": "An optional identifier for the type of query being executed.\n"
                },
                "refId": {
                    "type": "string",
                    "description": "A unique string to identify this query stage within a rule.\n"
                },
                "relativeTimeRange": {
                    "$ref": "#/types/grafana:index/RuleGroupRuleDataRelativeTimeRange:RuleGroupRuleDataRelativeTimeRange",
                    "description": "The time range, relative to when the query is executed, across which to query.\n"
                }
            },
            "type": "object",
            "required": [
                "datasourceUid",
                "model",
                "refId",
                "relativeTimeRange"
            ]
        },
        "grafana:index/RuleGroupRuleDataRelativeTimeRange:RuleGroupRuleDataRelativeTimeRange": {
            "properties": {
                "from": {
                    "type": "integer",
                    "description": "The number of seconds in the past, relative to when the rule is evaluated, at which the time range begins.\n"
                },
                "to": {
                    "type": "integer",
                    "description": "The number of seconds in the past, relative to when the rule is evaluated, at which the time range ends.\n"
                }
            },
            "type": "object",
            "required": [
                "from",
                "to"
            ]
        },
        "grafana:index/RuleGroupRuleNotificationSettings:RuleGroupRuleNotificationSettings": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The contact point to route notifications that match this rule to.\n"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels, effectively disabling grouping. If empty, no grouping is used. If specified, requires labels 'alertname' and 'grafana_folder' to be included.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "muteTimings": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of mute timing names to apply to alerts that match this policy.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "type": "object",
            "required": [
                "contactPoint"
            ]
        },
        "grafana:index/SLOAlerting:SLOAlerting": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingAnnotation:SLOAlertingAnnotation"
                    },
                    "description": "Annotations will be attached to all alerts generated by any of these rules.\n"
                },
                "fastburns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingFastburn:SLOAlertingFastburn"
                    },
                    "description": "Alerting Rules generated for Fast Burn alerts\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingLabel:SLOAlertingLabel"
                    },
                    "description": "Labels will be attached to all alerts generated by any of these rules.\n"
                },
                "slowburns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingSlowburn:SLOAlertingSlowburn"
                    },
                    "description": "Alerting Rules generated for Slow Burn alerts\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SLOAlertingAnnotation:SLOAlertingAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOAlertingFastburn:SLOAlertingFastburn": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingFastburnAnnotation:SLOAlertingFastburnAnnotation"
                    },
                    "description": "Annotations to attach only to Fast Burn alerts.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingFastburnLabel:SLOAlertingFastburnLabel"
                    },
                    "description": "Labels to attach only to Fast Burn alerts.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SLOAlertingFastburnAnnotation:SLOAlertingFastburnAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOAlertingFastburnLabel:SLOAlertingFastburnLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOAlertingLabel:SLOAlertingLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOAlertingSlowburn:SLOAlertingSlowburn": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingSlowburnAnnotation:SLOAlertingSlowburnAnnotation"
                    },
                    "description": "Annotations to attach only to Slow Burn alerts.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlertingSlowburnLabel:SLOAlertingSlowburnLabel"
                    },
                    "description": "Labels to attach only to Slow Burn alerts.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SLOAlertingSlowburnAnnotation:SLOAlertingSlowburnAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOAlertingSlowburnLabel:SLOAlertingSlowburnLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLODestinationDatasource:SLODestinationDatasource": {
            "properties": {
                "uid": {
                    "type": "string",
                    "description": "UID for the Mimir Datasource\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SLOLabel:SLOLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ]
        },
        "grafana:index/SLOObjective:SLOObjective": {
            "properties": {
                "value": {
                    "type": "number",
                    "description": "Value between 0 and 1. If the value of the query is above the objective, the SLO is met.\n"
                },
                "window": {
                    "type": "string",
                    "description": "A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.\n"
                }
            },
            "type": "object",
            "required": [
                "value",
                "window"
            ]
        },
        "grafana:index/SLOQuery:SLOQuery": {
            "properties": {
                "freeform": {
                    "$ref": "#/types/grafana:index/SLOQueryFreeform:SLOQueryFreeform"
                },
                "ratio": {
                    "$ref": "#/types/grafana:index/SLOQueryRatio:SLOQueryRatio"
                },
                "type": {
                    "type": "string",
                    "description": "Query type must be one of: \"freeform\", \"query\", \"ratio\", or \"threshold\"\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "grafana:index/SLOQueryFreeform:SLOQueryFreeform": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Freeform Query Field\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ]
        },
        "grafana:index/SLOQueryRatio:SLOQueryRatio": {
            "properties": {
                "groupByLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - \"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                },
                "successMetric": {
                    "type": "string",
                    "description": "Counter metric for success events (numerator)\n"
                },
                "totalMetric": {
                    "type": "string",
                    "description": "Metric for total events (denominator)\n"
                }
            },
            "type": "object",
            "required": [
                "successMetric",
                "totalMetric"
            ]
        },
        "grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission": {
            "properties": {
                "permission": {
                    "type": "string",
                    "description": "Permission to associate with item. Must be `Edit` or `Admin`.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "ID of the team to manage permissions for. Specify either this or `user_id`.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "ID of the user or service account to manage permissions for. Specify either this or `team_id`.\n"
                }
            },
            "type": "object",
            "required": [
                "permission"
            ]
        },
        "grafana:index/SsoSettingsOauth2Settings:SsoSettingsOauth2Settings": {
            "properties": {
                "allowAssignGrafanaAdmin": {
                    "type": "boolean",
                    "description": "If enabled, it will automatically sync the Grafana server administrator role.\n"
                },
                "allowSignUp": {
                    "type": "boolean",
                    "description": "If not enabled, only existing Grafana users can log in using OAuth.\n"
                },
                "allowedDomains": {
                    "type": "string",
                    "description": "List of comma- or space-separated domains. The user should belong to at least one domain to log in.\n"
                },
                "allowedGroups": {
                    "type": "string",
                    "description": "List of comma- or space-separated groups. The user should be a member of at least one group to log in. For Generic OAuth, if you configure allowed_groups, you must also configure groups_attribute_path.\n"
                },
                "allowedOrganizations": {
                    "type": "string",
                    "description": "List of comma- or space-separated organizations. The user should be a member of at least one organization to log in.\n"
                },
                "apiUrl": {
                    "type": "string",
                    "description": "The user information endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.\n"
                },
                "authStyle": {
                    "type": "string",
                    "description": "It determines how client_id and client_secret are sent to Oauth2 provider. Possible values are AutoDetect, InParams, InHeader. Default is AutoDetect.\n"
                },
                "authUrl": {
                    "type": "string",
                    "description": "The authorization endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.\n"
                },
                "autoLogin": {
                    "type": "boolean",
                    "description": "Log in automatically, skipping the login screen.\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client Id of your OAuth2 app.\n"
                },
                "clientSecret": {
                    "type": "string",
                    "description": "The client secret of your OAuth2 app.\n",
                    "secret": true
                },
                "custom": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom fields to configure for OAuth2 such as the [force_use_graph_api](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/azuread/#force-fetching-groups-from-microsoft-graph-api) field.\n"
                },
                "defineAllowedGroups": {
                    "type": "boolean",
                    "description": "Define allowed groups.\n"
                },
                "defineAllowedTeamsIds": {
                    "type": "boolean",
                    "description": "Define allowed teams ids.\n"
                },
                "emailAttributeName": {
                    "type": "string",
                    "description": "Name of the key to use for user email lookup within the attributes map of OAuth2 ID token. Only applicable to Generic OAuth.\n"
                },
                "emailAttributePath": {
                    "type": "string",
                    "description": "JMESPath expression to use for user email lookup from the user information. Only applicable to Generic OAuth.\n"
                },
                "emptyScopes": {
                    "type": "boolean",
                    "description": "If enabled, no scopes will be sent to the OAuth2 provider.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Define whether this configuration is enabled for the specified provider.\n"
                },
                "groupsAttributePath": {
                    "type": "string",
                    "description": "JMESPath expression to use for user group lookup. If you configure allowed_groups, you must also configure groups_attribute_path.\n"
                },
                "idTokenAttributeName": {
                    "type": "string",
                    "description": "The name of the key used to extract the ID token from the returned OAuth2 token. Only applicable to Generic OAuth.\n"
                },
                "loginAttributePath": {
                    "type": "string",
                    "description": "JMESPath expression to use for user login lookup from the user ID token. Only applicable to Generic OAuth.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Helpful if you use more than one identity providers or SSO protocols.\n"
                },
                "nameAttributePath": {
                    "type": "string",
                    "description": "JMESPath expression to use for user name lookup from the user ID token. This name will be used as the user’s display name. Only applicable to Generic OAuth.\n"
                },
                "roleAttributePath": {
                    "type": "string",
                    "description": "JMESPath expression to use for Grafana role lookup.\n"
                },
                "roleAttributeStrict": {
                    "type": "boolean",
                    "description": "If enabled, denies user login if the Grafana role cannot be extracted using Role attribute path.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "List of comma- or space-separated OAuth2 scopes.\n"
                },
                "signoutRedirectUrl": {
                    "type": "string",
                    "description": "The URL to redirect the user to after signing out from Grafana.\n"
                },
                "skipOrgRoleSync": {
                    "type": "boolean",
                    "description": "Prevent synchronizing users’ organization roles from your IdP.\n"
                },
                "teamIds": {
                    "type": "string",
                    "description": "String list of Team Ids. If set, the user must be a member of one of the given teams to log in. If you configure team_ids, you must also configure teams_url and team_ids_attribute_path.\n"
                },
                "teamIdsAttributePath": {
                    "type": "string",
                    "description": "The JMESPath expression to use for Grafana Team Id lookup within the results returned by the teams_url endpoint. Only applicable to Generic OAuth.\n"
                },
                "teamsUrl": {
                    "type": "string",
                    "description": "The URL used to query for Team Ids. If not set, the default value is /teams. If you configure teams_url, you must also configure team_ids_attribute_path. Only applicable to Generic OAuth.\n"
                },
                "tlsClientCa": {
                    "type": "string",
                    "description": "The path to the trusted certificate authority list. Is not applicable on Grafana Cloud.\n"
                },
                "tlsClientCert": {
                    "type": "string",
                    "description": "The path to the certificate. Is not applicable on Grafana Cloud.\n"
                },
                "tlsClientKey": {
                    "type": "string",
                    "description": "The path to the key. Is not applicable on Grafana Cloud.\n"
                },
                "tlsSkipVerifyInsecure": {
                    "type": "boolean",
                    "description": "If enabled, the client accepts any certificate presented by the server and any host name in that certificate. You should only use this for testing, because this mode leaves SSL/TLS susceptible to man-in-the-middle attacks.\n"
                },
                "tokenUrl": {
                    "type": "string",
                    "description": "The token endpoint of your OAuth2 provider. Required for azuread, okta and generic_oauth providers.\n"
                },
                "usePkce": {
                    "type": "boolean",
                    "description": "If enabled, Grafana will use Proof Key for Code Exchange (PKCE) with the OAuth2 Authorization Code Grant.\n"
                },
                "useRefreshToken": {
                    "type": "boolean",
                    "description": "If enabled, Grafana will fetch a new access token using the refresh token provided by the OAuth2 provider.\n"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings": {
            "properties": {
                "dns": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDns:SyntheticMonitoringCheckSettingsDns",
                    "description": "Settings for DNS check. The target must be a valid hostname (or IP address for `PTR` records).\n"
                },
                "http": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttp:SyntheticMonitoringCheckSettingsHttp",
                    "description": "Settings for HTTP check. The target must be a URL (http or https).\n"
                },
                "multihttp": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttp:SyntheticMonitoringCheckSettingsMultihttp",
                    "description": "Settings for MultiHTTP check. The target must be a URL (http or https)\n"
                },
                "ping": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsPing:SyntheticMonitoringCheckSettingsPing",
                    "description": "Settings for ping (ICMP) check. The target must be a valid hostname or IP address.\n"
                },
                "tcp": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcp:SyntheticMonitoringCheckSettingsTcp",
                    "description": "Settings for TCP check. The target must be of the form `\u003chost\u003e:\u003cport\u003e`, where the host portion must be a valid hostname or IP address.\n"
                },
                "traceroute": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTraceroute:SyntheticMonitoringCheckSettingsTraceroute",
                    "description": "Settings for traceroute check. The target must be a valid hostname or IP address\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDns:SyntheticMonitoringCheckSettingsDns": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port to target.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "`TCP` or `UDP`.\n"
                },
                "recordType": {
                    "type": "string",
                    "description": "One of `ANY`, `A`, `AAAA`, `CNAME`, `MX`, `NS`, `PTR`, `SOA`, `SRV`, `TXT`.\n"
                },
                "server": {
                    "type": "string",
                    "description": "DNS server address to target.\n"
                },
                "sourceIpAddress": {
                    "type": "string",
                    "description": "Source IP address.\n"
                },
                "validRCodes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of valid response codes. Options include `NOERROR`, `BADALG`, `BADMODE`, `BADKEY`, `BADCOOKIE`, `BADNAME`, `BADSIG`, `BADTIME`, `BADTRUNC`, `BADVERS`, `FORMERR`, `NOTIMP`, `NOTAUTH`, `NOTZONE`, `NXDOMAIN`, `NXRRSET`, `REFUSED`, `SERVFAIL`, `YXDOMAIN`, `YXRRSET`.\n"
                },
                "validateAdditionalRrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr:SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr"
                    },
                    "description": "Validate additional matches.\n"
                },
                "validateAnswerRrs": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs:SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs",
                    "description": "Validate response answer.\n"
                },
                "validateAuthorityRrs": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs:SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs",
                    "description": "Validate response authority.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr:SyntheticMonitoringCheckSettingsDnsValidateAdditionalRr": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value matches regex.\n"
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value does not match regex.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs:SyntheticMonitoringCheckSettingsDnsValidateAnswerRrs": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value matches regex.\n"
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value does not match regex.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs:SyntheticMonitoringCheckSettingsDnsValidateAuthorityRrs": {
            "properties": {
                "failIfMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value matches regex.\n"
                },
                "failIfNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Fail if value does not match regex.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttp:SyntheticMonitoringCheckSettingsHttp": {
            "properties": {
                "basicAuth": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpBasicAuth:SyntheticMonitoringCheckSettingsHttpBasicAuth",
                    "description": "Basic auth settings.\n"
                },
                "bearerToken": {
                    "type": "string",
                    "description": "Token for use with bearer authorization header.\n"
                },
                "body": {
                    "type": "string",
                    "description": "The body of the HTTP request used in probe.\n"
                },
                "cacheBustingQueryParamName": {
                    "type": "string",
                    "description": "The name of the query parameter used to prevent the server from using a cached response. Each probe will assign a random value to this parameter each time a request is made.\n"
                },
                "failIfBodyMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regexes. If any match the response body, the check will fail.\n"
                },
                "failIfBodyNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of regexes. If any do not match the response body, the check will fail.\n"
                },
                "failIfHeaderMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp"
                    },
                    "description": "Check fails if headers match.\n"
                },
                "failIfHeaderNotMatchesRegexps": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp"
                    },
                    "description": "Check fails if headers do not match.\n"
                },
                "failIfNotSsl": {
                    "type": "boolean",
                    "description": "Fail if SSL is not present.\n"
                },
                "failIfSsl": {
                    "type": "boolean",
                    "description": "Fail if SSL is present.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The HTTP headers set for the probe.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available.\n"
                },
                "method": {
                    "type": "string",
                    "description": "Request method. One of `GET`, `CONNECT`, `DELETE`, `HEAD`, `OPTIONS`, `POST`, `PUT`, `TRACE`\n"
                },
                "noFollowRedirects": {
                    "type": "boolean",
                    "description": "Do not follow redirects.\n"
                },
                "proxyConnectHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The HTTP headers sent to the proxy URL\n"
                },
                "proxyUrl": {
                    "type": "string",
                    "description": "Proxy URL.\n"
                },
                "tlsConfig": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsHttpTlsConfig:SyntheticMonitoringCheckSettingsHttpTlsConfig",
                    "description": "TLS config.\n"
                },
                "validHttpVersions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of valid HTTP versions. Options include `HTTP/1.0`, `HTTP/1.1`, `HTTP/2.0`\n"
                },
                "validStatusCodes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Accepted status codes. If unset, defaults to 2xx.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpBasicAuth:SyntheticMonitoringCheckSettingsHttpBasicAuth": {
            "properties": {
                "password": {
                    "type": "string",
                    "description": "Basic auth password.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Basic auth username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderMatchesRegexp": {
            "properties": {
                "allowMissing": {
                    "type": "boolean",
                    "description": "Allow header to be missing from responses.\n"
                },
                "header": {
                    "type": "string",
                    "description": "Header name.\n"
                },
                "regexp": {
                    "type": "string",
                    "description": "Regex that header value should match.\n"
                }
            },
            "type": "object",
            "required": [
                "header",
                "regexp"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp:SyntheticMonitoringCheckSettingsHttpFailIfHeaderNotMatchesRegexp": {
            "properties": {
                "allowMissing": {
                    "type": "boolean",
                    "description": "Allow header to be missing from responses.\n"
                },
                "header": {
                    "type": "string",
                    "description": "Header name.\n"
                },
                "regexp": {
                    "type": "string",
                    "description": "Regex that header value should match.\n"
                }
            },
            "type": "object",
            "required": [
                "header",
                "regexp"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsHttpTlsConfig:SyntheticMonitoringCheckSettingsHttpTlsConfig": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "CA certificate in PEM format.\n"
                },
                "clientCert": {
                    "type": "string",
                    "description": "Client certificate in PEM format.\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "Client key in PEM format.\n",
                    "secret": true
                },
                "insecureSkipVerify": {
                    "type": "boolean",
                    "description": "Disable target certificate validation.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Used to verify the hostname for the targets.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttp:SyntheticMonitoringCheckSettingsMultihttp": {
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntry:SyntheticMonitoringCheckSettingsMultihttpEntry"
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntry:SyntheticMonitoringCheckSettingsMultihttpEntry": {
            "properties": {
                "assertions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryAssertion:SyntheticMonitoringCheckSettingsMultihttpEntryAssertion"
                    },
                    "description": "Assertions to make on the request response\n"
                },
                "request": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequest:SyntheticMonitoringCheckSettingsMultihttpEntryRequest",
                    "description": "An individual MultiHTTP request\n"
                },
                "variables": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryVariable:SyntheticMonitoringCheckSettingsMultihttpEntryVariable"
                    },
                    "description": "Variables to extract from the request response\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryAssertion:SyntheticMonitoringCheckSettingsMultihttpEntryAssertion": {
            "properties": {
                "condition": {
                    "type": "string",
                    "description": "The condition of the assertion: NOT_CONTAINS, EQUALS, STARTS_WITH, ENDS_WITH, TYPE_OF, CONTAINS\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression of the assertion. Should start with $.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject of the assertion: RESPONSE_HEADERS, HTTP_STATUS_CODE, RESPONSE_BODY\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of assertion to make: TEXT, JSON_PATH_VALUE, JSON_PATH_ASSERTION, REGEX_ASSERTION\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the assertion\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequest:SyntheticMonitoringCheckSettingsMultihttpEntryRequest": {
            "properties": {
                "bodies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody:SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody"
                    },
                    "description": "The body of the HTTP request used in probe.\n"
                },
                "headers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader:SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader"
                    },
                    "description": "The headers to send with the request\n"
                },
                "method": {
                    "type": "string",
                    "description": "The HTTP method to use\n"
                },
                "queryFields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField:SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField"
                    },
                    "description": "Query fields to send with the request\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the request\n"
                }
            },
            "type": "object",
            "required": [
                "method",
                "url"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody:SyntheticMonitoringCheckSettingsMultihttpEntryRequestBody": {
            "properties": {
                "contentEncoding": {
                    "type": "string",
                    "description": "The content encoding of the body\n"
                },
                "contentType": {
                    "type": "string",
                    "description": "The content type of the body\n"
                },
                "payload": {
                    "type": "string",
                    "description": "The body payload\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader:SyntheticMonitoringCheckSettingsMultihttpEntryRequestHeader": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the header to send\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the header to send\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField:SyntheticMonitoringCheckSettingsMultihttpEntryRequestQueryField": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the query field to send\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value of the query field to send\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsMultihttpEntryVariable:SyntheticMonitoringCheckSettingsMultihttpEntryVariable": {
            "properties": {
                "attribute": {
                    "type": "string",
                    "description": "The attribute to use when finding the variable value. Only used when type is CSS_SELECTOR\n"
                },
                "expression": {
                    "type": "string",
                    "description": "The expression to when finding the variable. Should start with $. Only use when type is JSON_PATH or REGEX\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the variable to extract\n"
                },
                "type": {
                    "type": "string",
                    "description": "The method of finding the variable value to extract. JSON_PATH, REGEX, CSS_SELECTOR\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsPing:SyntheticMonitoringCheckSettingsPing": {
            "properties": {
                "dontFragment": {
                    "type": "boolean",
                    "description": "Set the DF-bit in the IP-header. Only works with ipV4.\n"
                },
                "ipVersion": {
                    "type": "string",
                    "description": "Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available.\n"
                },
                "payloadSize": {
                    "type": "integer",
                    "description": "Payload size.\n"
                },
                "sourceIpAddress": {
                    "type": "string",
                    "description": "Source IP address.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcp:SyntheticMonitoringCheckSettingsTcp": {
            "properties": {
                "ipVersion": {
                    "type": "string",
                    "description": "Options are `V4`, `V6`, `Any`. Specifies whether the corresponding check will be performed using IPv4 or IPv6. The `Any` value indicates that IPv6 should be used, falling back to IPv4 if that's not available.\n"
                },
                "queryResponses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcpQueryResponse:SyntheticMonitoringCheckSettingsTcpQueryResponse"
                    },
                    "description": "The query sent in the TCP probe and the expected associated response.\n"
                },
                "sourceIpAddress": {
                    "type": "string",
                    "description": "Source IP address.\n"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Whether or not TLS is used when the connection is initiated.\n"
                },
                "tlsConfig": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettingsTcpTlsConfig:SyntheticMonitoringCheckSettingsTcpTlsConfig",
                    "description": "TLS config.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcpQueryResponse:SyntheticMonitoringCheckSettingsTcpQueryResponse": {
            "properties": {
                "expect": {
                    "type": "string",
                    "description": "Response to expect.\n"
                },
                "send": {
                    "type": "string",
                    "description": "Data to send.\n"
                },
                "startTls": {
                    "type": "boolean",
                    "description": "Upgrade TCP connection to TLS.\n"
                }
            },
            "type": "object",
            "required": [
                "expect",
                "send"
            ]
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTcpTlsConfig:SyntheticMonitoringCheckSettingsTcpTlsConfig": {
            "properties": {
                "caCert": {
                    "type": "string",
                    "description": "CA certificate in PEM format.\n"
                },
                "clientCert": {
                    "type": "string",
                    "description": "Client certificate in PEM format.\n"
                },
                "clientKey": {
                    "type": "string",
                    "description": "Client key in PEM format.\n",
                    "secret": true
                },
                "insecureSkipVerify": {
                    "type": "boolean",
                    "description": "Disable target certificate validation.\n"
                },
                "serverName": {
                    "type": "string",
                    "description": "Used to verify the hostname for the targets.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/SyntheticMonitoringCheckSettingsTraceroute:SyntheticMonitoringCheckSettingsTraceroute": {
            "properties": {
                "maxHops": {
                    "type": "integer",
                    "description": "Maximum TTL for the trace\n"
                },
                "maxUnknownHops": {
                    "type": "integer",
                    "description": "Maximum number of hosts to travers that give no response\n"
                },
                "ptrLookup": {
                    "type": "boolean",
                    "description": "Reverse lookup hostnames from IP addresses\n"
                }
            },
            "type": "object"
        },
        "grafana:index/TeamPreferences:TeamPreferences": {
            "properties": {
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The UID of the dashboard to display when a team member logs in.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/TeamTeamSync:TeamTeamSync": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/getDashboardsDashboard:getDashboardsDashboard": {
            "properties": {
                "folderTitle": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "uid": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "folderTitle",
                "title",
                "uid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getFoldersFolder:getFoldersFolder": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The folder ID.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The folder title.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The folder's unique identifier.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The folder's URL\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "title",
                "uid",
                "url"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getRolePermission:getRolePermission": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Specific action users granted with the role will be allowed to perform (for example: `users:read`)\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope to restrict the action to a set of resources (for example: `users:*` or `roles:customrole1`)\n"
                }
            },
            "type": "object",
            "required": [
                "action"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSlo:getSlosSlo": {
            "properties": {
                "alertings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlerting:getSlosSloAlerting"
                    },
                    "description": "Configures the alerting rules that will be generated for each\n\t\t\t\ttime window associated with the SLO. Grafana SLOs can generate\n\t\t\t\talerts when the short-term error budget burn is very high, the\n\t\t\t\tlong-term error budget burn rate is high, or when the remaining\n\t\t\t\terror budget is below a certain threshold. Annotations and Labels support templating.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description is a free-text field that can provide more context to an SLO.\n"
                },
                "destinationDatasources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloDestinationDatasource:getSlosSloDestinationDatasource"
                    },
                    "description": "Destination Datasource sets the datasource defined for an SLO\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloLabel:getSlosSloLabel"
                    },
                    "description": "Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping SLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema - \"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name should be a short description of your indicator. Consider names like \"API Availability\"\n"
                },
                "objectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloObjective:getSlosSloObjective"
                    },
                    "description": "Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for each time window based on the SLO burn rate or remaining error budget.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloQuery:getSlosSloQuery"
                    },
                    "description": "Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.\n"
                },
                "uuid": {
                    "type": "string",
                    "description": "A unique, random identifier. This value will also be the name of the resource stored in the API server. This value is read-only.\n"
                }
            },
            "type": "object",
            "required": [
                "alertings",
                "description",
                "destinationDatasources",
                "labels",
                "name",
                "objectives",
                "queries",
                "uuid"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlerting:getSlosSloAlerting": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingAnnotation:getSlosSloAlertingAnnotation"
                    },
                    "description": "Annotations will be attached to all alerts generated by any of these rules.\n"
                },
                "fastburns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingFastburn:getSlosSloAlertingFastburn"
                    },
                    "description": "Alerting Rules generated for Fast Burn alerts\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingLabel:getSlosSloAlertingLabel"
                    },
                    "description": "Labels will be attached to all alerts generated by any of these rules.\n"
                },
                "slowburns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingSlowburn:getSlosSloAlertingSlowburn"
                    },
                    "description": "Alerting Rules generated for Slow Burn alerts\n"
                }
            },
            "type": "object"
        },
        "grafana:index/getSlosSloAlertingAnnotation:getSlosSloAlertingAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlertingFastburn:getSlosSloAlertingFastburn": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingFastburnAnnotation:getSlosSloAlertingFastburnAnnotation"
                    },
                    "description": "Annotations to attach only to Fast Burn alerts.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingFastburnLabel:getSlosSloAlertingFastburnLabel"
                    },
                    "description": "Labels to attach only to Fast Burn alerts.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/getSlosSloAlertingFastburnAnnotation:getSlosSloAlertingFastburnAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlertingFastburnLabel:getSlosSloAlertingFastburnLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlertingLabel:getSlosSloAlertingLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlertingSlowburn:getSlosSloAlertingSlowburn": {
            "properties": {
                "annotations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingSlowburnAnnotation:getSlosSloAlertingSlowburnAnnotation"
                    },
                    "description": "Annotations to attach only to Slow Burn alerts.\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/getSlosSloAlertingSlowburnLabel:getSlosSloAlertingSlowburnLabel"
                    },
                    "description": "Labels to attach only to Slow Burn alerts.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/getSlosSloAlertingSlowburnAnnotation:getSlosSloAlertingSlowburnAnnotation": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloAlertingSlowburnLabel:getSlosSloAlertingSlowburnLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloDestinationDatasource:getSlosSloDestinationDatasource": {
            "properties": {
                "uid": {
                    "type": "string",
                    "description": "UID for the Mimir Datasource\n"
                }
            },
            "type": "object"
        },
        "grafana:index/getSlosSloLabel:getSlosSloLabel": {
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloObjective:getSlosSloObjective": {
            "properties": {
                "value": {
                    "type": "number",
                    "description": "Value between 0 and 1. If the value of the query is above the objective, the SLO is met.\n"
                },
                "window": {
                    "type": "string",
                    "description": "A Prometheus-parsable time duration string like 24h, 60m. This is the time window the objective is measured over.\n"
                }
            },
            "type": "object",
            "required": [
                "value",
                "window"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloQuery:getSlosSloQuery": {
            "properties": {
                "freeform": {
                    "$ref": "#/types/grafana:index/getSlosSloQueryFreeform:getSlosSloQueryFreeform"
                },
                "ratio": {
                    "$ref": "#/types/grafana:index/getSlosSloQueryRatio:getSlosSloQueryRatio"
                },
                "type": {
                    "type": "string",
                    "description": "Query type must be one of: \"freeform\", \"query\", \"ratio\", or \"threshold\"\n"
                }
            },
            "type": "object",
            "required": [
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloQueryFreeform:getSlosSloQueryFreeform": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Freeform Query Field\n"
                }
            },
            "type": "object",
            "required": [
                "query"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getSlosSloQueryRatio:getSlosSloQueryRatio": {
            "properties": {
                "groupByLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Defines Group By Labels used for per-label alerting. These appear as variables on SLO dashboards to enable filtering and aggregation. Labels must adhere to Prometheus label name schema - \"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                },
                "successMetric": {
                    "type": "string",
                    "description": "Counter metric for success events (numerator)\n"
                },
                "totalMetric": {
                    "type": "string",
                    "description": "Metric for total events (denominator)\n"
                }
            },
            "type": "object",
            "required": [
                "successMetric",
                "totalMetric"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "grafana:index/getTeamPreference:getTeamPreference": {
            "properties": {
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The UID of the dashboard to display when a team member logs in.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The default theme for this team. Available themes are `light`, `dark`, `system`, or an empty string for the default theme.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The default timezone for this team. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The default week start day for this team. Available values are `sunday`, `monday`, `saturday`, or an empty string for the default.\n"
                }
            },
            "type": "object"
        },
        "grafana:index/getTeamTeamSync:getTeamTeamSync": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "grafana:index/getUsersUser:getUsersUser": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The user's email.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "The user ID.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether the user is admin or not.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The user's login.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The user's name.\n"
                }
            },
            "type": "object",
            "required": [
                "email",
                "id",
                "isAdmin",
                "login",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the grafana package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "auth": {
                "type": "string",
                "description": "API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via\nthe `GRAFANA_AUTH` environment variable.\n",
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively\nbe set via the `GRAFANA_CA_CERT` environment variable.\n"
            },
            "cloudAccessPolicyToken": {
                "type": "string",
                "description": "Access Policy Token for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_ACCESS_POLICY_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "cloudApiKey": {
                "type": "string",
                "description": "Deprecated: Use `cloud_access_policy_token` instead.\n",
                "deprecationMessage": "Use `cloud_access_policy_token` instead.",
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n"
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n"
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n"
            },
            "orgId": {
                "type": "integer",
                "description": "Deprecated: Use the `org_id` attributes on resources instead.\n",
                "deprecationMessage": "Use the `org_id` attributes on resources instead."
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the\n`GRAFANA_RETRIES` environment variable.\n"
            },
            "retryStatusCodes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429\nand 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.\n"
            },
            "retryWait": {
                "type": "integer",
                "description": "The amount of time in seconds to wait between retries for Grafana API and Grafana Cloud API calls. May alternatively be\nset via the `GRAFANA_RETRY_WAIT` environment variable.\n"
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "secret": true
            },
            "smUrl": {
                "type": "string"
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n"
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be\nset via the `GRAFANA_TLS_CERT` environment variable.\n"
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via\nthe `GRAFANA_TLS_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n"
            }
        },
        "inputProperties": {
            "auth": {
                "type": "string",
                "description": "API token, basic auth in the `username:password` format or `anonymous` (string literal). May alternatively be set via\nthe `GRAFANA_AUTH` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_AUTH"
                    ]
                },
                "secret": true
            },
            "caCert": {
                "type": "string",
                "description": "Certificate CA bundle (file path or literal value) to use to verify the Grafana server's certificate. May alternatively\nbe set via the `GRAFANA_CA_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CA_CERT"
                    ]
                }
            },
            "cloudAccessPolicyToken": {
                "type": "string",
                "description": "Access Policy Token for Grafana Cloud. May alternatively be set via the `GRAFANA_CLOUD_ACCESS_POLICY_TOKEN` environment\nvariable.\n",
                "secret": true
            },
            "cloudApiKey": {
                "type": "string",
                "description": "Deprecated: Use `cloud_access_policy_token` instead.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_KEY"
                    ]
                },
                "deprecationMessage": "Use `cloud_access_policy_token` instead.",
                "secret": true
            },
            "cloudApiUrl": {
                "type": "string",
                "description": "Grafana Cloud's API URL. May alternatively be set via the `GRAFANA_CLOUD_API_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_CLOUD_API_URL"
                    ]
                }
            },
            "insecureSkipVerify": {
                "type": "boolean",
                "description": "Skip TLS certificate verification. May alternatively be set via the `GRAFANA_INSECURE_SKIP_VERIFY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_INSECURE_SKIP_VERIFY"
                    ]
                }
            },
            "oncallAccessToken": {
                "type": "string",
                "description": "A Grafana OnCall access token. May alternatively be set via the `GRAFANA_ONCALL_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "oncallUrl": {
                "type": "string",
                "description": "An Grafana OnCall backend address. May alternatively be set via the `GRAFANA_ONCALL_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ONCALL_URL"
                    ]
                }
            },
            "orgId": {
                "type": "integer",
                "description": "Deprecated: Use the `org_id` attributes on resources instead.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_ORG_ID"
                    ]
                },
                "deprecationMessage": "Use the `org_id` attributes on resources instead."
            },
            "retries": {
                "type": "integer",
                "description": "The amount of retries to use for Grafana API and Grafana Cloud API calls. May alternatively be set via the\n`GRAFANA_RETRIES` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_RETRIES"
                    ]
                }
            },
            "retryStatusCodes": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "The status codes to retry on for Grafana API and Grafana Cloud API calls. Use `x` as a digit wildcard. Defaults to 429\nand 5xx. May alternatively be set via the `GRAFANA_RETRY_STATUS_CODES` environment variable.\n"
            },
            "retryWait": {
                "type": "integer",
                "description": "The amount of time in seconds to wait between retries for Grafana API and Grafana Cloud API calls. May alternatively be\nset via the `GRAFANA_RETRY_WAIT` environment variable.\n"
            },
            "smAccessToken": {
                "type": "string",
                "description": "A Synthetic Monitoring access token. May alternatively be set via the `GRAFANA_SM_ACCESS_TOKEN` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_ACCESS_TOKEN"
                    ]
                },
                "secret": true
            },
            "smUrl": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_SM_URL"
                    ]
                }
            },
            "storeDashboardSha256": {
                "type": "boolean",
                "description": "Set to true if you want to save only the sha256sum instead of complete dashboard model JSON in the tfstate.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_STORE_DASHBOARD_SHA256"
                    ]
                }
            },
            "tlsCert": {
                "type": "string",
                "description": "Client TLS certificate (file path or literal value) to use to authenticate to the Grafana server. May alternatively be\nset via the `GRAFANA_TLS_CERT` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_CERT"
                    ]
                }
            },
            "tlsKey": {
                "type": "string",
                "description": "Client TLS key (file path or literal value) to use to authenticate to the Grafana server. May alternatively be set via\nthe `GRAFANA_TLS_KEY` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_TLS_KEY"
                    ]
                },
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "The root URL of a Grafana server. May alternatively be set via the `GRAFANA_URL` environment variable.\n",
                "defaultInfo": {
                    "environment": [
                        "GRAFANA_URL"
                    ]
                }
            }
        }
    },
    "resources": {
        "grafana:index/annotation:Annotation": {
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.\n",
                    "deprecationMessage": "Use dashboard_uid instead."
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "The ID of the dashboard on which to create the annotation.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "panelId": {
                    "type": "integer",
                    "description": "The ID of the dashboard panel on which to create the annotation.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the annotation.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text to associate with the annotation.\n"
                },
                "time": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                },
                "timeEnd": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                }
            },
            "required": [
                "text",
                "time",
                "timeEnd"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.\n",
                    "deprecationMessage": "Use dashboard_uid instead.",
                    "willReplaceOnChanges": true
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "The ID of the dashboard on which to create the annotation.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "panelId": {
                    "type": "integer",
                    "description": "The ID of the dashboard panel on which to create the annotation.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The tags to associate with the annotation.\n"
                },
                "text": {
                    "type": "string",
                    "description": "The text to associate with the annotation.\n"
                },
                "time": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                },
                "timeEnd": {
                    "type": "string",
                    "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                }
            },
            "requiredInputs": [
                "text"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Annotation resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "The ID of the dashboard on which to create the annotation. Deprecated: Use dashboard_uid instead.\n",
                        "deprecationMessage": "Use dashboard_uid instead.",
                        "willReplaceOnChanges": true
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "The ID of the dashboard on which to create the annotation.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "panelId": {
                        "type": "integer",
                        "description": "The ID of the dashboard panel on which to create the annotation.\n",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The tags to associate with the annotation.\n"
                    },
                    "text": {
                        "type": "string",
                        "description": "The text to associate with the annotation.\n"
                    },
                    "time": {
                        "type": "string",
                        "description": "The RFC 3339-formatted time string indicating the annotation's time.\n"
                    },
                    "timeEnd": {
                        "type": "string",
                        "description": "The RFC 3339-formatted time string indicating the annotation's end time.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/apiKey:ApiKey": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "role": {
                    "type": "string"
                },
                "secondsToLive": {
                    "type": "integer"
                }
            },
            "required": [
                "expiration",
                "key",
                "name",
                "role"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ApiKey resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudAccessPolicy:CloudAccessPolicy": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the access policy.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the access policy. Defaults to the name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the access policy.\n"
                },
                "policyId": {
                    "type": "string",
                    "description": "ID of the access policy.\n"
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/CloudAccessPolicyRealm:CloudAccessPolicyRealm"
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of\navailable regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n"
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the access policy. See\nhttps://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/#scopes for\npossible values.\n"
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the access policy.\n"
                }
            },
            "required": [
                "createdAt",
                "name",
                "policyId",
                "realms",
                "region",
                "scopes",
                "updatedAt"
            ],
            "inputProperties": {
                "displayName": {
                    "type": "string",
                    "description": "Display name of the access policy. Defaults to the name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the access policy.\n",
                    "willReplaceOnChanges": true
                },
                "realms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/CloudAccessPolicyRealm:CloudAccessPolicyRealm"
                    }
                },
                "region": {
                    "type": "string",
                    "description": "Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of\navailable regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                    "willReplaceOnChanges": true
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Scopes of the access policy. See\nhttps://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/#scopes for\npossible values.\n"
                }
            },
            "requiredInputs": [
                "realms",
                "region",
                "scopes"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudAccessPolicy resources.\n",
                "properties": {
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the access policy.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the access policy. Defaults to the name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the access policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policyId": {
                        "type": "string",
                        "description": "ID of the access policy.\n"
                    },
                    "realms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/CloudAccessPolicyRealm:CloudAccessPolicyRealm"
                        }
                    },
                    "region": {
                        "type": "string",
                        "description": "Region where the API is deployed. Generally where the stack is deployed. Use the region list API to get the list of\navailable regions: https://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                        "willReplaceOnChanges": true
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Scopes of the access policy. See\nhttps://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/#scopes for\npossible values.\n"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the access policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudAccessPolicyToken:CloudAccessPolicyToken": {
            "properties": {
                "accessPolicyId": {
                    "type": "string",
                    "description": "ID of the access policy for which to create a token.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "Creation date of the access policy token.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the access policy token. Defaults to the name.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date of the access policy token. Does not expire by default.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the access policy token.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the\nlist of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n"
                },
                "token": {
                    "type": "string",
                    "secret": true
                },
                "updatedAt": {
                    "type": "string",
                    "description": "Last update date of the access policy token.\n"
                }
            },
            "required": [
                "accessPolicyId",
                "createdAt",
                "name",
                "region",
                "token",
                "updatedAt"
            ],
            "inputProperties": {
                "accessPolicyId": {
                    "type": "string",
                    "description": "ID of the access policy for which to create a token.\n",
                    "willReplaceOnChanges": true
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the access policy token. Defaults to the name.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "Expiration date of the access policy token. Does not expire by default.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the access policy token.\n",
                    "willReplaceOnChanges": true
                },
                "region": {
                    "type": "string",
                    "description": "Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the\nlist of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "accessPolicyId",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudAccessPolicyToken resources.\n",
                "properties": {
                    "accessPolicyId": {
                        "type": "string",
                        "description": "ID of the access policy for which to create a token.\n",
                        "willReplaceOnChanges": true
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the access policy token.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the access policy token. Defaults to the name.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "Expiration date of the access policy token. Does not expire by default.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the access policy token.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the access policy. Should be set to the same region as the access policy. Use the region list API to get the\nlist of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                        "willReplaceOnChanges": true
                    },
                    "token": {
                        "type": "string",
                        "secret": true
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the access policy token.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudApiKey:CloudApiKey": {
            "properties": {
                "cloudOrgSlug": {
                    "type": "string",
                    "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The generated API key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API key.\n"
                },
                "role": {
                    "type": "string",
                    "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See\nhttps://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n"
                }
            },
            "required": [
                "cloudOrgSlug",
                "key",
                "name",
                "role"
            ],
            "inputProperties": {
                "cloudOrgSlug": {
                    "type": "string",
                    "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the API key.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See\nhttps://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "cloudOrgSlug",
                "role"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudApiKey resources.\n",
                "properties": {
                    "cloudOrgSlug": {
                        "type": "string",
                        "description": "The slug of the organization to create the API key in. This is the same slug as the organization name in the URL.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The generated API key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the API key.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "Role of the API key. Should be one of [Viewer Editor Admin MetricsPublisher PluginPublisher]. See\nhttps://grafana.com/docs/grafana-cloud/api/#create-api-key for details.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudPluginInstallation:CloudPluginInstallation": {
            "properties": {
                "slug": {
                    "type": "string",
                    "description": "Slug of the plugin to be installed.\n"
                },
                "stackSlug": {
                    "type": "string",
                    "description": "The stack id to which the plugin should be installed.\n"
                },
                "version": {
                    "type": "string",
                    "description": "Version of the plugin to be installed.\n"
                }
            },
            "required": [
                "slug",
                "stackSlug",
                "version"
            ],
            "inputProperties": {
                "slug": {
                    "type": "string",
                    "description": "Slug of the plugin to be installed.\n",
                    "willReplaceOnChanges": true
                },
                "stackSlug": {
                    "type": "string",
                    "description": "The stack id to which the plugin should be installed.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "string",
                    "description": "Version of the plugin to be installed.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "slug",
                "stackSlug",
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudPluginInstallation resources.\n",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "Slug of the plugin to be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackSlug": {
                        "type": "string",
                        "description": "The stack id to which the plugin should be installed.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "string",
                        "description": "Version of the plugin to be installed.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudStack:CloudStack": {
            "properties": {
                "alertmanagerName": {
                    "type": "string",
                    "description": "Name of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerStatus": {
                    "type": "string",
                    "description": "Status of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerUrl": {
                    "type": "string",
                    "description": "Base URL of the Alertmanager instance configured for this stack.\n"
                },
                "alertmanagerUserId": {
                    "type": "integer",
                    "description": "User ID of the Alertmanager instance configured for this stack.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of stack.\n"
                },
                "graphiteName": {
                    "type": "string"
                },
                "graphiteStatus": {
                    "type": "string"
                },
                "graphiteUrl": {
                    "type": "string"
                },
                "graphiteUserId": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels to assign to the stack. Label keys and values must match the following regexp: \"^[a-zA-Z0-9/\\\\-.]+$\" and\nstacks cannot have more than 10 labels.\n"
                },
                "logsName": {
                    "type": "string"
                },
                "logsStatus": {
                    "type": "string"
                },
                "logsUrl": {
                    "type": "string"
                },
                "logsUserId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Name of stack. Conventionally matches the url of the instance (e.g. `\u003cstack_slug\u003e.grafana.net`).\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "Organization id to assign to this stack.\n"
                },
                "orgName": {
                    "type": "string",
                    "description": "Organization name to assign to this stack.\n"
                },
                "orgSlug": {
                    "type": "string",
                    "description": "Organization slug to assign to this stack.\n"
                },
                "otlpUrl": {
                    "type": "string",
                    "description": "Base URL of the OTLP instance configured for this stack. See\nhttps://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.\n"
                },
                "profilesName": {
                    "type": "string"
                },
                "profilesStatus": {
                    "type": "string"
                },
                "profilesUrl": {
                    "type": "string"
                },
                "profilesUserId": {
                    "type": "integer"
                },
                "prometheusName": {
                    "type": "string",
                    "description": "Prometheus name for this instance.\n"
                },
                "prometheusRemoteEndpoint": {
                    "type": "string",
                    "description": "Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana\n"
                },
                "prometheusRemoteWriteEndpoint": {
                    "type": "string",
                    "description": "Use this URL to send prometheus metrics to Grafana cloud\n"
                },
                "prometheusStatus": {
                    "type": "string",
                    "description": "Prometheus status for this instance.\n"
                },
                "prometheusUrl": {
                    "type": "string",
                    "description": "Prometheus url for this instance.\n"
                },
                "prometheusUserId": {
                    "type": "integer",
                    "description": "Prometheus user ID. Used for e.g. remote_write.\n"
                },
                "regionSlug": {
                    "type": "string",
                    "description": "Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired\nregion. Use the region list API to get the list of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "Subdomain that the Grafana instance will be available at. Setting slug to `\u003cstack_slug\u003e` will make the instance\navailable at `https://\u003cstack_slug\u003e.grafana.net`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the stack.\n"
                },
                "tracesName": {
                    "type": "string"
                },
                "tracesStatus": {
                    "type": "string"
                },
                "tracesUrl": {
                    "type": "string",
                    "description": "Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append\n`/tempo` to the URL.\n"
                },
                "tracesUserId": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                },
                "waitForReadiness": {
                    "type": "boolean",
                    "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana\ninstance).\n"
                },
                "waitForReadinessTimeout": {
                    "type": "string",
                    "description": "How long to wait for readiness (if enabled).\n"
                }
            },
            "required": [
                "alertmanagerName",
                "alertmanagerStatus",
                "alertmanagerUrl",
                "alertmanagerUserId",
                "graphiteName",
                "graphiteStatus",
                "graphiteUrl",
                "graphiteUserId",
                "logsName",
                "logsStatus",
                "logsUrl",
                "logsUserId",
                "name",
                "orgId",
                "orgName",
                "orgSlug",
                "otlpUrl",
                "profilesName",
                "profilesStatus",
                "profilesUrl",
                "profilesUserId",
                "prometheusName",
                "prometheusRemoteEndpoint",
                "prometheusRemoteWriteEndpoint",
                "prometheusStatus",
                "prometheusUrl",
                "prometheusUserId",
                "slug",
                "status",
                "tracesName",
                "tracesStatus",
                "tracesUrl",
                "tracesUserId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of stack.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "A map of labels to assign to the stack. Label keys and values must match the following regexp: \"^[a-zA-Z0-9/\\\\-.]+$\" and\nstacks cannot have more than 10 labels.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of stack. Conventionally matches the url of the instance (e.g. `\u003cstack_slug\u003e.grafana.net`).\n"
                },
                "regionSlug": {
                    "type": "string",
                    "description": "Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired\nregion. Use the region list API to get the list of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                    "willReplaceOnChanges": true
                },
                "slug": {
                    "type": "string",
                    "description": "Subdomain that the Grafana instance will be available at. Setting slug to `\u003cstack_slug\u003e` will make the instance\navailable at `https://\u003cstack_slug\u003e.grafana.net`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                },
                "waitForReadiness": {
                    "type": "boolean",
                    "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana\ninstance).\n"
                },
                "waitForReadinessTimeout": {
                    "type": "string",
                    "description": "How long to wait for readiness (if enabled).\n"
                }
            },
            "requiredInputs": [
                "slug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudStack resources.\n",
                "properties": {
                    "alertmanagerName": {
                        "type": "string",
                        "description": "Name of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerStatus": {
                        "type": "string",
                        "description": "Status of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUrl": {
                        "type": "string",
                        "description": "Base URL of the Alertmanager instance configured for this stack.\n"
                    },
                    "alertmanagerUserId": {
                        "type": "integer",
                        "description": "User ID of the Alertmanager instance configured for this stack.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of stack.\n"
                    },
                    "graphiteName": {
                        "type": "string"
                    },
                    "graphiteStatus": {
                        "type": "string"
                    },
                    "graphiteUrl": {
                        "type": "string"
                    },
                    "graphiteUserId": {
                        "type": "integer"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of labels to assign to the stack. Label keys and values must match the following regexp: \"^[a-zA-Z0-9/\\\\-.]+$\" and\nstacks cannot have more than 10 labels.\n"
                    },
                    "logsName": {
                        "type": "string"
                    },
                    "logsStatus": {
                        "type": "string"
                    },
                    "logsUrl": {
                        "type": "string"
                    },
                    "logsUserId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of stack. Conventionally matches the url of the instance (e.g. `\u003cstack_slug\u003e.grafana.net`).\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "Organization id to assign to this stack.\n"
                    },
                    "orgName": {
                        "type": "string",
                        "description": "Organization name to assign to this stack.\n"
                    },
                    "orgSlug": {
                        "type": "string",
                        "description": "Organization slug to assign to this stack.\n"
                    },
                    "otlpUrl": {
                        "type": "string",
                        "description": "Base URL of the OTLP instance configured for this stack. See\nhttps://grafana.com/docs/grafana-cloud/send-data/otlp/send-data-otlp/ for docs on how to use this.\n"
                    },
                    "profilesName": {
                        "type": "string"
                    },
                    "profilesStatus": {
                        "type": "string"
                    },
                    "profilesUrl": {
                        "type": "string"
                    },
                    "profilesUserId": {
                        "type": "integer"
                    },
                    "prometheusName": {
                        "type": "string",
                        "description": "Prometheus name for this instance.\n"
                    },
                    "prometheusRemoteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to query hosted metrics data e.g. Prometheus data source in Grafana\n"
                    },
                    "prometheusRemoteWriteEndpoint": {
                        "type": "string",
                        "description": "Use this URL to send prometheus metrics to Grafana cloud\n"
                    },
                    "prometheusStatus": {
                        "type": "string",
                        "description": "Prometheus status for this instance.\n"
                    },
                    "prometheusUrl": {
                        "type": "string",
                        "description": "Prometheus url for this instance.\n"
                    },
                    "prometheusUserId": {
                        "type": "integer",
                        "description": "Prometheus user ID. Used for e.g. remote_write.\n"
                    },
                    "regionSlug": {
                        "type": "string",
                        "description": "Region slug to assign to this stack. Changing region will destroy the existing stack and create a new one in the desired\nregion. Use the region list API to get the list of available regions:\nhttps://grafana.com/docs/grafana-cloud/developer-resources/api-reference/cloud-api/#list-regions.\n",
                        "willReplaceOnChanges": true
                    },
                    "slug": {
                        "type": "string",
                        "description": "Subdomain that the Grafana instance will be available at. Setting slug to `\u003cstack_slug\u003e` will make the instance\navailable at `https://\u003cstack_slug\u003e.grafana.net`.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the stack.\n"
                    },
                    "tracesName": {
                        "type": "string"
                    },
                    "tracesStatus": {
                        "type": "string"
                    },
                    "tracesUrl": {
                        "type": "string",
                        "description": "Base URL of the Traces instance configured for this stack. To use this in the Tempo data source in Grafana, append\n`/tempo` to the URL.\n"
                    },
                    "tracesUserId": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string",
                        "description": "Custom URL for the Grafana instance. Must have a CNAME setup to point to `.grafana.net` before creating the stack\n"
                    },
                    "waitForReadiness": {
                        "type": "boolean",
                        "description": "Whether to wait for readiness of the stack after creating it. The check is a HEAD request to the stack URL (Grafana\ninstance).\n"
                    },
                    "waitForReadinessTimeout": {
                        "type": "string",
                        "description": "How long to wait for readiness (if enabled).\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudStackApiKey:CloudStackApiKey": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "secondsToLive": {
                    "type": "integer"
                },
                "stackSlug": {
                    "type": "string"
                }
            },
            "required": [
                "expiration",
                "key",
                "name",
                "role",
                "stackSlug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "stackSlug": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "role",
                "stackSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudStackApiKey resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "stackSlug": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudStackServiceAccount:CloudStackServiceAccount": {
            "properties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n"
                },
                "stackSlug": {
                    "type": "string"
                }
            },
            "required": [
                "name",
                "stackSlug"
            ],
            "inputProperties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n",
                    "willReplaceOnChanges": true
                },
                "stackSlug": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "stackSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudStackServiceAccount resources.\n",
                "properties": {
                    "isDisabled": {
                        "type": "boolean",
                        "description": "The disabled status for the service account.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service account.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The basic role of the service account in the organization.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackSlug": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/cloudStackServiceAccountToken:CloudStackServiceAccountToken": {
            "properties": {
                "expiration": {
                    "type": "string"
                },
                "hasExpired": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string",
                    "secret": true
                },
                "name": {
                    "type": "string"
                },
                "secondsToLive": {
                    "type": "integer"
                },
                "serviceAccountId": {
                    "type": "string"
                },
                "stackSlug": {
                    "type": "string"
                }
            },
            "required": [
                "expiration",
                "hasExpired",
                "key",
                "name",
                "serviceAccountId",
                "stackSlug"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "willReplaceOnChanges": true
                },
                "serviceAccountId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "stackSlug": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceAccountId",
                "stackSlug"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudStackServiceAccountToken resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string"
                    },
                    "hasExpired": {
                        "type": "boolean"
                    },
                    "key": {
                        "type": "string",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "stackSlug": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/contactPoint:ContactPoint": {
            "properties": {
                "alertmanagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                    },
                    "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                },
                "dingdings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                    },
                    "description": "A contact point that sends notifications to DingDing.\n"
                },
                "disableProvenance": {
                    "type": "boolean"
                },
                "discords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                    },
                    "description": "A contact point that sends notifications as Discord messages\n"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                    },
                    "description": "A contact point that sends notifications to an email address.\n"
                },
                "googlechats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                    },
                    "description": "A contact point that sends notifications to Google Chat.\n"
                },
                "kafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                    },
                    "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointLine:ContactPointLine"
                    },
                    "description": "A contact point that sends notifications to LINE.me.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the contact point.\n"
                },
                "oncalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOncall:ContactPointOncall"
                    },
                    "description": "A contact point that sends notifications to Grafana On-Call.\n"
                },
                "opsgenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                    },
                    "description": "A contact point that sends notifications to OpsGenie.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "pagerduties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                    },
                    "description": "A contact point that sends notifications to PagerDuty.\n"
                },
                "pushovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                    },
                    "description": "A contact point that sends notifications to Pushover.\n"
                },
                "sensugos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                    },
                    "description": "A contact point that sends notifications to SensuGo.\n"
                },
                "slacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                    },
                    "description": "A contact point that sends notifications to Slack.\n"
                },
                "sns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSn:ContactPointSn"
                    },
                    "description": "A contact point that sends notifications to Amazon SNS. Requires Amazon Managed Grafana.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                    },
                    "description": "A contact point that sends notifications to Microsoft Teams.\n"
                },
                "telegrams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                    },
                    "description": "A contact point that sends notifications to Telegram.\n"
                },
                "threemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                    },
                    "description": "A contact point that sends notifications to Threema.\n"
                },
                "victorops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                    },
                    "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                },
                "webexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebex:ContactPointWebex"
                    },
                    "description": "A contact point that sends notifications to Cisco Webex.\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                    },
                    "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here:\nhttps://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                },
                "wecoms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                    },
                    "description": "A contact point that sends notifications to WeCom.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "alertmanagers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                    },
                    "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                },
                "dingdings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                    },
                    "description": "A contact point that sends notifications to DingDing.\n"
                },
                "disableProvenance": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "discords": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                    },
                    "description": "A contact point that sends notifications as Discord messages\n"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                    },
                    "description": "A contact point that sends notifications to an email address.\n"
                },
                "googlechats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                    },
                    "description": "A contact point that sends notifications to Google Chat.\n"
                },
                "kafkas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                    },
                    "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointLine:ContactPointLine"
                    },
                    "description": "A contact point that sends notifications to LINE.me.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the contact point.\n",
                    "willReplaceOnChanges": true
                },
                "oncalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOncall:ContactPointOncall"
                    },
                    "description": "A contact point that sends notifications to Grafana On-Call.\n"
                },
                "opsgenies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                    },
                    "description": "A contact point that sends notifications to OpsGenie.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "pagerduties": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                    },
                    "description": "A contact point that sends notifications to PagerDuty.\n"
                },
                "pushovers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                    },
                    "description": "A contact point that sends notifications to Pushover.\n"
                },
                "sensugos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                    },
                    "description": "A contact point that sends notifications to SensuGo.\n"
                },
                "slacks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                    },
                    "description": "A contact point that sends notifications to Slack.\n"
                },
                "sns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointSn:ContactPointSn"
                    },
                    "description": "A contact point that sends notifications to Amazon SNS. Requires Amazon Managed Grafana.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                    },
                    "description": "A contact point that sends notifications to Microsoft Teams.\n"
                },
                "telegrams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                    },
                    "description": "A contact point that sends notifications to Telegram.\n"
                },
                "threemas": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                    },
                    "description": "A contact point that sends notifications to Threema.\n"
                },
                "victorops": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                    },
                    "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                },
                "webexes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebex:ContactPointWebex"
                    },
                    "description": "A contact point that sends notifications to Cisco Webex.\n"
                },
                "webhooks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                    },
                    "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here:\nhttps://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                },
                "wecoms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                    },
                    "description": "A contact point that sends notifications to WeCom.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ContactPoint resources.\n",
                "properties": {
                    "alertmanagers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointAlertmanager:ContactPointAlertmanager"
                        },
                        "description": "A contact point that sends notifications to other Alertmanager instances.\n"
                    },
                    "dingdings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointDingding:ContactPointDingding"
                        },
                        "description": "A contact point that sends notifications to DingDing.\n"
                    },
                    "disableProvenance": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "discords": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointDiscord:ContactPointDiscord"
                        },
                        "description": "A contact point that sends notifications as Discord messages\n"
                    },
                    "emails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointEmail:ContactPointEmail"
                        },
                        "description": "A contact point that sends notifications to an email address.\n"
                    },
                    "googlechats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointGooglechat:ContactPointGooglechat"
                        },
                        "description": "A contact point that sends notifications to Google Chat.\n"
                    },
                    "kafkas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointKafka:ContactPointKafka"
                        },
                        "description": "A contact point that publishes notifications to Apache Kafka topics.\n"
                    },
                    "lines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointLine:ContactPointLine"
                        },
                        "description": "A contact point that sends notifications to LINE.me.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the contact point.\n",
                        "willReplaceOnChanges": true
                    },
                    "oncalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointOncall:ContactPointOncall"
                        },
                        "description": "A contact point that sends notifications to Grafana On-Call.\n"
                    },
                    "opsgenies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointOpsgeny:ContactPointOpsgeny"
                        },
                        "description": "A contact point that sends notifications to OpsGenie.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "pagerduties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointPagerduty:ContactPointPagerduty"
                        },
                        "description": "A contact point that sends notifications to PagerDuty.\n"
                    },
                    "pushovers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointPushover:ContactPointPushover"
                        },
                        "description": "A contact point that sends notifications to Pushover.\n"
                    },
                    "sensugos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointSensugo:ContactPointSensugo"
                        },
                        "description": "A contact point that sends notifications to SensuGo.\n"
                    },
                    "slacks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointSlack:ContactPointSlack"
                        },
                        "description": "A contact point that sends notifications to Slack.\n"
                    },
                    "sns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointSn:ContactPointSn"
                        },
                        "description": "A contact point that sends notifications to Amazon SNS. Requires Amazon Managed Grafana.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointTeam:ContactPointTeam"
                        },
                        "description": "A contact point that sends notifications to Microsoft Teams.\n"
                    },
                    "telegrams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointTelegram:ContactPointTelegram"
                        },
                        "description": "A contact point that sends notifications to Telegram.\n"
                    },
                    "threemas": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointThreema:ContactPointThreema"
                        },
                        "description": "A contact point that sends notifications to Threema.\n"
                    },
                    "victorops": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointVictorop:ContactPointVictorop"
                        },
                        "description": "A contact point that sends notifications to VictorOps (now known as Splunk OnCall).\n"
                    },
                    "webexes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointWebex:ContactPointWebex"
                        },
                        "description": "A contact point that sends notifications to Cisco Webex.\n"
                    },
                    "webhooks": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointWebhook:ContactPointWebhook"
                        },
                        "description": "A contact point that sends notifications to an arbitrary webhook, using the Prometheus webhook format defined here:\nhttps://prometheus.io/docs/alerting/latest/configuration/#webhook_config\n"
                    },
                    "wecoms": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ContactPointWecom:ContactPointWecom"
                        },
                        "description": "A contact point that sends notifications to WeCom.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dashboard:Dashboard": {
            "properties": {
                "configJson": {
                    "type": "string",
                    "description": "The complete dashboard model JSON.\n"
                },
                "dashboardId": {
                    "type": "integer",
                    "description": "The numeric ID of the dashboard computed by Grafana.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The id or UID of the folder to save the dashboard in.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Set a commit message for the version history.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same\ndashboard uid.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided\nwhen creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards\nbetween multiple Grafana installs.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL of the dashboard.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your\ndashboard are not lost.\n"
                }
            },
            "required": [
                "configJson",
                "dashboardId",
                "uid",
                "url",
                "version"
            ],
            "inputProperties": {
                "configJson": {
                    "type": "string",
                    "description": "The complete dashboard model JSON.\n"
                },
                "folder": {
                    "type": "string",
                    "description": "The id or UID of the folder to save the dashboard in.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Set a commit message for the version history.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "overwrite": {
                    "type": "boolean",
                    "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same\ndashboard uid.\n"
                }
            },
            "requiredInputs": [
                "configJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "configJson": {
                        "type": "string",
                        "description": "The complete dashboard model JSON.\n"
                    },
                    "dashboardId": {
                        "type": "integer",
                        "description": "The numeric ID of the dashboard computed by Grafana.\n"
                    },
                    "folder": {
                        "type": "string",
                        "description": "The id or UID of the folder to save the dashboard in.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "Set a commit message for the version history.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "overwrite": {
                        "type": "boolean",
                        "description": "Set to true if you want to overwrite existing dashboard with newer version, same dashboard title in folder or same\ndashboard uid.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier of a dashboard. This is used to construct its URL. It's automatically generated if not provided\nwhen creating a dashboard. The uid allows having consistent URLs for accessing dashboards and when syncing dashboards\nbetween multiple Grafana installs.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the dashboard.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Whenever you save a version of your dashboard, a copy of that version is saved so that previous versions of your\ndashboard are not lost.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dashboardPermission:DashboardPermission": {
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                    "deprecationMessage": "use `dashboard_uid` instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "UID of the dashboard to apply permissions to.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "dashboardId",
                "dashboardUid"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                    "deprecationMessage": "use `dashboard_uid` instead",
                    "willReplaceOnChanges": true
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "UID of the dashboard to apply permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardPermission resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "ID of the dashboard to apply permissions to. Deprecated: use `dashboard_uid` instead.\n",
                        "deprecationMessage": "use `dashboard_uid` instead",
                        "willReplaceOnChanges": true
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "UID of the dashboard to apply permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DashboardPermissionPermission:DashboardPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dashboardPublic:DashboardPublic": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not\nprovided when creating a public dashboard.\n"
                },
                "annotationsEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to show annotations. The default value is `false`.\n"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "The unique identifier of the original dashboard.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the public dashboard. The default value is `false`.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "share": {
                    "type": "string",
                    "description": "Set the share mode. The default value is `public`.\n"
                },
                "timeSelectionEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the time picker in the public dashboard. The default value is `false`.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public\ndashboard.\n"
                }
            },
            "required": [
                "accessToken",
                "dashboardUid",
                "uid"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not\nprovided when creating a public dashboard.\n"
                },
                "annotationsEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to show annotations. The default value is `false`.\n"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "The unique identifier of the original dashboard.\n"
                },
                "isEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the public dashboard. The default value is `false`.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "share": {
                    "type": "string",
                    "description": "Set the share mode. The default value is `public`.\n"
                },
                "timeSelectionEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the time picker in the public dashboard. The default value is `false`.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public\ndashboard.\n"
                }
            },
            "requiredInputs": [
                "dashboardUid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardPublic resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "A public unique identifier of a public dashboard. This is used to construct its URL. It's automatically generated if not\nprovided when creating a public dashboard.\n"
                    },
                    "annotationsEnabled": {
                        "type": "boolean",
                        "description": "Set to `true` to show annotations. The default value is `false`.\n"
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "The unique identifier of the original dashboard.\n"
                    },
                    "isEnabled": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the public dashboard. The default value is `false`.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "share": {
                        "type": "string",
                        "description": "Set the share mode. The default value is `public`.\n"
                    },
                    "timeSelectionEnabled": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the time picker in the public dashboard. The default value is `false`.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier of a public dashboard. It's automatically generated if not provided when creating a public\ndashboard.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dataSource:DataSource": {
            "properties": {
                "accessMode": {
                    "type": "string",
                    "description": "The method by which Grafana will access the data source: `proxy` or `direct`.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable basic auth for the data source.\n"
                },
                "basicAuthUsername": {
                    "type": "string",
                    "description": "Basic auth username.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "(Required by some data source types) The name of the database to use on the selected data source server.\n"
                },
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers\n",
                    "secret": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether to set the data source as default. This should only be `true` to a single data source.\n"
                },
                "jsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data\nsource. To figure out what options a datasource has available, see its docs or inspect the network data when saving it\nfrom the Grafana UI. Note that keys in this map are usually camelCased.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the data source.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "secureJsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options\nto the data source. To figure out what options a datasource has available, see its docs or inspect the network data when\nsaving it from the Grafana UI. Note that keys in this map are usually camelCased.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Must be one of the supported data source keywords.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required by some data source types) The username to use to authenticate to the data source.\n"
                }
            },
            "required": [
                "name",
                "type",
                "uid"
            ],
            "inputProperties": {
                "accessMode": {
                    "type": "string",
                    "description": "The method by which Grafana will access the data source: `proxy` or `direct`.\n"
                },
                "basicAuthEnabled": {
                    "type": "boolean",
                    "description": "Whether to enable basic auth for the data source.\n"
                },
                "basicAuthUsername": {
                    "type": "string",
                    "description": "Basic auth username.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "(Required by some data source types) The name of the database to use on the selected data source server.\n"
                },
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom HTTP headers\n",
                    "secret": true
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Whether to set the data source as default. This should only be `true` to a single data source.\n"
                },
                "jsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data\nsource. To figure out what options a datasource has available, see its docs or inspect the network data when saving it\nfrom the Grafana UI. Note that keys in this map are usually camelCased.\n"
                },
                "name": {
                    "type": "string",
                    "description": "A unique name for the data source.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "secureJsonDataEncoded": {
                    "type": "string",
                    "description": "Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options\nto the data source. To figure out what options a datasource has available, see its docs or inspect the network data when\nsaving it from the Grafana UI. Note that keys in this map are usually camelCased.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "The data source type. Must be one of the supported data source keywords.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier. If unset, this will be automatically generated.\n",
                    "willReplaceOnChanges": true
                },
                "url": {
                    "type": "string",
                    "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                },
                "username": {
                    "type": "string",
                    "description": "(Required by some data source types) The username to use to authenticate to the data source.\n"
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSource resources.\n",
                "properties": {
                    "accessMode": {
                        "type": "string",
                        "description": "The method by which Grafana will access the data source: `proxy` or `direct`.\n"
                    },
                    "basicAuthEnabled": {
                        "type": "boolean",
                        "description": "Whether to enable basic auth for the data source.\n"
                    },
                    "basicAuthUsername": {
                        "type": "string",
                        "description": "Basic auth username.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "(Required by some data source types) The name of the database to use on the selected data source server.\n"
                    },
                    "httpHeaders": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom HTTP headers\n",
                        "secret": true
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Whether to set the data source as default. This should only be `true` to a single data source.\n"
                    },
                    "jsonDataEncoded": {
                        "type": "string",
                        "description": "Serialized JSON string containing the json data. This attribute can be used to pass configuration options to the data\nsource. To figure out what options a datasource has available, see its docs or inspect the network data when saving it\nfrom the Grafana UI. Note that keys in this map are usually camelCased.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "A unique name for the data source.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "secureJsonDataEncoded": {
                        "type": "string",
                        "description": "Serialized JSON string containing the secure json data. This attribute can be used to pass secure configuration options\nto the data source. To figure out what options a datasource has available, see its docs or inspect the network data when\nsaving it from the Grafana UI. Note that keys in this map are usually camelCased.\n",
                        "secret": true
                    },
                    "type": {
                        "type": "string",
                        "description": "The data source type. Must be one of the supported data source keywords.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier. If unset, this will be automatically generated.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL for the data source. The type of URL required varies depending on the chosen data source type.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "(Required by some data source types) The username to use to authenticate to the data source.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/dataSourcePermission:DataSourcePermission": {
            "properties": {
                "datasourceId": {
                    "type": "string",
                    "description": "ID of the datasource to apply permissions to.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "datasourceId"
            ],
            "inputProperties": {
                "datasourceId": {
                    "type": "string",
                    "description": "ID of the datasource to apply permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "requiredInputs": [
                "datasourceId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DataSourcePermission resources.\n",
                "properties": {
                    "datasourceId": {
                        "type": "string",
                        "description": "ID of the datasource to apply permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/DataSourcePermissionPermission:DataSourcePermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/folder:Folder": {
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "parentFolderUid": {
                    "type": "string",
                    "description": "The uid of the parent folder. If set, the folder will be nested. If not set, the folder will be created in the root\nfolder. Note: This requires the nestedFolders feature flag to be enabled on your Grafana instance.\n"
                },
                "preventDestroyIfNotEmpty": {
                    "type": "boolean",
                    "description": "Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the folder.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The full URL of the folder.\n"
                }
            },
            "required": [
                "title",
                "uid",
                "url"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "parentFolderUid": {
                    "type": "string",
                    "description": "The uid of the parent folder. If set, the folder will be nested. If not set, the folder will be created in the root\nfolder. Note: This requires the nestedFolders feature flag to be enabled on your Grafana instance.\n",
                    "willReplaceOnChanges": true
                },
                "preventDestroyIfNotEmpty": {
                    "type": "boolean",
                    "description": "Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the folder.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Folder resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "parentFolderUid": {
                        "type": "string",
                        "description": "The uid of the parent folder. If set, the folder will be nested. If not set, the folder will be created in the root\nfolder. Note: This requires the nestedFolders feature flag to be enabled on your Grafana instance.\n",
                        "willReplaceOnChanges": true
                    },
                    "preventDestroyIfNotEmpty": {
                        "type": "boolean",
                        "description": "Prevent deletion of the folder if it is not empty (contains dashboards or alert rules).\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the folder.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier.\n",
                        "willReplaceOnChanges": true
                    },
                    "url": {
                        "type": "string",
                        "description": "The full URL of the folder.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/folderPermission:FolderPermission": {
            "properties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "required": [
                "folderUid"
            ],
            "inputProperties": {
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                }
            },
            "requiredInputs": [
                "folderUid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FolderPermission resources.\n",
                "properties": {
                    "folderUid": {
                        "type": "string",
                        "description": "The UID of the folder.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/FolderPermissionPermission:FolderPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/libraryPanel:LibraryPanel": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "Timestamp when the library panel was created.\n"
                },
                "dashboardIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Numerical IDs of Grafana dashboards containing the library panel.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the library panel.\n"
                },
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder where the library panel is stored.\n"
                },
                "folderName": {
                    "type": "string",
                    "description": "Name of the folder containing the library panel.\n"
                },
                "folderUid": {
                    "type": "string",
                    "description": "Unique ID (UID) of the folder containing the library panel.\n"
                },
                "modelJson": {
                    "type": "string",
                    "description": "The JSON model for the library panel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the library panel.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "panelId": {
                    "type": "integer",
                    "description": "The numeric ID of the library panel computed by Grafana.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the library panel (eg. text).\n"
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs.\nIt’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for\naccessing library panels and when syncing library panels between multiple Grafana installs.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "Timestamp when the library panel was last modified.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the library panel.\n"
                }
            },
            "required": [
                "created",
                "dashboardIds",
                "description",
                "folderName",
                "folderUid",
                "modelJson",
                "name",
                "panelId",
                "type",
                "uid",
                "updated",
                "version"
            ],
            "inputProperties": {
                "folderId": {
                    "type": "string",
                    "description": "ID of the folder where the library panel is stored.\n"
                },
                "modelJson": {
                    "type": "string",
                    "description": "The JSON model for the library panel.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the library panel.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "uid": {
                    "type": "string",
                    "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs.\nIt’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for\naccessing library panels and when syncing library panels between multiple Grafana installs.\n"
                }
            },
            "requiredInputs": [
                "modelJson"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LibraryPanel resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "Timestamp when the library panel was created.\n"
                    },
                    "dashboardIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Numerical IDs of Grafana dashboards containing the library panel.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the library panel.\n"
                    },
                    "folderId": {
                        "type": "string",
                        "description": "ID of the folder where the library panel is stored.\n"
                    },
                    "folderName": {
                        "type": "string",
                        "description": "Name of the folder containing the library panel.\n"
                    },
                    "folderUid": {
                        "type": "string",
                        "description": "Unique ID (UID) of the folder containing the library panel.\n"
                    },
                    "modelJson": {
                        "type": "string",
                        "description": "The JSON model for the library panel.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the library panel.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "panelId": {
                        "type": "integer",
                        "description": "The numeric ID of the library panel computed by Grafana.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the library panel (eg. text).\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "The unique identifier (UID) of a library panel uniquely identifies library panels between multiple Grafana installs.\nIt’s automatically generated unless you specify it during library panel creation.The UID provides consistent URLs for\naccessing library panels and when syncing library panels between multiple Grafana installs.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Timestamp when the library panel was last modified.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version of the library panel.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/machineLearningHoliday:MachineLearningHoliday": {
            "properties": {
                "customPeriods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MachineLearningHolidayCustomPeriod:MachineLearningHolidayCustomPeriod"
                    },
                    "description": "A list of custom periods for the holiday.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the holiday.\n"
                },
                "icalTimezone": {
                    "type": "string",
                    "description": "The timezone to use for events in the iCal file pointed to by ical_url.\n"
                },
                "icalUrl": {
                    "type": "string",
                    "description": "A URL to an iCal file containing all occurrences of the holiday.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the holiday.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "customPeriods": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MachineLearningHolidayCustomPeriod:MachineLearningHolidayCustomPeriod"
                    },
                    "description": "A list of custom periods for the holiday.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the holiday.\n"
                },
                "icalTimezone": {
                    "type": "string",
                    "description": "The timezone to use for events in the iCal file pointed to by ical_url.\n"
                },
                "icalUrl": {
                    "type": "string",
                    "description": "A URL to an iCal file containing all occurrences of the holiday.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the holiday.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineLearningHoliday resources.\n",
                "properties": {
                    "customPeriods": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/MachineLearningHolidayCustomPeriod:MachineLearningHolidayCustomPeriod"
                        },
                        "description": "A list of custom periods for the holiday.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the holiday.\n"
                    },
                    "icalTimezone": {
                        "type": "string",
                        "description": "The timezone to use for events in the iCal file pointed to by ical_url.\n"
                    },
                    "icalUrl": {
                        "type": "string",
                        "description": "A URL to an iCal file containing all occurrences of the holiday.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the holiday.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/machineLearningJob:MachineLearningJob": {
            "properties": {
                "customLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the custom labels added on the forecast.\n"
                },
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the job.\n"
                },
                "holidays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of holiday IDs or names to take into account when training the model.\n"
                },
                "hyperParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/\nfor the full list of available hyperparameters.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the job results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                },
                "trainingWindow": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on.\n"
                }
            },
            "required": [
                "datasourceType",
                "metric",
                "name",
                "queryParams"
            ],
            "inputProperties": {
                "customLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the custom labels added on the forecast.\n"
                },
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the job.\n"
                },
                "holidays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of holiday IDs or names to take into account when training the model.\n"
                },
                "hyperParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/\nfor the full list of available hyperparameters.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the job results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the job.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                },
                "trainingWindow": {
                    "type": "integer",
                    "description": "The data interval in seconds to train the data on.\n"
                }
            },
            "requiredInputs": [
                "datasourceType",
                "metric",
                "queryParams"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineLearningJob resources.\n",
                "properties": {
                    "customLabels": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object representing the custom labels added on the forecast.\n"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "description": "The id of the datasource to query.\n"
                    },
                    "datasourceType": {
                        "type": "string",
                        "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                    },
                    "datasourceUid": {
                        "type": "string",
                        "description": "The uid of the datasource to query.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the job.\n"
                    },
                    "holidays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of holiday IDs or names to take into account when training the model.\n"
                    },
                    "hyperParams": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "The hyperparameters used to fine tune the algorithm. See https://grafana.com/docs/grafana-cloud/machine-learning/models/\nfor the full list of available hyperparameters.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The data interval in seconds to train the data on.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric used to query the job results.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the job.\n"
                    },
                    "queryParams": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object representing the query params to query Grafana with.\n"
                    },
                    "trainingWindow": {
                        "type": "integer",
                        "description": "The data interval in seconds to train the data on.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/machineLearningOutlierDetector:MachineLearningOutlierDetector": {
            "properties": {
                "algorithm": {
                    "$ref": "#/types/grafana:index/MachineLearningOutlierDetectorAlgorithm:MachineLearningOutlierDetectorAlgorithm",
                    "description": "The algorithm to use and its configuration. See\nhttps://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.\n"
                },
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the outlier detector.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to monitor.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the outlier detector results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outlier detector.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                }
            },
            "required": [
                "algorithm",
                "datasourceType",
                "metric",
                "name",
                "queryParams"
            ],
            "inputProperties": {
                "algorithm": {
                    "$ref": "#/types/grafana:index/MachineLearningOutlierDetectorAlgorithm:MachineLearningOutlierDetectorAlgorithm",
                    "description": "The algorithm to use and its configuration. See\nhttps://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.\n"
                },
                "datasourceId": {
                    "type": "integer",
                    "description": "The id of the datasource to query.\n"
                },
                "datasourceType": {
                    "type": "string",
                    "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                },
                "datasourceUid": {
                    "type": "string",
                    "description": "The uid of the datasource to query.\n"
                },
                "description": {
                    "type": "string",
                    "description": "A description of the outlier detector.\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The data interval in seconds to monitor.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "The metric used to query the outlier detector results.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outlier detector.\n"
                },
                "queryParams": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "An object representing the query params to query Grafana with.\n"
                }
            },
            "requiredInputs": [
                "algorithm",
                "datasourceType",
                "metric",
                "queryParams"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MachineLearningOutlierDetector resources.\n",
                "properties": {
                    "algorithm": {
                        "$ref": "#/types/grafana:index/MachineLearningOutlierDetectorAlgorithm:MachineLearningOutlierDetectorAlgorithm",
                        "description": "The algorithm to use and its configuration. See\nhttps://grafana.com/docs/grafana-cloud/machine-learning/outlier-detection/ for details.\n"
                    },
                    "datasourceId": {
                        "type": "integer",
                        "description": "The id of the datasource to query.\n"
                    },
                    "datasourceType": {
                        "type": "string",
                        "description": "The type of datasource being queried. Currently allowed values are prometheus, graphite, loki, postgres, and datadog.\n"
                    },
                    "datasourceUid": {
                        "type": "string",
                        "description": "The uid of the datasource to query.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "A description of the outlier detector.\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The data interval in seconds to monitor.\n"
                    },
                    "metric": {
                        "type": "string",
                        "description": "The metric used to query the outlier detector results.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the outlier detector.\n"
                    },
                    "queryParams": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "An object representing the query params to query Grafana with.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/messageTemplate:MessageTemplate": {
            "properties": {
                "disableProvenance": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the message template.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "template": {
                    "type": "string",
                    "description": "The content of the message template.\n"
                }
            },
            "required": [
                "name",
                "template"
            ],
            "inputProperties": {
                "disableProvenance": {
                    "type": "boolean",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the message template.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "template": {
                    "type": "string",
                    "description": "The content of the message template.\n"
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MessageTemplate resources.\n",
                "properties": {
                    "disableProvenance": {
                        "type": "boolean",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the message template.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "template": {
                        "type": "string",
                        "description": "The content of the message template.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/muteTiming:MuteTiming": {
            "properties": {
                "intervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                    },
                    "description": "The time intervals at which to mute notifications. Use an empty block to mute all the time.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the mute timing.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "intervals": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                    },
                    "description": "The time intervals at which to mute notifications. Use an empty block to mute all the time.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the mute timing.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MuteTiming resources.\n",
                "properties": {
                    "intervals": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/MuteTimingInterval:MuteTimingInterval"
                        },
                        "description": "The time intervals at which to mute notifications. Use an empty block to mute all the time.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the mute timing.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/notificationPolicy:NotificationPolicy": {
            "properties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The default contact point to route all unmatched notifications to.\n"
                },
                "disableProvenance": {
                    "type": "boolean"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels,\neffectively disabling grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "required": [
                "contactPoint",
                "groupBies"
            ],
            "inputProperties": {
                "contactPoint": {
                    "type": "string",
                    "description": "The default contact point to route all unmatched notifications to.\n"
                },
                "disableProvenance": {
                    "type": "boolean"
                },
                "groupBies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels,\neffectively disabling grouping.\n"
                },
                "groupInterval": {
                    "type": "string",
                    "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                },
                "groupWait": {
                    "type": "string",
                    "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                    },
                    "description": "Routing rules for specific label sets.\n"
                },
                "repeatInterval": {
                    "type": "string",
                    "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                }
            },
            "requiredInputs": [
                "contactPoint",
                "groupBies"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPolicy resources.\n",
                "properties": {
                    "contactPoint": {
                        "type": "string",
                        "description": "The default contact point to route all unmatched notifications to.\n"
                    },
                    "disableProvenance": {
                        "type": "boolean"
                    },
                    "groupBies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of alert labels to group alerts into notifications by. Use the special label `...` to group alerts by all labels,\neffectively disabling grouping.\n"
                    },
                    "groupInterval": {
                        "type": "string",
                        "description": "Minimum time interval between two notifications for the same group. Default is 5 minutes.\n"
                    },
                    "groupWait": {
                        "type": "string",
                        "description": "Time to wait to buffer alerts of the same group before sending a notification. Default is 30 seconds.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/NotificationPolicyPolicy:NotificationPolicyPolicy"
                        },
                        "description": "Routing rules for specific label sets.\n"
                    },
                    "repeatInterval": {
                        "type": "string",
                        "description": "Minimum time interval for re-sending a notification if an alert is still firing. Default is 4 hours.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallEscalation:OncallEscalation": {
            "properties": {
                "actionToTrigger": {
                    "type": "string",
                    "description": "The ID of an Action for trigger_action type step.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of delay for wait type step.\n"
                },
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "groupToNotify": {
                    "type": "string",
                    "description": "The ID of a User Group for notify_user_group type step.\n"
                },
                "important": {
                    "type": "boolean",
                    "description": "Will activate \"important\" personal notification rules. Actual for steps: notify_persons, notify_on_call_from_schedule\nand notify_user_group\n"
                },
                "notifyIfTimeFrom": {
                    "type": "string",
                    "description": "The beginning of the time interval for notify_if_time_from_to type step in UTC (for example 08:00:00Z).\n"
                },
                "notifyIfTimeTo": {
                    "type": "string",
                    "description": "The end of the time interval for notify_if_time_from_to type step in UTC (for example 18:00:00Z).\n"
                },
                "notifyOnCallFromSchedule": {
                    "type": "string",
                    "description": "ID of a Schedule for notify_on_call_from_schedule type step.\n"
                },
                "personsToNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_persons type step.\n"
                },
                "personsToNotifyNextEachTimes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_person_next_each_time type step.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the escalation step (starts from 0).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of escalation policy. Can be wait, notify_persons, notify_person_next_each_time, notify_on_call_from_schedule,\ntrigger_action, notify_user_group, resolve, notify_whole_channel, notify_if_time_from_to, repeat_escalation\n"
                }
            },
            "required": [
                "escalationChainId",
                "position"
            ],
            "inputProperties": {
                "actionToTrigger": {
                    "type": "string",
                    "description": "The ID of an Action for trigger_action type step.\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of delay for wait type step.\n"
                },
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n",
                    "willReplaceOnChanges": true
                },
                "groupToNotify": {
                    "type": "string",
                    "description": "The ID of a User Group for notify_user_group type step.\n"
                },
                "important": {
                    "type": "boolean",
                    "description": "Will activate \"important\" personal notification rules. Actual for steps: notify_persons, notify_on_call_from_schedule\nand notify_user_group\n"
                },
                "notifyIfTimeFrom": {
                    "type": "string",
                    "description": "The beginning of the time interval for notify_if_time_from_to type step in UTC (for example 08:00:00Z).\n"
                },
                "notifyIfTimeTo": {
                    "type": "string",
                    "description": "The end of the time interval for notify_if_time_from_to type step in UTC (for example 18:00:00Z).\n"
                },
                "notifyOnCallFromSchedule": {
                    "type": "string",
                    "description": "ID of a Schedule for notify_on_call_from_schedule type step.\n"
                },
                "personsToNotifies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_persons type step.\n"
                },
                "personsToNotifyNextEachTimes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of users for notify_person_next_each_time type step.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the escalation step (starts from 0).\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of escalation policy. Can be wait, notify_persons, notify_person_next_each_time, notify_on_call_from_schedule,\ntrigger_action, notify_user_group, resolve, notify_whole_channel, notify_if_time_from_to, repeat_escalation\n"
                }
            },
            "requiredInputs": [
                "escalationChainId",
                "position"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallEscalation resources.\n",
                "properties": {
                    "actionToTrigger": {
                        "type": "string",
                        "description": "The ID of an Action for trigger_action type step.\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of delay for wait type step.\n"
                    },
                    "escalationChainId": {
                        "type": "string",
                        "description": "The ID of the escalation chain.\n",
                        "willReplaceOnChanges": true
                    },
                    "groupToNotify": {
                        "type": "string",
                        "description": "The ID of a User Group for notify_user_group type step.\n"
                    },
                    "important": {
                        "type": "boolean",
                        "description": "Will activate \"important\" personal notification rules. Actual for steps: notify_persons, notify_on_call_from_schedule\nand notify_user_group\n"
                    },
                    "notifyIfTimeFrom": {
                        "type": "string",
                        "description": "The beginning of the time interval for notify_if_time_from_to type step in UTC (for example 08:00:00Z).\n"
                    },
                    "notifyIfTimeTo": {
                        "type": "string",
                        "description": "The end of the time interval for notify_if_time_from_to type step in UTC (for example 18:00:00Z).\n"
                    },
                    "notifyOnCallFromSchedule": {
                        "type": "string",
                        "description": "ID of a Schedule for notify_on_call_from_schedule type step.\n"
                    },
                    "personsToNotifies": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of users for notify_persons type step.\n"
                    },
                    "personsToNotifyNextEachTimes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of users for notify_person_next_each_time type step.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the escalation step (starts from 0).\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of escalation policy. Can be wait, notify_persons, notify_person_next_each_time, notify_on_call_from_schedule,\ntrigger_action, notify_user_group, resolve, notify_whole_channel, notify_if_time_from_to, repeat_escalation\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallEscalationChain:OncallEscalationChain": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the escalation chain.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the escalation chain.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallEscalationChain resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the escalation chain.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallIntegration:OncallIntegration": {
            "properties": {
                "defaultRoute": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                    "description": "The Default route for all alerts from the given integration\n"
                },
                "link": {
                    "type": "string",
                    "description": "The link for using in an integrated tool.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "templates": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                    "description": "Jinja2 templates for Alert payload. An empty templates block will be ignored.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of integration. Can be grafana, grafana_alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog,\npagerduty, pingdom, elastalert, amazon_sns, curler, sentry, formatted_webhook, heartbeat, demo, manual, stackdriver,\nuptimerobot, sentry_platform, zabbix, prtg, slack_channel, inbound_email, direct_paging, jira.\n"
                }
            },
            "required": [
                "defaultRoute",
                "link",
                "name",
                "type"
            ],
            "inputProperties": {
                "defaultRoute": {
                    "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                    "description": "The Default route for all alerts from the given integration\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service integration.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "templates": {
                    "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                    "description": "Jinja2 templates for Alert payload. An empty templates block will be ignored.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The type of integration. Can be grafana, grafana_alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog,\npagerduty, pingdom, elastalert, amazon_sns, curler, sentry, formatted_webhook, heartbeat, demo, manual, stackdriver,\nuptimerobot, sentry_platform, zabbix, prtg, slack_channel, inbound_email, direct_paging, jira.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "defaultRoute",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallIntegration resources.\n",
                "properties": {
                    "defaultRoute": {
                        "$ref": "#/types/grafana:index/OncallIntegrationDefaultRoute:OncallIntegrationDefaultRoute",
                        "description": "The Default route for all alerts from the given integration\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The link for using in an integrated tool.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service integration.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "templates": {
                        "$ref": "#/types/grafana:index/OncallIntegrationTemplates:OncallIntegrationTemplates",
                        "description": "Jinja2 templates for Alert payload. An empty templates block will be ignored.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type of integration. Can be grafana, grafana_alerting, webhook, alertmanager, kapacitor, fabric, newrelic, datadog,\npagerduty, pingdom, elastalert, amazon_sns, curler, sentry, formatted_webhook, heartbeat, demo, manual, stackdriver,\nuptimerobot, sentry_platform, zabbix, prtg, slack_channel, inbound_email, direct_paging, jira.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallOnCallShift:OncallOnCallShift": {
            "properties": {
                "byDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                },
                "byMonthdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of days of the month. Valid values are 1 to 31 or -31 to -1\n"
                },
                "byMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the event.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency of the event. Can be hourly, daily, weekly, monthly\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The priority level. The higher the value, the higher the priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The shift's name.\n"
                },
                "rollingUsers": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The list of lists with on-call users (for rolling_users event type)\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example\n\"2020-09-05T08:00:00\")\n"
                },
                "startRotationFromUserIndex": {
                    "type": "integer",
                    "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The shift's timezone. Overrides schedule's timezone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The shift's type. Can be rolling_users, recurrent_event, single_event\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of on-call users (for single_event and recurrent_event event type).\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                }
            },
            "required": [
                "duration",
                "name",
                "start",
                "type"
            ],
            "inputProperties": {
                "byDays": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                },
                "byMonthdays": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of days of the month. Valid values are 1 to 31 or -31 to -1\n"
                },
                "byMonths": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                },
                "duration": {
                    "type": "integer",
                    "description": "The duration of the event.\n"
                },
                "frequency": {
                    "type": "string",
                    "description": "The frequency of the event. Can be hourly, daily, weekly, monthly\n"
                },
                "interval": {
                    "type": "integer",
                    "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                },
                "level": {
                    "type": "integer",
                    "description": "The priority level. The higher the value, the higher the priority.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The shift's name.\n"
                },
                "rollingUsers": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": "The list of lists with on-call users (for rolling_users event type)\n"
                },
                "start": {
                    "type": "string",
                    "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example\n\"2020-09-05T08:00:00\")\n"
                },
                "startRotationFromUserIndex": {
                    "type": "integer",
                    "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The shift's timezone. Overrides schedule's timezone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The shift's type. Can be rolling_users, recurrent_event, single_event\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of on-call users (for single_event and recurrent_event event type).\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                }
            },
            "requiredInputs": [
                "duration",
                "start",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallOnCallShift resources.\n",
                "properties": {
                    "byDays": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "This parameter takes a list of days in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                    },
                    "byMonthdays": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "This parameter takes a list of days of the month. Valid values are 1 to 31 or -31 to -1\n"
                    },
                    "byMonths": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "This parameter takes a list of months. Valid values are 1 to 12\n"
                    },
                    "duration": {
                        "type": "integer",
                        "description": "The duration of the event.\n"
                    },
                    "frequency": {
                        "type": "string",
                        "description": "The frequency of the event. Can be hourly, daily, weekly, monthly\n"
                    },
                    "interval": {
                        "type": "integer",
                        "description": "The positive integer representing at which intervals the recurrence rule repeats.\n"
                    },
                    "level": {
                        "type": "integer",
                        "description": "The priority level. The higher the value, the higher the priority.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The shift's name.\n"
                    },
                    "rollingUsers": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "description": "The list of lists with on-call users (for rolling_users event type)\n"
                    },
                    "start": {
                        "type": "string",
                        "description": "The start time of the on-call shift. This parameter takes a date format as yyyy-MM-dd'T'HH:mm:ss (for example\n\"2020-09-05T08:00:00\")\n"
                    },
                    "startRotationFromUserIndex": {
                        "type": "integer",
                        "description": "The index of the list of users in rolling_users, from which on-call rotation starts.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The shift's timezone. Overrides schedule's timezone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The shift's type. Can be rolling_users, recurrent_event, single_event\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of on-call users (for single_event and recurrent_event event type).\n"
                    },
                    "weekStart": {
                        "type": "string",
                        "description": "Start day of the week in iCal format. Can be MO, TU, WE, TH, FR, SA, SU\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallOutgoingWebhook:OncallOutgoingWebhook": {
            "properties": {
                "authorizationHeader": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n",
                    "secret": true
                },
                "data": {
                    "type": "string",
                    "description": "The data of the webhook.\n"
                },
                "forwardWholePayload": {
                    "type": "boolean",
                    "description": "Toggle to send the entire webhook payload instead of using the values in the Data field.\n"
                },
                "headers": {
                    "type": "string",
                    "description": "Headers to add to the outgoing webhook request.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method used in the request made by the outgoing webhook.\n"
                },
                "integrationFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are\nselected the outgoing webhook will trigger for any integration.\n"
                },
                "isWebhookEnabled": {
                    "type": "boolean",
                    "description": "Controls whether the outgoing webhook will trigger or is ignored. The default is `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outgoing webhook.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication\n",
                    "secret": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "triggerTemplate": {
                    "type": "string",
                    "description": "A template used to dynamically determine whether the webhook should execute based on the content of the payload.\n"
                },
                "triggerType": {
                    "type": "string",
                    "description": "The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert\ngroup created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username to use when making the outgoing webhook request.\n"
                }
            },
            "required": [
                "name",
                "url"
            ],
            "inputProperties": {
                "authorizationHeader": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n",
                    "secret": true
                },
                "data": {
                    "type": "string",
                    "description": "The data of the webhook.\n"
                },
                "forwardWholePayload": {
                    "type": "boolean",
                    "description": "Toggle to send the entire webhook payload instead of using the values in the Data field.\n"
                },
                "headers": {
                    "type": "string",
                    "description": "Headers to add to the outgoing webhook request.\n"
                },
                "httpMethod": {
                    "type": "string",
                    "description": "The HTTP method used in the request made by the outgoing webhook.\n"
                },
                "integrationFilters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are\nselected the outgoing webhook will trigger for any integration.\n"
                },
                "isWebhookEnabled": {
                    "type": "boolean",
                    "description": "Controls whether the outgoing webhook will trigger or is ignored. The default is `true`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the outgoing webhook.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The auth data of the webhook. Used for Basic authentication\n",
                    "secret": true
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "triggerTemplate": {
                    "type": "string",
                    "description": "A template used to dynamically determine whether the webhook should execute based on the content of the payload.\n"
                },
                "triggerType": {
                    "type": "string",
                    "description": "The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert\ngroup created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`.\n"
                },
                "url": {
                    "type": "string",
                    "description": "The webhook URL.\n"
                },
                "user": {
                    "type": "string",
                    "description": "Username to use when making the outgoing webhook request.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallOutgoingWebhook resources.\n",
                "properties": {
                    "authorizationHeader": {
                        "type": "string",
                        "description": "The auth data of the webhook. Used in Authorization header instead of user/password auth.\n",
                        "secret": true
                    },
                    "data": {
                        "type": "string",
                        "description": "The data of the webhook.\n"
                    },
                    "forwardWholePayload": {
                        "type": "boolean",
                        "description": "Toggle to send the entire webhook payload instead of using the values in the Data field.\n"
                    },
                    "headers": {
                        "type": "string",
                        "description": "Headers to add to the outgoing webhook request.\n"
                    },
                    "httpMethod": {
                        "type": "string",
                        "description": "The HTTP method used in the request made by the outgoing webhook.\n"
                    },
                    "integrationFilters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Restricts the outgoing webhook to only trigger if the event came from a selected integration. If no integrations are\nselected the outgoing webhook will trigger for any integration.\n"
                    },
                    "isWebhookEnabled": {
                        "type": "boolean",
                        "description": "Controls whether the outgoing webhook will trigger or is ignored. The default is `true`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the outgoing webhook.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The auth data of the webhook. Used for Basic authentication\n",
                        "secret": true
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "triggerTemplate": {
                        "type": "string",
                        "description": "A template used to dynamically determine whether the webhook should execute based on the content of the payload.\n"
                    },
                    "triggerType": {
                        "type": "string",
                        "description": "The type of event that will cause this outgoing webhook to execute. The types of triggers are: `escalation`, `alert\ngroup created`, `acknowledge`, `resolve`, `silence`, `unsilence`, `unresolve`, `unacknowledge`.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The webhook URL.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "Username to use when making the outgoing webhook request.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallRoute:OncallRoute": {
            "properties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration.\n"
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the route (starts from 0).\n"
                },
                "routingRegex": {
                    "type": "string",
                    "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                },
                "routingType": {
                    "type": "string",
                    "description": "The type of route. Can be jinja2, regex\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                    "description": "Slack-specific settings for a route.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n"
                }
            },
            "required": [
                "escalationChainId",
                "integrationId",
                "position",
                "routingRegex"
            ],
            "inputProperties": {
                "escalationChainId": {
                    "type": "string",
                    "description": "The ID of the escalation chain.\n"
                },
                "integrationId": {
                    "type": "string",
                    "description": "The ID of the integration.\n",
                    "willReplaceOnChanges": true
                },
                "msteams": {
                    "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                    "description": "MS teams-specific settings for a route.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the route (starts from 0).\n"
                },
                "routingRegex": {
                    "type": "string",
                    "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                },
                "routingType": {
                    "type": "string",
                    "description": "The type of route. Can be jinja2, regex\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                    "description": "Slack-specific settings for a route.\n"
                },
                "telegram": {
                    "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                    "description": "Telegram-specific settings for a route.\n"
                }
            },
            "requiredInputs": [
                "escalationChainId",
                "integrationId",
                "position",
                "routingRegex"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallRoute resources.\n",
                "properties": {
                    "escalationChainId": {
                        "type": "string",
                        "description": "The ID of the escalation chain.\n"
                    },
                    "integrationId": {
                        "type": "string",
                        "description": "The ID of the integration.\n",
                        "willReplaceOnChanges": true
                    },
                    "msteams": {
                        "$ref": "#/types/grafana:index/OncallRouteMsteams:OncallRouteMsteams",
                        "description": "MS teams-specific settings for a route.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the route (starts from 0).\n"
                    },
                    "routingRegex": {
                        "type": "string",
                        "description": "Python Regex query. Route is chosen for an alert if there is a match inside the alert payload.\n"
                    },
                    "routingType": {
                        "type": "string",
                        "description": "The type of route. Can be jinja2, regex\n"
                    },
                    "slack": {
                        "$ref": "#/types/grafana:index/OncallRouteSlack:OncallRouteSlack",
                        "description": "Slack-specific settings for a route.\n"
                    },
                    "telegram": {
                        "$ref": "#/types/grafana:index/OncallRouteTelegram:OncallRouteTelegram",
                        "description": "Telegram-specific settings for a route.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/oncallSchedule:OncallSchedule": {
            "properties": {
                "enableWebOverrides": {
                    "type": "boolean",
                    "description": "Enable overrides via web UI (it will ignore ical_url_overrides).\n"
                },
                "icalUrlOverrides": {
                    "type": "string",
                    "description": "The URL of external iCal calendar which override primary events.\n"
                },
                "icalUrlPrimary": {
                    "type": "string",
                    "description": "The URL of the external calendar iCal file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule's name.\n"
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of on-call shifts.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                    "description": "The Slack-specific settings for a schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The schedule's time zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The schedule's type.\n"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "inputProperties": {
                "enableWebOverrides": {
                    "type": "boolean",
                    "description": "Enable overrides via web UI (it will ignore ical_url_overrides).\n"
                },
                "icalUrlOverrides": {
                    "type": "string",
                    "description": "The URL of external iCal calendar which override primary events.\n"
                },
                "icalUrlPrimary": {
                    "type": "string",
                    "description": "The URL of the external calendar iCal file.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The schedule's name.\n"
                },
                "shifts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ID's of on-call shifts.\n"
                },
                "slack": {
                    "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                    "description": "The Slack-specific settings for a schedule.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "The schedule's time zone.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The schedule's type.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OncallSchedule resources.\n",
                "properties": {
                    "enableWebOverrides": {
                        "type": "boolean",
                        "description": "Enable overrides via web UI (it will ignore ical_url_overrides).\n"
                    },
                    "icalUrlOverrides": {
                        "type": "string",
                        "description": "The URL of external iCal calendar which override primary events.\n"
                    },
                    "icalUrlPrimary": {
                        "type": "string",
                        "description": "The URL of the external calendar iCal file.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The schedule's name.\n"
                    },
                    "shifts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of ID's of on-call shifts.\n"
                    },
                    "slack": {
                        "$ref": "#/types/grafana:index/OncallScheduleSlack:OncallScheduleSlack",
                        "description": "The Slack-specific settings for a schedule.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The ID of the OnCall team. To get one, create a team in Grafana, and navigate to the OnCall plugin (to sync the team\nwith OnCall). You can then get the ID using the `grafana.getOncallTeam` datasource.\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "The schedule's time zone.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The schedule's type.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/organization:Organization": {
            "properties": {
                "adminUser": {
                    "type": "string"
                },
                "admins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given admin access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                },
                "createUsers": {
                    "type": "boolean",
                    "description": "Whether or not to create Grafana users specified in the organization's membership if they don't already exist in\nGrafana. If unspecified, this parameter defaults to true, creating placeholder users with the name, login, and email set\nto the email of the user, and a random password. Setting this option to false will cause an error to be thrown for any\nusers that do not already exist in Grafana.\n"
                },
                "editors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given editor access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana organization created.\n"
                },
                "orgId": {
                    "type": "integer",
                    "description": "The organization id assigned to this organization by Grafana.\n"
                },
                "usersWithoutAccesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given none access to the organization. Note: users\nspecified here must already exist in Grafana, unless 'create_users' is set to true. This feature is only available in\nGrafana 10.2+.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given viewer access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                }
            },
            "required": [
                "name",
                "orgId"
            ],
            "inputProperties": {
                "adminUser": {
                    "type": "string"
                },
                "admins": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given admin access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                },
                "createUsers": {
                    "type": "boolean",
                    "description": "Whether or not to create Grafana users specified in the organization's membership if they don't already exist in\nGrafana. If unspecified, this parameter defaults to true, creating placeholder users with the name, login, and email set\nto the email of the user, and a random password. Setting this option to false will cause an error to be thrown for any\nusers that do not already exist in Grafana.\n"
                },
                "editors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given editor access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana organization created.\n"
                },
                "usersWithoutAccesses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given none access to the organization. Note: users\nspecified here must already exist in Grafana, unless 'create_users' is set to true. This feature is only available in\nGrafana 10.2+.\n"
                },
                "viewers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of email addresses corresponding to users who should be given viewer access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Organization resources.\n",
                "properties": {
                    "adminUser": {
                        "type": "string"
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given admin access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                    },
                    "createUsers": {
                        "type": "boolean",
                        "description": "Whether or not to create Grafana users specified in the organization's membership if they don't already exist in\nGrafana. If unspecified, this parameter defaults to true, creating placeholder users with the name, login, and email set\nto the email of the user, and a random password. Setting this option to false will cause an error to be thrown for any\nusers that do not already exist in Grafana.\n"
                    },
                    "editors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given editor access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana organization created.\n"
                    },
                    "orgId": {
                        "type": "integer",
                        "description": "The organization id assigned to this organization by Grafana.\n"
                    },
                    "usersWithoutAccesses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given none access to the organization. Note: users\nspecified here must already exist in Grafana, unless 'create_users' is set to true. This feature is only available in\nGrafana 10.2+.\n"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of email addresses corresponding to users who should be given viewer access to the organization. Note: users\nspecified here must already exist in Grafana unless 'create_users' is set to true.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/organizationPreference:OrganizationPreference": {
            "properties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The Organization home dashboard ID. Deprecated: Use `home_dashboard_uid` instead.\n",
                    "deprecationMessage": "Use `home_dashboard_uid` instead."
                },
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The Organization home dashboard UID. This is only available in Grafana 9.0+.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "theme": {
                    "type": "string",
                    "description": "The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the\ndefault.\n"
                }
            },
            "inputProperties": {
                "homeDashboardId": {
                    "type": "integer",
                    "description": "The Organization home dashboard ID. Deprecated: Use `home_dashboard_uid` instead.\n",
                    "deprecationMessage": "Use `home_dashboard_uid` instead."
                },
                "homeDashboardUid": {
                    "type": "string",
                    "description": "The Organization home dashboard UID. This is only available in Grafana 9.0+.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "theme": {
                    "type": "string",
                    "description": "The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.\n"
                },
                "timezone": {
                    "type": "string",
                    "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                },
                "weekStart": {
                    "type": "string",
                    "description": "The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the\ndefault.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrganizationPreference resources.\n",
                "properties": {
                    "homeDashboardId": {
                        "type": "integer",
                        "description": "The Organization home dashboard ID. Deprecated: Use `home_dashboard_uid` instead.\n",
                        "deprecationMessage": "Use `home_dashboard_uid` instead."
                    },
                    "homeDashboardUid": {
                        "type": "string",
                        "description": "The Organization home dashboard UID. This is only available in Grafana 9.0+.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "theme": {
                        "type": "string",
                        "description": "The Organization theme. Available values are `light`, `dark`, `system`, or an empty string for the default.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The Organization timezone. Available values are `utc`, `browser`, or an empty string for the default.\n"
                    },
                    "weekStart": {
                        "type": "string",
                        "description": "The Organization week start day. Available values are `sunday`, `monday`, `saturday`, or an empty string for the\ndefault.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/playlist:Playlist": {
            "properties": {
                "interval": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the playlist.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                }
            },
            "required": [
                "interval",
                "items",
                "name"
            ],
            "inputProperties": {
                "interval": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the playlist.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "interval",
                "items"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Playlist resources.\n",
                "properties": {
                    "interval": {
                        "type": "string"
                    },
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/PlaylistItem:PlaylistItem"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the playlist.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/report:Report": {
            "properties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                    "deprecationMessage": "Use dashboards instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "Dashboard to be sent in the report.\n",
                    "deprecationMessage": "Use dashboards instead"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ReportDashboard:ReportDashboard"
                    },
                    "description": "List of dashboards to render into the report\n"
                },
                "formats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.\n"
                },
                "includeDashboardLink": {
                    "type": "boolean",
                    "description": "Whether to include a link to the dashboard in the report.\n"
                },
                "includeTableCsv": {
                    "type": "boolean",
                    "description": "Whether to include a CSV file of table panel data.\n"
                },
                "layout": {
                    "type": "string",
                    "description": "Layout of the report. Allowed values: `simple`, `grid`.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message to be sent in the report.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "orientation": {
                    "type": "string",
                    "description": "Orientation of the report. Allowed values: `landscape`, `portrait`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of recipients of the report.\n"
                },
                "replyTo": {
                    "type": "string",
                    "description": "Reply-to email address of the report.\n"
                },
                "schedule": {
                    "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                    "description": "Schedule of the report.\n"
                },
                "timeRange": {
                    "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                    "description": "Time range of the report.\n",
                    "deprecationMessage": "Use time_range in dashboards instead. This field is completely ignored when dashboards is set."
                }
            },
            "required": [
                "dashboardId",
                "dashboardUid",
                "name",
                "recipients",
                "schedule"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "integer",
                    "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                    "deprecationMessage": "Use dashboards instead"
                },
                "dashboardUid": {
                    "type": "string",
                    "description": "Dashboard to be sent in the report.\n",
                    "deprecationMessage": "Use dashboards instead"
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ReportDashboard:ReportDashboard"
                    },
                    "description": "List of dashboards to render into the report\n"
                },
                "formats": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.\n"
                },
                "includeDashboardLink": {
                    "type": "boolean",
                    "description": "Whether to include a link to the dashboard in the report.\n"
                },
                "includeTableCsv": {
                    "type": "boolean",
                    "description": "Whether to include a CSV file of table panel data.\n"
                },
                "layout": {
                    "type": "string",
                    "description": "Layout of the report. Allowed values: `simple`, `grid`.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message to be sent in the report.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the report.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "orientation": {
                    "type": "string",
                    "description": "Orientation of the report. Allowed values: `landscape`, `portrait`.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of recipients of the report.\n"
                },
                "replyTo": {
                    "type": "string",
                    "description": "Reply-to email address of the report.\n"
                },
                "schedule": {
                    "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                    "description": "Schedule of the report.\n"
                },
                "timeRange": {
                    "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                    "description": "Time range of the report.\n",
                    "deprecationMessage": "Use time_range in dashboards instead. This field is completely ignored when dashboards is set."
                }
            },
            "requiredInputs": [
                "recipients",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Report resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer",
                        "description": "Dashboard to be sent in the report. This field is deprecated, use `dashboard_uid` instead.\n",
                        "deprecationMessage": "Use dashboards instead"
                    },
                    "dashboardUid": {
                        "type": "string",
                        "description": "Dashboard to be sent in the report.\n",
                        "deprecationMessage": "Use dashboards instead"
                    },
                    "dashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ReportDashboard:ReportDashboard"
                        },
                        "description": "List of dashboards to render into the report\n"
                    },
                    "formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Specifies what kind of attachment to generate for the report. Allowed values: `pdf`, `csv`, `image`.\n"
                    },
                    "includeDashboardLink": {
                        "type": "boolean",
                        "description": "Whether to include a link to the dashboard in the report.\n"
                    },
                    "includeTableCsv": {
                        "type": "boolean",
                        "description": "Whether to include a CSV file of table panel data.\n"
                    },
                    "layout": {
                        "type": "string",
                        "description": "Layout of the report. Allowed values: `simple`, `grid`.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "Message to be sent in the report.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the report.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "orientation": {
                        "type": "string",
                        "description": "Orientation of the report. Allowed values: `landscape`, `portrait`.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipients of the report.\n"
                    },
                    "replyTo": {
                        "type": "string",
                        "description": "Reply-to email address of the report.\n"
                    },
                    "schedule": {
                        "$ref": "#/types/grafana:index/ReportSchedule:ReportSchedule",
                        "description": "Schedule of the report.\n"
                    },
                    "timeRange": {
                        "$ref": "#/types/grafana:index/ReportTimeRange:ReportTimeRange",
                        "description": "Time range of the report.\n",
                        "deprecationMessage": "Use time_range in dashboards instead. This field is completely ignored when dashboards is set."
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/role:Role": {
            "properties": {
                "autoIncrementVersion": {
                    "type": "boolean",
                    "description": "Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or\n`version` should be set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the role. Available with Grafana 8.5+.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role is available across all organizations or not.\n"
                },
                "group": {
                    "type": "string",
                    "description": "Group of the role. Available with Grafana 8.5+.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the role\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                    },
                    "description": "Specific set of actions granted by the role.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier of the role. Used for assignments.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.\n"
                }
            },
            "required": [
                "name",
                "uid"
            ],
            "inputProperties": {
                "autoIncrementVersion": {
                    "type": "boolean",
                    "description": "Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or\n`version` should be set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the role.\n"
                },
                "displayName": {
                    "type": "string",
                    "description": "Display name of the role. Available with Grafana 8.5+.\n"
                },
                "global": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role is available across all organizations or not.\n",
                    "willReplaceOnChanges": true
                },
                "group": {
                    "type": "string",
                    "description": "Group of the role. Available with Grafana 8.5+.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the role\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                    },
                    "description": "Specific set of actions granted by the role.\n"
                },
                "uid": {
                    "type": "string",
                    "description": "Unique identifier of the role. Used for assignments.\n",
                    "willReplaceOnChanges": true
                },
                "version": {
                    "type": "integer",
                    "description": "Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "autoIncrementVersion": {
                        "type": "boolean",
                        "description": "Whether the role version should be incremented automatically on updates (and set to 1 on creation). This field or\n`version` should be set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the role.\n"
                    },
                    "displayName": {
                        "type": "string",
                        "description": "Display name of the role. Available with Grafana 8.5+.\n"
                    },
                    "global": {
                        "type": "boolean",
                        "description": "Boolean to state whether the role is available across all organizations or not.\n",
                        "willReplaceOnChanges": true
                    },
                    "group": {
                        "type": "string",
                        "description": "Group of the role. Available with Grafana 8.5+.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "Boolean to state whether the role should be visible in the Grafana UI or not. Available with Grafana 8.5+.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the role\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/RolePermission:RolePermission"
                        },
                        "description": "Specific set of actions granted by the role.\n"
                    },
                    "uid": {
                        "type": "string",
                        "description": "Unique identifier of the role. Used for assignments.\n",
                        "willReplaceOnChanges": true
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version of the role. A role is updated only on version increase. This field or `auto_increment_version` should be set.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/roleAssignment:RoleAssignment": {
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "roleUid": {
                    "type": "string",
                    "description": "Grafana RBAC role UID.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of service accounts that the role should be assigned to.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of teams that the role should be assigned to.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of users that the role should be assigned to.\n"
                }
            },
            "required": [
                "roleUid"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "roleUid": {
                    "type": "string",
                    "description": "Grafana RBAC role UID.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of service accounts that the role should be assigned to.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "IDs of teams that the role should be assigned to.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "IDs of users that the role should be assigned to.\n"
                }
            },
            "requiredInputs": [
                "roleUid"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RoleAssignment resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "roleUid": {
                        "type": "string",
                        "description": "Grafana RBAC role UID.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of service accounts that the role should be assigned to.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IDs of teams that the role should be assigned to.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "IDs of users that the role should be assigned to.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/ruleGroup:RuleGroup": {
            "properties": {
                "disableProvenance": {
                    "type": "boolean"
                },
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder that the group belongs to.\n"
                },
                "intervalSeconds": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are\nevaluated sequentially.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule group.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                    },
                    "description": "The rules within the group.\n"
                }
            },
            "required": [
                "folderUid",
                "intervalSeconds",
                "name",
                "rules"
            ],
            "inputProperties": {
                "disableProvenance": {
                    "type": "boolean"
                },
                "folderUid": {
                    "type": "string",
                    "description": "The UID of the folder that the group belongs to.\n",
                    "willReplaceOnChanges": true
                },
                "intervalSeconds": {
                    "type": "integer",
                    "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are\nevaluated sequentially.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule group.\n",
                    "willReplaceOnChanges": true
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                    },
                    "description": "The rules within the group.\n"
                }
            },
            "requiredInputs": [
                "folderUid",
                "intervalSeconds",
                "rules"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleGroup resources.\n",
                "properties": {
                    "disableProvenance": {
                        "type": "boolean"
                    },
                    "folderUid": {
                        "type": "string",
                        "description": "The UID of the folder that the group belongs to.\n",
                        "willReplaceOnChanges": true
                    },
                    "intervalSeconds": {
                        "type": "integer",
                        "description": "The interval, in seconds, at which all rules in the group are evaluated. If a group contains many rules, the rules are\nevaluated sequentially.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule group.\n",
                        "willReplaceOnChanges": true
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/RuleGroupRule:RuleGroupRule"
                        },
                        "description": "The rules within the group.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/sLO:SLO": {
            "properties": {
                "alertings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlerting:SLOAlerting"
                    },
                    "description": "Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can\ngenerate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or\nwhen the remaining error budget is below a certain threshold. Annotations and Labels support templating.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description is a free-text field that can provide more context to an SLO.\n"
                },
                "destinationDatasource": {
                    "$ref": "#/types/grafana:index/SLODestinationDatasource:SLODestinationDatasource",
                    "description": "Destination Datasource sets the datasource defined for an SLO\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOLabel:SLOLabel"
                    },
                    "description": "Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping\nSLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -\n\"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name should be a short description of your indicator. Consider names like \"API Availability\"\n"
                },
                "objectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOObjective:SLOObjective"
                    },
                    "description": "Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for\neach time window based on the SLO burn rate or remaining error budget.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOQuery:SLOQuery"
                    },
                    "description": "Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.\n"
                }
            },
            "required": [
                "description",
                "name",
                "objectives",
                "queries"
            ],
            "inputProperties": {
                "alertings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOAlerting:SLOAlerting"
                    },
                    "description": "Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can\ngenerate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or\nwhen the remaining error budget is below a certain threshold. Annotations and Labels support templating.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description is a free-text field that can provide more context to an SLO.\n"
                },
                "destinationDatasource": {
                    "$ref": "#/types/grafana:index/SLODestinationDatasource:SLODestinationDatasource",
                    "description": "Destination Datasource sets the datasource defined for an SLO\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOLabel:SLOLabel"
                    },
                    "description": "Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping\nSLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -\n\"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name should be a short description of your indicator. Consider names like \"API Availability\"\n"
                },
                "objectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOObjective:SLOObjective"
                    },
                    "description": "Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for\neach time window based on the SLO burn rate or remaining error budget.\n"
                },
                "queries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/SLOQuery:SLOQuery"
                    },
                    "description": "Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.\n"
                }
            },
            "requiredInputs": [
                "description",
                "objectives",
                "queries"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SLO resources.\n",
                "properties": {
                    "alertings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/SLOAlerting:SLOAlerting"
                        },
                        "description": "Configures the alerting rules that will be generated for each time window associated with the SLO. Grafana SLOs can\ngenerate alerts when the short-term error budget burn is very high, the long-term error budget burn rate is high, or\nwhen the remaining error budget is below a certain threshold. Annotations and Labels support templating.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description is a free-text field that can provide more context to an SLO.\n"
                    },
                    "destinationDatasource": {
                        "$ref": "#/types/grafana:index/SLODestinationDatasource:SLODestinationDatasource",
                        "description": "Destination Datasource sets the datasource defined for an SLO\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/SLOLabel:SLOLabel"
                        },
                        "description": "Additional labels that will be attached to all metrics generated from the query. These labels are useful for grouping\nSLOs in dashboard views that you create by hand. Labels must adhere to Prometheus label name schema -\n\"^[a-zA-Z_][a-zA-Z0-9_]*$\"\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name should be a short description of your indicator. Consider names like \"API Availability\"\n"
                    },
                    "objectives": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/SLOObjective:SLOObjective"
                        },
                        "description": "Over each rolling time window, the remaining error budget will be calculated, and separate alerts can be generated for\neach time window based on the SLO burn rate or remaining error budget.\n"
                    },
                    "queries": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/SLOQuery:SLOQuery"
                        },
                        "description": "Query describes the indicator that will be measured against the objective. Freeform Query types are currently supported.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccount:ServiceAccount": {
            "properties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "isDisabled": {
                    "type": "boolean",
                    "description": "The disabled status for the service account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "role": {
                    "type": "string",
                    "description": "The basic role of the service account in the organization.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "isDisabled": {
                        "type": "boolean",
                        "description": "The disabled status for the service account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service account.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "role": {
                        "type": "string",
                        "description": "The basic role of the service account in the organization.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccountPermission:ServiceAccountPermission": {
            "properties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The id of the service account.\n"
                }
            },
            "required": [
                "serviceAccountId"
            ],
            "inputProperties": {
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                    },
                    "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The id of the service account.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountPermission resources.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/ServiceAccountPermissionPermission:ServiceAccountPermissionPermission"
                        },
                        "description": "The permission items to add/update. Items that are omitted from the list will be removed.\n"
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The id of the service account.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/serviceAccountToken:ServiceAccountToken": {
            "properties": {
                "expiration": {
                    "type": "string",
                    "description": "The expiration date of the service account token.\n"
                },
                "hasExpired": {
                    "type": "boolean",
                    "description": "The status of the service account token.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The key of the service account token.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account token.\n"
                },
                "secondsToLive": {
                    "type": "integer",
                    "description": "The key expiration in seconds. It is optional. If it is a positive number an expiration date for the key is set. If it\nis null, zero or is omitted completely (unless `api_key_max_seconds_to_live` configuration option is set) the key will\nnever expire.\n"
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The ID of the service account to which the token belongs.\n"
                }
            },
            "required": [
                "expiration",
                "hasExpired",
                "key",
                "name",
                "serviceAccountId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the service account token.\n",
                    "willReplaceOnChanges": true
                },
                "secondsToLive": {
                    "type": "integer",
                    "description": "The key expiration in seconds. It is optional. If it is a positive number an expiration date for the key is set. If it\nis null, zero or is omitted completely (unless `api_key_max_seconds_to_live` configuration option is set) the key will\nnever expire.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountId": {
                    "type": "string",
                    "description": "The ID of the service account to which the token belongs.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "serviceAccountId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountToken resources.\n",
                "properties": {
                    "expiration": {
                        "type": "string",
                        "description": "The expiration date of the service account token.\n"
                    },
                    "hasExpired": {
                        "type": "boolean",
                        "description": "The status of the service account token.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "The key of the service account token.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service account token.\n",
                        "willReplaceOnChanges": true
                    },
                    "secondsToLive": {
                        "type": "integer",
                        "description": "The key expiration in seconds. It is optional. If it is a positive number an expiration date for the key is set. If it\nis null, zero or is omitted completely (unless `api_key_max_seconds_to_live` configuration option is set) the key will\nnever expire.\n",
                        "willReplaceOnChanges": true
                    },
                    "serviceAccountId": {
                        "type": "string",
                        "description": "The ID of the service account to which the token belongs.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/ssoSettings:SsoSettings": {
            "properties": {
                "oauth2Settings": {
                    "$ref": "#/types/grafana:index/SsoSettingsOauth2Settings:SsoSettingsOauth2Settings",
                    "description": "The SSO settings set.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.\n"
                }
            },
            "required": [
                "oauth2Settings",
                "providerName"
            ],
            "inputProperties": {
                "oauth2Settings": {
                    "$ref": "#/types/grafana:index/SsoSettingsOauth2Settings:SsoSettingsOauth2Settings",
                    "description": "The SSO settings set.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.\n"
                }
            },
            "requiredInputs": [
                "oauth2Settings",
                "providerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SsoSettings resources.\n",
                "properties": {
                    "oauth2Settings": {
                        "$ref": "#/types/grafana:index/SsoSettingsOauth2Settings:SsoSettingsOauth2Settings",
                        "description": "The SSO settings set.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "The name of the SSO provider. Supported values: github, gitlab, google, azuread, okta, generic_oauth.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringCheck:SyntheticMonitoringCheck": {
            "properties": {
                "alertSensitivity": {
                    "type": "string",
                    "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert\nlevels](https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/synthetic-monitoring-alerting/).\n"
                },
                "basicMetricsOnly": {
                    "type": "boolean",
                    "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of\nmetrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the check.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable\nvalue is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).\n"
                },
                "job": {
                    "type": "string",
                    "description": "Name used for job label.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per\ncheck is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of\nthe labels cannot be empty, and the maximum length is 32 bytes.\n"
                },
                "probes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of probe location IDs where this target will be checked from.\n"
                },
                "settings": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                    "description": "Check settings. Should contain exactly one nested block.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Hostname to ping.\n"
                },
                "tenantId": {
                    "type": "integer",
                    "description": "The tenant ID of the check.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),\nand the maximum 10 seconds (10000 ms).\n"
                }
            },
            "required": [
                "job",
                "probes",
                "settings",
                "target",
                "tenantId"
            ],
            "inputProperties": {
                "alertSensitivity": {
                    "type": "string",
                    "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert\nlevels](https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/synthetic-monitoring-alerting/).\n"
                },
                "basicMetricsOnly": {
                    "type": "boolean",
                    "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of\nmetrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to enable the check.\n"
                },
                "frequency": {
                    "type": "integer",
                    "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable\nvalue is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).\n"
                },
                "job": {
                    "type": "string",
                    "description": "Name used for job label.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per\ncheck is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of\nthe labels cannot be empty, and the maximum length is 32 bytes.\n"
                },
                "probes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of probe location IDs where this target will be checked from.\n"
                },
                "settings": {
                    "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                    "description": "Check settings. Should contain exactly one nested block.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Hostname to ping.\n"
                },
                "timeout": {
                    "type": "integer",
                    "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),\nand the maximum 10 seconds (10000 ms).\n"
                }
            },
            "requiredInputs": [
                "job",
                "probes",
                "settings",
                "target"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringCheck resources.\n",
                "properties": {
                    "alertSensitivity": {
                        "type": "string",
                        "description": "Can be set to `none`, `low`, `medium`, or `high` to correspond to the check [alert\nlevels](https://grafana.com/docs/grafana-cloud/monitor-public-endpoints/synthetic-monitoring-alerting/).\n"
                    },
                    "basicMetricsOnly": {
                        "type": "boolean",
                        "description": "Metrics are reduced by default. Set this to `false` if you'd like to publish all metrics. We maintain a [full list of\nmetrics](https://github.com/grafana/synthetic-monitoring-agent/tree/main/internal/scraper/testdata) collected for each.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Whether to enable the check.\n"
                    },
                    "frequency": {
                        "type": "integer",
                        "description": "How often the check runs in milliseconds (the value is not truly a \"frequency\" but a \"period\"). The minimum acceptable\nvalue is 1 second (1000 ms), and the maximum is 120 seconds (120000 ms).\n"
                    },
                    "job": {
                        "type": "string",
                        "description": "Name used for job label.\n"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom labels to be included with collected metrics and logs. The maximum number of labels that can be specified per\ncheck is 5. These are applied, along with the probe-specific labels, to the outgoing metrics. The names and values of\nthe labels cannot be empty, and the maximum length is 32 bytes.\n"
                    },
                    "probes": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of probe location IDs where this target will be checked from.\n"
                    },
                    "settings": {
                        "$ref": "#/types/grafana:index/SyntheticMonitoringCheckSettings:SyntheticMonitoringCheckSettings",
                        "description": "Check settings. Should contain exactly one nested block.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Hostname to ping.\n"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The tenant ID of the check.\n"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Specifies the maximum running time for the check in milliseconds. The minimum acceptable value is 1 second (1000 ms),\nand the maximum 10 seconds (10000 ms).\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringInstallation:SyntheticMonitoringInstallation": {
            "properties": {
                "metricsPublisherKey": {
                    "type": "string",
                    "description": "The [Grafana Cloud access\npolicy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with\nthe following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and\nlogs to Grafana Cloud stack.\n",
                    "secret": true
                },
                "smAccessToken": {
                    "type": "string",
                    "description": "Generated token to access the SM API.\n"
                },
                "stackId": {
                    "type": "string",
                    "description": "The ID or slug of the stack to install SM on.\n"
                },
                "stackSmApiUrl": {
                    "type": "string",
                    "description": "The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here:\nhttps://grafana.com/docs/grafana-cloud/monitor-public-endpoints/private-probes/#probe-api-server-url. A static mapping\nexists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is\ncomputed automatically and readable.\n"
                }
            },
            "required": [
                "metricsPublisherKey",
                "smAccessToken",
                "stackId",
                "stackSmApiUrl"
            ],
            "inputProperties": {
                "metricsPublisherKey": {
                    "type": "string",
                    "description": "The [Grafana Cloud access\npolicy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with\nthe following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and\nlogs to Grafana Cloud stack.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "stackId": {
                    "type": "string",
                    "description": "The ID or slug of the stack to install SM on.\n",
                    "willReplaceOnChanges": true
                },
                "stackSmApiUrl": {
                    "type": "string",
                    "description": "The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here:\nhttps://grafana.com/docs/grafana-cloud/monitor-public-endpoints/private-probes/#probe-api-server-url. A static mapping\nexists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is\ncomputed automatically and readable.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "metricsPublisherKey",
                "stackId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringInstallation resources.\n",
                "properties": {
                    "metricsPublisherKey": {
                        "type": "string",
                        "description": "The [Grafana Cloud access\npolicy](https://grafana.com/docs/grafana-cloud/account-management/authentication-and-permissions/access-policies/) with\nthe following scopes: `stacks:read`, `metrics:write`, `logs:write`, `traces:write`. This is used to publish metrics and\nlogs to Grafana Cloud stack.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "smAccessToken": {
                        "type": "string",
                        "description": "Generated token to access the SM API.\n"
                    },
                    "stackId": {
                        "type": "string",
                        "description": "The ID or slug of the stack to install SM on.\n",
                        "willReplaceOnChanges": true
                    },
                    "stackSmApiUrl": {
                        "type": "string",
                        "description": "The URL of the SM API to install SM on. This depends on the stack region, find the list of API URLs here:\nhttps://grafana.com/docs/grafana-cloud/monitor-public-endpoints/private-probes/#probe-api-server-url. A static mapping\nexists in the provider but it may not contain all the regions. If it does contain the stack's region, this field is\ncomputed automatically and readable.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/syntheticMonitoringProbe:SyntheticMonitoringProbe": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.\n",
                    "secret": true
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs.\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude coordinates.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude coordinates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the probe.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set\nto `true`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the probe.\n"
                },
                "tenantId": {
                    "type": "integer",
                    "description": "The tenant ID of the probe.\n"
                }
            },
            "required": [
                "authToken",
                "latitude",
                "longitude",
                "name",
                "region",
                "tenantId"
            ],
            "inputProperties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Custom labels to be included with collected metrics and logs.\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Latitude coordinates.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Longitude coordinates.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the probe.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set\nto `true`.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the probe.\n"
                }
            },
            "requiredInputs": [
                "latitude",
                "longitude",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SyntheticMonitoringProbe resources.\n",
                "properties": {
                    "authToken": {
                        "type": "string",
                        "description": "The probe authentication token. Your probe must use this to authenticate with Grafana Cloud.\n",
                        "secret": true
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Custom labels to be included with collected metrics and logs.\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Latitude coordinates.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Longitude coordinates.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the probe.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Public probes are run by Grafana Labs and can be used by all users. Only Grafana Labs managed public probes will be set\nto `true`.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the probe.\n"
                    },
                    "tenantId": {
                        "type": "integer",
                        "description": "The tenant ID of the probe.\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/team:Team": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "An email address for the team.\n"
                },
                "ignoreExternallySyncedMembers": {
                    "type": "boolean"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here\nmust already exist in Grafana.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana team created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n"
                },
                "preferences": {
                    "$ref": "#/types/grafana:index/TeamPreferences:TeamPreferences"
                },
                "teamId": {
                    "type": "integer",
                    "description": "The team id assigned to this team by Grafana.\n"
                },
                "teamSync": {
                    "$ref": "#/types/grafana:index/TeamTeamSync:TeamTeamSync",
                    "description": "Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official\ndocumentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP\nAPI](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)\n"
                }
            },
            "required": [
                "name",
                "teamId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "An email address for the team.\n"
                },
                "ignoreExternallySyncedMembers": {
                    "type": "boolean"
                },
                "members": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here\nmust already exist in Grafana.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana team created.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                    "willReplaceOnChanges": true
                },
                "preferences": {
                    "$ref": "#/types/grafana:index/TeamPreferences:TeamPreferences"
                },
                "teamSync": {
                    "$ref": "#/types/grafana:index/TeamTeamSync:TeamTeamSync",
                    "description": "Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official\ndocumentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP\nAPI](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "An email address for the team.\n"
                    },
                    "ignoreExternallySyncedMembers": {
                        "type": "boolean"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of email addresses corresponding to users who should be given membership to the team. Note: users specified here\nmust already exist in Grafana.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana team created.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The Organization ID. If not set, the Org ID defined in the provider block will be used.\n",
                        "willReplaceOnChanges": true
                    },
                    "preferences": {
                        "$ref": "#/types/grafana:index/TeamPreferences:TeamPreferences"
                    },
                    "teamId": {
                        "type": "integer",
                        "description": "The team id assigned to this team by Grafana.\n"
                    },
                    "teamSync": {
                        "$ref": "#/types/grafana:index/TeamTeamSync:TeamTeamSync",
                        "description": "Sync external auth provider groups with this Grafana team. Only available in Grafana Enterprise. * [Official\ndocumentation](https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-team-sync/) * [HTTP\nAPI](https://grafana.com/docs/grafana/latest/developers/http_api/team_sync/)\n"
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/teamExternalGroup:TeamExternalGroup": {
            "properties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The team external groups list\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The Team ID\n"
                }
            },
            "required": [
                "groups",
                "teamId"
            ],
            "inputProperties": {
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The team external groups list\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The Team ID\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "groups",
                "teamId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TeamExternalGroup resources.\n",
                "properties": {
                    "groups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The team external groups list\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The Team ID\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "grafana:index/user:User": {
            "properties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the Grafana user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether to make user an admin.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The username for the Grafana user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Grafana user.\n",
                    "secret": true
                },
                "userId": {
                    "type": "integer",
                    "description": "The numerical ID of the Grafana user.\n"
                }
            },
            "required": [
                "email",
                "name",
                "password",
                "userId"
            ],
            "inputProperties": {
                "email": {
                    "type": "string",
                    "description": "The email address of the Grafana user.\n"
                },
                "isAdmin": {
                    "type": "boolean",
                    "description": "Whether to make user an admin.\n"
                },
                "login": {
                    "type": "string",
                    "description": "The username for the Grafana user.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The display name for the Grafana user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password for the Grafana user.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "The email address of the Grafana user.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Whether to make user an admin.\n"
                    },
                    "login": {
                        "type": "string",
                        "description": "The username for the Grafana user.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The display name for the Grafana user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password for the Grafana user.\n",
                        "secret": true
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The numerical ID of the Grafana user.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "grafana:index/getCloudIps:getCloudIps": {
            "outputs": {
                "description": "A collection of values returned by getCloudIps.\n",
                "properties": {
                    "hostedAlerts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostedGrafanas": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostedLogs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostedMetrics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "hostedTraces": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "hostedAlerts",
                    "hostedGrafanas",
                    "hostedLogs",
                    "hostedMetrics",
                    "hostedTraces",
                    "id"
                ]
            }
        },
        "grafana:index/getCloudOrganization:getCloudOrganization": {
            "inputs": {
                "description": "A collection of arguments for invoking getCloudOrganization.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCloudOrganization.\n",
                "properties": {
                    "createdAt": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "updatedAt": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "createdAt",
                    "id",
                    "name",
                    "slug",
                    "updatedAt",
                    "url"
                ]
            }
        },
        "grafana:index/getCloudStack:getCloudStack": {
            "inputs": {
                "description": "A collection of arguments for invoking getCloudStack.\n",
                "properties": {
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slug"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudStack.\n",
                "properties": {
                    "alertmanagerName": {
                        "type": "string"
                    },
                    "alertmanagerStatus": {
                        "type": "string"
                    },
                    "alertmanagerUrl": {
                        "type": "string"
                    },
                    "alertmanagerUserId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string"
                    },
                    "graphiteName": {
                        "type": "string"
                    },
                    "graphiteStatus": {
                        "type": "string"
                    },
                    "graphiteUrl": {
                        "type": "string"
                    },
                    "graphiteUserId": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "logsName": {
                        "type": "string"
                    },
                    "logsStatus": {
                        "type": "string"
                    },
                    "logsUrl": {
                        "type": "string"
                    },
                    "logsUserId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "integer"
                    },
                    "orgName": {
                        "type": "string"
                    },
                    "orgSlug": {
                        "type": "string"
                    },
                    "otlpUrl": {
                        "type": "string"
                    },
                    "profilesName": {
                        "type": "string"
                    },
                    "profilesStatus": {
                        "type": "string"
                    },
                    "profilesUrl": {
                        "type": "string"
                    },
                    "profilesUserId": {
                        "type": "integer"
                    },
                    "prometheusName": {
                        "type": "string"
                    },
                    "prometheusRemoteEndpoint": {
                        "type": "string"
                    },
                    "prometheusRemoteWriteEndpoint": {
                        "type": "string"
                    },
                    "prometheusStatus": {
                        "type": "string"
                    },
                    "prometheusUrl": {
                        "type": "string"
                    },
                    "prometheusUserId": {
                        "type": "integer"
                    },
                    "regionSlug": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "tracesName": {
                        "type": "string"
                    },
                    "tracesStatus": {
                        "type": "string"
                    },
                    "tracesUrl": {
                        "type": "string"
                    },
                    "tracesUserId": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "alertmanagerName",
                    "alertmanagerStatus",
                    "alertmanagerUrl",
                    "alertmanagerUserId",
                    "description",
                    "graphiteName",
                    "graphiteStatus",
                    "graphiteUrl",
                    "graphiteUserId",
                    "id",
                    "labels",
                    "logsName",
                    "logsStatus",
                    "logsUrl",
                    "logsUserId",
                    "name",
                    "orgId",
                    "orgName",
                    "orgSlug",
                    "otlpUrl",
                    "profilesName",
                    "profilesStatus",
                    "profilesUrl",
                    "profilesUserId",
                    "prometheusName",
                    "prometheusRemoteEndpoint",
                    "prometheusRemoteWriteEndpoint",
                    "prometheusStatus",
                    "prometheusUrl",
                    "prometheusUserId",
                    "regionSlug",
                    "slug",
                    "status",
                    "tracesName",
                    "tracesStatus",
                    "tracesUrl",
                    "tracesUserId",
                    "url"
                ]
            }
        },
        "grafana:index/getDashboard:getDashboard": {
            "inputs": {
                "description": "A collection of arguments for invoking getDashboard.\n",
                "properties": {
                    "dashboardId": {
                        "type": "integer"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDashboard.\n",
                "properties": {
                    "configJson": {
                        "type": "string"
                    },
                    "dashboardId": {
                        "type": "integer"
                    },
                    "folder": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isStarred": {
                        "type": "boolean"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "configJson",
                    "folder",
                    "isStarred",
                    "slug",
                    "title",
                    "url",
                    "version",
                    "id"
                ]
            }
        },
        "grafana:index/getDashboards:getDashboards": {
            "inputs": {
                "description": "A collection of arguments for invoking getDashboards.\n",
                "properties": {
                    "folderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDashboards.\n",
                "properties": {
                    "dashboards": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getDashboardsDashboard:getDashboardsDashboard"
                        }
                    },
                    "folderIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "limit": {
                        "type": "integer"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "dashboards",
                    "id"
                ]
            }
        },
        "grafana:index/getDataSource:getDataSource": {
            "inputs": {
                "description": "A collection of arguments for invoking getDataSource.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDataSource.\n",
                "properties": {
                    "accessMode": {
                        "type": "string"
                    },
                    "basicAuthEnabled": {
                        "type": "boolean"
                    },
                    "basicAuthUsername": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "isDefault": {
                        "type": "boolean"
                    },
                    "jsonDataEncoded": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "accessMode",
                    "basicAuthEnabled",
                    "basicAuthUsername",
                    "databaseName",
                    "id",
                    "isDefault",
                    "jsonDataEncoded",
                    "name",
                    "type",
                    "uid",
                    "url",
                    "username"
                ]
            }
        },
        "grafana:index/getFolder:getFolder": {
            "inputs": {
                "description": "A collection of arguments for invoking getFolder.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "title"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getFolder.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "parentFolderUid": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "parentFolderUid",
                    "title",
                    "uid",
                    "url",
                    "id"
                ]
            }
        },
        "grafana:index/getFolders:getFolders": {
            "inputs": {
                "description": "A collection of arguments for invoking getFolders.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFolders.\n",
                "properties": {
                    "folders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getFoldersFolder:getFoldersFolder"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "folders",
                    "id"
                ]
            }
        },
        "grafana:index/getLibraryPanel:getLibraryPanel": {
            "inputs": {
                "description": "A collection of arguments for invoking getLibraryPanel.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "uid": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLibraryPanel.\n",
                "properties": {
                    "created": {
                        "type": "string"
                    },
                    "dashboardIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "folderId": {
                        "type": "string"
                    },
                    "folderName": {
                        "type": "string"
                    },
                    "folderUid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "modelJson": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "panelId": {
                        "type": "integer"
                    },
                    "type": {
                        "type": "string"
                    },
                    "uid": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "created",
                    "dashboardIds",
                    "description",
                    "folderId",
                    "folderName",
                    "folderUid",
                    "modelJson",
                    "panelId",
                    "type",
                    "updated",
                    "version",
                    "id"
                ]
            }
        },
        "grafana:index/getOnCallSlackChannel:getOnCallSlackChannel": {
            "inputs": {
                "description": "A collection of arguments for invoking getOnCallSlackChannel.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOnCallSlackChannel.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slackId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "slackId",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallAction:getOncallAction": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallAction.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallAction.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallEscalationChain:getOncallEscalationChain": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallEscalationChain.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallEscalationChain.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallOutgoingWebhook:getOncallOutgoingWebhook": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallOutgoingWebhook.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallOutgoingWebhook.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallSchedule:getOncallSchedule": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallSchedule.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallSchedule.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "type",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallTeam:getOncallTeam": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallTeam.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallTeam.\n",
                "properties": {
                    "avatarUrl": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "avatarUrl",
                    "email",
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallUser:getOncallUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallUser.\n",
                "properties": {
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "role": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "role",
                    "username",
                    "id"
                ]
            }
        },
        "grafana:index/getOncallUserGroup:getOncallUserGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getOncallUserGroup.\n",
                "properties": {
                    "slackHandle": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slackHandle"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOncallUserGroup.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "slackHandle": {
                        "type": "string"
                    },
                    "slackId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "slackHandle",
                    "slackId",
                    "id"
                ]
            }
        },
        "grafana:index/getOrganization:getOrganization": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrganization.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getOrganization.\n",
                "properties": {
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "editors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "viewers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "admins",
                    "editors",
                    "name",
                    "viewers",
                    "id"
                ]
            }
        },
        "grafana:index/getOrganizationPreferences:getOrganizationPreferences": {
            "inputs": {
                "description": "A collection of arguments for invoking getOrganizationPreferences.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getOrganizationPreferences.\n",
                "properties": {
                    "homeDashboardId": {
                        "type": "integer",
                        "deprecationMessage": "Use `home_dashboard_uid` instead."
                    },
                    "homeDashboardUid": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "theme": {
                        "type": "string"
                    },
                    "timezone": {
                        "type": "string"
                    },
                    "weekStart": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "homeDashboardId",
                    "homeDashboardUid",
                    "theme",
                    "timezone",
                    "weekStart",
                    "id"
                ]
            }
        },
        "grafana:index/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "description": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "global": {
                        "type": "boolean"
                    },
                    "group": {
                        "type": "string"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getRolePermission:getRolePermission"
                        }
                    },
                    "uid": {
                        "type": "string"
                    },
                    "version": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "displayName",
                    "global",
                    "group",
                    "hidden",
                    "name",
                    "orgId",
                    "permissions",
                    "uid",
                    "version",
                    "id"
                ]
            }
        },
        "grafana:index/getServiceAccount:getServiceAccount": {
            "inputs": {
                "description": "A collection of arguments for invoking getServiceAccount.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getServiceAccount.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isDisabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "role": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "isDisabled",
                    "name",
                    "role",
                    "id"
                ]
            }
        },
        "grafana:index/getSlos:getSlos": {
            "outputs": {
                "description": "A collection of values returned by getSlos.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "slos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getSlosSlo:getSlosSlo"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "slos",
                    "id"
                ]
            }
        },
        "grafana:index/getSyntheticMonitoringProbe:getSyntheticMonitoringProbe": {
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticMonitoringProbe.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticMonitoringProbe.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "name": {
                        "type": "string"
                    },
                    "public": {
                        "type": "boolean"
                    },
                    "region": {
                        "type": "string"
                    },
                    "tenantId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "labels",
                    "latitude",
                    "longitude",
                    "name",
                    "public",
                    "region",
                    "tenantId"
                ]
            }
        },
        "grafana:index/getSyntheticMonitoringProbes:getSyntheticMonitoringProbes": {
            "inputs": {
                "description": "A collection of arguments for invoking getSyntheticMonitoringProbes.\n",
                "properties": {
                    "filterDeprecated": {
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSyntheticMonitoringProbes.\n",
                "properties": {
                    "filterDeprecated": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "probes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "integer"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "probes",
                    "id"
                ]
            }
        },
        "grafana:index/getTeam:getTeam": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "readTeamSync": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "members": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "preferences": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getTeamPreference:getTeamPreference"
                        }
                    },
                    "readTeamSync": {
                        "type": "boolean"
                    },
                    "teamId": {
                        "type": "integer"
                    },
                    "teamSyncs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getTeamTeamSync:getTeamTeamSync"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "members",
                    "name",
                    "preferences",
                    "teamId",
                    "teamSyncs",
                    "id"
                ]
            }
        },
        "grafana:index/getUser:getUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "login": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "isAdmin": {
                        "type": "boolean"
                    },
                    "login": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "isAdmin",
                    "name",
                    "id"
                ]
            }
        },
        "grafana:index/getUsers:getUsers": {
            "outputs": {
                "description": "A collection of values returned by getUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/grafana:index/getUsersUser:getUsersUser"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "users",
                    "id"
                ]
            }
        }
    }
}